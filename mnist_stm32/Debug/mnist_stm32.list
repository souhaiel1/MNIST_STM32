
mnist_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e9a1c  08017138  08017138  00027138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08100b54  08100b54  00120948  2**0
                  CONTENTS
  4 .ARM          00000008  08100b54  08100b54  00110b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08100b5c  08100b5c  00120948  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08100b5c  08100b5c  00110b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08100b60  08100b60  00110b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000948  20000000  08100b64  00120000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  20000948  081014ac  00120948  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001578  081014ac  00121578  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00120948  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba71  00000000  00000000  0012097c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005729  00000000  00000000  0014c3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  00151b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b88  00000000  00000000  001538f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb4a  00000000  00000000  00155478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027b07  00000000  00000000  00181fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8312  00000000  00000000  001a9ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000056aa  00000000  00000000  002a1ddb  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001a4  00000000  00000000  002a7485  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  002a762c  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000dc14  00000000  00000000  002a764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000948 	.word	0x20000948
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801711c 	.word	0x0801711c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000094c 	.word	0x2000094c
 80001ec:	0801711c 	.word	0x0801711c

080001f0 <_ai_platform_get_io_buffers_info>:
 80001f0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001f4:	2500      	movs	r5, #0
 80001f6:	46aa      	mov	sl, r5
 80001f8:	b082      	sub	sp, #8
 80001fa:	4607      	mov	r7, r0
 80001fc:	46ab      	mov	fp, r5
 80001fe:	46d0      	mov	r8, sl
 8000200:	46d1      	mov	r9, sl
 8000202:	e028      	b.n	8000256 <_ai_platform_get_io_buffers_info+0x66>
 8000204:	2000      	movs	r0, #0
 8000206:	e01c      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>
 8000208:	f850 400a 	ldr.w	r4, [r0, sl]
 800020c:	b364      	cbz	r4, 8000268 <_ai_platform_get_io_buffers_info+0x78>
 800020e:	68b8      	ldr	r0, [r7, #8]
 8000210:	6841      	ldr	r1, [r0, #4]
 8000212:	6880      	ldr	r0, [r0, #8]
 8000214:	4440      	add	r0, r8
 8000216:	eb01 0609 	add.w	r6, r1, r9
 800021a:	9000      	str	r0, [sp, #0]
 800021c:	69a1      	ldr	r1, [r4, #24]
 800021e:	6808      	ldr	r0, [r1, #0]
 8000220:	f004 fe54 	bl	8004ecc <ai_array_to_buffer_fmt>
 8000224:	6030      	str	r0, [r6, #0]
 8000226:	2101      	movs	r1, #1
 8000228:	80b1      	strh	r1, [r6, #4]
 800022a:	68e0      	ldr	r0, [r4, #12]
 800022c:	68c1      	ldr	r1, [r0, #12]
 800022e:	80f1      	strh	r1, [r6, #6]
 8000230:	6882      	ldr	r2, [r0, #8]
 8000232:	8132      	strh	r2, [r6, #8]
 8000234:	6840      	ldr	r0, [r0, #4]
 8000236:	60f0      	str	r0, [r6, #12]
 8000238:	69a1      	ldr	r1, [r4, #24]
 800023a:	688a      	ldr	r2, [r1, #8]
 800023c:	6132      	str	r2, [r6, #16]
 800023e:	9800      	ldr	r0, [sp, #0]
 8000240:	b9e0      	cbnz	r0, 800027c <_ai_platform_get_io_buffers_info+0x8c>
 8000242:	6170      	str	r0, [r6, #20]
 8000244:	1c6d      	adds	r5, r5, #1
 8000246:	f10b 0b01 	add.w	fp, fp, #1
 800024a:	f109 0918 	add.w	r9, r9, #24
 800024e:	f108 0808 	add.w	r8, r8, #8
 8000252:	f10a 0a04 	add.w	sl, sl, #4
 8000256:	2f00      	cmp	r7, #0
 8000258:	bf14      	ite	ne
 800025a:	8838      	ldrhne	r0, [r7, #0]
 800025c:	2000      	moveq	r0, #0
 800025e:	4583      	cmp	fp, r0
 8000260:	d202      	bcs.n	8000268 <_ai_platform_get_io_buffers_info+0x78>
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	2800      	cmp	r0, #0
 8000266:	d1cf      	bne.n	8000208 <_ai_platform_get_io_buffers_info+0x18>
 8000268:	b2a8      	uxth	r0, r5
 800026a:	b118      	cbz	r0, 8000274 <_ai_platform_get_io_buffers_info+0x84>
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	684a      	ldr	r2, [r1, #4]
 8000272:	6002      	str	r2, [r0, #0]
 8000274:	b2a8      	uxth	r0, r5
 8000276:	b003      	add	sp, #12
 8000278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800027c:	9900      	ldr	r1, [sp, #0]
 800027e:	2000      	movs	r0, #0
 8000280:	6008      	str	r0, [r1, #0]
 8000282:	9a00      	ldr	r2, [sp, #0]
 8000284:	6820      	ldr	r0, [r4, #0]
 8000286:	6050      	str	r0, [r2, #4]
 8000288:	2800      	cmp	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	8840      	ldrhne	r0, [r0, #2]
 800028e:	2800      	cmpne	r0, #0
 8000290:	d0b8      	beq.n	8000204 <_ai_platform_get_io_buffers_info+0x14>
 8000292:	9800      	ldr	r0, [sp, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	6001      	str	r1, [r0, #0]
 8000298:	9800      	ldr	r0, [sp, #0]
 800029a:	e7d2      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>

0800029c <_platform_network_state_setup>:
 800029c:	b430      	push	{r4, r5}
 800029e:	68d3      	ldr	r3, [r2, #12]
 80002a0:	6955      	ldr	r5, [r2, #20]
 80002a2:	68dc      	ldr	r4, [r3, #12]
 80002a4:	68eb      	ldr	r3, [r5, #12]
 80002a6:	435c      	muls	r4, r3
 80002a8:	6084      	str	r4, [r0, #8]
 80002aa:	888d      	ldrh	r5, [r1, #4]
 80002ac:	436c      	muls	r4, r5
 80002ae:	60c4      	str	r4, [r0, #12]
 80002b0:	6909      	ldr	r1, [r1, #16]
 80002b2:	68c3      	ldr	r3, [r0, #12]
 80002b4:	6041      	str	r1, [r0, #4]
 80002b6:	4419      	add	r1, r3
 80002b8:	6001      	str	r1, [r0, #0]
 80002ba:	6992      	ldr	r2, [r2, #24]
 80002bc:	6814      	ldr	r4, [r2, #0]
 80002be:	00a1      	lsls	r1, r4, #2
 80002c0:	d407      	bmi.n	80002d2 <_platform_network_state_setup+0x36>
 80002c2:	6894      	ldr	r4, [r2, #8]
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	6843      	ldr	r3, [r0, #4]
 80002c8:	1a64      	subs	r4, r4, r1
 80002ca:	1919      	adds	r1, r3, r4
 80002cc:	6091      	str	r1, [r2, #8]
 80002ce:	6840      	ldr	r0, [r0, #4]
 80002d0:	60d0      	str	r0, [r2, #12]
 80002d2:	bc30      	pop	{r4, r5}
 80002d4:	4770      	bx	lr

080002d6 <ai_platform_runtime_get_revision>:
 80002d6:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000aec <.text_18>
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	0849      	lsrs	r1, r1, #1
 80002de:	0049      	lsls	r1, r1, #1
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	2001      	movs	r0, #1
 80002e4:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000af0 <.text_19>
 80002e8:	6088      	str	r0, [r1, #8]
 80002ea:	6888      	ldr	r0, [r1, #8]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1fc      	bne.n	80002ea <ai_platform_runtime_get_revision+0x14>
 80002f0:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000af4 <.text_20>
 80002f4:	600a      	str	r2, [r1, #0]
 80002f6:	6808      	ldr	r0, [r1, #0]
 80002f8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000af8 <.text_21>
 80002fc:	4288      	cmp	r0, r1
 80002fe:	d000      	beq.n	8000302 <ai_platform_runtime_get_revision+0x2c>
 8000300:	e7fe      	b.n	8000300 <ai_platform_runtime_get_revision+0x2a>
 8000302:	a0ad      	add	r0, pc, #692	; (adr r0, 80005b8 <.text_13>)
 8000304:	4770      	bx	lr

08000306 <ai_platform_runtime_get_version>:
 8000306:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000aec <.text_18>
 800030a:	6801      	ldr	r1, [r0, #0]
 800030c:	0849      	lsrs	r1, r1, #1
 800030e:	0049      	lsls	r1, r1, #1
 8000310:	6001      	str	r1, [r0, #0]
 8000312:	2001      	movs	r0, #1
 8000314:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000af0 <.text_19>
 8000318:	6088      	str	r0, [r1, #8]
 800031a:	6888      	ldr	r0, [r1, #8]
 800031c:	2800      	cmp	r0, #0
 800031e:	d1fc      	bne.n	800031a <ai_platform_runtime_get_version+0x14>
 8000320:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000af4 <.text_20>
 8000324:	600a      	str	r2, [r1, #0]
 8000326:	6808      	ldr	r0, [r1, #0]
 8000328:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000af8 <.text_21>
 800032c:	4288      	cmp	r0, r1
 800032e:	d000      	beq.n	8000332 <ai_platform_runtime_get_version+0x2c>
 8000330:	e7fe      	b.n	8000330 <ai_platform_runtime_get_version+0x2a>
 8000332:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 8000336:	6810      	ldr	r0, [r2, #0]
 8000338:	4770      	bx	lr

0800033a <ai_platform_api_get_version>:
 800033a:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000aec <.text_18>
 800033e:	6801      	ldr	r1, [r0, #0]
 8000340:	0849      	lsrs	r1, r1, #1
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	6001      	str	r1, [r0, #0]
 8000346:	2001      	movs	r0, #1
 8000348:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000af0 <.text_19>
 800034c:	6088      	str	r0, [r1, #8]
 800034e:	6888      	ldr	r0, [r1, #8]
 8000350:	2800      	cmp	r0, #0
 8000352:	d1fc      	bne.n	800034e <ai_platform_api_get_version+0x14>
 8000354:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000af4 <.text_20>
 8000358:	600a      	str	r2, [r1, #0]
 800035a:	6808      	ldr	r0, [r1, #0]
 800035c:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000af8 <.text_21>
 8000360:	4288      	cmp	r0, r1
 8000362:	d000      	beq.n	8000366 <ai_platform_api_get_version+0x2c>
 8000364:	e7fe      	b.n	8000364 <ai_platform_api_get_version+0x2a>
 8000366:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800036a:	6810      	ldr	r0, [r2, #0]
 800036c:	4770      	bx	lr

0800036e <ai_platform_interface_api_get_version>:
 800036e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000aec <.text_18>
 8000372:	6801      	ldr	r1, [r0, #0]
 8000374:	0849      	lsrs	r1, r1, #1
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	6001      	str	r1, [r0, #0]
 800037a:	2001      	movs	r0, #1
 800037c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000af0 <.text_19>
 8000380:	6088      	str	r0, [r1, #8]
 8000382:	6888      	ldr	r0, [r1, #8]
 8000384:	2800      	cmp	r0, #0
 8000386:	d1fc      	bne.n	8000382 <ai_platform_interface_api_get_version+0x14>
 8000388:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000af4 <.text_20>
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	6808      	ldr	r0, [r1, #0]
 8000390:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000af8 <.text_21>
 8000394:	4288      	cmp	r0, r1
 8000396:	d000      	beq.n	800039a <ai_platform_interface_api_get_version+0x2c>
 8000398:	e7fe      	b.n	8000398 <ai_platform_interface_api_get_version+0x2a>
 800039a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800039e:	6810      	ldr	r0, [r2, #0]
 80003a0:	4770      	bx	lr

080003a2 <ai_platform_context_acquire>:
 80003a2:	b120      	cbz	r0, 80003ae <ai_platform_context_acquire+0xc>
 80003a4:	6801      	ldr	r1, [r0, #0]
 80003a6:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000afc <.text_22>
 80003aa:	4291      	cmp	r1, r2
 80003ac:	d000      	beq.n	80003b0 <ai_platform_context_acquire+0xe>
 80003ae:	2000      	movs	r0, #0
 80003b0:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000aec <.text_18>
 80003b4:	680a      	ldr	r2, [r1, #0]
 80003b6:	0852      	lsrs	r2, r2, #1
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	600a      	str	r2, [r1, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000af0 <.text_19>
 80003c2:	6091      	str	r1, [r2, #8]
 80003c4:	6891      	ldr	r1, [r2, #8]
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d1fc      	bne.n	80003c4 <ai_platform_context_acquire+0x22>
 80003ca:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000af4 <.text_20>
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000af8 <.text_21>
 80003d6:	4291      	cmp	r1, r2
 80003d8:	d000      	beq.n	80003dc <ai_platform_context_acquire+0x3a>
 80003da:	e7fe      	b.n	80003da <ai_platform_context_acquire+0x38>
 80003dc:	4770      	bx	lr

080003de <ai_platform_context_release>:
 80003de:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000afc <.text_22>
 80003e2:	6001      	str	r1, [r0, #0]
 80003e4:	4770      	bx	lr

080003e6 <ai_platform_network_get_error>:
 80003e6:	b120      	cbz	r0, 80003f2 <ai_platform_network_get_error+0xc>
 80003e8:	6801      	ldr	r1, [r0, #0]
 80003ea:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000afc <.text_22>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d000      	beq.n	80003f4 <ai_platform_network_get_error+0xe>
 80003f2:	2000      	movs	r0, #0
 80003f4:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000aec <.text_18>
 80003f8:	680a      	ldr	r2, [r1, #0]
 80003fa:	0852      	lsrs	r2, r2, #1
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	600a      	str	r2, [r1, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000af0 <.text_19>
 8000406:	6091      	str	r1, [r2, #8]
 8000408:	6891      	ldr	r1, [r2, #8]
 800040a:	2900      	cmp	r1, #0
 800040c:	d1fc      	bne.n	8000408 <ai_platform_network_get_error+0x22>
 800040e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000af4 <.text_20>
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	6811      	ldr	r1, [r2, #0]
 8000416:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000af8 <.text_21>
 800041a:	4291      	cmp	r1, r2
 800041c:	d000      	beq.n	8000420 <ai_platform_network_get_error+0x3a>
 800041e:	e7fe      	b.n	800041e <ai_platform_network_get_error+0x38>
 8000420:	2800      	cmp	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	3010      	addne	r0, #16
 8000426:	f000 bb83 	bne.w	8000b30 <core_get_error>
 800042a:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800042e:	6800      	ldr	r0, [r0, #0]
 8000430:	4770      	bx	lr

08000432 <ai_platform_network_set_error>:
 8000432:	2800      	cmp	r0, #0
 8000434:	bf1c      	itt	ne
 8000436:	3010      	addne	r0, #16
 8000438:	f000 bb7f 	bne.w	8000b3a <core_set_error>
 800043c:	4770      	bx	lr

0800043e <ai_platform_api_get_network_report>:
 800043e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000442:	ea5f 0900 	movs.w	r9, r0
 8000446:	b081      	sub	sp, #4
 8000448:	460c      	mov	r4, r1
 800044a:	d005      	beq.n	8000458 <ai_platform_api_get_network_report+0x1a>
 800044c:	f8d9 0000 	ldr.w	r0, [r9]
 8000450:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000afc <.text_22>
 8000454:	4288      	cmp	r0, r1
 8000456:	d001      	beq.n	800045c <ai_platform_api_get_network_report+0x1e>
 8000458:	f04f 0900 	mov.w	r9, #0
 800045c:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000aec <.text_18>
 8000460:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000af0 <.text_19>
 8000464:	6828      	ldr	r0, [r5, #0]
 8000466:	0840      	lsrs	r0, r0, #1
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	6028      	str	r0, [r5, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	60b1      	str	r1, [r6, #8]
 8000470:	68b0      	ldr	r0, [r6, #8]
 8000472:	2800      	cmp	r0, #0
 8000474:	d1fc      	bne.n	8000470 <ai_platform_api_get_network_report+0x32>
 8000476:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000af4 <.text_20>
 800047a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000af8 <.text_21>
 800047e:	6037      	str	r7, [r6, #0]
 8000480:	6830      	ldr	r0, [r6, #0]
 8000482:	4540      	cmp	r0, r8
 8000484:	d000      	beq.n	8000488 <ai_platform_api_get_network_report+0x4a>
 8000486:	e7fe      	b.n	8000486 <ai_platform_api_get_network_report+0x48>
 8000488:	f1b9 0f00 	cmp.w	r9, #0
 800048c:	bf18      	it	ne
 800048e:	2c00      	cmpne	r4, #0
 8000490:	d034      	beq.n	80004fc <ai_platform_api_get_network_report+0xbe>
 8000492:	2000      	movs	r0, #0
 8000494:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000496:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800049a:	b152      	cbz	r2, 80004b2 <ai_platform_api_get_network_report+0x74>
 800049c:	e000      	b.n	80004a0 <ai_platform_api_get_network_report+0x62>
 800049e:	4602      	mov	r2, r0
 80004a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80004a2:	1c49      	adds	r1, r1, #1
 80004a4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80004a6:	68d0      	ldr	r0, [r2, #12]
 80004a8:	4282      	cmp	r2, r0
 80004aa:	bf18      	it	ne
 80004ac:	2800      	cmpne	r0, #0
 80004ae:	d1f6      	bne.n	800049e <ai_platform_api_get_network_report+0x60>
 80004b0:	b911      	cbnz	r1, 80004b8 <ai_platform_api_get_network_report+0x7a>
 80004b2:	2218      	movs	r2, #24
 80004b4:	2111      	movs	r1, #17
 80004b6:	e01d      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004b8:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004bc:	b108      	cbz	r0, 80004c2 <ai_platform_api_get_network_report+0x84>
 80004be:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	f7ff fe93 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ca:	8620      	strh	r0, [r4, #48]	; 0x30
 80004cc:	b910      	cbnz	r0, 80004d4 <ai_platform_api_get_network_report+0x96>
 80004ce:	2218      	movs	r2, #24
 80004d0:	2112      	movs	r1, #18
 80004d2:	e00f      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004d4:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004d8:	2802      	cmp	r0, #2
 80004da:	bfa6      	itte	ge
 80004dc:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004e0:	300c      	addge	r0, #12
 80004e2:	2000      	movlt	r0, #0
 80004e4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004e8:	f7ff fe82 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ec:	8660      	strh	r0, [r4, #50]	; 0x32
 80004ee:	b948      	cbnz	r0, 8000504 <ai_platform_api_get_network_report+0xc6>
 80004f0:	2218      	movs	r2, #24
 80004f2:	2113      	movs	r1, #19
 80004f4:	f109 0010 	add.w	r0, r9, #16
 80004f8:	f000 fb1f 	bl	8000b3a <core_set_error>
 80004fc:	2000      	movs	r0, #0
 80004fe:	b001      	add	sp, #4
 8000500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000504:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000508:	6720      	str	r0, [r4, #112]	; 0x70
 800050a:	f109 0230 	add.w	r2, r9, #48	; 0x30
 800050e:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 8000512:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000516:	f109 0918 	add.w	r9, r9, #24
 800051a:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 800051e:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 8000522:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8000526:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 800052a:	6828      	ldr	r0, [r5, #0]
 800052c:	0840      	lsrs	r0, r0, #1
 800052e:	0040      	lsls	r0, r0, #1
 8000530:	6028      	str	r0, [r5, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	60b3      	str	r3, [r6, #8]
 8000536:	68b0      	ldr	r0, [r6, #8]
 8000538:	2800      	cmp	r0, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_api_get_network_report+0xf8>
 800053c:	6037      	str	r7, [r6, #0]
 800053e:	6831      	ldr	r1, [r6, #0]
 8000540:	4541      	cmp	r1, r8
 8000542:	d000      	beq.n	8000546 <ai_platform_api_get_network_report+0x108>
 8000544:	e7fe      	b.n	8000544 <ai_platform_api_get_network_report+0x106>
 8000546:	a01c      	add	r0, pc, #112	; (adr r0, 80005b8 <.text_13>)
 8000548:	6120      	str	r0, [r4, #16]
 800054a:	6829      	ldr	r1, [r5, #0]
 800054c:	0849      	lsrs	r1, r1, #1
 800054e:	0049      	lsls	r1, r1, #1
 8000550:	6029      	str	r1, [r5, #0]
 8000552:	60b3      	str	r3, [r6, #8]
 8000554:	68b0      	ldr	r0, [r6, #8]
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fc      	bne.n	8000554 <ai_platform_api_get_network_report+0x116>
 800055a:	6037      	str	r7, [r6, #0]
 800055c:	6831      	ldr	r1, [r6, #0]
 800055e:	4541      	cmp	r1, r8
 8000560:	d000      	beq.n	8000564 <ai_platform_api_get_network_report+0x126>
 8000562:	e7fe      	b.n	8000562 <ai_platform_api_get_network_report+0x124>
 8000564:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	6162      	str	r2, [r4, #20]
 800056c:	6829      	ldr	r1, [r5, #0]
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	6029      	str	r1, [r5, #0]
 8000574:	60b3      	str	r3, [r6, #8]
 8000576:	68b0      	ldr	r0, [r6, #8]
 8000578:	2800      	cmp	r0, #0
 800057a:	d1fc      	bne.n	8000576 <ai_platform_api_get_network_report+0x138>
 800057c:	6037      	str	r7, [r6, #0]
 800057e:	6831      	ldr	r1, [r6, #0]
 8000580:	4541      	cmp	r1, r8
 8000582:	d000      	beq.n	8000586 <ai_platform_api_get_network_report+0x148>
 8000584:	e7fe      	b.n	8000584 <ai_platform_api_get_network_report+0x146>
 8000586:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800058a:	6802      	ldr	r2, [r0, #0]
 800058c:	6262      	str	r2, [r4, #36]	; 0x24
 800058e:	6829      	ldr	r1, [r5, #0]
 8000590:	0849      	lsrs	r1, r1, #1
 8000592:	0049      	lsls	r1, r1, #1
 8000594:	6029      	str	r1, [r5, #0]
 8000596:	60b3      	str	r3, [r6, #8]
 8000598:	68b0      	ldr	r0, [r6, #8]
 800059a:	2800      	cmp	r0, #0
 800059c:	d1fc      	bne.n	8000598 <ai_platform_api_get_network_report+0x15a>
 800059e:	6037      	str	r7, [r6, #0]
 80005a0:	6831      	ldr	r1, [r6, #0]
 80005a2:	4541      	cmp	r1, r8
 80005a4:	d000      	beq.n	80005a8 <ai_platform_api_get_network_report+0x16a>
 80005a6:	e7fe      	b.n	80005a6 <ai_platform_api_get_network_report+0x168>
 80005a8:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80005b0:	2001      	movs	r0, #1
 80005b2:	b001      	add	sp, #4
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005b8 <.text_13>:
 80005b8:	00000000 	.word	0x00000000

080005bc <ai_platform_network_create>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	9d04      	ldr	r5, [sp, #16]
 80005c0:	4604      	mov	r4, r0
 80005c2:	9805      	ldr	r0, [sp, #20]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	042d      	lsls	r5, r5, #16
 80005c8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005cc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005d0:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005d4:	6806      	ldr	r6, [r0, #0]
 80005d6:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000aec <.text_18>
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	0849      	lsrs	r1, r1, #1
 80005de:	0049      	lsls	r1, r1, #1
 80005e0:	6001      	str	r1, [r0, #0]
 80005e2:	2001      	movs	r0, #1
 80005e4:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000af0 <.text_19>
 80005e8:	6088      	str	r0, [r1, #8]
 80005ea:	6888      	ldr	r0, [r1, #8]
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d1fc      	bne.n	80005ea <ai_platform_network_create+0x2e>
 80005f0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000af4 <.text_20>
 80005f4:	600b      	str	r3, [r1, #0]
 80005f6:	6808      	ldr	r0, [r1, #0]
 80005f8:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000af8 <.text_21>
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d000      	beq.n	8000602 <ai_platform_network_create+0x46>
 8000600:	e7fe      	b.n	8000600 <ai_platform_network_create+0x44>
 8000602:	b91c      	cbnz	r4, 800060c <ai_platform_network_create+0x50>
 8000604:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 8000608:	6800      	ldr	r0, [r0, #0]
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000afc <.text_22>
 8000610:	6011      	str	r1, [r2, #0]
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	f000 fa8a 	bl	8000b2c <core_init>
 8000618:	b910      	cbnz	r0, 8000620 <ai_platform_network_create+0x64>
 800061a:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 800061e:	e00d      	b.n	800063c <ai_platform_network_create+0x80>
 8000620:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000b00 <.text_23>
 8000624:	428d      	cmp	r5, r1
 8000626:	bf28      	it	cs
 8000628:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 800062c:	d206      	bcs.n	800063c <ai_platform_network_create+0x80>
 800062e:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 8000632:	f000 fa97 	bl	8000b64 <ai_check_custom_types>
 8000636:	b920      	cbnz	r0, 8000642 <ai_platform_network_create+0x86>
 8000638:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 800063c:	6806      	ldr	r6, [r0, #0]
 800063e:	2100      	movs	r1, #0
 8000640:	6021      	str	r1, [r4, #0]
 8000642:	4630      	mov	r0, r6
 8000644:	bd70      	pop	{r4, r5, r6, pc}

08000646 <ai_platform_network_destroy>:
 8000646:	b130      	cbz	r0, 8000656 <ai_platform_network_destroy+0x10>
 8000648:	6801      	ldr	r1, [r0, #0]
 800064a:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000afc <.text_22>
 800064e:	4291      	cmp	r1, r2
 8000650:	bf08      	it	eq
 8000652:	4602      	moveq	r2, r0
 8000654:	d000      	beq.n	8000658 <ai_platform_network_destroy+0x12>
 8000656:	2200      	movs	r2, #0
 8000658:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000aec <.text_18>
 800065c:	680b      	ldr	r3, [r1, #0]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000af0 <.text_19>
 800066a:	6099      	str	r1, [r3, #8]
 800066c:	6899      	ldr	r1, [r3, #8]
 800066e:	2900      	cmp	r1, #0
 8000670:	d1fc      	bne.n	800066c <ai_platform_network_destroy+0x26>
 8000672:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000af4 <.text_20>
 8000676:	f8c3 c000 	str.w	ip, [r3]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000af8 <.text_21>
 8000680:	4299      	cmp	r1, r3
 8000682:	d000      	beq.n	8000686 <ai_platform_network_destroy+0x40>
 8000684:	e7fe      	b.n	8000684 <ai_platform_network_destroy+0x3e>
 8000686:	b102      	cbz	r2, 800068a <ai_platform_network_destroy+0x44>
 8000688:	2000      	movs	r0, #0
 800068a:	4770      	bx	lr

0800068c <ai_platform_network_init>:
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	b081      	sub	sp, #4
 8000692:	460a      	mov	r2, r1
 8000694:	b120      	cbz	r0, 80006a0 <ai_platform_network_init+0x14>
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000afc <.text_22>
 800069c:	4299      	cmp	r1, r3
 800069e:	d000      	beq.n	80006a2 <ai_platform_network_init+0x16>
 80006a0:	2000      	movs	r0, #0
 80006a2:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000aec <.text_18>
 80006a6:	680b      	ldr	r3, [r1, #0]
 80006a8:	085b      	lsrs	r3, r3, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	600b      	str	r3, [r1, #0]
 80006ae:	2101      	movs	r1, #1
 80006b0:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000af0 <.text_19>
 80006b4:	6099      	str	r1, [r3, #8]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d1fc      	bne.n	80006b6 <ai_platform_network_init+0x2a>
 80006bc:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000af4 <.text_20>
 80006c0:	601c      	str	r4, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000af8 <.text_21>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d000      	beq.n	80006ce <ai_platform_network_init+0x42>
 80006cc:	e7fe      	b.n	80006cc <ai_platform_network_init+0x40>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d035      	beq.n	800073e <ai_platform_network_init+0xb2>
 80006d2:	b90a      	cbnz	r2, 80006d8 <ai_platform_network_init+0x4c>
 80006d4:	2211      	movs	r2, #17
 80006d6:	e012      	b.n	80006fe <ai_platform_network_init+0x72>
 80006d8:	6913      	ldr	r3, [r2, #16]
 80006da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006dc:	b939      	cbnz	r1, 80006ee <ai_platform_network_init+0x62>
 80006de:	8c11      	ldrh	r1, [r2, #32]
 80006e0:	8bd5      	ldrh	r5, [r2, #30]
 80006e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006e4:	4369      	muls	r1, r5
 80006e6:	4361      	muls	r1, r4
 80006e8:	bf18      	it	ne
 80006ea:	2213      	movne	r2, #19
 80006ec:	d107      	bne.n	80006fe <ai_platform_network_init+0x72>
 80006ee:	b973      	cbnz	r3, 800070e <ai_platform_network_init+0x82>
 80006f0:	8911      	ldrh	r1, [r2, #8]
 80006f2:	88d4      	ldrh	r4, [r2, #6]
 80006f4:	68d3      	ldr	r3, [r2, #12]
 80006f6:	4361      	muls	r1, r4
 80006f8:	4359      	muls	r1, r3
 80006fa:	d008      	beq.n	800070e <ai_platform_network_init+0x82>
 80006fc:	2212      	movs	r2, #18
 80006fe:	2110      	movs	r1, #16
 8000700:	3010      	adds	r0, #16
 8000702:	f000 fa1a 	bl	8000b3a <core_set_error>
 8000706:	2000      	movs	r0, #0
 8000708:	b001      	add	sp, #4
 800070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800070e:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000712:	f100 0118 	add.w	r1, r0, #24
 8000716:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800071a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 800071e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000722:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000726:	2103      	movs	r1, #3
 8000728:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800072a:	60c1      	str	r1, [r0, #12]
 800072c:	b13a      	cbz	r2, 800073e <ai_platform_network_init+0xb2>
 800072e:	e000      	b.n	8000732 <ai_platform_network_init+0xa6>
 8000730:	460a      	mov	r2, r1
 8000732:	68d1      	ldr	r1, [r2, #12]
 8000734:	6090      	str	r0, [r2, #8]
 8000736:	428a      	cmp	r2, r1
 8000738:	bf18      	it	ne
 800073a:	2900      	cmpne	r1, #0
 800073c:	d1f8      	bne.n	8000730 <ai_platform_network_init+0xa4>
 800073e:	b001      	add	sp, #4
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000744 <ai_platform_network_process>:
 8000744:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	460a      	mov	r2, r1
 800074c:	b120      	cbz	r0, 8000758 <ai_platform_network_process+0x14>
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000afc <.text_22>
 8000754:	4299      	cmp	r1, r3
 8000756:	d000      	beq.n	800075a <ai_platform_network_process+0x16>
 8000758:	2000      	movs	r0, #0
 800075a:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000aec <.text_18>
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	085b      	lsrs	r3, r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
 8000766:	2101      	movs	r1, #1
 8000768:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000af0 <.text_19>
 800076c:	6099      	str	r1, [r3, #8]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	2900      	cmp	r1, #0
 8000772:	d1fc      	bne.n	800076e <ai_platform_network_process+0x2a>
 8000774:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000af4 <.text_20>
 8000778:	601c      	str	r4, [r3, #0]
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000af8 <.text_21>
 8000780:	4299      	cmp	r1, r3
 8000782:	d000      	beq.n	8000786 <ai_platform_network_process+0x42>
 8000784:	e7fe      	b.n	8000784 <ai_platform_network_process+0x40>
 8000786:	2800      	cmp	r0, #0
 8000788:	f000 8113 	beq.w	80009b2 <ai_platform_network_process+0x26e>
 800078c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000790:	b101      	cbz	r1, 8000794 <ai_platform_network_process+0x50>
 8000792:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000794:	2300      	movs	r3, #0
 8000796:	82c3      	strh	r3, [r0, #22]
 8000798:	2400      	movs	r4, #0
 800079a:	7b03      	ldrb	r3, [r0, #12]
 800079c:	8284      	strh	r4, [r0, #20]
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d002      	beq.n	80007ac <ai_platform_network_process+0x68>
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2111      	movs	r1, #17
 80007aa:	e0ff      	b.n	80009ac <ai_platform_network_process+0x268>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf1e      	ittt	ne
 80007b0:	2900      	cmpne	r1, #0
 80007b2:	880b      	ldrhne	r3, [r1, #0]
 80007b4:	2b00      	cmpne	r3, #0
 80007b6:	f000 80f7 	beq.w	80009a8 <ai_platform_network_process+0x264>
 80007ba:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	46a0      	mov	r8, r4
 80007c2:	46a1      	mov	r9, r4
 80007c4:	2600      	movs	r6, #0
 80007c6:	1d17      	adds	r7, r2, #4
 80007c8:	4682      	mov	sl, r0
 80007ca:	e014      	b.n	80007f6 <ai_platform_network_process+0xb2>
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	2800      	cmp	r0, #0
 80007d0:	f000 80e9 	beq.w	80009a6 <ai_platform_network_process+0x262>
 80007d4:	8838      	ldrh	r0, [r7, #0]
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d052      	beq.n	8000880 <ai_platform_network_process+0x13c>
 80007da:	4558      	cmp	r0, fp
 80007dc:	bf28      	it	cs
 80007de:	4683      	movcs	fp, r0
 80007e0:	4622      	mov	r2, r4
 80007e2:	1f39      	subs	r1, r7, #4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff fd59 	bl	800029c <_platform_network_state_setup>
 80007ea:	f108 0801 	add.w	r8, r8, #1
 80007ee:	3718      	adds	r7, #24
 80007f0:	3610      	adds	r6, #16
 80007f2:	f109 0904 	add.w	r9, r9, #4
 80007f6:	9800      	ldr	r0, [sp, #0]
 80007f8:	8801      	ldrh	r1, [r0, #0]
 80007fa:	4588      	cmp	r8, r1
 80007fc:	d24a      	bcs.n	8000894 <ai_platform_network_process+0x150>
 80007fe:	6840      	ldr	r0, [r0, #4]
 8000800:	2800      	cmp	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000808:	2c00      	cmpne	r4, #0
 800080a:	d043      	beq.n	8000894 <ai_platform_network_process+0x150>
 800080c:	9800      	ldr	r0, [sp, #0]
 800080e:	6881      	ldr	r1, [r0, #8]
 8000810:	680a      	ldr	r2, [r1, #0]
 8000812:	1995      	adds	r5, r2, r6
 8000814:	f000 80c7 	beq.w	80009a6 <ai_platform_network_process+0x262>
 8000818:	69a0      	ldr	r0, [r4, #24]
 800081a:	6841      	ldr	r1, [r0, #4]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	88ba      	ldrh	r2, [r7, #4]
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	fb03 fc02 	mul.w	ip, r3, r2
 8000826:	fb00 fc0c 	mul.w	ip, r0, ip
 800082a:	4561      	cmp	r1, ip
 800082c:	d32d      	bcc.n	800088a <ai_platform_network_process+0x146>
 800082e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000832:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000836:	459e      	cmp	lr, r3
 8000838:	bf01      	itttt	eq
 800083a:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800083e:	4293      	cmpeq	r3, r2
 8000840:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000844:	4282      	cmpeq	r2, r0
 8000846:	d120      	bne.n	800088a <ai_platform_network_process+0x146>
 8000848:	69a0      	ldr	r0, [r4, #24]
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	f004 fc16 	bl	800507c <ai_array_get_byte_size>
 8000850:	68e1      	ldr	r1, [r4, #12]
 8000852:	68ca      	ldr	r2, [r1, #12]
 8000854:	6961      	ldr	r1, [r4, #20]
 8000856:	68cb      	ldr	r3, [r1, #12]
 8000858:	435a      	muls	r2, r3
 800085a:	4290      	cmp	r0, r2
 800085c:	d315      	bcc.n	800088a <ai_platform_network_process+0x146>
 800085e:	69a0      	ldr	r0, [r4, #24]
 8000860:	6800      	ldr	r0, [r0, #0]
 8000862:	f004 fb33 	bl	8004ecc <ai_array_to_buffer_fmt>
 8000866:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800086a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800086e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000872:	4288      	cmp	r0, r1
 8000874:	d0aa      	beq.n	80007cc <ai_platform_network_process+0x88>
 8000876:	2219      	movs	r2, #25
 8000878:	2112      	movs	r1, #18
 800087a:	f10a 0010 	add.w	r0, sl, #16
 800087e:	e096      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000880:	2221      	movs	r2, #33	; 0x21
 8000882:	2112      	movs	r1, #18
 8000884:	f10a 0010 	add.w	r0, sl, #16
 8000888:	e091      	b.n	80009ae <ai_platform_network_process+0x26a>
 800088a:	2218      	movs	r2, #24
 800088c:	2112      	movs	r1, #18
 800088e:	f10a 0010 	add.w	r0, sl, #16
 8000892:	e08c      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000894:	9902      	ldr	r1, [sp, #8]
 8000896:	2900      	cmp	r1, #0
 8000898:	4655      	mov	r5, sl
 800089a:	d075      	beq.n	8000988 <ai_platform_network_process+0x244>
 800089c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80008a0:	2802      	cmp	r0, #2
 80008a2:	db7b      	blt.n	800099c <ai_platform_network_process+0x258>
 80008a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80008a6:	300c      	adds	r0, #12
 80008a8:	bf1c      	itt	ne
 80008aa:	8802      	ldrhne	r2, [r0, #0]
 80008ac:	2a00      	cmpne	r2, #0
 80008ae:	d075      	beq.n	800099c <ai_platform_network_process+0x258>
 80008b0:	f04f 0800 	mov.w	r8, #0
 80008b4:	46c1      	mov	r9, r8
 80008b6:	2600      	movs	r6, #0
 80008b8:	1d0f      	adds	r7, r1, #4
 80008ba:	9000      	str	r0, [sp, #0]
 80008bc:	e013      	b.n	80008e6 <ai_platform_network_process+0x1a2>
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d059      	beq.n	8000978 <ai_platform_network_process+0x234>
 80008c4:	8838      	ldrh	r0, [r7, #0]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d051      	beq.n	800096e <ai_platform_network_process+0x22a>
 80008ca:	4558      	cmp	r0, fp
 80008cc:	bf28      	it	cs
 80008ce:	4683      	movcs	fp, r0
 80008d0:	4622      	mov	r2, r4
 80008d2:	1f39      	subs	r1, r7, #4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f7ff fce1 	bl	800029c <_platform_network_state_setup>
 80008da:	f108 0801 	add.w	r8, r8, #1
 80008de:	3718      	adds	r7, #24
 80008e0:	3610      	adds	r6, #16
 80008e2:	f109 0904 	add.w	r9, r9, #4
 80008e6:	9800      	ldr	r0, [sp, #0]
 80008e8:	8801      	ldrh	r1, [r0, #0]
 80008ea:	4588      	cmp	r8, r1
 80008ec:	d249      	bcs.n	8000982 <ai_platform_network_process+0x23e>
 80008ee:	6840      	ldr	r0, [r0, #4]
 80008f0:	2800      	cmp	r0, #0
 80008f2:	bf1c      	itt	ne
 80008f4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008f8:	2c00      	cmpne	r4, #0
 80008fa:	d042      	beq.n	8000982 <ai_platform_network_process+0x23e>
 80008fc:	9800      	ldr	r0, [sp, #0]
 80008fe:	6881      	ldr	r1, [r0, #8]
 8000900:	680a      	ldr	r2, [r1, #0]
 8000902:	1995      	adds	r5, r2, r6
 8000904:	d038      	beq.n	8000978 <ai_platform_network_process+0x234>
 8000906:	69a0      	ldr	r0, [r4, #24]
 8000908:	6841      	ldr	r1, [r0, #4]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	fb03 fc02 	mul.w	ip, r3, r2
 8000914:	fb00 fc0c 	mul.w	ip, r0, ip
 8000918:	4561      	cmp	r1, ip
 800091a:	d33e      	bcc.n	800099a <ai_platform_network_process+0x256>
 800091c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000920:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000924:	459e      	cmp	lr, r3
 8000926:	bf01      	itttt	eq
 8000928:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800092c:	4293      	cmpeq	r3, r2
 800092e:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000932:	4282      	cmpeq	r2, r0
 8000934:	d131      	bne.n	800099a <ai_platform_network_process+0x256>
 8000936:	69a0      	ldr	r0, [r4, #24]
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f004 fb9f 	bl	800507c <ai_array_get_byte_size>
 800093e:	68e1      	ldr	r1, [r4, #12]
 8000940:	68ca      	ldr	r2, [r1, #12]
 8000942:	6961      	ldr	r1, [r4, #20]
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	435a      	muls	r2, r3
 8000948:	4290      	cmp	r0, r2
 800094a:	d326      	bcc.n	800099a <ai_platform_network_process+0x256>
 800094c:	69a0      	ldr	r0, [r4, #24]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	f004 fabc 	bl	8004ecc <ai_array_to_buffer_fmt>
 8000954:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000958:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800095c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000960:	4288      	cmp	r0, r1
 8000962:	d0ac      	beq.n	80008be <ai_platform_network_process+0x17a>
 8000964:	2219      	movs	r2, #25
 8000966:	2113      	movs	r1, #19
 8000968:	f10a 0010 	add.w	r0, sl, #16
 800096c:	e01f      	b.n	80009ae <ai_platform_network_process+0x26a>
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	2113      	movs	r1, #19
 8000972:	f10a 0010 	add.w	r0, sl, #16
 8000976:	e01a      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000978:	2217      	movs	r2, #23
 800097a:	2113      	movs	r1, #19
 800097c:	f10a 0010 	add.w	r0, sl, #16
 8000980:	e015      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000982:	4655      	mov	r5, sl
 8000984:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000988:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800098c:	2800      	cmp	r0, #0
 800098e:	bf14      	ite	ne
 8000990:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000994:	f04f 0a00 	moveq.w	sl, #0
 8000998:	e00f      	b.n	80009ba <ai_platform_network_process+0x276>
 800099a:	4655      	mov	r5, sl
 800099c:	2218      	movs	r2, #24
 800099e:	2113      	movs	r1, #19
 80009a0:	f105 0010 	add.w	r0, r5, #16
 80009a4:	e003      	b.n	80009ae <ai_platform_network_process+0x26a>
 80009a6:	4650      	mov	r0, sl
 80009a8:	2217      	movs	r2, #23
 80009aa:	2112      	movs	r1, #18
 80009ac:	3010      	adds	r0, #16
 80009ae:	f000 f8c4 	bl	8000b3a <core_set_error>
 80009b2:	2000      	movs	r0, #0
 80009b4:	b003      	add	sp, #12
 80009b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ba:	2802      	cmp	r0, #2
 80009bc:	bfa6      	itte	ge
 80009be:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 80009c0:	f100 0b0c 	addge.w	fp, r0, #12
 80009c4:	f04f 0b00 	movlt.w	fp, #0
 80009c8:	8ae8      	ldrh	r0, [r5, #22]
 80009ca:	8aa9      	ldrh	r1, [r5, #20]
 80009cc:	ebb0 0f01 	cmp.w	r0, r1
 80009d0:	f080 8087 	bcs.w	8000ae2 <ai_platform_network_process+0x39e>
 80009d4:	f04f 0800 	mov.w	r8, #0
 80009d8:	4654      	mov	r4, sl
 80009da:	46c1      	mov	r9, r8
 80009dc:	46c2      	mov	sl, r8
 80009de:	e018      	b.n	8000a12 <ai_platform_network_process+0x2ce>
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	68c3      	ldr	r3, [r0, #12]
 80009e4:	6871      	ldr	r1, [r6, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4411      	add	r1, r2
 80009ea:	6081      	str	r1, [r0, #8]
 80009ec:	6872      	ldr	r2, [r6, #4]
 80009ee:	60c2      	str	r2, [r0, #12]
 80009f0:	6870      	ldr	r0, [r6, #4]
 80009f2:	68b1      	ldr	r1, [r6, #8]
 80009f4:	4408      	add	r0, r1
 80009f6:	6070      	str	r0, [r6, #4]
 80009f8:	6831      	ldr	r1, [r6, #0]
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d302      	bcc.n	8000a04 <ai_platform_network_process+0x2c0>
 80009fe:	68f0      	ldr	r0, [r6, #12]
 8000a00:	4240      	negs	r0, r0
 8000a02:	4408      	add	r0, r1
 8000a04:	6070      	str	r0, [r6, #4]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	f109 0910 	add.w	r9, r9, #16
 8000a0e:	f108 0804 	add.w	r8, r8, #4
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	bf14      	ite	ne
 8000a16:	8820      	ldrhne	r0, [r4, #0]
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	4582      	cmp	sl, r0
 8000a1c:	d212      	bcs.n	8000a44 <ai_platform_network_process+0x300>
 8000a1e:	6860      	ldr	r0, [r4, #4]
 8000a20:	b180      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a22:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a26:	b168      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a28:	68a1      	ldr	r1, [r4, #8]
 8000a2a:	6980      	ldr	r0, [r0, #24]
 8000a2c:	680a      	ldr	r2, [r1, #0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
 8000a30:	eb02 0609 	add.w	r6, r2, r9
 8000a34:	008a      	lsls	r2, r1, #2
 8000a36:	d5d3      	bpl.n	80009e0 <ai_platform_network_process+0x29c>
 8000a38:	68b2      	ldr	r2, [r6, #8]
 8000a3a:	6871      	ldr	r1, [r6, #4]
 8000a3c:	6880      	ldr	r0, [r0, #8]
 8000a3e:	f00e fe6a 	bl	800f716 <__aeabi_memcpy>
 8000a42:	e7d5      	b.n	80009f0 <ai_platform_network_process+0x2ac>
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f936 	bl	8000cb8 <ai_layers_forward_all>
 8000a4c:	f04f 0800 	mov.w	r8, #0
 8000a50:	465c      	mov	r4, fp
 8000a52:	46c1      	mov	r9, r8
 8000a54:	46c3      	mov	fp, r8
 8000a56:	e017      	b.n	8000a88 <ai_platform_network_process+0x344>
 8000a58:	6871      	ldr	r1, [r6, #4]
 8000a5a:	68b2      	ldr	r2, [r6, #8]
 8000a5c:	4411      	add	r1, r2
 8000a5e:	6071      	str	r1, [r6, #4]
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	4291      	cmp	r1, r2
 8000a64:	d302      	bcc.n	8000a6c <ai_platform_network_process+0x328>
 8000a66:	68f1      	ldr	r1, [r6, #12]
 8000a68:	4249      	negs	r1, r1
 8000a6a:	4411      	add	r1, r2
 8000a6c:	6071      	str	r1, [r6, #4]
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	68c3      	ldr	r3, [r0, #12]
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4411      	add	r1, r2
 8000a76:	6081      	str	r1, [r0, #8]
 8000a78:	6872      	ldr	r2, [r6, #4]
 8000a7a:	60c2      	str	r2, [r0, #12]
 8000a7c:	f10b 0b01 	add.w	fp, fp, #1
 8000a80:	f109 0910 	add.w	r9, r9, #16
 8000a84:	f108 0804 	add.w	r8, r8, #4
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	8820      	ldrhne	r0, [r4, #0]
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4583      	cmp	fp, r0
 8000a92:	d21d      	bcs.n	8000ad0 <ai_platform_network_process+0x38c>
 8000a94:	6860      	ldr	r0, [r4, #4]
 8000a96:	b1d8      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a98:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a9c:	b1c0      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a9e:	68a1      	ldr	r1, [r4, #8]
 8000aa0:	6980      	ldr	r0, [r0, #24]
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	6801      	ldr	r1, [r0, #0]
 8000aa6:	eb02 0609 	add.w	r6, r2, r9
 8000aaa:	008a      	lsls	r2, r1, #2
 8000aac:	d5d4      	bpl.n	8000a58 <ai_platform_network_process+0x314>
 8000aae:	6881      	ldr	r1, [r0, #8]
 8000ab0:	68b2      	ldr	r2, [r6, #8]
 8000ab2:	6870      	ldr	r0, [r6, #4]
 8000ab4:	f00e fe2f 	bl	800f716 <__aeabi_memcpy>
 8000ab8:	6870      	ldr	r0, [r6, #4]
 8000aba:	68b1      	ldr	r1, [r6, #8]
 8000abc:	4408      	add	r0, r1
 8000abe:	6070      	str	r0, [r6, #4]
 8000ac0:	6831      	ldr	r1, [r6, #0]
 8000ac2:	4288      	cmp	r0, r1
 8000ac4:	d302      	bcc.n	8000acc <ai_platform_network_process+0x388>
 8000ac6:	68f0      	ldr	r0, [r6, #12]
 8000ac8:	4240      	negs	r0, r0
 8000aca:	4408      	add	r0, r1
 8000acc:	6070      	str	r0, [r6, #4]
 8000ace:	e7d5      	b.n	8000a7c <ai_platform_network_process+0x338>
 8000ad0:	8ae8      	ldrh	r0, [r5, #22]
 8000ad2:	8aa9      	ldrh	r1, [r5, #20]
 8000ad4:	1c40      	adds	r0, r0, #1
 8000ad6:	82e8      	strh	r0, [r5, #22]
 8000ad8:	46a3      	mov	fp, r4
 8000ada:	b280      	uxth	r0, r0
 8000adc:	4288      	cmp	r0, r1
 8000ade:	f4ff af79 	bcc.w	80009d4 <ai_platform_network_process+0x290>
 8000ae2:	8ae8      	ldrh	r0, [r5, #22]
 8000ae4:	b003      	add	sp, #12
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000aec <.text_18>:
 8000aec:	e0002000 	.word	0xe0002000

08000af0 <.text_19>:
 8000af0:	40023000 	.word	0x40023000

08000af4 <.text_20>:
 8000af4:	f407a5c2 	.word	0xf407a5c2

08000af8 <.text_21>:
 8000af8:	b5e8b5cd 	.word	0xb5e8b5cd

08000afc <.text_22>:
 8000afc:	a1c00100 	.word	0xa1c00100

08000b00 <.text_23>:
 8000b00:	01030001 	.word	0x01030001

08000b04 <.text_24>:
 8000b04:	00000104 	.word	0x00000104

08000b08 <.text_25>:
 8000b08:	00000101 	.word	0x00000101

08000b0c <.text_26>:
 8000b0c:	00000301 	.word	0x00000301

08000b10 <.text_27>:
 8000b10:	00001030 	.word	0x00001030

08000b14 <.text_28>:
 8000b14:	00001001 	.word	0x00001001

08000b18 <_platform_network_sanity_check{5}::signatures>:
 8000b18:	84048403                                ....

08000b1c <.text_30>:
 8000b1c:	00001002 	.word	0x00001002

08000b20 <.text_31>:
 8000b20:	00001010 	.word	0x00001010

08000b24 <.text_32>:
 8000b24:	00000000 	.word	0x00000000

08000b28 <.text_33>:
 8000b28:	00001010 	.word	0x00001010

08000b2c <core_init>:
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <core_get_error>:
 8000b30:	4601      	mov	r1, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	6808      	ldr	r0, [r1, #0]
 8000b36:	600a      	str	r2, [r1, #0]
 8000b38:	4770      	bx	lr

08000b3a <core_set_error>:
 8000b3a:	7803      	ldrb	r3, [r0, #0]
 8000b3c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b40:	d104      	bne.n	8000b4c <core_set_error+0x12>
 8000b42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b46:	6001      	str	r1, [r0, #0]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <ai_layers_forward_layer>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
 8000b54:	6921      	ldr	r1, [r4, #16]
 8000b56:	4788      	blx	r1
 8000b58:	68e0      	ldr	r0, [r4, #12]
 8000b5a:	42a0      	cmp	r0, r4
 8000b5c:	bf08      	it	eq
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
	...

08000b64 <ai_check_custom_types>:
 8000b64:	b500      	push	{lr}
 8000b66:	b081      	sub	sp, #4
 8000b68:	b160      	cbz	r0, 8000b84 <ai_check_custom_types+0x20>
 8000b6a:	7801      	ldrb	r1, [r0, #0]
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d109      	bne.n	8000b84 <ai_check_custom_types+0x20>
 8000b70:	f05f 0204 	movs.w	r2, #4
 8000b74:	a18d      	add	r1, pc, #564	; (adr r1, 8000dac <ai_check_custom_types::ref_signatures>)
 8000b76:	f00e fdfb 	bl	800f770 <memcmp>
 8000b7a:	1e40      	subs	r0, r0, #1
 8000b7c:	4180      	sbcs	r0, r0
 8000b7e:	0fc0      	lsrs	r0, r0, #31
 8000b80:	b001      	add	sp, #4
 8000b82:	bd00      	pop	{pc}
 8000b84:	2000      	movs	r0, #0
 8000b86:	b001      	add	sp, #4
 8000b88:	bd00      	pop	{pc}
	...

08000b8c <ai_layer_type_name>:
 8000b8c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b90:	1a81      	subs	r1, r0, r2
 8000b92:	2901      	cmp	r1, #1
 8000b94:	bf81      	itttt	hi
 8000b96:	1ec9      	subhi	r1, r1, #3
 8000b98:	290d      	cmphi	r1, #13
 8000b9a:	390f      	subhi	r1, #15
 8000b9c:	2909      	cmphi	r1, #9
 8000b9e:	f200 806b 	bhi.w	8000c78 <ai_layer_type_name+0xec>
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	d033      	beq.n	8000c0e <ai_layer_type_name+0x82>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d033      	beq.n	8000c12 <ai_layer_type_name+0x86>
 8000baa:	1e80      	subs	r0, r0, #2
 8000bac:	d033      	beq.n	8000c16 <ai_layer_type_name+0x8a>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0x90>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0x94>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0x98>
 8000bba:	1e40      	subs	r0, r0, #1
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0x9c>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xa0>
 8000bc2:	1e40      	subs	r0, r0, #1
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xa4>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xa8>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xac>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xb0>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xb4>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xb8>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xbc>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xc0>
 8000be2:	1e80      	subs	r0, r0, #2
 8000be4:	d034      	beq.n	8000c50 <ai_layer_type_name+0xc4>
 8000be6:	1e40      	subs	r0, r0, #1
 8000be8:	d034      	beq.n	8000c54 <ai_layer_type_name+0xc8>
 8000bea:	1e40      	subs	r0, r0, #1
 8000bec:	d034      	beq.n	8000c58 <ai_layer_type_name+0xcc>
 8000bee:	1e40      	subs	r0, r0, #1
 8000bf0:	d034      	beq.n	8000c5c <ai_layer_type_name+0xd0>
 8000bf2:	1e40      	subs	r0, r0, #1
 8000bf4:	d034      	beq.n	8000c60 <ai_layer_type_name+0xd4>
 8000bf6:	1e40      	subs	r0, r0, #1
 8000bf8:	d034      	beq.n	8000c64 <ai_layer_type_name+0xd8>
 8000bfa:	1e40      	subs	r0, r0, #1
 8000bfc:	d034      	beq.n	8000c68 <ai_layer_type_name+0xdc>
 8000bfe:	1e40      	subs	r0, r0, #1
 8000c00:	d034      	beq.n	8000c6c <ai_layer_type_name+0xe0>
 8000c02:	1e40      	subs	r0, r0, #1
 8000c04:	d034      	beq.n	8000c70 <ai_layer_type_name+0xe4>
 8000c06:	1e40      	subs	r0, r0, #1
 8000c08:	d034      	beq.n	8000c74 <ai_layer_type_name+0xe8>
 8000c0a:	a01c      	add	r0, pc, #112	; (adr r0, 8000c7c <.text_5>)
 8000c0c:	4770      	bx	lr
 8000c0e:	a01c      	add	r0, pc, #112	; (adr r0, 8000c80 <.text_6>)
 8000c10:	4770      	bx	lr
 8000c12:	a01c      	add	r0, pc, #112	; (adr r0, 8000c84 <.text_7>)
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	a031      	add	r0, pc, #196	; (adr r0, 8000ce0 <.text_15>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a032      	add	r0, pc, #200	; (adr r0, 8000ce8 <.text_16>)
 8000c1e:	4770      	bx	lr
 8000c20:	a019      	add	r0, pc, #100	; (adr r0, 8000c88 <.text_8>)
 8000c22:	4770      	bx	lr
 8000c24:	a019      	add	r0, pc, #100	; (adr r0, 8000c8c <.text_9>)
 8000c26:	4770      	bx	lr
 8000c28:	a031      	add	r0, pc, #196	; (adr r0, 8000cf0 <.text_17>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a018      	add	r0, pc, #96	; (adr r0, 8000c90 <.text_10>)
 8000c2e:	4770      	bx	lr
 8000c30:	a031      	add	r0, pc, #196	; (adr r0, 8000cf8 <.text_18>)
 8000c32:	4770      	bx	lr
 8000c34:	a032      	add	r0, pc, #200	; (adr r0, 8000d00 <.text_19>)
 8000c36:	4770      	bx	lr
 8000c38:	a036      	add	r0, pc, #216	; (adr r0, 8000d14 <.text_20>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a038      	add	r0, pc, #224	; (adr r0, 8000d20 <.text_21>)
 8000c3e:	4770      	bx	lr
 8000c40:	a014      	add	r0, pc, #80	; (adr r0, 8000c94 <.text_11>)
 8000c42:	4770      	bx	lr
 8000c44:	a038      	add	r0, pc, #224	; (adr r0, 8000d28 <.text_22>)
 8000c46:	4770      	bx	lr
 8000c48:	a039      	add	r0, pc, #228	; (adr r0, 8000d30 <.text_23>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a03b      	add	r0, pc, #236	; (adr r0, 8000d3c <.text_24>)
 8000c4e:	4770      	bx	lr
 8000c50:	a03f      	add	r0, pc, #252	; (adr r0, 8000d50 <.text_25>)
 8000c52:	4770      	bx	lr
 8000c54:	a040      	add	r0, pc, #256	; (adr r0, 8000d58 <.text_26>)
 8000c56:	4770      	bx	lr
 8000c58:	a041      	add	r0, pc, #260	; (adr r0, 8000d60 <.text_27>)
 8000c5a:	4770      	bx	lr
 8000c5c:	a043      	add	r0, pc, #268	; (adr r0, 8000d6c <.text_28>)
 8000c5e:	4770      	bx	lr
 8000c60:	a044      	add	r0, pc, #272	; (adr r0, 8000d74 <.text_29>)
 8000c62:	4770      	bx	lr
 8000c64:	a045      	add	r0, pc, #276	; (adr r0, 8000d7c <.text_30>)
 8000c66:	4770      	bx	lr
 8000c68:	a00b      	add	r0, pc, #44	; (adr r0, 8000c98 <.text_12>)
 8000c6a:	4770      	bx	lr
 8000c6c:	a049      	add	r0, pc, #292	; (adr r0, 8000d94 <.text_31>)
 8000c6e:	4770      	bx	lr
 8000c70:	a04a      	add	r0, pc, #296	; (adr r0, 8000d9c <.text_32>)
 8000c72:	4770      	bx	lr
 8000c74:	a04b      	add	r0, pc, #300	; (adr r0, 8000da4 <.text_33>)
 8000c76:	4770      	bx	lr
 8000c78:	a000      	add	r0, pc, #0	; (adr r0, 8000c7c <.text_5>)
 8000c7a:	4770      	bx	lr

08000c7c <.text_5>:
 8000c7c:	00000000 	.word	0x00000000

08000c80 <.text_6>:
 8000c80:	00444441 	.word	0x00444441

08000c84 <.text_7>:
 8000c84:	00004e42 	.word	0x00004e42

08000c88 <.text_8>:
 8000c88:	00555247 	.word	0x00555247

08000c8c <.text_9>:
 8000c8c:	004e524c 	.word	0x004e524c

08000c90 <.text_10>:
 8000c90:	00004c4e 	.word	0x00004c4e

08000c94 <.text_11>:
 8000c94:	00004d53 	.word	0x00004d53

08000c98 <.text_12>:
 8000c98:	00444150 	.word	0x00444150

08000c9c <ai_layer_type_is_valid>:
 8000c9c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ca0:	1a40      	subs	r0, r0, r1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	bf81      	itttt	hi
 8000ca6:	1ec0      	subhi	r0, r0, #3
 8000ca8:	280d      	cmphi	r0, #13
 8000caa:	380f      	subhi	r0, #15
 8000cac:	2809      	cmphi	r0, #9
 8000cae:	d801      	bhi.n	8000cb4 <ai_layer_type_is_valid+0x18>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <ai_layers_forward_all>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b081      	sub	sp, #4
 8000cbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000cc0:	b158      	cbz	r0, 8000cda <ai_layers_forward_all+0x22>
 8000cc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000cc6:	6929      	ldr	r1, [r5, #16]
 8000cc8:	4628      	mov	r0, r5
 8000cca:	4788      	blx	r1
 8000ccc:	68e8      	ldr	r0, [r5, #12]
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	bf08      	it	eq
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd8:	d1f4      	bne.n	8000cc4 <ai_layers_forward_all+0xc>
 8000cda:	b001      	add	sp, #4
 8000cdc:	bd30      	pop	{r4, r5, pc}
	...

08000ce0 <.text_15>:
 8000ce0:	564e4f43 	.word	0x564e4f43
 8000ce4:	00004432 	.word	0x00004432

08000ce8 <.text_16>:
 8000ce8:	534e4544 	.word	0x534e4544
 8000cec:	0045      	.short	0x0045
	...

08000cf0 <.text_17>:
 8000cf0:	4d54534c 	.word	0x4d54534c
 8000cf4:	00          	.byte	0x00
 8000cf5:	00          	.byte	0x00
	...

08000cf8 <.text_18>:
 8000cf8:	4d524f4e 	.word	0x4d524f4e
 8000cfc:	00          	.byte	0x00
 8000cfd:	00          	.byte	0x00
	...

08000d00 <.text_19>:
 8000d00:	4954504f 	.word	0x4954504f
 8000d04:	455a494d 	.word	0x455a494d
 8000d08:	4f435f44 	.word	0x4f435f44
 8000d0c:	4432564e 	.word	0x4432564e
 8000d10:	00          	.byte	0x00
 8000d11:	00          	.byte	0x00
	...

08000d14 <.text_20>:
 8000d14:	4e415254 	.word	0x4e415254
 8000d18:	534f5053 	.word	0x534f5053
 8000d1c:	0045      	.short	0x0045
	...

08000d20 <.text_21>:
 8000d20:	4c4f4f50 	.word	0x4c4f4f50
 8000d24:	00          	.byte	0x00
 8000d25:	00          	.byte	0x00
	...

08000d28 <.text_22>:
 8000d28:	494c5053 	.word	0x494c5053
 8000d2c:	0054      	.short	0x0054
	...

08000d30 <.text_23>:
 8000d30:	454d4954 	.word	0x454d4954
 8000d34:	4c45445f 	.word	0x4c45445f
 8000d38:	00005941 	.word	0x00005941

08000d3c <.text_24>:
 8000d3c:	454d4954 	.word	0x454d4954
 8000d40:	5349445f 	.word	0x5349445f
 8000d44:	42495254 	.word	0x42495254
 8000d48:	44455455 	.word	0x44455455
 8000d4c:	00          	.byte	0x00
 8000d4d:	00          	.byte	0x00
	...

08000d50 <.text_25>:
 8000d50:	434e4f43 	.word	0x434e4f43
 8000d54:	00005441 	.word	0x00005441

08000d58 <.text_26>:
 8000d58:	4d4d4547 	.word	0x4d4d4547
 8000d5c:	00          	.byte	0x00
 8000d5d:	00          	.byte	0x00
	...

08000d60 <.text_27>:
 8000d60:	41535055 	.word	0x41535055
 8000d64:	454c504d 	.word	0x454c504d
 8000d68:	00          	.byte	0x00
 8000d69:	00          	.byte	0x00
	...

08000d6c <.text_28>:
 8000d6c:	57544c45 	.word	0x57544c45
 8000d70:	00455349 	.word	0x00455349

08000d74 <.text_29>:
 8000d74:	454e4547 	.word	0x454e4547
 8000d78:	00434952 	.word	0x00434952

08000d7c <.text_30>:
 8000d7c:	54534e49 	.word	0x54534e49
 8000d80:	45434e41 	.word	0x45434e41
 8000d84:	4d524f4e 	.word	0x4d524f4e
 8000d88:	5a494c41 	.word	0x5a494c41
 8000d8c:	4f495441 	.word	0x4f495441
 8000d90:	004e      	.short	0x004e
	...

08000d94 <.text_31>:
 8000d94:	43494c53 	.word	0x43494c53
 8000d98:	0045      	.short	0x0045
	...

08000d9c <.text_32>:
 8000d9c:	454c4954 	.word	0x454c4954
 8000da0:	00          	.byte	0x00
 8000da1:	00          	.byte	0x00
	...

08000da4 <.text_33>:
 8000da4:	55444552 	.word	0x55444552
 8000da8:	00004543 	.word	0x00004543

08000dac <ai_check_custom_types::ref_signatures>:
 8000dac:	84048403                                ....

08000db0 <ai_conv2d_stripe_f32>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b098      	sub	sp, #96	; 0x60
 8000db6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000db8:	2800      	cmp	r0, #0
 8000dba:	f000 82cb 	beq.w	8001354 <ai_conv2d_stripe_f32+0x5a4>
 8000dbe:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000dc2:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000dc6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000dc8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000dca:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000dcc:	9004      	str	r0, [sp, #16]
 8000dce:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000dd2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dd4:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000dd8:	f8cd a014 	str.w	sl, [sp, #20]
 8000ddc:	1904      	adds	r4, r0, r4
 8000dde:	1e64      	subs	r4, r4, #1
 8000de0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000de2:	9100      	str	r1, [sp, #0]
 8000de4:	fb94 f6f6 	sdiv	r6, r4, r6
 8000de8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dee:	4346      	muls	r6, r0
 8000df0:	9616      	str	r6, [sp, #88]	; 0x58
 8000df2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000df6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000df8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dfa:	9306      	str	r3, [sp, #24]
 8000dfc:	4344      	muls	r4, r0
 8000dfe:	9415      	str	r4, [sp, #84]	; 0x54
 8000e00:	437e      	muls	r6, r7
 8000e02:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e06:	437c      	muls	r4, r7
 8000e08:	9414      	str	r4, [sp, #80]	; 0x50
 8000e0a:	4346      	muls	r6, r0
 8000e0c:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e10:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000e12:	960b      	str	r6, [sp, #44]	; 0x2c
 8000e14:	1a24      	subs	r4, r4, r0
 8000e16:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e18:	4604      	mov	r4, r0
 8000e1a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e1c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000e1e:	4344      	muls	r4, r0
 8000e20:	9412      	str	r4, [sp, #72]	; 0x48
 8000e22:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e24:	4344      	muls	r4, r0
 8000e26:	9411      	str	r4, [sp, #68]	; 0x44
 8000e28:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e2c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e30:	fb14 f000 	smulbb	r0, r4, r0
 8000e34:	900a      	str	r0, [sp, #40]	; 0x28
 8000e36:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e38:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e3a:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e3e:	9010      	str	r0, [sp, #64]	; 0x40
 8000e40:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e42:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e44:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e4a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e4e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e52:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e54:	900e      	str	r0, [sp, #56]	; 0x38
 8000e56:	4374      	muls	r4, r6
 8000e58:	940d      	str	r4, [sp, #52]	; 0x34
 8000e5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e5c:	1b2d      	subs	r5, r5, r4
 8000e5e:	950c      	str	r5, [sp, #48]	; 0x30
 8000e60:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e64:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e68:	427f      	negs	r7, r7
 8000e6a:	bfd8      	it	le
 8000e6c:	2700      	movle	r7, #0
 8000e6e:	1a09      	subs	r1, r1, r0
 8000e70:	4291      	cmp	r1, r2
 8000e72:	bf3d      	ittte	cc
 8000e74:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e76:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e78:	1b86      	subcc	r6, r0, r6
 8000e7a:	4616      	movcs	r6, r2
 8000e7c:	9a05      	ldr	r2, [sp, #20]
 8000e7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e80:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e82:	18ba      	adds	r2, r7, r2
 8000e84:	434a      	muls	r2, r1
 8000e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e8a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e8c:	b900      	cbnz	r0, 8000e90 <ai_conv2d_stripe_f32+0xe0>
 8000e8e:	9800      	ldr	r0, [sp, #0]
 8000e90:	9001      	str	r0, [sp, #4]
 8000e92:	1bf6      	subs	r6, r6, r7
 8000e94:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	bf04      	itt	eq
 8000e9c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e9e:	2801      	cmpeq	r0, #1
 8000ea0:	f040 80a9 	bne.w	8000ff6 <ai_conv2d_stripe_f32+0x246>
 8000ea4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000ea6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000eaa:	1ba4      	subs	r4, r4, r6
 8000eac:	434c      	muls	r4, r1
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	4341      	muls	r1, r0
 8000eb2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000eb4:	1b40      	subs	r0, r0, r5
 8000eb6:	fb00 fc03 	mul.w	ip, r0, r3
 8000eba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ebc:	9b06      	ldr	r3, [sp, #24]
 8000ebe:	4407      	add	r7, r0
 8000ec0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ec2:	4347      	muls	r7, r0
 8000ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ec8:	4370      	muls	r0, r6
 8000eca:	9e01      	ldr	r6, [sp, #4]
 8000ecc:	9b00      	ldr	r3, [sp, #0]
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ed2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000ed6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000ed8:	bf0c      	ite	eq
 8000eda:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 8000ede:	eef0 0a40 	vmovne.f32	s1, s0
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f000 8222 	beq.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ee8:	46b0      	mov	r8, r6
 8000eea:	462e      	mov	r6, r5
 8000eec:	4613      	mov	r3, r2
 8000eee:	f8cd c008 	str.w	ip, [sp, #8]
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	f8dd e000 	ldr.w	lr, [sp]
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	463a      	mov	r2, r7
 8000efc:	4682      	mov	sl, r0
 8000efe:	f8cd 9004 	str.w	r9, [sp, #4]
 8000f02:	46c4      	mov	ip, r8
 8000f04:	f02a 0703 	bic.w	r7, sl, #3
 8000f08:	ed9c 1a00 	vldr	s2, [ip]
 8000f0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000f16:	dd61      	ble.n	8000fdc <ai_conv2d_stripe_f32+0x22c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	f04f 0900 	mov.w	r9, #0
 8000f20:	f340 801f 	ble.w	8000f62 <ai_conv2d_stripe_f32+0x1b2>
 8000f24:	edd2 4a00 	vldr	s9, [r2]
 8000f28:	ed98 5a00 	vldr	s10, [r8]
 8000f2c:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f30:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f34:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f38:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f3c:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f40:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f44:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f48:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f4c:	3210      	adds	r2, #16
 8000f4e:	f109 0904 	add.w	r9, r9, #4
 8000f52:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f56:	45b9      	cmp	r9, r7
 8000f58:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f5c:	f108 0810 	add.w	r8, r8, #16
 8000f60:	dbe0      	blt.n	8000f24 <ai_conv2d_stripe_f32+0x174>
 8000f62:	45d1      	cmp	r9, sl
 8000f64:	f280 8034 	bge.w	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f68:	f109 0901 	add.w	r9, r9, #1
 8000f6c:	edd2 2a00 	vldr	s5, [r2]
 8000f70:	edd8 1a00 	vldr	s3, [r8]
 8000f74:	1d12      	adds	r2, r2, #4
 8000f76:	45d1      	cmp	r9, sl
 8000f78:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f7c:	f108 0804 	add.w	r8, r8, #4
 8000f80:	da26      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f82:	f109 0901 	add.w	r9, r9, #1
 8000f86:	ed92 3a00 	vldr	s6, [r2]
 8000f8a:	ed98 2a00 	vldr	s4, [r8]
 8000f8e:	1d12      	adds	r2, r2, #4
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f96:	f108 0804 	add.w	r8, r8, #4
 8000f9a:	da19      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f9c:	f109 0901 	add.w	r9, r9, #1
 8000fa0:	edd2 2a00 	vldr	s5, [r2]
 8000fa4:	edd8 1a00 	vldr	s3, [r8]
 8000fa8:	1d12      	adds	r2, r2, #4
 8000faa:	45d1      	cmp	r9, sl
 8000fac:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000fb0:	f108 0804 	add.w	r8, r8, #4
 8000fb4:	da0c      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000fb6:	f109 0901 	add.w	r9, r9, #1
 8000fba:	ed92 2a00 	vldr	s4, [r2]
 8000fbe:	ed98 3a00 	vldr	s6, [r8]
 8000fc2:	1d12      	adds	r2, r2, #4
 8000fc4:	45d1      	cmp	r9, sl
 8000fc6:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000fca:	f108 0804 	add.w	r8, r8, #4
 8000fce:	dbcb      	blt.n	8000f68 <ai_conv2d_stripe_f32+0x1b8>
 8000fd0:	1e40      	subs	r0, r0, #1
 8000fd2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fda:	d19e      	bne.n	8000f1a <ai_conv2d_stripe_f32+0x16a>
 8000fdc:	9802      	ldr	r0, [sp, #8]
 8000fde:	ed8e 1a00 	vstr	s2, [lr]
 8000fe2:	1e6d      	subs	r5, r5, #1
 8000fe4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fe8:	f10e 0e04 	add.w	lr, lr, #4
 8000fec:	f10c 0c04 	add.w	ip, ip, #4
 8000ff0:	d18a      	bne.n	8000f08 <ai_conv2d_stripe_f32+0x158>
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e19a      	b.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ff6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	bf04      	itt	eq
 8000ffc:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000ffe:	2801      	cmpeq	r0, #1
 8001000:	f040 80cc 	bne.w	800119c <ai_conv2d_stripe_f32+0x3ec>
 8001004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001006:	9b06      	ldr	r3, [sp, #24]
 8001008:	9c00      	ldr	r4, [sp, #0]
 800100a:	9002      	str	r0, [sp, #8]
 800100c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800100e:	1b81      	subs	r1, r0, r6
 8001010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001012:	fb01 fa00 	mul.w	sl, r1, r0
 8001016:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001018:	9926      	ldr	r1, [sp, #152]	; 0x98
 800101a:	eba0 0c06 	sub.w	ip, r0, r6
 800101e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	4341      	muls	r1, r0
 8001024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001026:	183f      	adds	r7, r7, r0
 8001028:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800102c:	9b01      	ldr	r3, [sp, #4]
 800102e:	42a3      	cmp	r3, r4
 8001030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001032:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001036:	bf0c      	ite	eq
 8001038:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 800103c:	eef0 0a40 	vmovne.f32	s1, s0
 8001040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001042:	2400      	movs	r4, #0
 8001044:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001048:	4596      	cmp	lr, r2
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	f080 816e 	bcs.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	9a02      	ldr	r2, [sp, #8]
 8001054:	2a00      	cmp	r2, #0
 8001056:	f000 8097 	beq.w	8001188 <ai_conv2d_stripe_f32+0x3d8>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	9500      	str	r5, [sp, #0]
 800105e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001062:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001066:	f8dd b008 	ldr.w	fp, [sp, #8]
 800106a:	9108      	str	r1, [sp, #32]
 800106c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001070:	4615      	mov	r5, r2
 8001072:	9a00      	ldr	r2, [sp, #0]
 8001074:	ed97 1a00 	vldr	s2, [r7]
 8001078:	9907      	ldr	r1, [sp, #28]
 800107a:	2a00      	cmp	r2, #0
 800107c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001080:	f340 8072 	ble.w	8001168 <ai_conv2d_stripe_f32+0x3b8>
 8001084:	f026 0e03 	bic.w	lr, r6, #3
 8001088:	f1be 0f00 	cmp.w	lr, #0
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	f340 8029 	ble.w	80010e6 <ai_conv2d_stripe_f32+0x336>
 8001094:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001098:	edd0 1a00 	vldr	s3, [r0]
 800109c:	ed91 2a00 	vldr	s4, [r1]
 80010a0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a8:	edd0 1a01 	vldr	s3, [r0, #4]
 80010ac:	ed91 2a00 	vldr	s4, [r1]
 80010b0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010b4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010b8:	edd0 1a02 	vldr	s3, [r0, #8]
 80010bc:	ed91 2a00 	vldr	s4, [r1]
 80010c0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010c4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010c8:	f109 0904 	add.w	r9, r9, #4
 80010cc:	edd0 1a03 	vldr	s3, [r0, #12]
 80010d0:	ed91 2a00 	vldr	s4, [r1]
 80010d4:	3010      	adds	r0, #16
 80010d6:	45f1      	cmp	r9, lr
 80010d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010dc:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010e0:	dbda      	blt.n	8001098 <ai_conv2d_stripe_f32+0x2e8>
 80010e2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010e6:	45b1      	cmp	r9, r6
 80010e8:	f280 8038 	bge.w	800115c <ai_conv2d_stripe_f32+0x3ac>
 80010ec:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010f0:	f109 0901 	add.w	r9, r9, #1
 80010f4:	edd0 1a00 	vldr	s3, [r0]
 80010f8:	ed91 2a00 	vldr	s4, [r1]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	45b1      	cmp	r9, r6
 8001100:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001104:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001108:	da26      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800110a:	f109 0901 	add.w	r9, r9, #1
 800110e:	ed90 2a00 	vldr	s4, [r0]
 8001112:	edd1 1a00 	vldr	s3, [r1]
 8001116:	1d00      	adds	r0, r0, #4
 8001118:	45b1      	cmp	r9, r6
 800111a:	ee02 1a21 	vmla.f32	s2, s4, s3
 800111e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001122:	da19      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 8001124:	f109 0901 	add.w	r9, r9, #1
 8001128:	edd0 1a00 	vldr	s3, [r0]
 800112c:	ed91 2a00 	vldr	s4, [r1]
 8001130:	1d00      	adds	r0, r0, #4
 8001132:	45b1      	cmp	r9, r6
 8001134:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001138:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800113c:	da0c      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800113e:	f109 0901 	add.w	r9, r9, #1
 8001142:	ed90 2a00 	vldr	s4, [r0]
 8001146:	edd1 1a00 	vldr	s3, [r1]
 800114a:	1d00      	adds	r0, r0, #4
 800114c:	45b1      	cmp	r9, r6
 800114e:	ee02 1a21 	vmla.f32	s2, s4, s3
 8001152:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001156:	dbcb      	blt.n	80010f0 <ai_conv2d_stripe_f32+0x340>
 8001158:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001162:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001166:	d18d      	bne.n	8001084 <ai_conv2d_stripe_f32+0x2d4>
 8001168:	9908      	ldr	r1, [sp, #32]
 800116a:	ed85 1a00 	vstr	s2, [r5]
 800116e:	1c64      	adds	r4, r4, #1
 8001170:	1d2d      	adds	r5, r5, #4
 8001172:	1d3f      	adds	r7, r7, #4
 8001174:	f1bb 0b01 	subs.w	fp, fp, #1
 8001178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800117c:	f47f af79 	bne.w	8001072 <ai_conv2d_stripe_f32+0x2c2>
 8001180:	9d00      	ldr	r5, [sp, #0]
 8001182:	9908      	ldr	r1, [sp, #32]
 8001184:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	f10e 0e04 	add.w	lr, lr, #4
 800118e:	4596      	cmp	lr, r2
 8001190:	f4bf af2f 	bcs.w	8000ff2 <ai_conv2d_stripe_f32+0x242>
 8001194:	e75d      	b.n	8001052 <ai_conv2d_stripe_f32+0x2a2>
 8001196:	bf00      	nop
 8001198:	00000000 	.word	0x00000000
 800119c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 80011a0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80011a4:	4608      	mov	r0, r1
 80011a6:	1bcb      	subs	r3, r1, r7
 80011a8:	fb97 f4f0 	sdiv	r4, r7, r0
 80011ac:	fb00 3004 	mla	r0, r0, r4, r3
 80011b0:	fb90 faf1 	sdiv	sl, r0, r1
 80011b4:	fb01 0a1a 	mls	sl, r1, sl, r0
 80011b8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80011bc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80011be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80011c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80011c4:	fb03 4000 	mla	r0, r3, r0, r4
 80011c8:	1876      	adds	r6, r6, r1
 80011ca:	fb90 fbf3 	sdiv	fp, r0, r3
 80011ce:	1e76      	subs	r6, r6, #1
 80011d0:	187f      	adds	r7, r7, r1
 80011d2:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011d6:	eba6 060a 	sub.w	r6, r6, sl
 80011da:	eba5 050b 	sub.w	r5, r5, fp
 80011de:	1e7f      	subs	r7, r7, #1
 80011e0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011e4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011e6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011e8:	195d      	adds	r5, r3, r5
 80011ea:	1e6d      	subs	r5, r5, #1
 80011ec:	fb00 9911 	mls	r9, r0, r1, r9
 80011f0:	fb97 f1f1 	sdiv	r1, r7, r1
 80011f4:	fb95 fcf3 	sdiv	ip, r5, r3
 80011f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011fc:	9509      	str	r5, [sp, #36]	; 0x24
 80011fe:	eba6 060c 	sub.w	r6, r6, ip
 8001202:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8001204:	1a2d      	subs	r5, r5, r0
 8001206:	fb05 f803 	mul.w	r8, r5, r3
 800120a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800120c:	435d      	muls	r5, r3
 800120e:	fb06 fe05 	mul.w	lr, r6, r5
 8001212:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001214:	9e06      	ldr	r6, [sp, #24]
 8001216:	194d      	adds	r5, r1, r5
 8001218:	fb04 f909 	mul.w	r9, r4, r9
 800121c:	435d      	muls	r5, r3
 800121e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001220:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8001224:	9d01      	ldr	r5, [sp, #4]
 8001226:	9e00      	ldr	r6, [sp, #0]
 8001228:	1ae4      	subs	r4, r4, r3
 800122a:	42b5      	cmp	r5, r6
 800122c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800122e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001230:	445d      	add	r5, fp
 8001232:	fb06 aa05 	mla	sl, r6, r5, sl
 8001236:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001238:	fb0a f505 	mul.w	r5, sl, r5
 800123c:	bf0c      	ite	eq
 800123e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 80014b8 <.text_5>
 8001242:	eef0 0a40 	vmovne.f32	s1, s0
 8001246:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800124a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800124c:	2500      	movs	r5, #0
 800124e:	2a00      	cmp	r2, #0
 8001250:	d06c      	beq.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001256:	2a00      	cmp	r2, #0
 8001258:	d062      	beq.n	8001320 <ai_conv2d_stripe_f32+0x570>
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001260:	9a00      	ldr	r2, [sp, #0]
 8001262:	f8cd c00c 	str.w	ip, [sp, #12]
 8001266:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800126a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126c:	f8cd e020 	str.w	lr, [sp, #32]
 8001270:	f8cd 701c 	str.w	r7, [sp, #28]
 8001274:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001278:	ed96 1a00 	vldr	s2, [r6]
 800127c:	9f07      	ldr	r7, [sp, #28]
 800127e:	f1be 0f00 	cmp.w	lr, #0
 8001282:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001286:	dd3b      	ble.n	8001300 <ai_conv2d_stripe_f32+0x550>
 8001288:	2800      	cmp	r0, #0
 800128a:	dd32      	ble.n	80012f2 <ai_conv2d_stripe_f32+0x542>
 800128c:	ea4f 0c00 	mov.w	ip, r0
 8001290:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001294:	455f      	cmp	r7, fp
 8001296:	d227      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 8001298:	edd1 2a00 	vldr	s5, [r1]
 800129c:	edd7 1a00 	vldr	s3, [r7]
 80012a0:	1d09      	adds	r1, r1, #4
 80012a2:	1d3f      	adds	r7, r7, #4
 80012a4:	455f      	cmp	r7, fp
 80012a6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012aa:	d21d      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012ac:	ed91 3a00 	vldr	s6, [r1]
 80012b0:	ed97 2a00 	vldr	s4, [r7]
 80012b4:	1d09      	adds	r1, r1, #4
 80012b6:	1d3f      	adds	r7, r7, #4
 80012b8:	455f      	cmp	r7, fp
 80012ba:	ee03 1a02 	vmla.f32	s2, s6, s4
 80012be:	d213      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012c0:	edd1 2a00 	vldr	s5, [r1]
 80012c4:	edd7 1a00 	vldr	s3, [r7]
 80012c8:	1d09      	adds	r1, r1, #4
 80012ca:	1d3f      	adds	r7, r7, #4
 80012cc:	455f      	cmp	r7, fp
 80012ce:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012d2:	d209      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012d4:	ed91 2a00 	vldr	s4, [r1]
 80012d8:	ed97 3a00 	vldr	s6, [r7]
 80012dc:	1d09      	adds	r1, r1, #4
 80012de:	1d3f      	adds	r7, r7, #4
 80012e0:	455f      	cmp	r7, fp
 80012e2:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012e6:	d3d7      	bcc.n	8001298 <ai_conv2d_stripe_f32+0x4e8>
 80012e8:	f1bc 0c01 	subs.w	ip, ip, #1
 80012ec:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012f0:	d1ce      	bne.n	8001290 <ai_conv2d_stripe_f32+0x4e0>
 80012f2:	f1be 0e01 	subs.w	lr, lr, #1
 80012f6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012fa:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012fe:	d1c3      	bne.n	8001288 <ai_conv2d_stripe_f32+0x4d8>
 8001300:	9f08      	ldr	r7, [sp, #32]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	1d36      	adds	r6, r6, #4
 8001306:	ed8a 1a00 	vstr	s2, [sl]
 800130a:	1e52      	subs	r2, r2, #1
 800130c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8001310:	f10a 0a04 	add.w	sl, sl, #4
 8001314:	d1ae      	bne.n	8001274 <ai_conv2d_stripe_f32+0x4c4>
 8001316:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800131a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800131e:	9f07      	ldr	r7, [sp, #28]
 8001320:	9a02      	ldr	r2, [sp, #8]
 8001322:	1e52      	subs	r2, r2, #1
 8001324:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	d193      	bne.n	8001254 <ai_conv2d_stripe_f32+0x4a4>
 800132c:	9800      	ldr	r0, [sp, #0]
 800132e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001330:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001334:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001336:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	1841      	adds	r1, r0, r1
 800133e:	912c      	str	r1, [sp, #176]	; 0xb0
 8001340:	9805      	ldr	r0, [sp, #20]
 8001342:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001346:	1841      	adds	r1, r0, r1
 8001348:	9804      	ldr	r0, [sp, #16]
 800134a:	9105      	str	r1, [sp, #20]
 800134c:	1e40      	subs	r0, r0, #1
 800134e:	9004      	str	r0, [sp, #16]
 8001350:	f47f ad86 	bne.w	8000e60 <ai_conv2d_stripe_f32+0xb0>
 8001354:	b018      	add	sp, #96	; 0x60
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800135a <func_dummy>:
 800135a:	4770      	bx	lr

0800135c <ai_dict8_dot_array_f32>:
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b081      	sub	sp, #4
 8001362:	4682      	mov	sl, r0
 8001364:	ed2d 8b02 	vpush	{d8}
 8001368:	4615      	mov	r5, r2
 800136a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800136c:	08e0      	lsrs	r0, r4, #3
 800136e:	460f      	mov	r7, r1
 8001370:	461a      	mov	r2, r3
 8001372:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80014b8 <.text_5>
 8001376:	d052      	beq.n	800141e <ai_dict8_dot_array_f32+0xc2>
 8001378:	4629      	mov	r1, r5
 800137a:	783b      	ldrb	r3, [r7, #0]
 800137c:	787d      	ldrb	r5, [r7, #1]
 800137e:	78be      	ldrb	r6, [r7, #2]
 8001380:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001384:	ed92 8a00 	vldr	s16, [r2]
 8001388:	ed92 7a01 	vldr	s14, [r2, #4]
 800138c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001390:	ed92 6a02 	vldr	s12, [r2, #8]
 8001394:	ed92 5a03 	vldr	s10, [r2, #12]
 8001398:	f897 e001 	ldrb.w	lr, [r7, #1]
 800139c:	f897 8002 	ldrb.w	r8, [r7, #2]
 80013a0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80013a4:	ed92 4a04 	vldr	s8, [r2, #16]
 80013a8:	ed92 3a05 	vldr	s6, [r2, #20]
 80013ac:	ed92 2a06 	vldr	s4, [r2, #24]
 80013b0:	ed92 1a07 	vldr	s2, [r2, #28]
 80013b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80013b8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80013bc:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	edd5 6a00 	vldr	s13, [r5]
 80013c8:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013cc:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013d0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013d4:	edd6 5a00 	vldr	s11, [r6]
 80013d8:	eddb 4a00 	vldr	s9, [fp]
 80013dc:	eddc 3a00 	vldr	s7, [ip]
 80013e0:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013e4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013e8:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013ec:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013f0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013f4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013f8:	edde 2a00 	vldr	s5, [lr]
 80013fc:	edd8 1a00 	vldr	s3, [r8]
 8001400:	edd9 0a00 	vldr	s1, [r9]
 8001404:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001408:	1d3f      	adds	r7, r7, #4
 800140a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800140e:	3220      	adds	r2, #32
 8001410:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001414:	1e40      	subs	r0, r0, #1
 8001416:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141a:	d1ae      	bne.n	800137a <ai_dict8_dot_array_f32+0x1e>
 800141c:	460d      	mov	r5, r1
 800141e:	f014 0007 	ands.w	r0, r4, #7
 8001422:	d03e      	beq.n	80014a2 <ai_dict8_dot_array_f32+0x146>
 8001424:	f010 0103 	ands.w	r1, r0, #3
 8001428:	f000 800d 	beq.w	8001446 <ai_dict8_dot_array_f32+0xea>
 800142c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001430:	ed92 1a00 	vldr	s2, [r2]
 8001434:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001438:	1d12      	adds	r2, r2, #4
 800143a:	edd6 0a00 	vldr	s1, [r6]
 800143e:	1e49      	subs	r1, r1, #1
 8001440:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001444:	d1f2      	bne.n	800142c <ai_dict8_dot_array_f32+0xd0>
 8001446:	0880      	lsrs	r0, r0, #2
 8001448:	f000 802b 	beq.w	80014a2 <ai_dict8_dot_array_f32+0x146>
 800144c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001450:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001454:	ed92 1a00 	vldr	s2, [r2]
 8001458:	edd2 0a01 	vldr	s1, [r2, #4]
 800145c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001460:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001464:	ed93 2a00 	vldr	s4, [r3]
 8001468:	edd1 1a00 	vldr	s3, [r1]
 800146c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001470:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001474:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001478:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800147c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001480:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001484:	edd2 0a02 	vldr	s1, [r2, #8]
 8001488:	ed91 2a00 	vldr	s4, [r1]
 800148c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001490:	edd3 1a00 	vldr	s3, [r3]
 8001494:	3210      	adds	r2, #16
 8001496:	ee02 0a20 	vmla.f32	s0, s4, s1
 800149a:	1e40      	subs	r0, r0, #1
 800149c:	ee01 0a81 	vmla.f32	s0, s3, s2
 80014a0:	d1d4      	bne.n	800144c <ai_dict8_dot_array_f32+0xf0>
 80014a2:	edda 0a00 	vldr	s1, [sl]
 80014a6:	ee30 0a80 	vadd.f32	s0, s1, s0
 80014aa:	ed8a 0a00 	vstr	s0, [sl]
 80014ae:	ecbd 8b02 	vpop	{d8}
 80014b2:	b001      	add	sp, #4
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014b8 <.text_5>:
 80014b8:	00000000 	.word	0x00000000

080014bc <ai_dict4_dot_array_f32>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	ed2d 8b02 	vpush	{d8}
 80014c4:	4680      	mov	r8, r0
 80014c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014ca:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014ce:	461e      	mov	r6, r3
 80014d0:	0040      	lsls	r0, r0, #1
 80014d2:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014d6:	460c      	mov	r4, r1
 80014d8:	4615      	mov	r5, r2
 80014da:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014de:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001620 <.text_7>
 80014e2:	d053      	beq.n	800158c <ai_dict4_dot_array_f32+0xd0>
 80014e4:	ed96 8a00 	vldr	s16, [r6]
 80014e8:	ed96 7a01 	vldr	s14, [r6, #4]
 80014ec:	ed96 6a02 	vldr	s12, [r6, #8]
 80014f0:	ed96 5a03 	vldr	s10, [r6, #12]
 80014f4:	7820      	ldrb	r0, [r4, #0]
 80014f6:	7861      	ldrb	r1, [r4, #1]
 80014f8:	78a2      	ldrb	r2, [r4, #2]
 80014fa:	78e7      	ldrb	r7, [r4, #3]
 80014fc:	ed96 4a04 	vldr	s8, [r6, #16]
 8001500:	ed96 3a05 	vldr	s6, [r6, #20]
 8001504:	ed96 2a06 	vldr	s4, [r6, #24]
 8001508:	ed96 1a07 	vldr	s2, [r6, #28]
 800150c:	f007 090f 	and.w	r9, r7, #15
 8001510:	093f      	lsrs	r7, r7, #4
 8001512:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001516:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 800151a:	edd7 1a00 	vldr	s3, [r7]
 800151e:	edda 0a00 	vldr	s1, [sl]
 8001522:	f002 070f 	and.w	r7, r2, #15
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800152c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001530:	edd2 3a00 	vldr	s7, [r2]
 8001534:	edd7 2a00 	vldr	s5, [r7]
 8001538:	f001 020f 	and.w	r2, r1, #15
 800153c:	0909      	lsrs	r1, r1, #4
 800153e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001542:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001546:	edd1 5a00 	vldr	s11, [r1]
 800154a:	edd7 4a00 	vldr	s9, [r7]
 800154e:	f000 010f 	and.w	r1, r0, #15
 8001552:	0900      	lsrs	r0, r0, #4
 8001554:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001558:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800155c:	edd0 7a00 	vldr	s15, [r0]
 8001560:	edd2 6a00 	vldr	s13, [r2]
 8001564:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001568:	ee06 0a87 	vmla.f32	s0, s13, s14
 800156c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001570:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001574:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001578:	1d24      	adds	r4, r4, #4
 800157a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800157e:	3620      	adds	r6, #32
 8001580:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001584:	1e5b      	subs	r3, r3, #1
 8001586:	ee00 0a81 	vmla.f32	s0, s1, s2
 800158a:	d1ab      	bne.n	80014e4 <ai_dict4_dot_array_f32+0x28>
 800158c:	4576      	cmp	r6, lr
 800158e:	d22f      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 8001590:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001594:	edd6 1a00 	vldr	s3, [r6]
 8001598:	edd6 0a01 	vldr	s1, [r6, #4]
 800159c:	f000 010f 	and.w	r1, r0, #15
 80015a0:	0900      	lsrs	r0, r0, #4
 80015a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015a6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015aa:	ed90 2a00 	vldr	s4, [r0]
 80015ae:	ed92 1a00 	vldr	s2, [r2]
 80015b2:	3608      	adds	r6, #8
 80015b4:	ee02 0a21 	vmla.f32	s0, s4, s3
 80015b8:	4576      	cmp	r6, lr
 80015ba:	ee01 0a20 	vmla.f32	s0, s2, s1
 80015be:	d217      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 80015c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015c4:	ed96 1a00 	vldr	s2, [r6]
 80015c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80015cc:	f000 010f 	and.w	r1, r0, #15
 80015d0:	0900      	lsrs	r0, r0, #4
 80015d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015d6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015da:	edd0 1a00 	vldr	s3, [r0]
 80015de:	edd2 0a00 	vldr	s1, [r2]
 80015e2:	3608      	adds	r6, #8
 80015e4:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015e8:	4576      	cmp	r6, lr
 80015ea:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015ee:	d3cf      	bcc.n	8001590 <ai_dict4_dot_array_f32+0xd4>
 80015f0:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015f4:	d509      	bpl.n	800160a <ai_dict4_dot_array_f32+0x14e>
 80015f6:	7821      	ldrb	r1, [r4, #0]
 80015f8:	ed96 1a00 	vldr	s2, [r6]
 80015fc:	0909      	lsrs	r1, r1, #4
 80015fe:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8001602:	edd0 0a00 	vldr	s1, [r0]
 8001606:	ee00 0a81 	vmla.f32	s0, s1, s2
 800160a:	edd8 1a00 	vldr	s3, [r8]
 800160e:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001612:	ed88 0a00 	vstr	s0, [r8]
 8001616:	ecbd 8b02 	vpop	{d8}
 800161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001620 <.text_7>:
 8001620:	00000000 	.word	0x00000000

08001624 <ai_dict_decompress_f32>:
 8001624:	b4f0      	push	{r4, r5, r6, r7}
 8001626:	4604      	mov	r4, r0
 8001628:	9805      	ldr	r0, [sp, #20]
 800162a:	9e04      	ldr	r6, [sp, #16]
 800162c:	2b04      	cmp	r3, #4
 800162e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001632:	d003      	beq.n	800163c <ai_dict_decompress_f32+0x18>
 8001634:	2b08      	cmp	r3, #8
 8001636:	d03e      	beq.n	80016b6 <ai_dict_decompress_f32+0x92>
 8001638:	bcf0      	pop	{r4, r5, r6, r7}
 800163a:	4770      	bx	lr
 800163c:	42ac      	cmp	r4, r5
 800163e:	d259      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 8001640:	0870      	lsrs	r0, r6, #1
 8001642:	d02e      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001644:	07c3      	lsls	r3, r0, #31
 8001646:	d50c      	bpl.n	8001662 <ai_dict_decompress_f32+0x3e>
 8001648:	780f      	ldrb	r7, [r1, #0]
 800164a:	093f      	lsrs	r7, r7, #4
 800164c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	f811 7b01 	ldrb.w	r7, [r1], #1
 8001656:	f007 070f 	and.w	r7, r7, #15
 800165a:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 800165e:	6063      	str	r3, [r4, #4]
 8001660:	3408      	adds	r4, #8
 8001662:	0840      	lsrs	r0, r0, #1
 8001664:	d01d      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001666:	780b      	ldrb	r3, [r1, #0]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800166e:	6027      	str	r7, [r4, #0]
 8001670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800167c:	6067      	str	r7, [r4, #4]
 800167e:	f104 0308 	add.w	r3, r4, #8
 8001682:	780c      	ldrb	r4, [r1, #0]
 8001684:	0924      	lsrs	r4, r4, #4
 8001686:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800168a:	601f      	str	r7, [r3, #0]
 800168c:	1e40      	subs	r0, r0, #1
 800168e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001692:	f004 040f 	and.w	r4, r4, #15
 8001696:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800169a:	605f      	str	r7, [r3, #4]
 800169c:	f103 0408 	add.w	r4, r3, #8
 80016a0:	d1e1      	bne.n	8001666 <ai_dict_decompress_f32+0x42>
 80016a2:	07f0      	lsls	r0, r6, #31
 80016a4:	d5ca      	bpl.n	800163c <ai_dict_decompress_f32+0x18>
 80016a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b0:	f844 0b04 	str.w	r0, [r4], #4
 80016b4:	e7c2      	b.n	800163c <ai_dict_decompress_f32+0x18>
 80016b6:	42ac      	cmp	r4, r5
 80016b8:	d21c      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016ba:	7808      	ldrb	r0, [r1, #0]
 80016bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016c0:	6020      	str	r0, [r4, #0]
 80016c2:	1d20      	adds	r0, r4, #4
 80016c4:	42a8      	cmp	r0, r5
 80016c6:	bf3f      	itttt	cc
 80016c8:	784c      	ldrbcc	r4, [r1, #1]
 80016ca:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016ce:	f840 3b04 	strcc.w	r3, [r0], #4
 80016d2:	42a8      	cmpcc	r0, r5
 80016d4:	d20e      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016d6:	788b      	ldrb	r3, [r1, #2]
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	42a8      	cmp	r0, r5
 80016e2:	d207      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016e4:	78cc      	ldrb	r4, [r1, #3]
 80016e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016ea:	1d09      	adds	r1, r1, #4
 80016ec:	1d04      	adds	r4, r0, #4
 80016ee:	42ac      	cmp	r4, r5
 80016f0:	6003      	str	r3, [r0, #0]
 80016f2:	d3e2      	bcc.n	80016ba <ai_dict_decompress_f32+0x96>
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
 80016f6:	4770      	bx	lr

080016f8 <forward_conv2d>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4605      	mov	r5, r0
 80016fe:	b0a9      	sub	sp, #164	; 0xa4
 8001700:	696b      	ldr	r3, [r5, #20]
 8001702:	8819      	ldrh	r1, [r3, #0]
 8001704:	2900      	cmp	r1, #0
 8001706:	bf1a      	itte	ne
 8001708:	6858      	ldrne	r0, [r3, #4]
 800170a:	1d00      	addne	r0, r0, #4
 800170c:	2004      	moveq	r0, #4
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	2800      	cmp	r0, #0
 8001712:	bf14      	ite	ne
 8001714:	6802      	ldrne	r2, [r0, #0]
 8001716:	2200      	moveq	r2, #0
 8001718:	2901      	cmp	r1, #1
 800171a:	bfc6      	itte	gt
 800171c:	6858      	ldrgt	r0, [r3, #4]
 800171e:	3010      	addgt	r0, #16
 8001720:	2004      	movle	r0, #4
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	2800      	cmp	r0, #0
 8001726:	bf14      	ite	ne
 8001728:	f8d0 a000 	ldrne.w	sl, [r0]
 800172c:	f04f 0a00 	moveq.w	sl, #0
 8001730:	2902      	cmp	r1, #2
 8001732:	bfc6      	itte	gt
 8001734:	6858      	ldrgt	r0, [r3, #4]
 8001736:	f100 041c 	addgt.w	r4, r0, #28
 800173a:	2404      	movle	r4, #4
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	2800      	cmp	r0, #0
 8001740:	bf14      	ite	ne
 8001742:	6806      	ldrne	r6, [r0, #0]
 8001744:	2600      	moveq	r6, #0
 8001746:	2902      	cmp	r1, #2
 8001748:	dd0a      	ble.n	8001760 <forward_conv2d+0x68>
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f113 0118 	adds.w	r1, r3, #24
 8001750:	d006      	beq.n	8001760 <forward_conv2d+0x68>
 8001752:	8b19      	ldrh	r1, [r3, #24]
 8001754:	2901      	cmp	r1, #1
 8001756:	dd03      	ble.n	8001760 <forward_conv2d+0x68>
 8001758:	69d9      	ldr	r1, [r3, #28]
 800175a:	b109      	cbz	r1, 8001760 <forward_conv2d+0x68>
 800175c:	6849      	ldr	r1, [r1, #4]
 800175e:	e000      	b.n	8001762 <forward_conv2d+0x6a>
 8001760:	2100      	movs	r1, #0
 8001762:	b100      	cbz	r0, 8001766 <forward_conv2d+0x6e>
 8001764:	6880      	ldr	r0, [r0, #8]
 8001766:	68d7      	ldr	r7, [r2, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	931b      	str	r3, [sp, #108]	; 0x6c
 800176c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001770:	685c      	ldr	r4, [r3, #4]
 8001772:	9404      	str	r4, [sp, #16]
 8001774:	68dc      	ldr	r4, [r3, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	9314      	str	r3, [sp, #80]	; 0x50
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	931a      	str	r3, [sp, #104]	; 0x68
 800177e:	68bf      	ldr	r7, [r7, #8]
 8001780:	9720      	str	r7, [sp, #128]	; 0x80
 8001782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001784:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001788:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800178a:	971f      	str	r7, [sp, #124]	; 0x7c
 800178c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800178e:	681f      	ldr	r7, [r3, #0]
 8001790:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001796:	9319      	str	r3, [sp, #100]	; 0x64
 8001798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800179a:	9318      	str	r3, [sp, #96]	; 0x60
 800179c:	68f3      	ldr	r3, [r6, #12]
 800179e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80017a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	9312      	str	r3, [sp, #72]	; 0x48
 80017aa:	69ab      	ldr	r3, [r5, #24]
 80017ac:	931e      	str	r3, [sp, #120]	; 0x78
 80017ae:	6992      	ldr	r2, [r2, #24]
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	931d      	str	r3, [sp, #116]	; 0x74
 80017b4:	69b2      	ldr	r2, [r6, #24]
 80017b6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80017ba:	b119      	cbz	r1, 80017c4 <forward_conv2d+0xcc>
 80017bc:	698a      	ldr	r2, [r1, #24]
 80017be:	6893      	ldr	r3, [r2, #8]
 80017c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80017c2:	e001      	b.n	80017c8 <forward_conv2d+0xd0>
 80017c4:	2200      	movs	r2, #0
 80017c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80017c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	9203      	str	r2, [sp, #12]
 80017d0:	69e9      	ldr	r1, [r5, #28]
 80017d2:	b118      	cbz	r0, 80017dc <forward_conv2d+0xe4>
 80017d4:	6981      	ldr	r1, [r0, #24]
 80017d6:	688a      	ldr	r2, [r1, #8]
 80017d8:	9215      	str	r2, [sp, #84]	; 0x54
 80017da:	e005      	b.n	80017e8 <forward_conv2d+0xf0>
 80017dc:	b111      	cbz	r1, 80017e4 <forward_conv2d+0xec>
 80017de:	688a      	ldr	r2, [r1, #8]
 80017e0:	9215      	str	r2, [sp, #84]	; 0x54
 80017e2:	e001      	b.n	80017e8 <forward_conv2d+0xf0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	9315      	str	r3, [sp, #84]	; 0x54
 80017e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017ea:	9102      	str	r1, [sp, #8]
 80017ec:	b920      	cbnz	r0, 80017f8 <forward_conv2d+0x100>
 80017ee:	2100      	movs	r1, #0
 80017f0:	2201      	movs	r2, #1
 80017f2:	9124      	str	r1, [sp, #144]	; 0x90
 80017f4:	9223      	str	r2, [sp, #140]	; 0x8c
 80017f6:	e008      	b.n	800180a <forward_conv2d+0x112>
 80017f8:	6941      	ldr	r1, [r0, #20]
 80017fa:	688a      	ldr	r2, [r1, #8]
 80017fc:	9224      	str	r2, [sp, #144]	; 0x90
 80017fe:	6980      	ldr	r0, [r0, #24]
 8001800:	6841      	ldr	r1, [r0, #4]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f003 fc3a 	bl	800507c <ai_array_get_byte_size>
 8001808:	9023      	str	r0, [sp, #140]	; 0x8c
 800180a:	aa18      	add	r2, sp, #96	; 0x60
 800180c:	6a28      	ldr	r0, [r5, #32]
 800180e:	2800      	cmp	r0, #0
 8001810:	bf12      	itee	ne
 8001812:	9022      	strne	r0, [sp, #136]	; 0x88
 8001814:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002540 <.text_15>
 8001818:	9122      	streq	r1, [sp, #136]	; 0x88
 800181a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800181c:	8813      	ldrh	r3, [r2, #0]
 800181e:	1e48      	subs	r0, r1, #1
 8001820:	1e5b      	subs	r3, r3, #1
 8001822:	aa19      	add	r2, sp, #100	; 0x64
 8001824:	fb03 1100 	mla	r1, r3, r0, r1
 8001828:	9116      	str	r1, [sp, #88]	; 0x58
 800182a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800182c:	8813      	ldrh	r3, [r2, #0]
 800182e:	1e41      	subs	r1, r0, #1
 8001830:	1e5b      	subs	r3, r3, #1
 8001832:	fb03 0001 	mla	r0, r3, r1, r0
 8001836:	901c      	str	r0, [sp, #112]	; 0x70
 8001838:	2200      	movs	r2, #0
 800183a:	69b6      	ldr	r6, [r6, #24]
 800183c:	6831      	ldr	r1, [r6, #0]
 800183e:	11cb      	asrs	r3, r1, #7
 8001840:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001844:	1449      	asrs	r1, r1, #17
 8001846:	f001 010f 	and.w	r1, r1, #15
 800184a:	2000      	movs	r0, #0
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	f00c 0c03 	and.w	ip, ip, #3
 8001854:	2904      	cmp	r1, #4
 8001856:	4683      	mov	fp, r0
 8001858:	fa23 f30c 	lsr.w	r3, r3, ip
 800185c:	bf14      	ite	ne
 800185e:	2908      	cmpne	r1, #8
 8001860:	68f2      	ldreq	r2, [r6, #12]
 8001862:	b1da      	cbz	r2, 800189c <forward_conv2d+0x1a4>
 8001864:	6969      	ldr	r1, [r5, #20]
 8001866:	880d      	ldrh	r5, [r1, #0]
 8001868:	2d04      	cmp	r5, #4
 800186a:	bfa6      	itte	ge
 800186c:	6849      	ldrge	r1, [r1, #4]
 800186e:	3128      	addge	r1, #40	; 0x28
 8001870:	2104      	movlt	r1, #4
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	2900      	cmp	r1, #0
 8001876:	bf1f      	itttt	ne
 8001878:	6808      	ldrne	r0, [r1, #0]
 800187a:	2800      	cmpne	r0, #0
 800187c:	6981      	ldrne	r1, [r0, #24]
 800187e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001882:	6980      	ldr	r0, [r0, #24]
 8001884:	6841      	ldr	r1, [r0, #4]
 8001886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001888:	9101      	str	r1, [sp, #4]
 800188a:	9000      	str	r0, [sp, #0]
 800188c:	4658      	mov	r0, fp
 800188e:	68b1      	ldr	r1, [r6, #8]
 8001890:	f7ff fec8 	bl	8001624 <ai_dict_decompress_f32>
 8001894:	f1bb 0f00 	cmp.w	fp, #0
 8001898:	bf18      	it	ne
 800189a:	46d9      	movne	r9, fp
 800189c:	b2bf      	uxth	r7, r7
 800189e:	427f      	negs	r7, r7
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d073      	beq.n	800198c <forward_conv2d+0x294>
 80018a4:	4622      	mov	r2, r4
 80018a6:	f1c8 0800 	rsb	r8, r8, #0
 80018aa:	9c04      	ldr	r4, [sp, #16]
 80018ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80018b0:	9e02      	ldr	r6, [sp, #8]
 80018b2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80018b6:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 80018ba:	9711      	str	r7, [sp, #68]	; 0x44
 80018bc:	9221      	str	r2, [sp, #132]	; 0x84
 80018be:	9826      	ldr	r0, [sp, #152]	; 0x98
 80018c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80018c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018c6:	9025      	str	r0, [sp, #148]	; 0x94
 80018c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018ca:	4240      	negs	r0, r0
 80018cc:	bfd8      	it	le
 80018ce:	2000      	movle	r0, #0
 80018d0:	1a89      	subs	r1, r1, r2
 80018d2:	4299      	cmp	r1, r3
 80018d4:	bf3d      	ittte	cc
 80018d6:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018d8:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018da:	1a51      	subcc	r1, r2, r1
 80018dc:	4619      	movcs	r1, r3
 80018de:	910a      	str	r1, [sp, #40]	; 0x28
 80018e0:	9009      	str	r0, [sp, #36]	; 0x24
 80018e2:	9402      	str	r4, [sp, #8]
 80018e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018ec:	9008      	str	r0, [sp, #32]
 80018ee:	9107      	str	r1, [sp, #28]
 80018f0:	b212      	sxth	r2, r2
 80018f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80018fa:	9006      	str	r0, [sp, #24]
 80018fc:	9105      	str	r1, [sp, #20]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001902:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001904:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001906:	930e      	str	r3, [sp, #56]	; 0x38
 8001908:	920d      	str	r2, [sp, #52]	; 0x34
 800190a:	9004      	str	r0, [sp, #16]
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001910:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001914:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001916:	930c      	str	r3, [sp, #48]	; 0x30
 8001918:	920b      	str	r2, [sp, #44]	; 0x2c
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001922:	4659      	mov	r1, fp
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fa43 	bl	8000db0 <ai_conv2d_stripe_f32>
 800192a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192c:	b310      	cbz	r0, 8001974 <forward_conv2d+0x27c>
 800192e:	f8cd a000 	str.w	sl, [sp]
 8001932:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001934:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001936:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800193a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800193e:	4682      	mov	sl, r0
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	6981      	ldr	r1, [r0, #24]
 8001944:	f8c1 b008 	str.w	fp, [r1, #8]
 8001948:	462b      	mov	r3, r5
 800194a:	4622      	mov	r2, r4
 800194c:	4608      	mov	r0, r1
 800194e:	47c8      	blx	r9
 8001950:	443d      	add	r5, r7
 8001952:	1ba8      	subs	r0, r5, r6
 8001954:	4540      	cmp	r0, r8
 8001956:	bfa8      	it	ge
 8001958:	4635      	movge	r5, r6
 800195a:	f1ba 0a01 	subs.w	sl, sl, #1
 800195e:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001962:	d1ed      	bne.n	8001940 <forward_conv2d+0x248>
 8001964:	f8dd a000 	ldr.w	sl, [sp]
 8001968:	9515      	str	r5, [sp, #84]	; 0x54
 800196a:	9724      	str	r7, [sp, #144]	; 0x90
 800196c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001970:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001974:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001978:	68c1      	ldr	r1, [r0, #12]
 800197a:	6081      	str	r1, [r0, #8]
 800197c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800197e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001980:	1808      	adds	r0, r1, r0
 8001982:	9011      	str	r0, [sp, #68]	; 0x44
 8001984:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001986:	1e40      	subs	r0, r0, #1
 8001988:	9021      	str	r0, [sp, #132]	; 0x84
 800198a:	d198      	bne.n	80018be <forward_conv2d+0x1c6>
 800198c:	b029      	add	sp, #164	; 0xa4
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001994 <forward_conv2d_nl_pool>:
 8001994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	b0b9      	sub	sp, #228	; 0xe4
 800199c:	6963      	ldr	r3, [r4, #20]
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	2900      	cmp	r1, #0
 80019a2:	bf1a      	itte	ne
 80019a4:	6858      	ldrne	r0, [r3, #4]
 80019a6:	1d00      	addne	r0, r0, #4
 80019a8:	2004      	moveq	r0, #4
 80019aa:	6800      	ldr	r0, [r0, #0]
 80019ac:	2800      	cmp	r0, #0
 80019ae:	bf14      	ite	ne
 80019b0:	6802      	ldrne	r2, [r0, #0]
 80019b2:	2200      	moveq	r2, #0
 80019b4:	2901      	cmp	r1, #1
 80019b6:	bfc6      	itte	gt
 80019b8:	6858      	ldrgt	r0, [r3, #4]
 80019ba:	3010      	addgt	r0, #16
 80019bc:	2004      	movle	r0, #4
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	bf14      	ite	ne
 80019c4:	f8d0 9000 	ldrne.w	r9, [r0]
 80019c8:	f04f 0900 	moveq.w	r9, #0
 80019cc:	2902      	cmp	r1, #2
 80019ce:	bfc6      	itte	gt
 80019d0:	6858      	ldrgt	r0, [r3, #4]
 80019d2:	f100 071c 	addgt.w	r7, r0, #28
 80019d6:	2704      	movle	r7, #4
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	2800      	cmp	r0, #0
 80019dc:	bf14      	ite	ne
 80019de:	6806      	ldrne	r6, [r0, #0]
 80019e0:	2600      	moveq	r6, #0
 80019e2:	2902      	cmp	r1, #2
 80019e4:	dd0a      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f113 0118 	adds.w	r1, r3, #24
 80019ec:	d006      	beq.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019ee:	8b19      	ldrh	r1, [r3, #24]
 80019f0:	2901      	cmp	r1, #1
 80019f2:	dd03      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019f4:	69d9      	ldr	r1, [r3, #28]
 80019f6:	b109      	cbz	r1, 80019fc <forward_conv2d_nl_pool+0x68>
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	e000      	b.n	80019fe <forward_conv2d_nl_pool+0x6a>
 80019fc:	2100      	movs	r1, #0
 80019fe:	b100      	cbz	r0, 8001a02 <forward_conv2d_nl_pool+0x6e>
 8001a00:	6880      	ldr	r0, [r0, #8]
 8001a02:	68d7      	ldr	r7, [r2, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	9323      	str	r3, [sp, #140]	; 0x8c
 8001a08:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8001a10:	68eb      	ldr	r3, [r5, #12]
 8001a12:	9322      	str	r3, [sp, #136]	; 0x88
 8001a14:	68ab      	ldr	r3, [r5, #8]
 8001a16:	9321      	str	r3, [sp, #132]	; 0x84
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001a1c:	68bf      	ldr	r7, [r7, #8]
 8001a1e:	972d      	str	r7, [sp, #180]	; 0xb4
 8001a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a22:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001a26:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a28:	9720      	str	r7, [sp, #128]	; 0x80
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	881f      	ldrh	r7, [r3, #0]
 8001a2e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a32:	689d      	ldr	r5, [r3, #8]
 8001a34:	69a3      	ldr	r3, [r4, #24]
 8001a36:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a3e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a40:	68f3      	ldr	r3, [r6, #12]
 8001a42:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a46:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	9319      	str	r3, [sp, #100]	; 0x64
 8001a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a50:	932b      	str	r3, [sp, #172]	; 0xac
 8001a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a54:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a58:	9311      	str	r3, [sp, #68]	; 0x44
 8001a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a5c:	f8d3 a000 	ldr.w	sl, [r3]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a64:	6992      	ldr	r2, [r2, #24]
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6a:	69b2      	ldr	r2, [r6, #24]
 8001a6c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a70:	b119      	cbz	r1, 8001a7a <forward_conv2d_nl_pool+0xe6>
 8001a72:	698a      	ldr	r2, [r1, #24]
 8001a74:	6893      	ldr	r3, [r2, #8]
 8001a76:	931d      	str	r3, [sp, #116]	; 0x74
 8001a78:	e001      	b.n	8001a7e <forward_conv2d_nl_pool+0xea>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8001a7e:	69e1      	ldr	r1, [r4, #28]
 8001a80:	b118      	cbz	r0, 8001a8a <forward_conv2d_nl_pool+0xf6>
 8001a82:	6981      	ldr	r1, [r0, #24]
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	921c      	str	r2, [sp, #112]	; 0x70
 8001a88:	e005      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a8a:	b111      	cbz	r1, 8001a92 <forward_conv2d_nl_pool+0xfe>
 8001a8c:	688a      	ldr	r2, [r1, #8]
 8001a8e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a90:	e001      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a92:	2300      	movs	r3, #0
 8001a94:	931c      	str	r3, [sp, #112]	; 0x70
 8001a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a98:	9102      	str	r1, [sp, #8]
 8001a9a:	b920      	cbnz	r0, 8001aa6 <forward_conv2d_nl_pool+0x112>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	9116      	str	r1, [sp, #88]	; 0x58
 8001aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8001aa4:	e008      	b.n	8001ab8 <forward_conv2d_nl_pool+0x124>
 8001aa6:	6941      	ldr	r1, [r0, #20]
 8001aa8:	688a      	ldr	r2, [r1, #8]
 8001aaa:	9216      	str	r2, [sp, #88]	; 0x58
 8001aac:	6980      	ldr	r0, [r0, #24]
 8001aae:	6841      	ldr	r1, [r0, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f003 fae3 	bl	800507c <ai_array_get_byte_size>
 8001ab6:	9015      	str	r0, [sp, #84]	; 0x54
 8001ab8:	aa1e      	add	r2, sp, #120	; 0x78
 8001aba:	6a20      	ldr	r0, [r4, #32]
 8001abc:	2800      	cmp	r0, #0
 8001abe:	bf12      	itee	ne
 8001ac0:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001ac2:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002540 <.text_15>
 8001ac6:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001ac8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001acc:	8813      	ldrh	r3, [r2, #0]
 8001ace:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ad0:	1e5b      	subs	r3, r3, #1
 8001ad2:	1e41      	subs	r1, r0, #1
 8001ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ad6:	fb03 0001 	mla	r0, r3, r1, r0
 8001ada:	9018      	str	r0, [sp, #96]	; 0x60
 8001adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001ade:	8813      	ldrh	r3, [r2, #0]
 8001ae0:	1e48      	subs	r0, r1, #1
 8001ae2:	1e5b      	subs	r3, r3, #1
 8001ae4:	fb03 1100 	mla	r1, r3, r0, r1
 8001ae8:	9126      	str	r1, [sp, #152]	; 0x98
 8001aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001aee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001af0:	9112      	str	r1, [sp, #72]	; 0x48
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001af8:	fa12 f085 	uxtah	r0, r2, r5
 8001afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b00:	1c49      	adds	r1, r1, #1
 8001b02:	9114      	str	r1, [sp, #80]	; 0x50
 8001b04:	2000      	movs	r0, #0
 8001b06:	69b6      	ldr	r6, [r6, #24]
 8001b08:	6831      	ldr	r1, [r6, #0]
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	11cb      	asrs	r3, r1, #7
 8001b10:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001b14:	1449      	asrs	r1, r1, #17
 8001b16:	f001 010f 	and.w	r1, r1, #15
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	f00c 0c03 	and.w	ip, ip, #3
 8001b22:	2904      	cmp	r1, #4
 8001b24:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b28:	bf14      	ite	ne
 8001b2a:	2908      	cmpne	r1, #8
 8001b2c:	68f2      	ldreq	r2, [r6, #12]
 8001b2e:	b1da      	cbz	r2, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b30:	6961      	ldr	r1, [r4, #20]
 8001b32:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b36:	f1bc 0f04 	cmp.w	ip, #4
 8001b3a:	bfa6      	itte	ge
 8001b3c:	6849      	ldrge	r1, [r1, #4]
 8001b3e:	3128      	addge	r1, #40	; 0x28
 8001b40:	2104      	movlt	r1, #4
 8001b42:	6809      	ldr	r1, [r1, #0]
 8001b44:	2900      	cmp	r1, #0
 8001b46:	bf1f      	itttt	ne
 8001b48:	6848      	ldrne	r0, [r1, #4]
 8001b4a:	2800      	cmpne	r0, #0
 8001b4c:	6981      	ldrne	r1, [r0, #24]
 8001b4e:	688d      	ldrne	r5, [r1, #8]
 8001b50:	6980      	ldr	r0, [r0, #24]
 8001b52:	6841      	ldr	r1, [r0, #4]
 8001b54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b56:	9101      	str	r1, [sp, #4]
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	68b1      	ldr	r1, [r6, #8]
 8001b5e:	f7ff fd61 	bl	8001624 <ai_dict_decompress_f32>
 8001b62:	b10d      	cbz	r5, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b64:	4628      	mov	r0, r5
 8001b66:	e000      	b.n	8001b6a <forward_conv2d_nl_pool+0x1d6>
 8001b68:	4658      	mov	r0, fp
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b70:	881c      	ldrh	r4, [r3, #0]
 8001b72:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b76:	2600      	movs	r6, #0
 8001b78:	2c04      	cmp	r4, #4
 8001b7a:	bfa6      	itte	ge
 8001b7c:	685b      	ldrge	r3, [r3, #4]
 8001b7e:	3328      	addge	r3, #40	; 0x28
 8001b80:	2304      	movlt	r3, #4
 8001b82:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	681d      	ldrne	r5, [r3, #0]
 8001b8e:	2500      	moveq	r5, #0
 8001b90:	427f      	negs	r7, r7
 8001b92:	69ac      	ldr	r4, [r5, #24]
 8001b94:	68eb      	ldr	r3, [r5, #12]
 8001b96:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b9e:	435c      	muls	r4, r3
 8001ba0:	fb0c f404 	mul.w	r4, ip, r4
 8001ba4:	9437      	str	r4, [sp, #220]	; 0xdc
 8001ba6:	fa0f f28a 	sxth.w	r2, sl
 8001baa:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bae:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001bb2:	9436      	str	r4, [sp, #216]	; 0xd8
 8001bb4:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001bb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bba:	fb0c f404 	mul.w	r4, ip, r4
 8001bbe:	9435      	str	r4, [sp, #212]	; 0xd4
 8001bc0:	f1c8 0800 	rsb	r8, r8, #0
 8001bc4:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bc8:	9434      	str	r4, [sp, #208]	; 0xd0
 8001bca:	4691      	mov	r9, r2
 8001bcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bce:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001bd2:	435c      	muls	r4, r3
 8001bd4:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bd6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	f000 812e 	beq.w	8001e3a <forward_conv2d_nl_pool+0x4a6>
 8001bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001be2:	9038      	str	r0, [sp, #224]	; 0xe0
 8001be4:	9125      	str	r1, [sp, #148]	; 0x94
 8001be6:	4614      	mov	r4, r2
 8001be8:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bea:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bec:	9324      	str	r3, [sp, #144]	; 0x90
 8001bee:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dd6a      	ble.n	8001ccc <forward_conv2d_nl_pool+0x338>
 8001bf6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bf8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bfe:	9031      	str	r0, [sp, #196]	; 0xc4
 8001c00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001c02:	4240      	negs	r0, r0
 8001c04:	bfd8      	it	le
 8001c06:	2000      	movle	r0, #0
 8001c08:	1a89      	subs	r1, r1, r2
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	bf3d      	ittte	cc
 8001c0e:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001c10:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001c12:	1a51      	subcc	r1, r2, r1
 8001c14:	4619      	movcs	r1, r3
 8001c16:	9009      	str	r0, [sp, #36]	; 0x24
 8001c18:	910a      	str	r1, [sp, #40]	; 0x28
 8001c1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001c1c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001c24:	9008      	str	r0, [sp, #32]
 8001c26:	9107      	str	r1, [sp, #28]
 8001c28:	b212      	sxth	r2, r2
 8001c2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c2e:	9006      	str	r0, [sp, #24]
 8001c30:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c32:	9105      	str	r1, [sp, #20]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c3c:	9004      	str	r0, [sp, #16]
 8001c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c40:	920d      	str	r2, [sp, #52]	; 0x34
 8001c42:	9103      	str	r1, [sp, #12]
 8001c44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c4a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c4c:	9002      	str	r0, [sp, #8]
 8001c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c50:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c52:	9101      	str	r1, [sp, #4]
 8001c54:	4659      	mov	r1, fp
 8001c56:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c5a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c5c:	9000      	str	r0, [sp, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f8a6 	bl	8000db0 <ai_conv2d_stripe_f32>
 8001c64:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c66:	b350      	cbz	r0, 8001cbe <forward_conv2d_nl_pool+0x32a>
 8001c68:	f8cd a008 	str.w	sl, [sp, #8]
 8001c6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c6e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c70:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c74:	4682      	mov	sl, r0
 8001c76:	69a9      	ldr	r1, [r5, #24]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c7e:	4632      	mov	r2, r6
 8001c80:	4608      	mov	r0, r1
 8001c82:	47c0      	blx	r8
 8001c84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c86:	9902      	ldr	r1, [sp, #8]
 8001c88:	4407      	add	r7, r0
 8001c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c8c:	1a79      	subs	r1, r7, r1
 8001c8e:	4281      	cmp	r1, r0
 8001c90:	69a8      	ldr	r0, [r5, #24]
 8001c92:	6841      	ldr	r1, [r0, #4]
 8001c94:	68c0      	ldr	r0, [r0, #12]
 8001c96:	bfa8      	it	ge
 8001c98:	9f02      	ldrge	r7, [sp, #8]
 8001c9a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c9e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001ca2:	4593      	cmp	fp, r2
 8001ca4:	d302      	bcc.n	8001cac <forward_conv2d_nl_pool+0x318>
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	448b      	add	fp, r1
 8001cac:	f1ba 0a01 	subs.w	sl, sl, #1
 8001cb0:	d1e1      	bne.n	8001c76 <forward_conv2d_nl_pool+0x2e2>
 8001cb2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001cb6:	9610      	str	r6, [sp, #64]	; 0x40
 8001cb8:	971c      	str	r7, [sp, #112]	; 0x70
 8001cba:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001cbe:	69a8      	ldr	r0, [r5, #24]
 8001cc0:	68c1      	ldr	r1, [r0, #12]
 8001cc2:	6081      	str	r1, [r0, #8]
 8001cc4:	f109 0001 	add.w	r0, r9, #1
 8001cc8:	fa0f f980 	sxth.w	r9, r0
 8001ccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001cce:	1e40      	subs	r0, r0, #1
 8001cd0:	9014      	str	r0, [sp, #80]	; 0x50
 8001cd2:	d56b      	bpl.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001cd4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cd6:	fb00 f009 	mul.w	r0, r0, r9
 8001cda:	0080      	lsls	r0, r0, #2
 8001cdc:	4240      	negs	r0, r0
 8001cde:	eb0b 0200 	add.w	r2, fp, r0
 8001ce2:	69a8      	ldr	r0, [r5, #24]
 8001ce4:	68c3      	ldr	r3, [r0, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	bf3c      	itt	cc
 8001cea:	6847      	ldrcc	r7, [r0, #4]
 8001cec:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	d236      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cf6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cf8:	45b1      	cmp	r9, r6
 8001cfa:	d033      	beq.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cfc:	6846      	ldr	r6, [r0, #4]
 8001cfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f080 802e 	bcs.w	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d08:	ed92 0a00 	vldr	s0, [r2]
 8001d0c:	ed8b 0a00 	vstr	s0, [fp]
 8001d10:	68c3      	ldr	r3, [r0, #12]
 8001d12:	6846      	ldr	r6, [r0, #4]
 8001d14:	1d12      	adds	r2, r2, #4
 8001d16:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d1a:	42ba      	cmp	r2, r7
 8001d1c:	d222      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d1e:	edd2 0a00 	vldr	s1, [r2]
 8001d22:	edcb 0a01 	vstr	s1, [fp, #4]
 8001d26:	68c3      	ldr	r3, [r0, #12]
 8001d28:	6846      	ldr	r6, [r0, #4]
 8001d2a:	1d12      	adds	r2, r2, #4
 8001d2c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d30:	42ba      	cmp	r2, r7
 8001d32:	d217      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d34:	ed92 0a00 	vldr	s0, [r2]
 8001d38:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d3c:	68c3      	ldr	r3, [r0, #12]
 8001d3e:	6846      	ldr	r6, [r0, #4]
 8001d40:	1d12      	adds	r2, r2, #4
 8001d42:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d46:	42ba      	cmp	r2, r7
 8001d48:	d20c      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d4a:	edd2 0a00 	vldr	s1, [r2]
 8001d4e:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d52:	68c3      	ldr	r3, [r0, #12]
 8001d54:	6846      	ldr	r6, [r0, #4]
 8001d56:	1d12      	adds	r2, r2, #4
 8001d58:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d5c:	42ba      	cmp	r2, r7
 8001d5e:	f10b 0b10 	add.w	fp, fp, #16
 8001d62:	d3d1      	bcc.n	8001d08 <forward_conv2d_nl_pool+0x374>
 8001d64:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d68:	189a      	adds	r2, r3, r2
 8001d6a:	eba2 0209 	sub.w	r2, r2, r9
 8001d6e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d74:	444a      	add	r2, r9
 8001d76:	fa0f f982 	sxth.w	r9, r2
 8001d7a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d7e:	68c1      	ldr	r1, [r0, #12]
 8001d80:	6842      	ldr	r2, [r0, #4]
 8001d82:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d86:	459b      	cmp	fp, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	d30f      	bcc.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	008a      	lsls	r2, r1, #2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4493      	add	fp, r2
 8001d94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d98:	458b      	cmp	fp, r1
 8001d9a:	bf24      	itt	cs
 8001d9c:	4493      	addcs	fp, r2
 8001d9e:	458b      	cmpcs	fp, r1
 8001da0:	bf21      	itttt	cs
 8001da2:	4493      	addcs	fp, r2
 8001da4:	458b      	cmpcs	fp, r1
 8001da6:	4493      	addcs	fp, r2
 8001da8:	458b      	cmpcs	fp, r1
 8001daa:	d2ef      	bcs.n	8001d8c <forward_conv2d_nl_pool+0x3f8>
 8001dac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001dae:	4581      	cmp	r9, r0
 8001db0:	d339      	bcc.n	8001e26 <forward_conv2d_nl_pool+0x492>
 8001db2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001db8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001dba:	eba9 0001 	sub.w	r0, r9, r1
 8001dbe:	fa0f f980 	sxth.w	r9, r0
 8001dc2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001dc4:	1c40      	adds	r0, r0, #1
 8001dc6:	902e      	str	r0, [sp, #184]	; 0xb8
 8001dc8:	2101      	movs	r1, #1
 8001dca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dcc:	9008      	str	r0, [sp, #32]
 8001dce:	9107      	str	r1, [sp, #28]
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001dd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001dd6:	9206      	str	r2, [sp, #24]
 8001dd8:	b280      	uxth	r0, r0
 8001dda:	9005      	str	r0, [sp, #20]
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001de2:	9104      	str	r1, [sp, #16]
 8001de4:	b280      	uxth	r0, r0
 8001de6:	b2a1      	uxth	r1, r4
 8001de8:	9002      	str	r0, [sp, #8]
 8001dea:	9103      	str	r1, [sp, #12]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001df0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001df2:	b280      	uxth	r0, r0
 8001df4:	b289      	uxth	r1, r1
 8001df6:	9000      	str	r0, [sp, #0]
 8001df8:	9101      	str	r1, [sp, #4]
 8001dfa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dfc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dfe:	1a12      	subs	r2, r2, r0
 8001e00:	69a8      	ldr	r0, [r5, #24]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	b289      	uxth	r1, r1
 8001e06:	47b0      	blx	r6
 8001e08:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e0a:	6881      	ldr	r1, [r0, #8]
 8001e0c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001e0e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001e12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e14:	608a      	str	r2, [r1, #8]
 8001e16:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001e18:	1a20      	subs	r0, r4, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	bfc3      	ittte	gt
 8001e1e:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001e20:	1a24      	subgt	r4, r4, r0
 8001e22:	b224      	sxthgt	r4, r4
 8001e24:	2400      	movle	r4, #0
 8001e26:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e2a:	1808      	adds	r0, r1, r0
 8001e2c:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e30:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e32:	4288      	cmp	r0, r1
 8001e34:	f4ff aedc 	bcc.w	8001bf0 <forward_conv2d_nl_pool+0x25c>
 8001e38:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e3a:	69a8      	ldr	r0, [r5, #24]
 8001e3c:	68c2      	ldr	r2, [r0, #12]
 8001e3e:	6082      	str	r2, [r0, #8]
 8001e40:	68c8      	ldr	r0, [r1, #12]
 8001e42:	6088      	str	r0, [r1, #8]
 8001e44:	b039      	add	sp, #228	; 0xe4
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e4c <forward_dense>:
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b081      	sub	sp, #4
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b088      	sub	sp, #32
 8001e58:	6944      	ldr	r4, [r0, #20]
 8001e5a:	8820      	ldrh	r0, [r4, #0]
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	bf1a      	itte	ne
 8001e60:	6861      	ldrne	r1, [r4, #4]
 8001e62:	1d09      	addne	r1, r1, #4
 8001e64:	2104      	moveq	r1, #4
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	680a      	ldrne	r2, [r1, #0]
 8001e6e:	2200      	moveq	r2, #0
 8001e70:	2802      	cmp	r0, #2
 8001e72:	bfa6      	itte	ge
 8001e74:	6861      	ldrge	r1, [r4, #4]
 8001e76:	3110      	addge	r1, #16
 8001e78:	2104      	movlt	r1, #4
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	680f      	ldrne	r7, [r1, #0]
 8001e82:	2700      	moveq	r7, #0
 8001e84:	2802      	cmp	r0, #2
 8001e86:	bfc6      	itte	gt
 8001e88:	6861      	ldrgt	r1, [r4, #4]
 8001e8a:	311c      	addgt	r1, #28
 8001e8c:	2104      	movle	r1, #4
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	2900      	cmp	r1, #0
 8001e92:	bf14      	ite	ne
 8001e94:	680b      	ldrne	r3, [r1, #0]
 8001e96:	2300      	moveq	r3, #0
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	dd0b      	ble.n	8001eb4 <forward_dense+0x68>
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	f111 0018 	adds.w	r0, r1, #24
 8001ea2:	d007      	beq.n	8001eb4 <forward_dense+0x68>
 8001ea4:	8b08      	ldrh	r0, [r1, #24]
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	db04      	blt.n	8001eb4 <forward_dense+0x68>
 8001eaa:	69c8      	ldr	r0, [r1, #28]
 8001eac:	b110      	cbz	r0, 8001eb4 <forward_dense+0x68>
 8001eae:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001eb2:	e001      	b.n	8001eb8 <forward_dense+0x6c>
 8001eb4:	f04f 0a00 	mov.w	sl, #0
 8001eb8:	68d0      	ldr	r0, [r2, #12]
 8001eba:	6844      	ldr	r4, [r0, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	6845      	ldr	r5, [r0, #4]
 8001ec0:	6881      	ldr	r1, [r0, #8]
 8001ec2:	68c0      	ldr	r0, [r0, #12]
 8001ec4:	699e      	ldr	r6, [r3, #24]
 8001ec6:	69bf      	ldr	r7, [r7, #24]
 8001ec8:	f8d6 e000 	ldr.w	lr, [r6]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	68bf      	ldr	r7, [r7, #8]
 8001ed0:	4341      	muls	r1, r0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001ed8:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001edc:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001ee0:	f00e 0e0f 	and.w	lr, lr, #15
 8001ee4:	f1be 0f04 	cmp.w	lr, #4
 8001ee8:	bf14      	ite	ne
 8001eea:	f1be 0f08 	cmpne.w	lr, #8
 8001eee:	68f0      	ldreq	r0, [r6, #12]
 8001ef0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ef4:	f008 0803 	and.w	r8, r8, #3
 8001ef8:	695e      	ldr	r6, [r3, #20]
 8001efa:	6876      	ldr	r6, [r6, #4]
 8001efc:	fa29 f908 	lsr.w	r9, r9, r8
 8001f00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001f04:	2900      	cmp	r1, #0
 8001f06:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001f0a:	f000 80ea 	beq.w	80020e2 <forward_dense+0x296>
 8001f0e:	9307      	str	r3, [sp, #28]
 8001f10:	f8cd a014 	str.w	sl, [sp, #20]
 8001f14:	9506      	str	r5, [sp, #24]
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	9104      	str	r1, [sp, #16]
 8001f1a:	9907      	ldr	r1, [sp, #28]
 8001f1c:	698a      	ldr	r2, [r1, #24]
 8001f1e:	9905      	ldr	r1, [sp, #20]
 8001f20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	bf1a      	itte	ne
 8001f2a:	698a      	ldrne	r2, [r1, #24]
 8001f2c:	6892      	ldrne	r2, [r2, #8]
 8001f2e:	2200      	moveq	r2, #0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80ab 	bne.w	800208c <forward_dense+0x240>
 8001f36:	429f      	cmp	r7, r3
 8001f38:	f080 80c7 	bcs.w	80020ca <forward_dense+0x27e>
 8001f3c:	9003      	str	r0, [sp, #12]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf0e      	itee	eq
 8001f42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020f0 <.text_12>
 8001f46:	ed92 0a00 	vldrne	s0, [r2]
 8001f4a:	1d12      	addne	r2, r2, #4
 8001f4c:	2c04      	cmp	r4, #4
 8001f4e:	4620      	mov	r0, r4
 8001f50:	46c6      	mov	lr, r8
 8001f52:	46dc      	mov	ip, fp
 8001f54:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020f0 <.text_12>
 8001f58:	d35d      	bcc.n	8002016 <forward_dense+0x1ca>
 8001f5a:	08a1      	lsrs	r1, r4, #2
 8001f5c:	07cd      	lsls	r5, r1, #31
 8001f5e:	d51c      	bpl.n	8001f9a <forward_dense+0x14e>
 8001f60:	ed9c 4a00 	vldr	s8, [ip]
 8001f64:	edde 4a00 	vldr	s9, [lr]
 8001f68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f74:	edde 2a02 	vldr	s5, [lr, #8]
 8001f78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f90:	f10e 0e10 	add.w	lr, lr, #16
 8001f94:	f10c 0c10 	add.w	ip, ip, #16
 8001f98:	1f00      	subs	r0, r0, #4
 8001f9a:	0849      	lsrs	r1, r1, #1
 8001f9c:	f000 803b 	beq.w	8002016 <forward_dense+0x1ca>
 8001fa0:	edde 4a00 	vldr	s9, [lr]
 8001fa4:	edde 3a01 	vldr	s7, [lr, #4]
 8001fa8:	edde 2a02 	vldr	s5, [lr, #8]
 8001fac:	edde 1a03 	vldr	s3, [lr, #12]
 8001fb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001fb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001fb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001fbc:	ed9c 4a00 	vldr	s8, [ip]
 8001fc0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001fc4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fc8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fcc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fd0:	f10e 0510 	add.w	r5, lr, #16
 8001fd4:	f10c 0c10 	add.w	ip, ip, #16
 8001fd8:	edd5 8a00 	vldr	s17, [r5]
 8001fdc:	ed9c 8a00 	vldr	s16, [ip]
 8001fe0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fe4:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fe8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fec:	edd5 6a02 	vldr	s13, [r5, #8]
 8001ff0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ff4:	edd5 5a03 	vldr	s11, [r5, #12]
 8001ff8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ffc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002000:	3808      	subs	r0, #8
 8002002:	ee46 0a26 	vmla.f32	s1, s12, s13
 8002006:	1e49      	subs	r1, r1, #1
 8002008:	ee45 0a25 	vmla.f32	s1, s10, s11
 800200c:	f105 0e10 	add.w	lr, r5, #16
 8002010:	f10c 0c10 	add.w	ip, ip, #16
 8002014:	d1c4      	bne.n	8001fa0 <forward_dense+0x154>
 8002016:	b378      	cbz	r0, 8002078 <forward_dense+0x22c>
 8002018:	f010 0103 	ands.w	r1, r0, #3
 800201c:	f000 800c 	beq.w	8002038 <forward_dense+0x1ec>
 8002020:	ed9c 1a00 	vldr	s2, [ip]
 8002024:	edde 1a00 	vldr	s3, [lr]
 8002028:	1e49      	subs	r1, r1, #1
 800202a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800202e:	f10e 0e04 	add.w	lr, lr, #4
 8002032:	f10c 0c04 	add.w	ip, ip, #4
 8002036:	d1f3      	bne.n	8002020 <forward_dense+0x1d4>
 8002038:	0880      	lsrs	r0, r0, #2
 800203a:	d01d      	beq.n	8002078 <forward_dense+0x22c>
 800203c:	ed9c 2a00 	vldr	s4, [ip]
 8002040:	ed9e 1a00 	vldr	s2, [lr]
 8002044:	eddc 1a01 	vldr	s3, [ip, #4]
 8002048:	edde 2a01 	vldr	s5, [lr, #4]
 800204c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002050:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002054:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002058:	ed9e 1a02 	vldr	s2, [lr, #8]
 800205c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002060:	edde 2a03 	vldr	s5, [lr, #12]
 8002064:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002068:	1e40      	subs	r0, r0, #1
 800206a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800206e:	f10e 0e10 	add.w	lr, lr, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	d1e1      	bne.n	800203c <forward_dense+0x1f0>
 8002078:	ee30 0a20 	vadd.f32	s0, s0, s1
 800207c:	ed87 0a00 	vstr	s0, [r7]
 8002080:	1d3f      	adds	r7, r7, #4
 8002082:	429f      	cmp	r7, r3
 8002084:	44b3      	add	fp, r6
 8002086:	f4ff af5a 	bcc.w	8001f3e <forward_dense+0xf2>
 800208a:	e01d      	b.n	80020c8 <forward_dense+0x27c>
 800208c:	429f      	cmp	r7, r3
 800208e:	d21c      	bcs.n	80020ca <forward_dense+0x27e>
 8002090:	469a      	mov	sl, r3
 8002092:	9003      	str	r0, [sp, #12]
 8002094:	4615      	mov	r5, r2
 8002096:	2d00      	cmp	r5, #0
 8002098:	bf14      	ite	ne
 800209a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800209e:	2000      	moveq	r0, #0
 80020a0:	9002      	str	r0, [sp, #8]
 80020a2:	f1b9 0f04 	cmp.w	r9, #4
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4643      	mov	r3, r8
 80020ac:	4659      	mov	r1, fp
 80020ae:	a802      	add	r0, sp, #8
 80020b0:	d102      	bne.n	80020b8 <forward_dense+0x26c>
 80020b2:	f7ff fa03 	bl	80014bc <ai_dict4_dot_array_f32>
 80020b6:	e001      	b.n	80020bc <forward_dense+0x270>
 80020b8:	f7ff f950 	bl	800135c <ai_dict8_dot_array_f32>
 80020bc:	9802      	ldr	r0, [sp, #8]
 80020be:	f847 0b04 	str.w	r0, [r7], #4
 80020c2:	4557      	cmp	r7, sl
 80020c4:	44b3      	add	fp, r6
 80020c6:	d3e6      	bcc.n	8002096 <forward_dense+0x24a>
 80020c8:	9803      	ldr	r0, [sp, #12]
 80020ca:	9901      	ldr	r1, [sp, #4]
 80020cc:	9a06      	ldr	r2, [sp, #24]
 80020ce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020d2:	9904      	ldr	r1, [sp, #16]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	1e49      	subs	r1, r1, #1
 80020d8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020dc:	9104      	str	r1, [sp, #16]
 80020de:	f47f af1c 	bne.w	8001f1a <forward_dense+0xce>
 80020e2:	b008      	add	sp, #32
 80020e4:	ecbd 8b02 	vpop	{d8}
 80020e8:	b001      	add	sp, #4
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020f0 <.text_12>:
 80020f0:	00000000 	.word	0x00000000

080020f4 <forward_gemm>:
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	4604      	mov	r4, r0
 80020fa:	b091      	sub	sp, #68	; 0x44
 80020fc:	6961      	ldr	r1, [r4, #20]
 80020fe:	8808      	ldrh	r0, [r1, #0]
 8002100:	2800      	cmp	r0, #0
 8002102:	bf1a      	itte	ne
 8002104:	6848      	ldrne	r0, [r1, #4]
 8002106:	1d02      	addne	r2, r0, #4
 8002108:	2204      	moveq	r2, #4
 800210a:	460b      	mov	r3, r1
 800210c:	6810      	ldr	r0, [r2, #0]
 800210e:	8819      	ldrh	r1, [r3, #0]
 8002110:	2800      	cmp	r0, #0
 8002112:	bf14      	ite	ne
 8002114:	6805      	ldrne	r5, [r0, #0]
 8002116:	2500      	moveq	r5, #0
 8002118:	2900      	cmp	r1, #0
 800211a:	bf1d      	ittte	ne
 800211c:	6858      	ldrne	r0, [r3, #4]
 800211e:	2800      	cmpne	r0, #0
 8002120:	f8b0 c000 	ldrhne.w	ip, [r0]
 8002124:	f04f 0c00 	moveq.w	ip, #0
 8002128:	2902      	cmp	r1, #2
 800212a:	bfa6      	itte	ge
 800212c:	6858      	ldrge	r0, [r3, #4]
 800212e:	3010      	addge	r0, #16
 8002130:	2004      	movlt	r0, #4
 8002132:	6800      	ldr	r0, [r0, #0]
 8002134:	2800      	cmp	r0, #0
 8002136:	bf14      	ite	ne
 8002138:	6801      	ldrne	r1, [r0, #0]
 800213a:	2100      	moveq	r1, #0
 800213c:	2600      	movs	r6, #0
 800213e:	f1bc 0f03 	cmp.w	ip, #3
 8002142:	46b2      	mov	sl, r6
 8002144:	d107      	bne.n	8002156 <forward_gemm+0x62>
 8002146:	6810      	ldr	r0, [r2, #0]
 8002148:	2800      	cmp	r0, #0
 800214a:	d026      	beq.n	800219a <forward_gemm+0xa6>
 800214c:	6846      	ldr	r6, [r0, #4]
 800214e:	d024      	beq.n	800219a <forward_gemm+0xa6>
 8002150:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002154:	e021      	b.n	800219a <forward_gemm+0xa6>
 8002156:	f1bc 0f02 	cmp.w	ip, #2
 800215a:	d10d      	bne.n	8002178 <forward_gemm+0x84>
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	b100      	cbz	r0, 8002162 <forward_gemm+0x6e>
 8002160:	6846      	ldr	r6, [r0, #4]
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	2a02      	cmp	r2, #2
 8002166:	bfc6      	itte	gt
 8002168:	6858      	ldrgt	r0, [r3, #4]
 800216a:	301c      	addgt	r0, #28
 800216c:	2004      	movle	r0, #4
 800216e:	6800      	ldr	r0, [r0, #0]
 8002170:	b198      	cbz	r0, 800219a <forward_gemm+0xa6>
 8002172:	f8d0 a000 	ldr.w	sl, [r0]
 8002176:	e010      	b.n	800219a <forward_gemm+0xa6>
 8002178:	f1bc 0f01 	cmp.w	ip, #1
 800217c:	d10d      	bne.n	800219a <forward_gemm+0xa6>
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	2a02      	cmp	r2, #2
 8002182:	bfc6      	itte	gt
 8002184:	6858      	ldrgt	r0, [r3, #4]
 8002186:	f100 021c 	addgt.w	r2, r0, #28
 800218a:	2204      	movle	r2, #4
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	2800      	cmp	r0, #0
 8002190:	d003      	beq.n	800219a <forward_gemm+0xa6>
 8002192:	6806      	ldr	r6, [r0, #0]
 8002194:	bf18      	it	ne
 8002196:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800219a:	68c8      	ldr	r0, [r1, #12]
 800219c:	6989      	ldr	r1, [r1, #24]
 800219e:	688b      	ldr	r3, [r1, #8]
 80021a0:	6842      	ldr	r2, [r0, #4]
 80021a2:	68c1      	ldr	r1, [r0, #12]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	b289      	uxth	r1, r1
 80021a8:	a806      	add	r0, sp, #24
 80021aa:	f003 f92d 	bl	8005408 <arm_mat_init_f32>
 80021ae:	69a9      	ldr	r1, [r5, #24]
 80021b0:	68e8      	ldr	r0, [r5, #12]
 80021b2:	688b      	ldr	r3, [r1, #8]
 80021b4:	6842      	ldr	r2, [r0, #4]
 80021b6:	68c1      	ldr	r1, [r0, #12]
 80021b8:	b292      	uxth	r2, r2
 80021ba:	b289      	uxth	r1, r1
 80021bc:	a804      	add	r0, sp, #16
 80021be:	f003 f923 	bl	8005408 <arm_mat_init_f32>
 80021c2:	69b1      	ldr	r1, [r6, #24]
 80021c4:	68f0      	ldr	r0, [r6, #12]
 80021c6:	688b      	ldr	r3, [r1, #8]
 80021c8:	6842      	ldr	r2, [r0, #4]
 80021ca:	68c1      	ldr	r1, [r0, #12]
 80021cc:	b292      	uxth	r2, r2
 80021ce:	b289      	uxth	r1, r1
 80021d0:	a802      	add	r0, sp, #8
 80021d2:	f003 f919 	bl	8005408 <arm_mat_init_f32>
 80021d6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021de:	688b      	ldr	r3, [r1, #8]
 80021e0:	6842      	ldr	r2, [r0, #4]
 80021e2:	68c1      	ldr	r1, [r0, #12]
 80021e4:	b292      	uxth	r2, r2
 80021e6:	b289      	uxth	r1, r1
 80021e8:	4668      	mov	r0, sp
 80021ea:	f003 f90d 	bl	8005408 <arm_mat_init_f32>
 80021ee:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021f2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021f6:	9905      	ldr	r1, [sp, #20]
 80021f8:	9a03      	ldr	r2, [sp, #12]
 80021fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80021fe:	edd4 0a06 	vldr	s1, [r4, #24]
 8002202:	910b      	str	r1, [sp, #44]	; 0x2c
 8002204:	920e      	str	r2, [sp, #56]	; 0x38
 8002206:	920d      	str	r2, [sp, #52]	; 0x34
 8002208:	2300      	movs	r3, #0
 800220a:	f8bd e010 	ldrh.w	lr, [sp, #16]
 800220e:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8002218:	f8bd c000 	ldrh.w	ip, [sp]
 800221c:	9c07      	ldr	r4, [sp, #28]
 800221e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8002222:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8002226:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800222a:	9108      	str	r1, [sp, #32]
 800222c:	0002      	movs	r2, r0
 800222e:	bf0c      	ite	eq
 8002230:	4672      	moveq	r2, lr
 8002232:	4642      	movne	r2, r8
 8002234:	2f01      	cmp	r7, #1
 8002236:	bf0c      	ite	eq
 8002238:	4699      	moveq	r9, r3
 800223a:	f04f 0904 	movne.w	r9, #4
 800223e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002242:	f1bc 0f01 	cmp.w	ip, #1
 8002246:	d104      	bne.n	8002252 <forward_gemm+0x15e>
 8002248:	2f01      	cmp	r7, #1
 800224a:	d004      	beq.n	8002256 <forward_gemm+0x162>
 800224c:	f1cb 0700 	rsb	r7, fp, #0
 8002250:	e002      	b.n	8002258 <forward_gemm+0x164>
 8002252:	2f01      	cmp	r7, #1
 8002254:	d000      	beq.n	8002258 <forward_gemm+0x164>
 8002256:	2700      	movs	r7, #0
 8002258:	2800      	cmp	r0, #0
 800225a:	bf0c      	ite	eq
 800225c:	46f4      	moveq	ip, lr
 800225e:	46c4      	movne	ip, r8
 8002260:	b23f      	sxth	r7, r7
 8002262:	45b4      	cmp	ip, r6
 8002264:	970c      	str	r7, [sp, #48]	; 0x30
 8002266:	f040 808b 	bne.w	8002380 <forward_gemm+0x28c>
 800226a:	2d00      	cmp	r5, #0
 800226c:	bf0c      	ite	eq
 800226e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002270:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002274:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002276:	455f      	cmp	r7, fp
 8002278:	f040 8082 	bne.w	8002380 <forward_gemm+0x28c>
 800227c:	2800      	cmp	r0, #0
 800227e:	bf0c      	ite	eq
 8002280:	46c4      	moveq	ip, r8
 8002282:	46f4      	movne	ip, lr
 8002284:	2d00      	cmp	r5, #0
 8002286:	bf0c      	ite	eq
 8002288:	4657      	moveq	r7, sl
 800228a:	460f      	movne	r7, r1
 800228c:	45bc      	cmp	ip, r7
 800228e:	d177      	bne.n	8002380 <forward_gemm+0x28c>
 8002290:	9e08      	ldr	r6, [sp, #32]
 8002292:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002296:	9410      	str	r4, [sp, #64]	; 0x40
 8002298:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800229c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80022a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80022a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80022a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80022aa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80022ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022b2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80022b6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80022ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80022be:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80022c2:	2800      	cmp	r0, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022ca:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022ce:	fa1f fb88 	uxth.w	fp, r8
 80022d2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022d6:	f1bb 0f00 	cmp.w	fp, #0
 80022da:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002544 <.text_16>
 80022de:	d019      	beq.n	8002314 <forward_gemm+0x220>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	f04f 0b04 	moveq.w	fp, #4
 80022e8:	46a3      	movne	fp, r4
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f1a8 0801 	sub.w	r8, r8, #1
 80022f0:	edde 1a00 	vldr	s3, [lr]
 80022f4:	ed93 2a00 	vldr	s4, [r3]
 80022f8:	44de      	add	lr, fp
 80022fa:	bf0c      	ite	eq
 80022fc:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8002300:	f04f 0b04 	movne.w	fp, #4
 8002304:	445b      	add	r3, fp
 8002306:	fa1f fb88 	uxth.w	fp, r8
 800230a:	f1bb 0f00 	cmp.w	fp, #0
 800230e:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002312:	d1e5      	bne.n	80022e0 <forward_gemm+0x1ec>
 8002314:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002318:	edd6 1a00 	vldr	s3, [r6]
 800231c:	ee00 1a21 	vmla.f32	s2, s0, s3
 8002320:	ed87 1a00 	vstr	s2, [r7]
 8002324:	1d3f      	adds	r7, r7, #4
 8002326:	1e52      	subs	r2, r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	002b      	movs	r3, r5
 800232c:	bf0e      	itee	eq
 800232e:	1a8b      	subeq	r3, r1, r2
 8002330:	ebaa 0302 	subne.w	r3, sl, r2
 8002334:	434b      	mulne	r3, r1
 8002336:	2a00      	cmp	r2, #0
 8002338:	444e      	add	r6, r9
 800233a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800233e:	d1c0      	bne.n	80022c2 <forward_gemm+0x1ce>
 8002340:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8002344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002348:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800234c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002350:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002354:	19df      	adds	r7, r3, r7
 8002356:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800235a:	b100      	cbz	r0, 800235e <forward_gemm+0x26a>
 800235c:	2404      	movs	r4, #4
 800235e:	eb02 0c04 	add.w	ip, r2, r4
 8002362:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002368:	1e67      	subs	r7, r4, #1
 800236a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800236e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002372:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d192      	bne.n	80022a0 <forward_gemm+0x1ac>
 800237a:	b011      	add	sp, #68	; 0x44
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	fb0b f606 	mul.w	r6, fp, r6
 8002384:	2e00      	cmp	r6, #0
 8002386:	ddf8      	ble.n	800237a <forward_gemm+0x286>
 8002388:	f016 0003 	ands.w	r0, r6, #3
 800238c:	d003      	beq.n	8002396 <forward_gemm+0x2a2>
 800238e:	1e40      	subs	r0, r0, #1
 8002390:	f844 3b04 	str.w	r3, [r4], #4
 8002394:	d1fb      	bne.n	800238e <forward_gemm+0x29a>
 8002396:	08b1      	lsrs	r1, r6, #2
 8002398:	d0ef      	beq.n	800237a <forward_gemm+0x286>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	6063      	str	r3, [r4, #4]
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	60e3      	str	r3, [r4, #12]
 80023a2:	3410      	adds	r4, #16
 80023a4:	1e49      	subs	r1, r1, #1
 80023a6:	d1f8      	bne.n	800239a <forward_gemm+0x2a6>
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023b0 <forward_matmul>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b08b      	sub	sp, #44	; 0x2c
 80023b6:	6944      	ldr	r4, [r0, #20]
 80023b8:	8822      	ldrh	r2, [r4, #0]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	bf1a      	itte	ne
 80023be:	6860      	ldrne	r0, [r4, #4]
 80023c0:	1d03      	addne	r3, r0, #4
 80023c2:	2304      	moveq	r3, #4
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	bf14      	ite	ne
 80023ca:	6808      	ldrne	r0, [r1, #0]
 80023cc:	2000      	moveq	r0, #0
 80023ce:	2900      	cmp	r1, #0
 80023d0:	bf14      	ite	ne
 80023d2:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023d6:	f04f 0b00 	moveq.w	fp, #0
 80023da:	2a02      	cmp	r2, #2
 80023dc:	bfa6      	itte	ge
 80023de:	6861      	ldrge	r1, [r4, #4]
 80023e0:	3110      	addge	r1, #16
 80023e2:	2104      	movlt	r1, #4
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	2900      	cmp	r1, #0
 80023e8:	bf14      	ite	ne
 80023ea:	680b      	ldrne	r3, [r1, #0]
 80023ec:	2300      	moveq	r3, #0
 80023ee:	f1bb 0f00 	cmp.w	fp, #0
 80023f2:	d108      	bne.n	8002406 <forward_matmul+0x56>
 80023f4:	2a02      	cmp	r2, #2
 80023f6:	bfc6      	itte	gt
 80023f8:	6861      	ldrgt	r1, [r4, #4]
 80023fa:	311c      	addgt	r1, #28
 80023fc:	2104      	movle	r1, #4
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	b109      	cbz	r1, 8002406 <forward_matmul+0x56>
 8002402:	f8d1 b000 	ldr.w	fp, [r1]
 8002406:	68dd      	ldr	r5, [r3, #12]
 8002408:	68c4      	ldr	r4, [r0, #12]
 800240a:	f8db 900c 	ldr.w	r9, [fp, #12]
 800240e:	686e      	ldr	r6, [r5, #4]
 8002410:	f8d4 e000 	ldr.w	lr, [r4]
 8002414:	f8d9 2000 	ldr.w	r2, [r9]
 8002418:	f8d5 a000 	ldr.w	sl, [r5]
 800241c:	68a1      	ldr	r1, [r4, #8]
 800241e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002422:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002426:	68ef      	ldr	r7, [r5, #12]
 8002428:	9706      	str	r7, [sp, #24]
 800242a:	fb01 f50e 	mul.w	r5, r1, lr
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	68e7      	ldr	r7, [r4, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	434f      	muls	r7, r1
 8002436:	fb0e f707 	mul.w	r7, lr, r7
 800243a:	970a      	str	r7, [sp, #40]	; 0x28
 800243c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002440:	fb08 f404 	mul.w	r4, r8, r4
 8002444:	4354      	muls	r4, r2
 8002446:	2e00      	cmp	r6, #0
 8002448:	9409      	str	r4, [sp, #36]	; 0x24
 800244a:	fb08 f802 	mul.w	r8, r8, r2
 800244e:	d074      	beq.n	800253a <forward_matmul+0x18a>
 8002450:	2400      	movs	r4, #0
 8002452:	46a1      	mov	r9, r4
 8002454:	9602      	str	r6, [sp, #8]
 8002456:	9e06      	ldr	r6, [sp, #24]
 8002458:	2e00      	cmp	r6, #0
 800245a:	d064      	beq.n	8002526 <forward_matmul+0x176>
 800245c:	9f06      	ldr	r7, [sp, #24]
 800245e:	9701      	str	r7, [sp, #4]
 8002460:	f8cd c00c 	str.w	ip, [sp, #12]
 8002464:	2600      	movs	r6, #0
 8002466:	9505      	str	r5, [sp, #20]
 8002468:	9d03      	ldr	r5, [sp, #12]
 800246a:	2d00      	cmp	r5, #0
 800246c:	d051      	beq.n	8002512 <forward_matmul+0x162>
 800246e:	9500      	str	r5, [sp, #0]
 8002470:	f8cd a010 	str.w	sl, [sp, #16]
 8002474:	9207      	str	r2, [sp, #28]
 8002476:	f04f 0a00 	mov.w	sl, #0
 800247a:	9a04      	ldr	r2, [sp, #16]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d03f      	beq.n	8002500 <forward_matmul+0x150>
 8002480:	f04f 0c00 	mov.w	ip, #0
 8002484:	9008      	str	r0, [sp, #32]
 8002486:	9808      	ldr	r0, [sp, #32]
 8002488:	6985      	ldr	r5, [r0, #24]
 800248a:	68a8      	ldr	r0, [r5, #8]
 800248c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002490:	4420      	add	r0, r4
 8002492:	4430      	add	r0, r6
 8002494:	eb00 050c 	add.w	r5, r0, ip
 8002498:	68b8      	ldr	r0, [r7, #8]
 800249a:	4448      	add	r0, r9
 800249c:	4450      	add	r0, sl
 800249e:	eb00 070c 	add.w	r7, r0, ip
 80024a2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002544 <.text_16>
 80024a6:	b319      	cbz	r1, 80024f0 <forward_matmul+0x140>
 80024a8:	07c8      	lsls	r0, r1, #31
 80024aa:	d509      	bpl.n	80024c0 <forward_matmul+0x110>
 80024ac:	edd5 0a00 	vldr	s1, [r5]
 80024b0:	ed97 1a00 	vldr	s2, [r7]
 80024b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b8:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024bc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024c0:	0848      	lsrs	r0, r1, #1
 80024c2:	d015      	beq.n	80024f0 <forward_matmul+0x140>
 80024c4:	edd5 0a00 	vldr	s1, [r5]
 80024c8:	ed97 1a00 	vldr	s2, [r7]
 80024cc:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024d0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024d8:	edd5 0a00 	vldr	s1, [r5]
 80024dc:	ed97 1a00 	vldr	s2, [r7]
 80024e0:	1e40      	subs	r0, r0, #1
 80024e2:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024e6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ee:	d1e9      	bne.n	80024c4 <forward_matmul+0x114>
 80024f0:	ed83 0a00 	vstr	s0, [r3]
 80024f4:	1d1b      	adds	r3, r3, #4
 80024f6:	1e52      	subs	r2, r2, #1
 80024f8:	f10c 0c04 	add.w	ip, ip, #4
 80024fc:	d1c3      	bne.n	8002486 <forward_matmul+0xd6>
 80024fe:	9808      	ldr	r0, [sp, #32]
 8002500:	9d00      	ldr	r5, [sp, #0]
 8002502:	9a07      	ldr	r2, [sp, #28]
 8002504:	1e6d      	subs	r5, r5, #1
 8002506:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	d1b5      	bne.n	800247a <forward_matmul+0xca>
 800250e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002512:	9f01      	ldr	r7, [sp, #4]
 8002514:	9d05      	ldr	r5, [sp, #20]
 8002516:	1e7f      	subs	r7, r7, #1
 8002518:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800251c:	9701      	str	r7, [sp, #4]
 800251e:	d1a3      	bne.n	8002468 <forward_matmul+0xb8>
 8002520:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002524:	9d05      	ldr	r5, [sp, #20]
 8002526:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800252a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800252e:	9e02      	ldr	r6, [sp, #8]
 8002530:	1e76      	subs	r6, r6, #1
 8002532:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002536:	9602      	str	r6, [sp, #8]
 8002538:	d18d      	bne.n	8002456 <forward_matmul+0xa6>
 800253a:	b00b      	add	sp, #44	; 0x2c
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002540 <.text_15>:
 8002540:	0800135b 	.word	0x0800135b

08002544 <.text_16>:
 8002544:	00000000 	.word	0x00000000

08002548 <ai_shape_get_size>:
 8002548:	b470      	push	{r4, r5, r6}
 800254a:	4601      	mov	r1, r0
 800254c:	f04f 0201 	mov.w	r2, #1
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	d01e      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002556:	684c      	ldr	r4, [r1, #4]
 8002558:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800255c:	4618      	mov	r0, r3
 800255e:	1f0d      	subs	r5, r1, #4
 8002560:	f010 0103 	ands.w	r1, r0, #3
 8002564:	f000 8006 	beq.w	8002574 <ai_shape_get_size+0x2c>
 8002568:	f855 6904 	ldr.w	r6, [r5], #-4
 800256c:	1e5b      	subs	r3, r3, #1
 800256e:	4372      	muls	r2, r6
 8002570:	1e49      	subs	r1, r1, #1
 8002572:	d1f9      	bne.n	8002568 <ai_shape_get_size+0x20>
 8002574:	0880      	lsrs	r0, r0, #2
 8002576:	d00d      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002578:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800257c:	3910      	subs	r1, #16
 800257e:	68cb      	ldr	r3, [r1, #12]
 8002580:	688c      	ldr	r4, [r1, #8]
 8002582:	684d      	ldr	r5, [r1, #4]
 8002584:	f851 6910 	ldr.w	r6, [r1], #-16
 8002588:	4363      	muls	r3, r4
 800258a:	436b      	muls	r3, r5
 800258c:	4373      	muls	r3, r6
 800258e:	435a      	muls	r2, r3
 8002590:	1e40      	subs	r0, r0, #1
 8002592:	d1f4      	bne.n	800257e <ai_shape_get_size+0x36>
 8002594:	bc70      	pop	{r4, r5, r6}
 8002596:	4610      	mov	r0, r2
 8002598:	4770      	bx	lr
	...

0800259c <nl_func_acos_array_f32>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	688c      	ldr	r4, [r1, #8]
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025a6:	1f0d      	subs	r5, r1, #4
 80025a8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80025ac:	1f0e      	subs	r6, r1, #4
 80025ae:	42a5      	cmp	r5, r4
 80025b0:	f0c0 800a 	bcc.w	80025c8 <nl_func_acos_array_f32+0x2c>
 80025b4:	ed95 0a00 	vldr	s0, [r5]
 80025b8:	f012 fb70 	bl	8014c9c <acosf>
 80025bc:	ed86 0a00 	vstr	s0, [r6]
 80025c0:	1f2d      	subs	r5, r5, #4
 80025c2:	1f36      	subs	r6, r6, #4
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d2f5      	bcs.n	80025b4 <nl_func_acos_array_f32+0x18>
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025cc <forward_acos>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b081      	sub	sp, #4
 80025d0:	6942      	ldr	r2, [r0, #20]
 80025d2:	8811      	ldrh	r1, [r2, #0]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	bf1a      	itte	ne
 80025d8:	6850      	ldrne	r0, [r2, #4]
 80025da:	1d00      	addne	r0, r0, #4
 80025dc:	2004      	moveq	r0, #4
 80025de:	f04f 0501 	mov.w	r5, #1
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	bf14      	ite	ne
 80025e8:	6803      	ldrne	r3, [r0, #0]
 80025ea:	2300      	moveq	r3, #0
 80025ec:	2902      	cmp	r1, #2
 80025ee:	bfa6      	itte	ge
 80025f0:	6850      	ldrge	r0, [r2, #4]
 80025f2:	3010      	addge	r0, #16
 80025f4:	2004      	movlt	r0, #4
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bf19      	ittee	ne
 80025fc:	6800      	ldrne	r0, [r0, #0]
 80025fe:	f100 0418 	addne.w	r4, r0, #24
 8002602:	2100      	moveq	r1, #0
 8002604:	f101 0418 	addeq.w	r4, r1, #24
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	d01e      	beq.n	8002650 <forward_acos+0x84>
 8002612:	684e      	ldr	r6, [r1, #4]
 8002614:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002618:	4610      	mov	r0, r2
 800261a:	1f0f      	subs	r7, r1, #4
 800261c:	f010 0103 	ands.w	r1, r0, #3
 8002620:	d006      	beq.n	8002630 <forward_acos+0x64>
 8002622:	1e52      	subs	r2, r2, #1
 8002624:	f857 c904 	ldr.w	ip, [r7], #-4
 8002628:	1e49      	subs	r1, r1, #1
 800262a:	fb0c f505 	mul.w	r5, ip, r5
 800262e:	d1f8      	bne.n	8002622 <forward_acos+0x56>
 8002630:	0880      	lsrs	r0, r0, #2
 8002632:	d00d      	beq.n	8002650 <forward_acos+0x84>
 8002634:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002638:	3910      	subs	r1, #16
 800263a:	68ca      	ldr	r2, [r1, #12]
 800263c:	688e      	ldr	r6, [r1, #8]
 800263e:	684f      	ldr	r7, [r1, #4]
 8002640:	4372      	muls	r2, r6
 8002642:	f851 6910 	ldr.w	r6, [r1], #-16
 8002646:	437a      	muls	r2, r7
 8002648:	4372      	muls	r2, r6
 800264a:	4355      	muls	r5, r2
 800264c:	1e40      	subs	r0, r0, #1
 800264e:	d1f4      	bne.n	800263a <forward_acos+0x6e>
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	6886      	ldr	r6, [r0, #8]
 8002654:	6821      	ldr	r1, [r4, #0]
 8002656:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800265a:	1f07      	subs	r7, r0, #4
 800265c:	6888      	ldr	r0, [r1, #8]
 800265e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002662:	1f14      	subs	r4, r2, #4
 8002664:	42b7      	cmp	r7, r6
 8002666:	d309      	bcc.n	800267c <forward_acos+0xb0>
 8002668:	ed97 0a00 	vldr	s0, [r7]
 800266c:	f012 fb16 	bl	8014c9c <acosf>
 8002670:	ed84 0a00 	vstr	s0, [r4]
 8002674:	1f3f      	subs	r7, r7, #4
 8002676:	1f24      	subs	r4, r4, #4
 8002678:	42b7      	cmp	r7, r6
 800267a:	d2f5      	bcs.n	8002668 <forward_acos+0x9c>
 800267c:	b001      	add	sp, #4
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002680 <nl_func_acosh_array_f32>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	688c      	ldr	r4, [r1, #8]
 8002684:	6880      	ldr	r0, [r0, #8]
 8002686:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800268a:	1f0d      	subs	r5, r1, #4
 800268c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002690:	1f0e      	subs	r6, r1, #4
 8002692:	42a5      	cmp	r5, r4
 8002694:	f0c0 800a 	bcc.w	80026ac <nl_func_acosh_array_f32+0x2c>
 8002698:	ed95 0a00 	vldr	s0, [r5]
 800269c:	f012 fb30 	bl	8014d00 <acoshf>
 80026a0:	ed86 0a00 	vstr	s0, [r6]
 80026a4:	1f2d      	subs	r5, r5, #4
 80026a6:	1f36      	subs	r6, r6, #4
 80026a8:	42a5      	cmp	r5, r4
 80026aa:	d2f5      	bcs.n	8002698 <nl_func_acosh_array_f32+0x18>
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b0 <forward_acosh>:
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b081      	sub	sp, #4
 80026b4:	6942      	ldr	r2, [r0, #20]
 80026b6:	8811      	ldrh	r1, [r2, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	bf1a      	itte	ne
 80026bc:	6850      	ldrne	r0, [r2, #4]
 80026be:	1d00      	addne	r0, r0, #4
 80026c0:	2004      	moveq	r0, #4
 80026c2:	f04f 0501 	mov.w	r5, #1
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	2800      	cmp	r0, #0
 80026ca:	bf14      	ite	ne
 80026cc:	6803      	ldrne	r3, [r0, #0]
 80026ce:	2300      	moveq	r3, #0
 80026d0:	2902      	cmp	r1, #2
 80026d2:	bfa6      	itte	ge
 80026d4:	6850      	ldrge	r0, [r2, #4]
 80026d6:	3010      	addge	r0, #16
 80026d8:	2004      	movlt	r0, #4
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	2800      	cmp	r0, #0
 80026de:	bf19      	ittee	ne
 80026e0:	6800      	ldrne	r0, [r0, #0]
 80026e2:	f100 0418 	addne.w	r4, r0, #24
 80026e6:	2100      	moveq	r1, #0
 80026e8:	f101 0418 	addeq.w	r4, r1, #24
 80026ec:	f103 0108 	add.w	r1, r3, #8
 80026f0:	680a      	ldr	r2, [r1, #0]
 80026f2:	0a12      	lsrs	r2, r2, #8
 80026f4:	d01e      	beq.n	8002734 <forward_acosh+0x84>
 80026f6:	684e      	ldr	r6, [r1, #4]
 80026f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026fc:	4610      	mov	r0, r2
 80026fe:	1f0f      	subs	r7, r1, #4
 8002700:	f010 0103 	ands.w	r1, r0, #3
 8002704:	d006      	beq.n	8002714 <forward_acosh+0x64>
 8002706:	1e52      	subs	r2, r2, #1
 8002708:	f857 c904 	ldr.w	ip, [r7], #-4
 800270c:	1e49      	subs	r1, r1, #1
 800270e:	fb0c f505 	mul.w	r5, ip, r5
 8002712:	d1f8      	bne.n	8002706 <forward_acosh+0x56>
 8002714:	0880      	lsrs	r0, r0, #2
 8002716:	d00d      	beq.n	8002734 <forward_acosh+0x84>
 8002718:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800271c:	3910      	subs	r1, #16
 800271e:	68ca      	ldr	r2, [r1, #12]
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	684f      	ldr	r7, [r1, #4]
 8002724:	4372      	muls	r2, r6
 8002726:	f851 6910 	ldr.w	r6, [r1], #-16
 800272a:	437a      	muls	r2, r7
 800272c:	4372      	muls	r2, r6
 800272e:	4355      	muls	r5, r2
 8002730:	1e40      	subs	r0, r0, #1
 8002732:	d1f4      	bne.n	800271e <forward_acosh+0x6e>
 8002734:	6998      	ldr	r0, [r3, #24]
 8002736:	6886      	ldr	r6, [r0, #8]
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800273e:	1f07      	subs	r7, r0, #4
 8002740:	6888      	ldr	r0, [r1, #8]
 8002742:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002746:	1f14      	subs	r4, r2, #4
 8002748:	42b7      	cmp	r7, r6
 800274a:	d309      	bcc.n	8002760 <forward_acosh+0xb0>
 800274c:	ed97 0a00 	vldr	s0, [r7]
 8002750:	f012 fad6 	bl	8014d00 <acoshf>
 8002754:	ed84 0a00 	vstr	s0, [r4]
 8002758:	1f3f      	subs	r7, r7, #4
 800275a:	1f24      	subs	r4, r4, #4
 800275c:	42b7      	cmp	r7, r6
 800275e:	d2f5      	bcs.n	800274c <forward_acosh+0x9c>
 8002760:	b001      	add	sp, #4
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <nl_func_asin_array_f32>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	688c      	ldr	r4, [r1, #8]
 8002768:	6880      	ldr	r0, [r0, #8]
 800276a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800276e:	1f0d      	subs	r5, r1, #4
 8002770:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002774:	1f0e      	subs	r6, r1, #4
 8002776:	42a5      	cmp	r5, r4
 8002778:	f0c0 800a 	bcc.w	8002790 <nl_func_asin_array_f32+0x2c>
 800277c:	ed95 0a00 	vldr	s0, [r5]
 8002780:	f012 fae6 	bl	8014d50 <asinf>
 8002784:	ed86 0a00 	vstr	s0, [r6]
 8002788:	1f2d      	subs	r5, r5, #4
 800278a:	1f36      	subs	r6, r6, #4
 800278c:	42a5      	cmp	r5, r4
 800278e:	d2f5      	bcs.n	800277c <nl_func_asin_array_f32+0x18>
 8002790:	bd70      	pop	{r4, r5, r6, pc}
	...

08002794 <forward_asin>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b081      	sub	sp, #4
 8002798:	6942      	ldr	r2, [r0, #20]
 800279a:	8811      	ldrh	r1, [r2, #0]
 800279c:	2900      	cmp	r1, #0
 800279e:	bf1a      	itte	ne
 80027a0:	6850      	ldrne	r0, [r2, #4]
 80027a2:	1d00      	addne	r0, r0, #4
 80027a4:	2004      	moveq	r0, #4
 80027a6:	f04f 0501 	mov.w	r5, #1
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	2800      	cmp	r0, #0
 80027ae:	bf14      	ite	ne
 80027b0:	6803      	ldrne	r3, [r0, #0]
 80027b2:	2300      	moveq	r3, #0
 80027b4:	2902      	cmp	r1, #2
 80027b6:	bfa6      	itte	ge
 80027b8:	6850      	ldrge	r0, [r2, #4]
 80027ba:	3010      	addge	r0, #16
 80027bc:	2004      	movlt	r0, #4
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	2800      	cmp	r0, #0
 80027c2:	bf19      	ittee	ne
 80027c4:	6800      	ldrne	r0, [r0, #0]
 80027c6:	f100 0418 	addne.w	r4, r0, #24
 80027ca:	2100      	moveq	r1, #0
 80027cc:	f101 0418 	addeq.w	r4, r1, #24
 80027d0:	f103 0108 	add.w	r1, r3, #8
 80027d4:	680a      	ldr	r2, [r1, #0]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	d01e      	beq.n	8002818 <forward_asin+0x84>
 80027da:	684e      	ldr	r6, [r1, #4]
 80027dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027e0:	4610      	mov	r0, r2
 80027e2:	1f0f      	subs	r7, r1, #4
 80027e4:	f010 0103 	ands.w	r1, r0, #3
 80027e8:	d006      	beq.n	80027f8 <forward_asin+0x64>
 80027ea:	1e52      	subs	r2, r2, #1
 80027ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80027f0:	1e49      	subs	r1, r1, #1
 80027f2:	fb0c f505 	mul.w	r5, ip, r5
 80027f6:	d1f8      	bne.n	80027ea <forward_asin+0x56>
 80027f8:	0880      	lsrs	r0, r0, #2
 80027fa:	d00d      	beq.n	8002818 <forward_asin+0x84>
 80027fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002800:	3910      	subs	r1, #16
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	688e      	ldr	r6, [r1, #8]
 8002806:	684f      	ldr	r7, [r1, #4]
 8002808:	4372      	muls	r2, r6
 800280a:	f851 6910 	ldr.w	r6, [r1], #-16
 800280e:	437a      	muls	r2, r7
 8002810:	4372      	muls	r2, r6
 8002812:	4355      	muls	r5, r2
 8002814:	1e40      	subs	r0, r0, #1
 8002816:	d1f4      	bne.n	8002802 <forward_asin+0x6e>
 8002818:	6998      	ldr	r0, [r3, #24]
 800281a:	6886      	ldr	r6, [r0, #8]
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002822:	1f07      	subs	r7, r0, #4
 8002824:	6888      	ldr	r0, [r1, #8]
 8002826:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800282a:	1f14      	subs	r4, r2, #4
 800282c:	42b7      	cmp	r7, r6
 800282e:	d309      	bcc.n	8002844 <forward_asin+0xb0>
 8002830:	ed97 0a00 	vldr	s0, [r7]
 8002834:	f012 fa8c 	bl	8014d50 <asinf>
 8002838:	ed84 0a00 	vstr	s0, [r4]
 800283c:	1f3f      	subs	r7, r7, #4
 800283e:	1f24      	subs	r4, r4, #4
 8002840:	42b7      	cmp	r7, r6
 8002842:	d2f5      	bcs.n	8002830 <forward_asin+0x9c>
 8002844:	b001      	add	sp, #4
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002848 <nl_func_asinh_array_f32>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	688c      	ldr	r4, [r1, #8]
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002852:	1f0d      	subs	r5, r1, #4
 8002854:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002858:	1f0e      	subs	r6, r1, #4
 800285a:	42a5      	cmp	r5, r4
 800285c:	f0c0 800a 	bcc.w	8002874 <nl_func_asinh_array_f32+0x2c>
 8002860:	ed95 0a00 	vldr	s0, [r5]
 8002864:	f011 fc4e 	bl	8014104 <asinhf>
 8002868:	ed86 0a00 	vstr	s0, [r6]
 800286c:	1f2d      	subs	r5, r5, #4
 800286e:	1f36      	subs	r6, r6, #4
 8002870:	42a5      	cmp	r5, r4
 8002872:	d2f5      	bcs.n	8002860 <nl_func_asinh_array_f32+0x18>
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <forward_asinh>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b081      	sub	sp, #4
 800287c:	6942      	ldr	r2, [r0, #20]
 800287e:	8811      	ldrh	r1, [r2, #0]
 8002880:	2900      	cmp	r1, #0
 8002882:	bf1a      	itte	ne
 8002884:	6850      	ldrne	r0, [r2, #4]
 8002886:	1d00      	addne	r0, r0, #4
 8002888:	2004      	moveq	r0, #4
 800288a:	f04f 0501 	mov.w	r5, #1
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	2800      	cmp	r0, #0
 8002892:	bf14      	ite	ne
 8002894:	6803      	ldrne	r3, [r0, #0]
 8002896:	2300      	moveq	r3, #0
 8002898:	2902      	cmp	r1, #2
 800289a:	bfa6      	itte	ge
 800289c:	6850      	ldrge	r0, [r2, #4]
 800289e:	3010      	addge	r0, #16
 80028a0:	2004      	movlt	r0, #4
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bf19      	ittee	ne
 80028a8:	6800      	ldrne	r0, [r0, #0]
 80028aa:	f100 0418 	addne.w	r4, r0, #24
 80028ae:	2100      	moveq	r1, #0
 80028b0:	f101 0418 	addeq.w	r4, r1, #24
 80028b4:	f103 0108 	add.w	r1, r3, #8
 80028b8:	680a      	ldr	r2, [r1, #0]
 80028ba:	0a12      	lsrs	r2, r2, #8
 80028bc:	d01e      	beq.n	80028fc <forward_asinh+0x84>
 80028be:	684e      	ldr	r6, [r1, #4]
 80028c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028c4:	4610      	mov	r0, r2
 80028c6:	1f0f      	subs	r7, r1, #4
 80028c8:	f010 0103 	ands.w	r1, r0, #3
 80028cc:	d006      	beq.n	80028dc <forward_asinh+0x64>
 80028ce:	1e52      	subs	r2, r2, #1
 80028d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80028d4:	1e49      	subs	r1, r1, #1
 80028d6:	fb0c f505 	mul.w	r5, ip, r5
 80028da:	d1f8      	bne.n	80028ce <forward_asinh+0x56>
 80028dc:	0880      	lsrs	r0, r0, #2
 80028de:	d00d      	beq.n	80028fc <forward_asinh+0x84>
 80028e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028e4:	3910      	subs	r1, #16
 80028e6:	68ca      	ldr	r2, [r1, #12]
 80028e8:	688e      	ldr	r6, [r1, #8]
 80028ea:	684f      	ldr	r7, [r1, #4]
 80028ec:	4372      	muls	r2, r6
 80028ee:	f851 6910 	ldr.w	r6, [r1], #-16
 80028f2:	437a      	muls	r2, r7
 80028f4:	4372      	muls	r2, r6
 80028f6:	4355      	muls	r5, r2
 80028f8:	1e40      	subs	r0, r0, #1
 80028fa:	d1f4      	bne.n	80028e6 <forward_asinh+0x6e>
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	6886      	ldr	r6, [r0, #8]
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002906:	1f07      	subs	r7, r0, #4
 8002908:	6888      	ldr	r0, [r1, #8]
 800290a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800290e:	1f14      	subs	r4, r2, #4
 8002910:	42b7      	cmp	r7, r6
 8002912:	d309      	bcc.n	8002928 <forward_asinh+0xb0>
 8002914:	ed97 0a00 	vldr	s0, [r7]
 8002918:	f011 fbf4 	bl	8014104 <asinhf>
 800291c:	ed84 0a00 	vstr	s0, [r4]
 8002920:	1f3f      	subs	r7, r7, #4
 8002922:	1f24      	subs	r4, r4, #4
 8002924:	42b7      	cmp	r7, r6
 8002926:	d2f5      	bcs.n	8002914 <forward_asinh+0x9c>
 8002928:	b001      	add	sp, #4
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800292c <nl_func_atan_array_f32>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	688c      	ldr	r4, [r1, #8]
 8002930:	6880      	ldr	r0, [r0, #8]
 8002932:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002936:	1f0d      	subs	r5, r1, #4
 8002938:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800293c:	1f0e      	subs	r6, r1, #4
 800293e:	42a5      	cmp	r5, r4
 8002940:	f0c0 800a 	bcc.w	8002958 <nl_func_atan_array_f32+0x2c>
 8002944:	ed95 0a00 	vldr	s0, [r5]
 8002948:	f011 fc44 	bl	80141d4 <atanf>
 800294c:	ed86 0a00 	vstr	s0, [r6]
 8002950:	1f2d      	subs	r5, r5, #4
 8002952:	1f36      	subs	r6, r6, #4
 8002954:	42a5      	cmp	r5, r4
 8002956:	d2f5      	bcs.n	8002944 <nl_func_atan_array_f32+0x18>
 8002958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800295c <forward_atan>:
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b081      	sub	sp, #4
 8002960:	6942      	ldr	r2, [r0, #20]
 8002962:	8811      	ldrh	r1, [r2, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	bf1a      	itte	ne
 8002968:	6850      	ldrne	r0, [r2, #4]
 800296a:	1d00      	addne	r0, r0, #4
 800296c:	2004      	moveq	r0, #4
 800296e:	f04f 0501 	mov.w	r5, #1
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	bf14      	ite	ne
 8002978:	6803      	ldrne	r3, [r0, #0]
 800297a:	2300      	moveq	r3, #0
 800297c:	2902      	cmp	r1, #2
 800297e:	bfa6      	itte	ge
 8002980:	6850      	ldrge	r0, [r2, #4]
 8002982:	3010      	addge	r0, #16
 8002984:	2004      	movlt	r0, #4
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	2800      	cmp	r0, #0
 800298a:	bf19      	ittee	ne
 800298c:	6800      	ldrne	r0, [r0, #0]
 800298e:	f100 0418 	addne.w	r4, r0, #24
 8002992:	2100      	moveq	r1, #0
 8002994:	f101 0418 	addeq.w	r4, r1, #24
 8002998:	f103 0108 	add.w	r1, r3, #8
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	0a12      	lsrs	r2, r2, #8
 80029a0:	d01e      	beq.n	80029e0 <forward_atan+0x84>
 80029a2:	684e      	ldr	r6, [r1, #4]
 80029a4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a8:	4610      	mov	r0, r2
 80029aa:	1f0f      	subs	r7, r1, #4
 80029ac:	f010 0103 	ands.w	r1, r0, #3
 80029b0:	d006      	beq.n	80029c0 <forward_atan+0x64>
 80029b2:	1e52      	subs	r2, r2, #1
 80029b4:	f857 c904 	ldr.w	ip, [r7], #-4
 80029b8:	1e49      	subs	r1, r1, #1
 80029ba:	fb0c f505 	mul.w	r5, ip, r5
 80029be:	d1f8      	bne.n	80029b2 <forward_atan+0x56>
 80029c0:	0880      	lsrs	r0, r0, #2
 80029c2:	d00d      	beq.n	80029e0 <forward_atan+0x84>
 80029c4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029c8:	3910      	subs	r1, #16
 80029ca:	68ca      	ldr	r2, [r1, #12]
 80029cc:	688e      	ldr	r6, [r1, #8]
 80029ce:	684f      	ldr	r7, [r1, #4]
 80029d0:	4372      	muls	r2, r6
 80029d2:	f851 6910 	ldr.w	r6, [r1], #-16
 80029d6:	437a      	muls	r2, r7
 80029d8:	4372      	muls	r2, r6
 80029da:	4355      	muls	r5, r2
 80029dc:	1e40      	subs	r0, r0, #1
 80029de:	d1f4      	bne.n	80029ca <forward_atan+0x6e>
 80029e0:	6998      	ldr	r0, [r3, #24]
 80029e2:	6886      	ldr	r6, [r0, #8]
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029ea:	1f07      	subs	r7, r0, #4
 80029ec:	6888      	ldr	r0, [r1, #8]
 80029ee:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029f2:	1f14      	subs	r4, r2, #4
 80029f4:	42b7      	cmp	r7, r6
 80029f6:	d309      	bcc.n	8002a0c <forward_atan+0xb0>
 80029f8:	ed97 0a00 	vldr	s0, [r7]
 80029fc:	f011 fbea 	bl	80141d4 <atanf>
 8002a00:	ed84 0a00 	vstr	s0, [r4]
 8002a04:	1f3f      	subs	r7, r7, #4
 8002a06:	1f24      	subs	r4, r4, #4
 8002a08:	42b7      	cmp	r7, r6
 8002a0a:	d2f5      	bcs.n	80029f8 <forward_atan+0x9c>
 8002a0c:	b001      	add	sp, #4
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <nl_func_atanh_array_f32>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	688c      	ldr	r4, [r1, #8]
 8002a14:	6880      	ldr	r0, [r0, #8]
 8002a16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002a1a:	1f0d      	subs	r5, r1, #4
 8002a1c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002a20:	1f0e      	subs	r6, r1, #4
 8002a22:	42a5      	cmp	r5, r4
 8002a24:	f0c0 800a 	bcc.w	8002a3c <nl_func_atanh_array_f32+0x2c>
 8002a28:	ed95 0a00 	vldr	s0, [r5]
 8002a2c:	f012 f9c2 	bl	8014db4 <atanhf>
 8002a30:	ed86 0a00 	vstr	s0, [r6]
 8002a34:	1f2d      	subs	r5, r5, #4
 8002a36:	1f36      	subs	r6, r6, #4
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d2f5      	bcs.n	8002a28 <nl_func_atanh_array_f32+0x18>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a40 <forward_atanh>:
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b081      	sub	sp, #4
 8002a44:	6942      	ldr	r2, [r0, #20]
 8002a46:	8811      	ldrh	r1, [r2, #0]
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	bf1a      	itte	ne
 8002a4c:	6850      	ldrne	r0, [r2, #4]
 8002a4e:	1d00      	addne	r0, r0, #4
 8002a50:	2004      	moveq	r0, #4
 8002a52:	f04f 0501 	mov.w	r5, #1
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	6803      	ldrne	r3, [r0, #0]
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	2902      	cmp	r1, #2
 8002a62:	bfa6      	itte	ge
 8002a64:	6850      	ldrge	r0, [r2, #4]
 8002a66:	3010      	addge	r0, #16
 8002a68:	2004      	movlt	r0, #4
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	bf19      	ittee	ne
 8002a70:	6800      	ldrne	r0, [r0, #0]
 8002a72:	f100 0418 	addne.w	r4, r0, #24
 8002a76:	2100      	moveq	r1, #0
 8002a78:	f101 0418 	addeq.w	r4, r1, #24
 8002a7c:	f103 0108 	add.w	r1, r3, #8
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	d01e      	beq.n	8002ac4 <forward_atanh+0x84>
 8002a86:	684e      	ldr	r6, [r1, #4]
 8002a88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	1f0f      	subs	r7, r1, #4
 8002a90:	f010 0103 	ands.w	r1, r0, #3
 8002a94:	d006      	beq.n	8002aa4 <forward_atanh+0x64>
 8002a96:	1e52      	subs	r2, r2, #1
 8002a98:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a9c:	1e49      	subs	r1, r1, #1
 8002a9e:	fb0c f505 	mul.w	r5, ip, r5
 8002aa2:	d1f8      	bne.n	8002a96 <forward_atanh+0x56>
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	d00d      	beq.n	8002ac4 <forward_atanh+0x84>
 8002aa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002aac:	3910      	subs	r1, #16
 8002aae:	68ca      	ldr	r2, [r1, #12]
 8002ab0:	688e      	ldr	r6, [r1, #8]
 8002ab2:	684f      	ldr	r7, [r1, #4]
 8002ab4:	4372      	muls	r2, r6
 8002ab6:	f851 6910 	ldr.w	r6, [r1], #-16
 8002aba:	437a      	muls	r2, r7
 8002abc:	4372      	muls	r2, r6
 8002abe:	4355      	muls	r5, r2
 8002ac0:	1e40      	subs	r0, r0, #1
 8002ac2:	d1f4      	bne.n	8002aae <forward_atanh+0x6e>
 8002ac4:	6998      	ldr	r0, [r3, #24]
 8002ac6:	6886      	ldr	r6, [r0, #8]
 8002ac8:	6821      	ldr	r1, [r4, #0]
 8002aca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ace:	1f07      	subs	r7, r0, #4
 8002ad0:	6888      	ldr	r0, [r1, #8]
 8002ad2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002ad6:	1f14      	subs	r4, r2, #4
 8002ad8:	42b7      	cmp	r7, r6
 8002ada:	d309      	bcc.n	8002af0 <forward_atanh+0xb0>
 8002adc:	ed97 0a00 	vldr	s0, [r7]
 8002ae0:	f012 f968 	bl	8014db4 <atanhf>
 8002ae4:	ed84 0a00 	vstr	s0, [r4]
 8002ae8:	1f3f      	subs	r7, r7, #4
 8002aea:	1f24      	subs	r4, r4, #4
 8002aec:	42b7      	cmp	r7, r6
 8002aee:	d2f5      	bcs.n	8002adc <forward_atanh+0x9c>
 8002af0:	b001      	add	sp, #4
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af4 <nl_func_cos_array_f32>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	688c      	ldr	r4, [r1, #8]
 8002af8:	6880      	ldr	r0, [r0, #8]
 8002afa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002afe:	1f0d      	subs	r5, r1, #4
 8002b00:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002b04:	1f0e      	subs	r6, r1, #4
 8002b06:	42a5      	cmp	r5, r4
 8002b08:	f0c0 800a 	bcc.w	8002b20 <nl_func_cos_array_f32+0x2c>
 8002b0c:	ed95 0a00 	vldr	s0, [r5]
 8002b10:	f011 fc76 	bl	8014400 <cosf>
 8002b14:	ed86 0a00 	vstr	s0, [r6]
 8002b18:	1f2d      	subs	r5, r5, #4
 8002b1a:	1f36      	subs	r6, r6, #4
 8002b1c:	42a5      	cmp	r5, r4
 8002b1e:	d2f5      	bcs.n	8002b0c <nl_func_cos_array_f32+0x18>
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b24 <forward_cos>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b081      	sub	sp, #4
 8002b28:	6942      	ldr	r2, [r0, #20]
 8002b2a:	8811      	ldrh	r1, [r2, #0]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bf1a      	itte	ne
 8002b30:	6850      	ldrne	r0, [r2, #4]
 8002b32:	1d00      	addne	r0, r0, #4
 8002b34:	2004      	moveq	r0, #4
 8002b36:	f04f 0501 	mov.w	r5, #1
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	6803      	ldrne	r3, [r0, #0]
 8002b42:	2300      	moveq	r3, #0
 8002b44:	2902      	cmp	r1, #2
 8002b46:	bfa6      	itte	ge
 8002b48:	6850      	ldrge	r0, [r2, #4]
 8002b4a:	3010      	addge	r0, #16
 8002b4c:	2004      	movlt	r0, #4
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bf19      	ittee	ne
 8002b54:	6800      	ldrne	r0, [r0, #0]
 8002b56:	f100 0418 	addne.w	r4, r0, #24
 8002b5a:	2100      	moveq	r1, #0
 8002b5c:	f101 0418 	addeq.w	r4, r1, #24
 8002b60:	f103 0108 	add.w	r1, r3, #8
 8002b64:	680a      	ldr	r2, [r1, #0]
 8002b66:	0a12      	lsrs	r2, r2, #8
 8002b68:	d01e      	beq.n	8002ba8 <forward_cos+0x84>
 8002b6a:	684e      	ldr	r6, [r1, #4]
 8002b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b70:	4610      	mov	r0, r2
 8002b72:	1f0f      	subs	r7, r1, #4
 8002b74:	f010 0103 	ands.w	r1, r0, #3
 8002b78:	d006      	beq.n	8002b88 <forward_cos+0x64>
 8002b7a:	1e52      	subs	r2, r2, #1
 8002b7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b80:	1e49      	subs	r1, r1, #1
 8002b82:	fb0c f505 	mul.w	r5, ip, r5
 8002b86:	d1f8      	bne.n	8002b7a <forward_cos+0x56>
 8002b88:	0880      	lsrs	r0, r0, #2
 8002b8a:	d00d      	beq.n	8002ba8 <forward_cos+0x84>
 8002b8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b90:	3910      	subs	r1, #16
 8002b92:	68ca      	ldr	r2, [r1, #12]
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	684f      	ldr	r7, [r1, #4]
 8002b98:	4372      	muls	r2, r6
 8002b9a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b9e:	437a      	muls	r2, r7
 8002ba0:	4372      	muls	r2, r6
 8002ba2:	4355      	muls	r5, r2
 8002ba4:	1e40      	subs	r0, r0, #1
 8002ba6:	d1f4      	bne.n	8002b92 <forward_cos+0x6e>
 8002ba8:	6998      	ldr	r0, [r3, #24]
 8002baa:	6886      	ldr	r6, [r0, #8]
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002bb2:	1f07      	subs	r7, r0, #4
 8002bb4:	6888      	ldr	r0, [r1, #8]
 8002bb6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002bba:	1f14      	subs	r4, r2, #4
 8002bbc:	42b7      	cmp	r7, r6
 8002bbe:	d309      	bcc.n	8002bd4 <forward_cos+0xb0>
 8002bc0:	ed97 0a00 	vldr	s0, [r7]
 8002bc4:	f011 fc1c 	bl	8014400 <cosf>
 8002bc8:	ed84 0a00 	vstr	s0, [r4]
 8002bcc:	1f3f      	subs	r7, r7, #4
 8002bce:	1f24      	subs	r4, r4, #4
 8002bd0:	42b7      	cmp	r7, r6
 8002bd2:	d2f5      	bcs.n	8002bc0 <forward_cos+0x9c>
 8002bd4:	b001      	add	sp, #4
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd8 <nl_func_cosh_array_f32>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	688c      	ldr	r4, [r1, #8]
 8002bdc:	6880      	ldr	r0, [r0, #8]
 8002bde:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002be2:	1f0d      	subs	r5, r1, #4
 8002be4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002be8:	1f0e      	subs	r6, r1, #4
 8002bea:	42a5      	cmp	r5, r4
 8002bec:	f0c0 800a 	bcc.w	8002c04 <nl_func_cosh_array_f32+0x2c>
 8002bf0:	ed95 0a00 	vldr	s0, [r5]
 8002bf4:	f012 f916 	bl	8014e24 <coshf>
 8002bf8:	ed86 0a00 	vstr	s0, [r6]
 8002bfc:	1f2d      	subs	r5, r5, #4
 8002bfe:	1f36      	subs	r6, r6, #4
 8002c00:	42a5      	cmp	r5, r4
 8002c02:	d2f5      	bcs.n	8002bf0 <nl_func_cosh_array_f32+0x18>
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c08 <forward_cosh>:
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b081      	sub	sp, #4
 8002c0c:	6942      	ldr	r2, [r0, #20]
 8002c0e:	8811      	ldrh	r1, [r2, #0]
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bf1a      	itte	ne
 8002c14:	6850      	ldrne	r0, [r2, #4]
 8002c16:	1d00      	addne	r0, r0, #4
 8002c18:	2004      	moveq	r0, #4
 8002c1a:	f04f 0501 	mov.w	r5, #1
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	2800      	cmp	r0, #0
 8002c22:	bf14      	ite	ne
 8002c24:	6803      	ldrne	r3, [r0, #0]
 8002c26:	2300      	moveq	r3, #0
 8002c28:	2902      	cmp	r1, #2
 8002c2a:	bfa6      	itte	ge
 8002c2c:	6850      	ldrge	r0, [r2, #4]
 8002c2e:	3010      	addge	r0, #16
 8002c30:	2004      	movlt	r0, #4
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	bf19      	ittee	ne
 8002c38:	6800      	ldrne	r0, [r0, #0]
 8002c3a:	f100 0418 	addne.w	r4, r0, #24
 8002c3e:	2100      	moveq	r1, #0
 8002c40:	f101 0418 	addeq.w	r4, r1, #24
 8002c44:	f103 0108 	add.w	r1, r3, #8
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	d01e      	beq.n	8002c8c <forward_cosh+0x84>
 8002c4e:	684e      	ldr	r6, [r1, #4]
 8002c50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c54:	4610      	mov	r0, r2
 8002c56:	1f0f      	subs	r7, r1, #4
 8002c58:	f010 0103 	ands.w	r1, r0, #3
 8002c5c:	d006      	beq.n	8002c6c <forward_cosh+0x64>
 8002c5e:	1e52      	subs	r2, r2, #1
 8002c60:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c64:	1e49      	subs	r1, r1, #1
 8002c66:	fb0c f505 	mul.w	r5, ip, r5
 8002c6a:	d1f8      	bne.n	8002c5e <forward_cosh+0x56>
 8002c6c:	0880      	lsrs	r0, r0, #2
 8002c6e:	d00d      	beq.n	8002c8c <forward_cosh+0x84>
 8002c70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c74:	3910      	subs	r1, #16
 8002c76:	68ca      	ldr	r2, [r1, #12]
 8002c78:	688e      	ldr	r6, [r1, #8]
 8002c7a:	684f      	ldr	r7, [r1, #4]
 8002c7c:	4372      	muls	r2, r6
 8002c7e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c82:	437a      	muls	r2, r7
 8002c84:	4372      	muls	r2, r6
 8002c86:	4355      	muls	r5, r2
 8002c88:	1e40      	subs	r0, r0, #1
 8002c8a:	d1f4      	bne.n	8002c76 <forward_cosh+0x6e>
 8002c8c:	6998      	ldr	r0, [r3, #24]
 8002c8e:	6886      	ldr	r6, [r0, #8]
 8002c90:	6821      	ldr	r1, [r4, #0]
 8002c92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c96:	1f07      	subs	r7, r0, #4
 8002c98:	6888      	ldr	r0, [r1, #8]
 8002c9a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c9e:	1f14      	subs	r4, r2, #4
 8002ca0:	42b7      	cmp	r7, r6
 8002ca2:	d309      	bcc.n	8002cb8 <forward_cosh+0xb0>
 8002ca4:	ed97 0a00 	vldr	s0, [r7]
 8002ca8:	f012 f8bc 	bl	8014e24 <coshf>
 8002cac:	ed84 0a00 	vstr	s0, [r4]
 8002cb0:	1f3f      	subs	r7, r7, #4
 8002cb2:	1f24      	subs	r4, r4, #4
 8002cb4:	42b7      	cmp	r7, r6
 8002cb6:	d2f5      	bcs.n	8002ca4 <forward_cosh+0x9c>
 8002cb8:	b001      	add	sp, #4
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <nl_func_erf_array_f32>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	688c      	ldr	r4, [r1, #8]
 8002cc0:	6880      	ldr	r0, [r0, #8]
 8002cc2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002cc6:	1f0d      	subs	r5, r1, #4
 8002cc8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ccc:	1f0e      	subs	r6, r1, #4
 8002cce:	42a5      	cmp	r5, r4
 8002cd0:	f0c0 800a 	bcc.w	8002ce8 <nl_func_erf_array_f32+0x2c>
 8002cd4:	ed95 0a00 	vldr	s0, [r5]
 8002cd8:	f011 fbd2 	bl	8014480 <erff>
 8002cdc:	ed86 0a00 	vstr	s0, [r6]
 8002ce0:	1f2d      	subs	r5, r5, #4
 8002ce2:	1f36      	subs	r6, r6, #4
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d2f5      	bcs.n	8002cd4 <nl_func_erf_array_f32+0x18>
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cec <forward_erf>:
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b081      	sub	sp, #4
 8002cf0:	6942      	ldr	r2, [r0, #20]
 8002cf2:	8811      	ldrh	r1, [r2, #0]
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	bf1a      	itte	ne
 8002cf8:	6850      	ldrne	r0, [r2, #4]
 8002cfa:	1d00      	addne	r0, r0, #4
 8002cfc:	2004      	moveq	r0, #4
 8002cfe:	f04f 0501 	mov.w	r5, #1
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	bf14      	ite	ne
 8002d08:	6803      	ldrne	r3, [r0, #0]
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	2902      	cmp	r1, #2
 8002d0e:	bfa6      	itte	ge
 8002d10:	6850      	ldrge	r0, [r2, #4]
 8002d12:	3010      	addge	r0, #16
 8002d14:	2004      	movlt	r0, #4
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bf19      	ittee	ne
 8002d1c:	6800      	ldrne	r0, [r0, #0]
 8002d1e:	f100 0418 	addne.w	r4, r0, #24
 8002d22:	2100      	moveq	r1, #0
 8002d24:	f101 0418 	addeq.w	r4, r1, #24
 8002d28:	f103 0108 	add.w	r1, r3, #8
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	0a12      	lsrs	r2, r2, #8
 8002d30:	d01e      	beq.n	8002d70 <forward_erf+0x84>
 8002d32:	684e      	ldr	r6, [r1, #4]
 8002d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d38:	4610      	mov	r0, r2
 8002d3a:	1f0f      	subs	r7, r1, #4
 8002d3c:	f010 0103 	ands.w	r1, r0, #3
 8002d40:	d006      	beq.n	8002d50 <forward_erf+0x64>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d48:	1e49      	subs	r1, r1, #1
 8002d4a:	fb0c f505 	mul.w	r5, ip, r5
 8002d4e:	d1f8      	bne.n	8002d42 <forward_erf+0x56>
 8002d50:	0880      	lsrs	r0, r0, #2
 8002d52:	d00d      	beq.n	8002d70 <forward_erf+0x84>
 8002d54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d58:	3910      	subs	r1, #16
 8002d5a:	68ca      	ldr	r2, [r1, #12]
 8002d5c:	688e      	ldr	r6, [r1, #8]
 8002d5e:	684f      	ldr	r7, [r1, #4]
 8002d60:	4372      	muls	r2, r6
 8002d62:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d66:	437a      	muls	r2, r7
 8002d68:	4372      	muls	r2, r6
 8002d6a:	4355      	muls	r5, r2
 8002d6c:	1e40      	subs	r0, r0, #1
 8002d6e:	d1f4      	bne.n	8002d5a <forward_erf+0x6e>
 8002d70:	6998      	ldr	r0, [r3, #24]
 8002d72:	6886      	ldr	r6, [r0, #8]
 8002d74:	6821      	ldr	r1, [r4, #0]
 8002d76:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d7a:	1f07      	subs	r7, r0, #4
 8002d7c:	6888      	ldr	r0, [r1, #8]
 8002d7e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d82:	1f14      	subs	r4, r2, #4
 8002d84:	42b7      	cmp	r7, r6
 8002d86:	d309      	bcc.n	8002d9c <forward_erf+0xb0>
 8002d88:	ed97 0a00 	vldr	s0, [r7]
 8002d8c:	f011 fb78 	bl	8014480 <erff>
 8002d90:	ed84 0a00 	vstr	s0, [r4]
 8002d94:	1f3f      	subs	r7, r7, #4
 8002d96:	1f24      	subs	r4, r4, #4
 8002d98:	42b7      	cmp	r7, r6
 8002d9a:	d2f5      	bcs.n	8002d88 <forward_erf+0x9c>
 8002d9c:	b001      	add	sp, #4
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da0 <nl_func_log_array_f32>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	688c      	ldr	r4, [r1, #8]
 8002da4:	6880      	ldr	r0, [r0, #8]
 8002da6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002daa:	1f0d      	subs	r5, r1, #4
 8002dac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002db0:	1f0e      	subs	r6, r1, #4
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	f0c0 800a 	bcc.w	8002dcc <nl_func_log_array_f32+0x2c>
 8002db8:	ed95 0a00 	vldr	s0, [r5]
 8002dbc:	f012 f8cc 	bl	8014f58 <logf>
 8002dc0:	ed86 0a00 	vstr	s0, [r6]
 8002dc4:	1f2d      	subs	r5, r5, #4
 8002dc6:	1f36      	subs	r6, r6, #4
 8002dc8:	42a5      	cmp	r5, r4
 8002dca:	d2f5      	bcs.n	8002db8 <nl_func_log_array_f32+0x18>
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd0 <forward_log>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b081      	sub	sp, #4
 8002dd4:	6942      	ldr	r2, [r0, #20]
 8002dd6:	8811      	ldrh	r1, [r2, #0]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	bf1a      	itte	ne
 8002ddc:	6850      	ldrne	r0, [r2, #4]
 8002dde:	1d00      	addne	r0, r0, #4
 8002de0:	2004      	moveq	r0, #4
 8002de2:	f04f 0501 	mov.w	r5, #1
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	bf14      	ite	ne
 8002dec:	6803      	ldrne	r3, [r0, #0]
 8002dee:	2300      	moveq	r3, #0
 8002df0:	2902      	cmp	r1, #2
 8002df2:	bfa6      	itte	ge
 8002df4:	6850      	ldrge	r0, [r2, #4]
 8002df6:	3010      	addge	r0, #16
 8002df8:	2004      	movlt	r0, #4
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	bf19      	ittee	ne
 8002e00:	6800      	ldrne	r0, [r0, #0]
 8002e02:	f100 0418 	addne.w	r4, r0, #24
 8002e06:	2100      	moveq	r1, #0
 8002e08:	f101 0418 	addeq.w	r4, r1, #24
 8002e0c:	f103 0108 	add.w	r1, r3, #8
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	d01e      	beq.n	8002e54 <forward_log+0x84>
 8002e16:	684e      	ldr	r6, [r1, #4]
 8002e18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	1f0f      	subs	r7, r1, #4
 8002e20:	f010 0103 	ands.w	r1, r0, #3
 8002e24:	d006      	beq.n	8002e34 <forward_log+0x64>
 8002e26:	1e52      	subs	r2, r2, #1
 8002e28:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e2c:	1e49      	subs	r1, r1, #1
 8002e2e:	fb0c f505 	mul.w	r5, ip, r5
 8002e32:	d1f8      	bne.n	8002e26 <forward_log+0x56>
 8002e34:	0880      	lsrs	r0, r0, #2
 8002e36:	d00d      	beq.n	8002e54 <forward_log+0x84>
 8002e38:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e3c:	3910      	subs	r1, #16
 8002e3e:	68ca      	ldr	r2, [r1, #12]
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	684f      	ldr	r7, [r1, #4]
 8002e44:	4372      	muls	r2, r6
 8002e46:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e4a:	437a      	muls	r2, r7
 8002e4c:	4372      	muls	r2, r6
 8002e4e:	4355      	muls	r5, r2
 8002e50:	1e40      	subs	r0, r0, #1
 8002e52:	d1f4      	bne.n	8002e3e <forward_log+0x6e>
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	6886      	ldr	r6, [r0, #8]
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e5e:	1f07      	subs	r7, r0, #4
 8002e60:	6888      	ldr	r0, [r1, #8]
 8002e62:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e66:	1f14      	subs	r4, r2, #4
 8002e68:	42b7      	cmp	r7, r6
 8002e6a:	d309      	bcc.n	8002e80 <forward_log+0xb0>
 8002e6c:	ed97 0a00 	vldr	s0, [r7]
 8002e70:	f012 f872 	bl	8014f58 <logf>
 8002e74:	ed84 0a00 	vstr	s0, [r4]
 8002e78:	1f3f      	subs	r7, r7, #4
 8002e7a:	1f24      	subs	r4, r4, #4
 8002e7c:	42b7      	cmp	r7, r6
 8002e7e:	d2f5      	bcs.n	8002e6c <forward_log+0x9c>
 8002e80:	b001      	add	sp, #4
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e84 <nl_func_rsqrt_array_f32>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	6880      	ldr	r0, [r0, #8]
 8002e8a:	68a1      	ldr	r1, [r4, #8]
 8002e8c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e94:	1f1d      	subs	r5, r3, #4
 8002e96:	1f16      	subs	r6, r2, #4
 8002e98:	428d      	cmp	r5, r1
 8002e9a:	d30e      	bcc.n	8002eba <nl_func_rsqrt_array_f32+0x36>
 8002e9c:	ed95 0a00 	vldr	s0, [r5]
 8002ea0:	f002 fa2c 	bl	80052fc <ai_math_sqrt>
 8002ea4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ea8:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002eac:	edc6 0a00 	vstr	s1, [r6]
 8002eb0:	1f2d      	subs	r5, r5, #4
 8002eb2:	68a0      	ldr	r0, [r4, #8]
 8002eb4:	1f36      	subs	r6, r6, #4
 8002eb6:	4285      	cmp	r5, r0
 8002eb8:	d2f0      	bcs.n	8002e9c <nl_func_rsqrt_array_f32+0x18>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <forward_rsqrt>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b081      	sub	sp, #4
 8002ec0:	6942      	ldr	r2, [r0, #20]
 8002ec2:	8811      	ldrh	r1, [r2, #0]
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	bf1a      	itte	ne
 8002ec8:	6850      	ldrne	r0, [r2, #4]
 8002eca:	1d00      	addne	r0, r0, #4
 8002ecc:	2004      	moveq	r0, #4
 8002ece:	f04f 0501 	mov.w	r5, #1
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	6803      	ldrne	r3, [r0, #0]
 8002eda:	2300      	moveq	r3, #0
 8002edc:	2902      	cmp	r1, #2
 8002ede:	bfa6      	itte	ge
 8002ee0:	6850      	ldrge	r0, [r2, #4]
 8002ee2:	3010      	addge	r0, #16
 8002ee4:	2004      	movlt	r0, #4
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bf19      	ittee	ne
 8002eec:	6800      	ldrne	r0, [r0, #0]
 8002eee:	f100 0418 	addne.w	r4, r0, #24
 8002ef2:	2100      	moveq	r1, #0
 8002ef4:	f101 0418 	addeq.w	r4, r1, #24
 8002ef8:	f103 0108 	add.w	r1, r3, #8
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	0a12      	lsrs	r2, r2, #8
 8002f00:	d01e      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f02:	684e      	ldr	r6, [r1, #4]
 8002f04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f08:	4610      	mov	r0, r2
 8002f0a:	1f0f      	subs	r7, r1, #4
 8002f0c:	f010 0103 	ands.w	r1, r0, #3
 8002f10:	d006      	beq.n	8002f20 <forward_rsqrt+0x64>
 8002f12:	1e52      	subs	r2, r2, #1
 8002f14:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f18:	1e49      	subs	r1, r1, #1
 8002f1a:	fb0c f505 	mul.w	r5, ip, r5
 8002f1e:	d1f8      	bne.n	8002f12 <forward_rsqrt+0x56>
 8002f20:	0880      	lsrs	r0, r0, #2
 8002f22:	d00d      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f28:	3910      	subs	r1, #16
 8002f2a:	68ca      	ldr	r2, [r1, #12]
 8002f2c:	688e      	ldr	r6, [r1, #8]
 8002f2e:	684f      	ldr	r7, [r1, #4]
 8002f30:	4372      	muls	r2, r6
 8002f32:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f36:	437a      	muls	r2, r7
 8002f38:	4372      	muls	r2, r6
 8002f3a:	4355      	muls	r5, r2
 8002f3c:	1e40      	subs	r0, r0, #1
 8002f3e:	d1f4      	bne.n	8002f2a <forward_rsqrt+0x6e>
 8002f40:	699e      	ldr	r6, [r3, #24]
 8002f42:	68b0      	ldr	r0, [r6, #8]
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f4a:	1f0f      	subs	r7, r1, #4
 8002f4c:	6891      	ldr	r1, [r2, #8]
 8002f4e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f52:	1f1c      	subs	r4, r3, #4
 8002f54:	4287      	cmp	r7, r0
 8002f56:	d30e      	bcc.n	8002f76 <forward_rsqrt+0xba>
 8002f58:	ed97 0a00 	vldr	s0, [r7]
 8002f5c:	f002 f9ce 	bl	80052fc <ai_math_sqrt>
 8002f60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f64:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f68:	edc4 0a00 	vstr	s1, [r4]
 8002f6c:	1f3f      	subs	r7, r7, #4
 8002f6e:	68b0      	ldr	r0, [r6, #8]
 8002f70:	1f24      	subs	r4, r4, #4
 8002f72:	4287      	cmp	r7, r0
 8002f74:	d2f0      	bcs.n	8002f58 <forward_rsqrt+0x9c>
 8002f76:	b001      	add	sp, #4
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f7c <nl_func_sin_array_f32>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	688c      	ldr	r4, [r1, #8]
 8002f80:	6880      	ldr	r0, [r0, #8]
 8002f82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f86:	1f0d      	subs	r5, r1, #4
 8002f88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f8c:	1f0e      	subs	r6, r1, #4
 8002f8e:	42a5      	cmp	r5, r4
 8002f90:	f0c0 800a 	bcc.w	8002fa8 <nl_func_sin_array_f32+0x2c>
 8002f94:	ed95 0a00 	vldr	s0, [r5]
 8002f98:	f011 fdc4 	bl	8014b24 <sinf>
 8002f9c:	ed86 0a00 	vstr	s0, [r6]
 8002fa0:	1f2d      	subs	r5, r5, #4
 8002fa2:	1f36      	subs	r6, r6, #4
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d2f5      	bcs.n	8002f94 <nl_func_sin_array_f32+0x18>
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fac <forward_sin>:
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b081      	sub	sp, #4
 8002fb0:	6942      	ldr	r2, [r0, #20]
 8002fb2:	8811      	ldrh	r1, [r2, #0]
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	bf1a      	itte	ne
 8002fb8:	6850      	ldrne	r0, [r2, #4]
 8002fba:	1d00      	addne	r0, r0, #4
 8002fbc:	2004      	moveq	r0, #4
 8002fbe:	f04f 0501 	mov.w	r5, #1
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	6803      	ldrne	r3, [r0, #0]
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	2902      	cmp	r1, #2
 8002fce:	bfa6      	itte	ge
 8002fd0:	6850      	ldrge	r0, [r2, #4]
 8002fd2:	3010      	addge	r0, #16
 8002fd4:	2004      	movlt	r0, #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	bf19      	ittee	ne
 8002fdc:	6800      	ldrne	r0, [r0, #0]
 8002fde:	f100 0418 	addne.w	r4, r0, #24
 8002fe2:	2100      	moveq	r1, #0
 8002fe4:	f101 0418 	addeq.w	r4, r1, #24
 8002fe8:	f103 0108 	add.w	r1, r3, #8
 8002fec:	680a      	ldr	r2, [r1, #0]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	d01e      	beq.n	8003030 <forward_sin+0x84>
 8002ff2:	684e      	ldr	r6, [r1, #4]
 8002ff4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	1f0f      	subs	r7, r1, #4
 8002ffc:	f010 0103 	ands.w	r1, r0, #3
 8003000:	d006      	beq.n	8003010 <forward_sin+0x64>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	f857 c904 	ldr.w	ip, [r7], #-4
 8003008:	1e49      	subs	r1, r1, #1
 800300a:	fb0c f505 	mul.w	r5, ip, r5
 800300e:	d1f8      	bne.n	8003002 <forward_sin+0x56>
 8003010:	0880      	lsrs	r0, r0, #2
 8003012:	d00d      	beq.n	8003030 <forward_sin+0x84>
 8003014:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003018:	3910      	subs	r1, #16
 800301a:	68ca      	ldr	r2, [r1, #12]
 800301c:	688e      	ldr	r6, [r1, #8]
 800301e:	684f      	ldr	r7, [r1, #4]
 8003020:	4372      	muls	r2, r6
 8003022:	f851 6910 	ldr.w	r6, [r1], #-16
 8003026:	437a      	muls	r2, r7
 8003028:	4372      	muls	r2, r6
 800302a:	4355      	muls	r5, r2
 800302c:	1e40      	subs	r0, r0, #1
 800302e:	d1f4      	bne.n	800301a <forward_sin+0x6e>
 8003030:	6998      	ldr	r0, [r3, #24]
 8003032:	6886      	ldr	r6, [r0, #8]
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800303a:	1f07      	subs	r7, r0, #4
 800303c:	6888      	ldr	r0, [r1, #8]
 800303e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003042:	1f14      	subs	r4, r2, #4
 8003044:	42b7      	cmp	r7, r6
 8003046:	d309      	bcc.n	800305c <forward_sin+0xb0>
 8003048:	ed97 0a00 	vldr	s0, [r7]
 800304c:	f011 fd6a 	bl	8014b24 <sinf>
 8003050:	ed84 0a00 	vstr	s0, [r4]
 8003054:	1f3f      	subs	r7, r7, #4
 8003056:	1f24      	subs	r4, r4, #4
 8003058:	42b7      	cmp	r7, r6
 800305a:	d2f5      	bcs.n	8003048 <forward_sin+0x9c>
 800305c:	b001      	add	sp, #4
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003060 <nl_func_sinh_array_f32>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	688c      	ldr	r4, [r1, #8]
 8003064:	6880      	ldr	r0, [r0, #8]
 8003066:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800306a:	1f0d      	subs	r5, r1, #4
 800306c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003070:	1f0e      	subs	r6, r1, #4
 8003072:	42a5      	cmp	r5, r4
 8003074:	f0c0 800a 	bcc.w	800308c <nl_func_sinh_array_f32+0x2c>
 8003078:	ed95 0a00 	vldr	s0, [r5]
 800307c:	f012 f83a 	bl	80150f4 <sinhf>
 8003080:	ed86 0a00 	vstr	s0, [r6]
 8003084:	1f2d      	subs	r5, r5, #4
 8003086:	1f36      	subs	r6, r6, #4
 8003088:	42a5      	cmp	r5, r4
 800308a:	d2f5      	bcs.n	8003078 <nl_func_sinh_array_f32+0x18>
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <forward_sinh>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b081      	sub	sp, #4
 8003094:	6942      	ldr	r2, [r0, #20]
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	bf1a      	itte	ne
 800309c:	6850      	ldrne	r0, [r2, #4]
 800309e:	1d00      	addne	r0, r0, #4
 80030a0:	2004      	moveq	r0, #4
 80030a2:	f04f 0501 	mov.w	r5, #1
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bf14      	ite	ne
 80030ac:	6803      	ldrne	r3, [r0, #0]
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2902      	cmp	r1, #2
 80030b2:	bfa6      	itte	ge
 80030b4:	6850      	ldrge	r0, [r2, #4]
 80030b6:	3010      	addge	r0, #16
 80030b8:	2004      	movlt	r0, #4
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	bf19      	ittee	ne
 80030c0:	6800      	ldrne	r0, [r0, #0]
 80030c2:	f100 0418 	addne.w	r4, r0, #24
 80030c6:	2100      	moveq	r1, #0
 80030c8:	f101 0418 	addeq.w	r4, r1, #24
 80030cc:	f103 0108 	add.w	r1, r3, #8
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	0a12      	lsrs	r2, r2, #8
 80030d4:	d01e      	beq.n	8003114 <forward_sinh+0x84>
 80030d6:	684e      	ldr	r6, [r1, #4]
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	4610      	mov	r0, r2
 80030de:	1f0f      	subs	r7, r1, #4
 80030e0:	f010 0103 	ands.w	r1, r0, #3
 80030e4:	d006      	beq.n	80030f4 <forward_sinh+0x64>
 80030e6:	1e52      	subs	r2, r2, #1
 80030e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030ec:	1e49      	subs	r1, r1, #1
 80030ee:	fb0c f505 	mul.w	r5, ip, r5
 80030f2:	d1f8      	bne.n	80030e6 <forward_sinh+0x56>
 80030f4:	0880      	lsrs	r0, r0, #2
 80030f6:	d00d      	beq.n	8003114 <forward_sinh+0x84>
 80030f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030fc:	3910      	subs	r1, #16
 80030fe:	68ca      	ldr	r2, [r1, #12]
 8003100:	688e      	ldr	r6, [r1, #8]
 8003102:	684f      	ldr	r7, [r1, #4]
 8003104:	4372      	muls	r2, r6
 8003106:	f851 6910 	ldr.w	r6, [r1], #-16
 800310a:	437a      	muls	r2, r7
 800310c:	4372      	muls	r2, r6
 800310e:	4355      	muls	r5, r2
 8003110:	1e40      	subs	r0, r0, #1
 8003112:	d1f4      	bne.n	80030fe <forward_sinh+0x6e>
 8003114:	6998      	ldr	r0, [r3, #24]
 8003116:	6886      	ldr	r6, [r0, #8]
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800311e:	1f07      	subs	r7, r0, #4
 8003120:	6888      	ldr	r0, [r1, #8]
 8003122:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003126:	1f14      	subs	r4, r2, #4
 8003128:	42b7      	cmp	r7, r6
 800312a:	d309      	bcc.n	8003140 <forward_sinh+0xb0>
 800312c:	ed97 0a00 	vldr	s0, [r7]
 8003130:	f011 ffe0 	bl	80150f4 <sinhf>
 8003134:	ed84 0a00 	vstr	s0, [r4]
 8003138:	1f3f      	subs	r7, r7, #4
 800313a:	1f24      	subs	r4, r4, #4
 800313c:	42b7      	cmp	r7, r6
 800313e:	d2f5      	bcs.n	800312c <forward_sinh+0x9c>
 8003140:	b001      	add	sp, #4
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <nl_func_tan_array_f32>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	688c      	ldr	r4, [r1, #8]
 8003148:	6880      	ldr	r0, [r0, #8]
 800314a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800314e:	1f0d      	subs	r5, r1, #4
 8003150:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003154:	1f0e      	subs	r6, r1, #4
 8003156:	42a5      	cmp	r5, r4
 8003158:	f0c0 800a 	bcc.w	8003170 <nl_func_tan_array_f32+0x2c>
 800315c:	ed95 0a00 	vldr	s0, [r5]
 8003160:	f011 fd22 	bl	8014ba8 <tanf>
 8003164:	ed86 0a00 	vstr	s0, [r6]
 8003168:	1f2d      	subs	r5, r5, #4
 800316a:	1f36      	subs	r6, r6, #4
 800316c:	42a5      	cmp	r5, r4
 800316e:	d2f5      	bcs.n	800315c <nl_func_tan_array_f32+0x18>
 8003170:	bd70      	pop	{r4, r5, r6, pc}
	...

08003174 <forward_tan>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b081      	sub	sp, #4
 8003178:	6942      	ldr	r2, [r0, #20]
 800317a:	8811      	ldrh	r1, [r2, #0]
 800317c:	2900      	cmp	r1, #0
 800317e:	bf1a      	itte	ne
 8003180:	6850      	ldrne	r0, [r2, #4]
 8003182:	1d00      	addne	r0, r0, #4
 8003184:	2004      	moveq	r0, #4
 8003186:	f04f 0501 	mov.w	r5, #1
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	2800      	cmp	r0, #0
 800318e:	bf14      	ite	ne
 8003190:	6803      	ldrne	r3, [r0, #0]
 8003192:	2300      	moveq	r3, #0
 8003194:	2902      	cmp	r1, #2
 8003196:	bfa6      	itte	ge
 8003198:	6850      	ldrge	r0, [r2, #4]
 800319a:	3010      	addge	r0, #16
 800319c:	2004      	movlt	r0, #4
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	bf19      	ittee	ne
 80031a4:	6800      	ldrne	r0, [r0, #0]
 80031a6:	f100 0418 	addne.w	r4, r0, #24
 80031aa:	2100      	moveq	r1, #0
 80031ac:	f101 0418 	addeq.w	r4, r1, #24
 80031b0:	f103 0108 	add.w	r1, r3, #8
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	d01e      	beq.n	80031f8 <forward_tan+0x84>
 80031ba:	684e      	ldr	r6, [r1, #4]
 80031bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c0:	4610      	mov	r0, r2
 80031c2:	1f0f      	subs	r7, r1, #4
 80031c4:	f010 0103 	ands.w	r1, r0, #3
 80031c8:	d006      	beq.n	80031d8 <forward_tan+0x64>
 80031ca:	1e52      	subs	r2, r2, #1
 80031cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80031d0:	1e49      	subs	r1, r1, #1
 80031d2:	fb0c f505 	mul.w	r5, ip, r5
 80031d6:	d1f8      	bne.n	80031ca <forward_tan+0x56>
 80031d8:	0880      	lsrs	r0, r0, #2
 80031da:	d00d      	beq.n	80031f8 <forward_tan+0x84>
 80031dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031e0:	3910      	subs	r1, #16
 80031e2:	68ca      	ldr	r2, [r1, #12]
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	684f      	ldr	r7, [r1, #4]
 80031e8:	4372      	muls	r2, r6
 80031ea:	f851 6910 	ldr.w	r6, [r1], #-16
 80031ee:	437a      	muls	r2, r7
 80031f0:	4372      	muls	r2, r6
 80031f2:	4355      	muls	r5, r2
 80031f4:	1e40      	subs	r0, r0, #1
 80031f6:	d1f4      	bne.n	80031e2 <forward_tan+0x6e>
 80031f8:	6998      	ldr	r0, [r3, #24]
 80031fa:	6886      	ldr	r6, [r0, #8]
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003202:	1f07      	subs	r7, r0, #4
 8003204:	6888      	ldr	r0, [r1, #8]
 8003206:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800320a:	1f14      	subs	r4, r2, #4
 800320c:	42b7      	cmp	r7, r6
 800320e:	d309      	bcc.n	8003224 <forward_tan+0xb0>
 8003210:	ed97 0a00 	vldr	s0, [r7]
 8003214:	f011 fcc8 	bl	8014ba8 <tanf>
 8003218:	ed84 0a00 	vstr	s0, [r4]
 800321c:	1f3f      	subs	r7, r7, #4
 800321e:	1f24      	subs	r4, r4, #4
 8003220:	42b7      	cmp	r7, r6
 8003222:	d2f5      	bcs.n	8003210 <forward_tan+0x9c>
 8003224:	b001      	add	sp, #4
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003228 <nl_func_abs_array_f32>:
 8003228:	6889      	ldr	r1, [r1, #8]
 800322a:	6880      	ldr	r0, [r0, #8]
 800322c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003230:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003234:	1f1b      	subs	r3, r3, #4
 8003236:	1f10      	subs	r0, r2, #4
 8003238:	428b      	cmp	r3, r1
 800323a:	d307      	bcc.n	800324c <nl_func_abs_array_f32+0x24>
 800323c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003240:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003244:	428b      	cmp	r3, r1
 8003246:	f840 2904 	str.w	r2, [r0], #-4
 800324a:	d2f7      	bcs.n	800323c <nl_func_abs_array_f32+0x14>
 800324c:	4770      	bx	lr
	...

08003250 <forward_abs>:
 8003250:	b4f0      	push	{r4, r5, r6, r7}
 8003252:	6942      	ldr	r2, [r0, #20]
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	2900      	cmp	r1, #0
 8003258:	bf1a      	itte	ne
 800325a:	6850      	ldrne	r0, [r2, #4]
 800325c:	1d00      	addne	r0, r0, #4
 800325e:	2004      	moveq	r0, #4
 8003260:	f04f 0501 	mov.w	r5, #1
 8003264:	6800      	ldr	r0, [r0, #0]
 8003266:	2800      	cmp	r0, #0
 8003268:	bf14      	ite	ne
 800326a:	6803      	ldrne	r3, [r0, #0]
 800326c:	2300      	moveq	r3, #0
 800326e:	2902      	cmp	r1, #2
 8003270:	bfa6      	itte	ge
 8003272:	6850      	ldrge	r0, [r2, #4]
 8003274:	3010      	addge	r0, #16
 8003276:	2004      	movlt	r0, #4
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	2800      	cmp	r0, #0
 800327c:	bf19      	ittee	ne
 800327e:	6800      	ldrne	r0, [r0, #0]
 8003280:	f100 0418 	addne.w	r4, r0, #24
 8003284:	2100      	moveq	r1, #0
 8003286:	f101 0418 	addeq.w	r4, r1, #24
 800328a:	f103 0108 	add.w	r1, r3, #8
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	0a12      	lsrs	r2, r2, #8
 8003292:	d01e      	beq.n	80032d2 <forward_abs+0x82>
 8003294:	684e      	ldr	r6, [r1, #4]
 8003296:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800329a:	4610      	mov	r0, r2
 800329c:	1f0f      	subs	r7, r1, #4
 800329e:	f010 0103 	ands.w	r1, r0, #3
 80032a2:	d006      	beq.n	80032b2 <forward_abs+0x62>
 80032a4:	1e52      	subs	r2, r2, #1
 80032a6:	f857 c904 	ldr.w	ip, [r7], #-4
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	fb0c f505 	mul.w	r5, ip, r5
 80032b0:	d1f8      	bne.n	80032a4 <forward_abs+0x54>
 80032b2:	0880      	lsrs	r0, r0, #2
 80032b4:	d00d      	beq.n	80032d2 <forward_abs+0x82>
 80032b6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032ba:	3910      	subs	r1, #16
 80032bc:	68ca      	ldr	r2, [r1, #12]
 80032be:	688e      	ldr	r6, [r1, #8]
 80032c0:	684f      	ldr	r7, [r1, #4]
 80032c2:	4372      	muls	r2, r6
 80032c4:	f851 6910 	ldr.w	r6, [r1], #-16
 80032c8:	437a      	muls	r2, r7
 80032ca:	4372      	muls	r2, r6
 80032cc:	4355      	muls	r5, r2
 80032ce:	1e40      	subs	r0, r0, #1
 80032d0:	d1f4      	bne.n	80032bc <forward_abs+0x6c>
 80032d2:	6998      	ldr	r0, [r3, #24]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6880      	ldr	r0, [r0, #8]
 80032d8:	6893      	ldr	r3, [r2, #8]
 80032da:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032de:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032e2:	1f09      	subs	r1, r1, #4
 80032e4:	1f22      	subs	r2, r4, #4
 80032e6:	4281      	cmp	r1, r0
 80032e8:	f0c0 8008 	bcc.w	80032fc <forward_abs+0xac>
 80032ec:	f851 3904 	ldr.w	r3, [r1], #-4
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	4281      	cmp	r1, r0
 80032f6:	f842 3904 	str.w	r3, [r2], #-4
 80032fa:	d2f7      	bcs.n	80032ec <forward_abs+0x9c>
 80032fc:	bcf0      	pop	{r4, r5, r6, r7}
 80032fe:	4770      	bx	lr

08003300 <nl_func_ceil_array_f32>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	688c      	ldr	r4, [r1, #8]
 8003304:	6880      	ldr	r0, [r0, #8]
 8003306:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800330a:	1f0d      	subs	r5, r1, #4
 800330c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003310:	1f0e      	subs	r6, r1, #4
 8003312:	42a5      	cmp	r5, r4
 8003314:	f0c0 800a 	bcc.w	800332c <nl_func_ceil_array_f32+0x2c>
 8003318:	ed95 0a00 	vldr	s0, [r5]
 800331c:	f011 f82e 	bl	801437c <ceilf>
 8003320:	ed86 0a00 	vstr	s0, [r6]
 8003324:	1f2d      	subs	r5, r5, #4
 8003326:	1f36      	subs	r6, r6, #4
 8003328:	42a5      	cmp	r5, r4
 800332a:	d2f5      	bcs.n	8003318 <nl_func_ceil_array_f32+0x18>
 800332c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003330 <forward_ceil>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b081      	sub	sp, #4
 8003334:	6942      	ldr	r2, [r0, #20]
 8003336:	8811      	ldrh	r1, [r2, #0]
 8003338:	2900      	cmp	r1, #0
 800333a:	bf1a      	itte	ne
 800333c:	6850      	ldrne	r0, [r2, #4]
 800333e:	1d00      	addne	r0, r0, #4
 8003340:	2004      	moveq	r0, #4
 8003342:	f04f 0501 	mov.w	r5, #1
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	2800      	cmp	r0, #0
 800334a:	bf14      	ite	ne
 800334c:	6803      	ldrne	r3, [r0, #0]
 800334e:	2300      	moveq	r3, #0
 8003350:	2902      	cmp	r1, #2
 8003352:	bfa6      	itte	ge
 8003354:	6850      	ldrge	r0, [r2, #4]
 8003356:	3010      	addge	r0, #16
 8003358:	2004      	movlt	r0, #4
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	2800      	cmp	r0, #0
 800335e:	bf19      	ittee	ne
 8003360:	6800      	ldrne	r0, [r0, #0]
 8003362:	f100 0418 	addne.w	r4, r0, #24
 8003366:	2100      	moveq	r1, #0
 8003368:	f101 0418 	addeq.w	r4, r1, #24
 800336c:	f103 0108 	add.w	r1, r3, #8
 8003370:	680a      	ldr	r2, [r1, #0]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	d01e      	beq.n	80033b4 <forward_ceil+0x84>
 8003376:	684e      	ldr	r6, [r1, #4]
 8003378:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800337c:	4610      	mov	r0, r2
 800337e:	1f0f      	subs	r7, r1, #4
 8003380:	f010 0103 	ands.w	r1, r0, #3
 8003384:	d006      	beq.n	8003394 <forward_ceil+0x64>
 8003386:	1e52      	subs	r2, r2, #1
 8003388:	f857 c904 	ldr.w	ip, [r7], #-4
 800338c:	1e49      	subs	r1, r1, #1
 800338e:	fb0c f505 	mul.w	r5, ip, r5
 8003392:	d1f8      	bne.n	8003386 <forward_ceil+0x56>
 8003394:	0880      	lsrs	r0, r0, #2
 8003396:	d00d      	beq.n	80033b4 <forward_ceil+0x84>
 8003398:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800339c:	3910      	subs	r1, #16
 800339e:	68ca      	ldr	r2, [r1, #12]
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	684f      	ldr	r7, [r1, #4]
 80033a4:	4372      	muls	r2, r6
 80033a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80033aa:	437a      	muls	r2, r7
 80033ac:	4372      	muls	r2, r6
 80033ae:	4355      	muls	r5, r2
 80033b0:	1e40      	subs	r0, r0, #1
 80033b2:	d1f4      	bne.n	800339e <forward_ceil+0x6e>
 80033b4:	6998      	ldr	r0, [r3, #24]
 80033b6:	6886      	ldr	r6, [r0, #8]
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80033be:	1f07      	subs	r7, r0, #4
 80033c0:	6888      	ldr	r0, [r1, #8]
 80033c2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80033c6:	1f14      	subs	r4, r2, #4
 80033c8:	42b7      	cmp	r7, r6
 80033ca:	d309      	bcc.n	80033e0 <forward_ceil+0xb0>
 80033cc:	ed97 0a00 	vldr	s0, [r7]
 80033d0:	f010 ffd4 	bl	801437c <ceilf>
 80033d4:	ed84 0a00 	vstr	s0, [r4]
 80033d8:	1f3f      	subs	r7, r7, #4
 80033da:	1f24      	subs	r4, r4, #4
 80033dc:	42b7      	cmp	r7, r6
 80033de:	d2f5      	bcs.n	80033cc <forward_ceil+0x9c>
 80033e0:	b001      	add	sp, #4
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e4 <nl_func_floor_array_f32>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	688c      	ldr	r4, [r1, #8]
 80033e8:	6880      	ldr	r0, [r0, #8]
 80033ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033ee:	1f0d      	subs	r5, r1, #4
 80033f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033f4:	1f0e      	subs	r6, r1, #4
 80033f6:	42a5      	cmp	r5, r4
 80033f8:	f0c0 800a 	bcc.w	8003410 <nl_func_floor_array_f32+0x2c>
 80033fc:	ed95 0a00 	vldr	s0, [r5]
 8003400:	f011 fa26 	bl	8014850 <floorf>
 8003404:	ed86 0a00 	vstr	s0, [r6]
 8003408:	1f2d      	subs	r5, r5, #4
 800340a:	1f36      	subs	r6, r6, #4
 800340c:	42a5      	cmp	r5, r4
 800340e:	d2f5      	bcs.n	80033fc <nl_func_floor_array_f32+0x18>
 8003410:	bd70      	pop	{r4, r5, r6, pc}
	...

08003414 <forward_floor>:
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	b081      	sub	sp, #4
 8003418:	6942      	ldr	r2, [r0, #20]
 800341a:	8811      	ldrh	r1, [r2, #0]
 800341c:	2900      	cmp	r1, #0
 800341e:	bf1a      	itte	ne
 8003420:	6850      	ldrne	r0, [r2, #4]
 8003422:	1d00      	addne	r0, r0, #4
 8003424:	2004      	moveq	r0, #4
 8003426:	f04f 0501 	mov.w	r5, #1
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	2800      	cmp	r0, #0
 800342e:	bf14      	ite	ne
 8003430:	6803      	ldrne	r3, [r0, #0]
 8003432:	2300      	moveq	r3, #0
 8003434:	2902      	cmp	r1, #2
 8003436:	bfa6      	itte	ge
 8003438:	6850      	ldrge	r0, [r2, #4]
 800343a:	3010      	addge	r0, #16
 800343c:	2004      	movlt	r0, #4
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	2800      	cmp	r0, #0
 8003442:	bf19      	ittee	ne
 8003444:	6800      	ldrne	r0, [r0, #0]
 8003446:	f100 0418 	addne.w	r4, r0, #24
 800344a:	2100      	moveq	r1, #0
 800344c:	f101 0418 	addeq.w	r4, r1, #24
 8003450:	f103 0108 	add.w	r1, r3, #8
 8003454:	680a      	ldr	r2, [r1, #0]
 8003456:	0a12      	lsrs	r2, r2, #8
 8003458:	d01e      	beq.n	8003498 <forward_floor+0x84>
 800345a:	684e      	ldr	r6, [r1, #4]
 800345c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003460:	4610      	mov	r0, r2
 8003462:	1f0f      	subs	r7, r1, #4
 8003464:	f010 0103 	ands.w	r1, r0, #3
 8003468:	d006      	beq.n	8003478 <forward_floor+0x64>
 800346a:	1e52      	subs	r2, r2, #1
 800346c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003470:	1e49      	subs	r1, r1, #1
 8003472:	fb0c f505 	mul.w	r5, ip, r5
 8003476:	d1f8      	bne.n	800346a <forward_floor+0x56>
 8003478:	0880      	lsrs	r0, r0, #2
 800347a:	d00d      	beq.n	8003498 <forward_floor+0x84>
 800347c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003480:	3910      	subs	r1, #16
 8003482:	68ca      	ldr	r2, [r1, #12]
 8003484:	688e      	ldr	r6, [r1, #8]
 8003486:	684f      	ldr	r7, [r1, #4]
 8003488:	4372      	muls	r2, r6
 800348a:	f851 6910 	ldr.w	r6, [r1], #-16
 800348e:	437a      	muls	r2, r7
 8003490:	4372      	muls	r2, r6
 8003492:	4355      	muls	r5, r2
 8003494:	1e40      	subs	r0, r0, #1
 8003496:	d1f4      	bne.n	8003482 <forward_floor+0x6e>
 8003498:	6998      	ldr	r0, [r3, #24]
 800349a:	6886      	ldr	r6, [r0, #8]
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80034a2:	1f07      	subs	r7, r0, #4
 80034a4:	6888      	ldr	r0, [r1, #8]
 80034a6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80034aa:	1f14      	subs	r4, r2, #4
 80034ac:	42b7      	cmp	r7, r6
 80034ae:	d309      	bcc.n	80034c4 <forward_floor+0xb0>
 80034b0:	ed97 0a00 	vldr	s0, [r7]
 80034b4:	f011 f9cc 	bl	8014850 <floorf>
 80034b8:	ed84 0a00 	vstr	s0, [r4]
 80034bc:	1f3f      	subs	r7, r7, #4
 80034be:	1f24      	subs	r4, r4, #4
 80034c0:	42b7      	cmp	r7, r6
 80034c2:	d2f5      	bcs.n	80034b0 <forward_floor+0x9c>
 80034c4:	b001      	add	sp, #4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <nl_func_round_array_f32>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	688c      	ldr	r4, [r1, #8]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034d2:	1f0d      	subs	r5, r1, #4
 80034d4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034d8:	1f0e      	subs	r6, r1, #4
 80034da:	42a5      	cmp	r5, r4
 80034dc:	f0c0 800a 	bcc.w	80034f4 <nl_func_round_array_f32+0x2c>
 80034e0:	ed95 0a00 	vldr	s0, [r5]
 80034e4:	f011 faf8 	bl	8014ad8 <roundf>
 80034e8:	ed86 0a00 	vstr	s0, [r6]
 80034ec:	1f2d      	subs	r5, r5, #4
 80034ee:	1f36      	subs	r6, r6, #4
 80034f0:	42a5      	cmp	r5, r4
 80034f2:	d2f5      	bcs.n	80034e0 <nl_func_round_array_f32+0x18>
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034f8 <forward_round>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b081      	sub	sp, #4
 80034fc:	6942      	ldr	r2, [r0, #20]
 80034fe:	8811      	ldrh	r1, [r2, #0]
 8003500:	2900      	cmp	r1, #0
 8003502:	bf1a      	itte	ne
 8003504:	6850      	ldrne	r0, [r2, #4]
 8003506:	1d00      	addne	r0, r0, #4
 8003508:	2004      	moveq	r0, #4
 800350a:	f04f 0501 	mov.w	r5, #1
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	2800      	cmp	r0, #0
 8003512:	bf14      	ite	ne
 8003514:	6803      	ldrne	r3, [r0, #0]
 8003516:	2300      	moveq	r3, #0
 8003518:	2902      	cmp	r1, #2
 800351a:	bfa6      	itte	ge
 800351c:	6850      	ldrge	r0, [r2, #4]
 800351e:	3010      	addge	r0, #16
 8003520:	2004      	movlt	r0, #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	bf19      	ittee	ne
 8003528:	6800      	ldrne	r0, [r0, #0]
 800352a:	f100 0418 	addne.w	r4, r0, #24
 800352e:	2100      	moveq	r1, #0
 8003530:	f101 0418 	addeq.w	r4, r1, #24
 8003534:	f103 0108 	add.w	r1, r3, #8
 8003538:	680a      	ldr	r2, [r1, #0]
 800353a:	0a12      	lsrs	r2, r2, #8
 800353c:	d01e      	beq.n	800357c <forward_round+0x84>
 800353e:	684e      	ldr	r6, [r1, #4]
 8003540:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003544:	4610      	mov	r0, r2
 8003546:	1f0f      	subs	r7, r1, #4
 8003548:	f010 0103 	ands.w	r1, r0, #3
 800354c:	d006      	beq.n	800355c <forward_round+0x64>
 800354e:	1e52      	subs	r2, r2, #1
 8003550:	f857 c904 	ldr.w	ip, [r7], #-4
 8003554:	1e49      	subs	r1, r1, #1
 8003556:	fb0c f505 	mul.w	r5, ip, r5
 800355a:	d1f8      	bne.n	800354e <forward_round+0x56>
 800355c:	0880      	lsrs	r0, r0, #2
 800355e:	d00d      	beq.n	800357c <forward_round+0x84>
 8003560:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003564:	3910      	subs	r1, #16
 8003566:	68ca      	ldr	r2, [r1, #12]
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	684f      	ldr	r7, [r1, #4]
 800356c:	4372      	muls	r2, r6
 800356e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003572:	437a      	muls	r2, r7
 8003574:	4372      	muls	r2, r6
 8003576:	4355      	muls	r5, r2
 8003578:	1e40      	subs	r0, r0, #1
 800357a:	d1f4      	bne.n	8003566 <forward_round+0x6e>
 800357c:	6998      	ldr	r0, [r3, #24]
 800357e:	6886      	ldr	r6, [r0, #8]
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003586:	1f07      	subs	r7, r0, #4
 8003588:	6888      	ldr	r0, [r1, #8]
 800358a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800358e:	1f14      	subs	r4, r2, #4
 8003590:	42b7      	cmp	r7, r6
 8003592:	d309      	bcc.n	80035a8 <forward_round+0xb0>
 8003594:	ed97 0a00 	vldr	s0, [r7]
 8003598:	f011 fa9e 	bl	8014ad8 <roundf>
 800359c:	ed84 0a00 	vstr	s0, [r4]
 80035a0:	1f3f      	subs	r7, r7, #4
 80035a2:	1f24      	subs	r4, r4, #4
 80035a4:	42b7      	cmp	r7, r6
 80035a6:	d2f5      	bcs.n	8003594 <forward_round+0x9c>
 80035a8:	b001      	add	sp, #4
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ac <nl_func_neg_array_f32>:
 80035ac:	6889      	ldr	r1, [r1, #8]
 80035ae:	6880      	ldr	r0, [r0, #8]
 80035b0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035b8:	1f1b      	subs	r3, r3, #4
 80035ba:	1f12      	subs	r2, r2, #4
 80035bc:	428b      	cmp	r3, r1
 80035be:	d32b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80035c4:	edd3 0a00 	vldr	s1, [r3]
 80035c8:	1f18      	subs	r0, r3, #4
 80035ca:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035ce:	4288      	cmp	r0, r1
 80035d0:	edc2 0a00 	vstr	s1, [r2]
 80035d4:	d320      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035d6:	ed90 1a00 	vldr	s2, [r0]
 80035da:	1f13      	subs	r3, r2, #4
 80035dc:	1f00      	subs	r0, r0, #4
 80035de:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035e2:	4288      	cmp	r0, r1
 80035e4:	ed83 1a00 	vstr	s2, [r3]
 80035e8:	d316      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035ea:	edd0 0a00 	vldr	s1, [r0]
 80035ee:	f1a2 0308 	sub.w	r3, r2, #8
 80035f2:	1f00      	subs	r0, r0, #4
 80035f4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035f8:	4288      	cmp	r0, r1
 80035fa:	edc3 0a00 	vstr	s1, [r3]
 80035fe:	d30b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 8003600:	ed90 1a00 	vldr	s2, [r0]
 8003604:	f1a2 030c 	sub.w	r3, r2, #12
 8003608:	ee61 0a00 	vmul.f32	s1, s2, s0
 800360c:	edc3 0a00 	vstr	s1, [r3]
 8003610:	1f03      	subs	r3, r0, #4
 8003612:	3a10      	subs	r2, #16
 8003614:	428b      	cmp	r3, r1
 8003616:	d2d5      	bcs.n	80035c4 <nl_func_neg_array_f32+0x18>
 8003618:	4770      	bx	lr
	...

0800361c <forward_neg>:
 800361c:	b4f0      	push	{r4, r5, r6, r7}
 800361e:	6942      	ldr	r2, [r0, #20]
 8003620:	8811      	ldrh	r1, [r2, #0]
 8003622:	2900      	cmp	r1, #0
 8003624:	bf1a      	itte	ne
 8003626:	6850      	ldrne	r0, [r2, #4]
 8003628:	1d00      	addne	r0, r0, #4
 800362a:	2004      	moveq	r0, #4
 800362c:	f04f 0501 	mov.w	r5, #1
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	2800      	cmp	r0, #0
 8003634:	bf14      	ite	ne
 8003636:	6803      	ldrne	r3, [r0, #0]
 8003638:	2300      	moveq	r3, #0
 800363a:	2902      	cmp	r1, #2
 800363c:	bfa6      	itte	ge
 800363e:	6850      	ldrge	r0, [r2, #4]
 8003640:	3010      	addge	r0, #16
 8003642:	2004      	movlt	r0, #4
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	2800      	cmp	r0, #0
 8003648:	bf19      	ittee	ne
 800364a:	6800      	ldrne	r0, [r0, #0]
 800364c:	f100 0418 	addne.w	r4, r0, #24
 8003650:	2100      	moveq	r1, #0
 8003652:	f101 0418 	addeq.w	r4, r1, #24
 8003656:	f103 0108 	add.w	r1, r3, #8
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	0a12      	lsrs	r2, r2, #8
 800365e:	d01e      	beq.n	800369e <forward_neg+0x82>
 8003660:	684e      	ldr	r6, [r1, #4]
 8003662:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003666:	4610      	mov	r0, r2
 8003668:	1f0f      	subs	r7, r1, #4
 800366a:	f010 0103 	ands.w	r1, r0, #3
 800366e:	d006      	beq.n	800367e <forward_neg+0x62>
 8003670:	1e52      	subs	r2, r2, #1
 8003672:	f857 c904 	ldr.w	ip, [r7], #-4
 8003676:	1e49      	subs	r1, r1, #1
 8003678:	fb0c f505 	mul.w	r5, ip, r5
 800367c:	d1f8      	bne.n	8003670 <forward_neg+0x54>
 800367e:	0880      	lsrs	r0, r0, #2
 8003680:	d00d      	beq.n	800369e <forward_neg+0x82>
 8003682:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003686:	3910      	subs	r1, #16
 8003688:	68ca      	ldr	r2, [r1, #12]
 800368a:	688e      	ldr	r6, [r1, #8]
 800368c:	684f      	ldr	r7, [r1, #4]
 800368e:	4372      	muls	r2, r6
 8003690:	f851 6910 	ldr.w	r6, [r1], #-16
 8003694:	437a      	muls	r2, r7
 8003696:	4372      	muls	r2, r6
 8003698:	4355      	muls	r5, r2
 800369a:	1e40      	subs	r0, r0, #1
 800369c:	d1f4      	bne.n	8003688 <forward_neg+0x6c>
 800369e:	6998      	ldr	r0, [r3, #24]
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6880      	ldr	r0, [r0, #8]
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80036aa:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80036ae:	1f09      	subs	r1, r1, #4
 80036b0:	1f22      	subs	r2, r4, #4
 80036b2:	4281      	cmp	r1, r0
 80036b4:	f0c0 802c 	bcc.w	8003710 <forward_neg+0xf4>
 80036b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80036bc:	edd1 0a00 	vldr	s1, [r1]
 80036c0:	1f09      	subs	r1, r1, #4
 80036c2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036c6:	4281      	cmp	r1, r0
 80036c8:	edc2 0a00 	vstr	s1, [r2]
 80036cc:	d320      	bcc.n	8003710 <forward_neg+0xf4>
 80036ce:	ed91 1a00 	vldr	s2, [r1]
 80036d2:	1f13      	subs	r3, r2, #4
 80036d4:	1f09      	subs	r1, r1, #4
 80036d6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036da:	4281      	cmp	r1, r0
 80036dc:	ed83 1a00 	vstr	s2, [r3]
 80036e0:	d316      	bcc.n	8003710 <forward_neg+0xf4>
 80036e2:	edd1 0a00 	vldr	s1, [r1]
 80036e6:	f1a2 0308 	sub.w	r3, r2, #8
 80036ea:	1f09      	subs	r1, r1, #4
 80036ec:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036f0:	4281      	cmp	r1, r0
 80036f2:	edc3 0a00 	vstr	s1, [r3]
 80036f6:	d30b      	bcc.n	8003710 <forward_neg+0xf4>
 80036f8:	ed91 1a00 	vldr	s2, [r1]
 80036fc:	f1a2 030c 	sub.w	r3, r2, #12
 8003700:	1f09      	subs	r1, r1, #4
 8003702:	3a10      	subs	r2, #16
 8003704:	ee61 0a00 	vmul.f32	s1, s2, s0
 8003708:	4281      	cmp	r1, r0
 800370a:	edc3 0a00 	vstr	s1, [r3]
 800370e:	d2d5      	bcs.n	80036bc <forward_neg+0xa0>
 8003710:	bcf0      	pop	{r4, r5, r6, r7}
 8003712:	4770      	bx	lr

08003714 <nl_func_reciprocal_array_f32>:
 8003714:	6889      	ldr	r1, [r1, #8]
 8003716:	6880      	ldr	r0, [r0, #8]
 8003718:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800371c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003720:	1f1b      	subs	r3, r3, #4
 8003722:	1f12      	subs	r2, r2, #4
 8003724:	428b      	cmp	r3, r1
 8003726:	d331      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003728:	ed93 0a00 	vldr	s0, [r3]
 800372c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003730:	1f18      	subs	r0, r3, #4
 8003732:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003736:	4288      	cmp	r0, r1
 8003738:	ed82 0a00 	vstr	s0, [r2]
 800373c:	d326      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 800373e:	edd0 0a00 	vldr	s1, [r0]
 8003742:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003746:	1f13      	subs	r3, r2, #4
 8003748:	1f00      	subs	r0, r0, #4
 800374a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800374e:	4288      	cmp	r0, r1
 8003750:	ed83 0a00 	vstr	s0, [r3]
 8003754:	d31a      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003756:	ed90 0a00 	vldr	s0, [r0]
 800375a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800375e:	f1a2 0308 	sub.w	r3, r2, #8
 8003762:	1f00      	subs	r0, r0, #4
 8003764:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003768:	4288      	cmp	r0, r1
 800376a:	ed83 0a00 	vstr	s0, [r3]
 800376e:	d30d      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003770:	edd0 0a00 	vldr	s1, [r0]
 8003774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003778:	f1a2 030c 	sub.w	r3, r2, #12
 800377c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003780:	ed83 0a00 	vstr	s0, [r3]
 8003784:	1f03      	subs	r3, r0, #4
 8003786:	3a10      	subs	r2, #16
 8003788:	428b      	cmp	r3, r1
 800378a:	d2cd      	bcs.n	8003728 <nl_func_reciprocal_array_f32+0x14>
 800378c:	4770      	bx	lr
	...

08003790 <forward_reciprocal>:
 8003790:	b4f0      	push	{r4, r5, r6, r7}
 8003792:	6942      	ldr	r2, [r0, #20]
 8003794:	8811      	ldrh	r1, [r2, #0]
 8003796:	2900      	cmp	r1, #0
 8003798:	bf1a      	itte	ne
 800379a:	6850      	ldrne	r0, [r2, #4]
 800379c:	1d00      	addne	r0, r0, #4
 800379e:	2004      	moveq	r0, #4
 80037a0:	f04f 0501 	mov.w	r5, #1
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	2800      	cmp	r0, #0
 80037a8:	bf14      	ite	ne
 80037aa:	6803      	ldrne	r3, [r0, #0]
 80037ac:	2300      	moveq	r3, #0
 80037ae:	2902      	cmp	r1, #2
 80037b0:	bfa6      	itte	ge
 80037b2:	6850      	ldrge	r0, [r2, #4]
 80037b4:	3010      	addge	r0, #16
 80037b6:	2004      	movlt	r0, #4
 80037b8:	6800      	ldr	r0, [r0, #0]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	bf19      	ittee	ne
 80037be:	6800      	ldrne	r0, [r0, #0]
 80037c0:	f100 0418 	addne.w	r4, r0, #24
 80037c4:	2100      	moveq	r1, #0
 80037c6:	f101 0418 	addeq.w	r4, r1, #24
 80037ca:	f103 0108 	add.w	r1, r3, #8
 80037ce:	680a      	ldr	r2, [r1, #0]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	d01e      	beq.n	8003812 <forward_reciprocal+0x82>
 80037d4:	684e      	ldr	r6, [r1, #4]
 80037d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037da:	4610      	mov	r0, r2
 80037dc:	1f0f      	subs	r7, r1, #4
 80037de:	f010 0103 	ands.w	r1, r0, #3
 80037e2:	d006      	beq.n	80037f2 <forward_reciprocal+0x62>
 80037e4:	1e52      	subs	r2, r2, #1
 80037e6:	f857 c904 	ldr.w	ip, [r7], #-4
 80037ea:	1e49      	subs	r1, r1, #1
 80037ec:	fb0c f505 	mul.w	r5, ip, r5
 80037f0:	d1f8      	bne.n	80037e4 <forward_reciprocal+0x54>
 80037f2:	0880      	lsrs	r0, r0, #2
 80037f4:	d00d      	beq.n	8003812 <forward_reciprocal+0x82>
 80037f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037fa:	3910      	subs	r1, #16
 80037fc:	68ca      	ldr	r2, [r1, #12]
 80037fe:	688e      	ldr	r6, [r1, #8]
 8003800:	684f      	ldr	r7, [r1, #4]
 8003802:	4372      	muls	r2, r6
 8003804:	f851 6910 	ldr.w	r6, [r1], #-16
 8003808:	437a      	muls	r2, r7
 800380a:	4372      	muls	r2, r6
 800380c:	4355      	muls	r5, r2
 800380e:	1e40      	subs	r0, r0, #1
 8003810:	d1f4      	bne.n	80037fc <forward_reciprocal+0x6c>
 8003812:	6998      	ldr	r0, [r3, #24]
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	6880      	ldr	r0, [r0, #8]
 8003818:	6893      	ldr	r3, [r2, #8]
 800381a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800381e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003822:	1f09      	subs	r1, r1, #4
 8003824:	1f22      	subs	r2, r4, #4
 8003826:	4281      	cmp	r1, r0
 8003828:	f0c0 8032 	bcc.w	8003890 <forward_reciprocal+0x100>
 800382c:	ed91 0a00 	vldr	s0, [r1]
 8003830:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003834:	1f09      	subs	r1, r1, #4
 8003836:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800383a:	4281      	cmp	r1, r0
 800383c:	ed82 0a00 	vstr	s0, [r2]
 8003840:	d326      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003842:	edd1 0a00 	vldr	s1, [r1]
 8003846:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800384a:	1f13      	subs	r3, r2, #4
 800384c:	1f09      	subs	r1, r1, #4
 800384e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003852:	4281      	cmp	r1, r0
 8003854:	ed83 0a00 	vstr	s0, [r3]
 8003858:	d31a      	bcc.n	8003890 <forward_reciprocal+0x100>
 800385a:	ed91 0a00 	vldr	s0, [r1]
 800385e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003862:	f1a2 0308 	sub.w	r3, r2, #8
 8003866:	1f09      	subs	r1, r1, #4
 8003868:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800386c:	4281      	cmp	r1, r0
 800386e:	ed83 0a00 	vstr	s0, [r3]
 8003872:	d30d      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003874:	edd1 0a00 	vldr	s1, [r1]
 8003878:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800387c:	f1a2 030c 	sub.w	r3, r2, #12
 8003880:	1f09      	subs	r1, r1, #4
 8003882:	3a10      	subs	r2, #16
 8003884:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003888:	4281      	cmp	r1, r0
 800388a:	ed83 0a00 	vstr	s0, [r3]
 800388e:	d2cd      	bcs.n	800382c <forward_reciprocal+0x9c>
 8003890:	bcf0      	pop	{r4, r5, r6, r7}
 8003892:	4770      	bx	lr

08003894 <nl_func_exp_array_f32>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	688c      	ldr	r4, [r1, #8]
 8003898:	6880      	ldr	r0, [r0, #8]
 800389a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800389e:	1f0d      	subs	r5, r1, #4
 80038a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80038a4:	1f0e      	subs	r6, r1, #4
 80038a6:	42a5      	cmp	r5, r4
 80038a8:	f0c0 800a 	bcc.w	80038c0 <nl_func_exp_array_f32+0x2c>
 80038ac:	ed95 0a00 	vldr	s0, [r5]
 80038b0:	f011 fae8 	bl	8014e84 <expf>
 80038b4:	ed86 0a00 	vstr	s0, [r6]
 80038b8:	1f2d      	subs	r5, r5, #4
 80038ba:	1f36      	subs	r6, r6, #4
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d2f5      	bcs.n	80038ac <nl_func_exp_array_f32+0x18>
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038c4 <forward_exp>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b081      	sub	sp, #4
 80038c8:	6942      	ldr	r2, [r0, #20]
 80038ca:	8811      	ldrh	r1, [r2, #0]
 80038cc:	2900      	cmp	r1, #0
 80038ce:	bf1a      	itte	ne
 80038d0:	6850      	ldrne	r0, [r2, #4]
 80038d2:	1d00      	addne	r0, r0, #4
 80038d4:	2004      	moveq	r0, #4
 80038d6:	f04f 0501 	mov.w	r5, #1
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	2800      	cmp	r0, #0
 80038de:	bf14      	ite	ne
 80038e0:	6803      	ldrne	r3, [r0, #0]
 80038e2:	2300      	moveq	r3, #0
 80038e4:	2902      	cmp	r1, #2
 80038e6:	bfa6      	itte	ge
 80038e8:	6850      	ldrge	r0, [r2, #4]
 80038ea:	3010      	addge	r0, #16
 80038ec:	2004      	movlt	r0, #4
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bf19      	ittee	ne
 80038f4:	6800      	ldrne	r0, [r0, #0]
 80038f6:	f100 0418 	addne.w	r4, r0, #24
 80038fa:	2100      	moveq	r1, #0
 80038fc:	f101 0418 	addeq.w	r4, r1, #24
 8003900:	f103 0108 	add.w	r1, r3, #8
 8003904:	680a      	ldr	r2, [r1, #0]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	d01e      	beq.n	8003948 <forward_exp+0x84>
 800390a:	684e      	ldr	r6, [r1, #4]
 800390c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003910:	4610      	mov	r0, r2
 8003912:	1f0f      	subs	r7, r1, #4
 8003914:	f010 0103 	ands.w	r1, r0, #3
 8003918:	d006      	beq.n	8003928 <forward_exp+0x64>
 800391a:	1e52      	subs	r2, r2, #1
 800391c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003920:	1e49      	subs	r1, r1, #1
 8003922:	fb0c f505 	mul.w	r5, ip, r5
 8003926:	d1f8      	bne.n	800391a <forward_exp+0x56>
 8003928:	0880      	lsrs	r0, r0, #2
 800392a:	d00d      	beq.n	8003948 <forward_exp+0x84>
 800392c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003930:	3910      	subs	r1, #16
 8003932:	68ca      	ldr	r2, [r1, #12]
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	684f      	ldr	r7, [r1, #4]
 8003938:	4372      	muls	r2, r6
 800393a:	f851 6910 	ldr.w	r6, [r1], #-16
 800393e:	437a      	muls	r2, r7
 8003940:	4372      	muls	r2, r6
 8003942:	4355      	muls	r5, r2
 8003944:	1e40      	subs	r0, r0, #1
 8003946:	d1f4      	bne.n	8003932 <forward_exp+0x6e>
 8003948:	6998      	ldr	r0, [r3, #24]
 800394a:	6886      	ldr	r6, [r0, #8]
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003952:	1f07      	subs	r7, r0, #4
 8003954:	6888      	ldr	r0, [r1, #8]
 8003956:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800395a:	1f14      	subs	r4, r2, #4
 800395c:	42b7      	cmp	r7, r6
 800395e:	d309      	bcc.n	8003974 <forward_exp+0xb0>
 8003960:	ed97 0a00 	vldr	s0, [r7]
 8003964:	f011 fa8e 	bl	8014e84 <expf>
 8003968:	ed84 0a00 	vstr	s0, [r4]
 800396c:	1f3f      	subs	r7, r7, #4
 800396e:	1f24      	subs	r4, r4, #4
 8003970:	42b7      	cmp	r7, r6
 8003972:	d2f5      	bcs.n	8003960 <forward_exp+0x9c>
 8003974:	b001      	add	sp, #4
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003978 <nl_func_sigmoid_array_f32>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	688c      	ldr	r4, [r1, #8]
 800397c:	6880      	ldr	r0, [r0, #8]
 800397e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003982:	1f0d      	subs	r5, r1, #4
 8003984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003988:	1f0e      	subs	r6, r1, #4
 800398a:	42a5      	cmp	r5, r4
 800398c:	f0c0 8014 	bcc.w	80039b8 <nl_func_sigmoid_array_f32+0x40>
 8003990:	ed95 0a00 	vldr	s0, [r5]
 8003994:	eeb1 0a40 	vneg.f32	s0, s0
 8003998:	f011 fa74 	bl	8014e84 <expf>
 800399c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80039a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80039ac:	ed86 0a00 	vstr	s0, [r6]
 80039b0:	1f2d      	subs	r5, r5, #4
 80039b2:	1f36      	subs	r6, r6, #4
 80039b4:	42a5      	cmp	r5, r4
 80039b6:	d2eb      	bcs.n	8003990 <nl_func_sigmoid_array_f32+0x18>
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039bc <forward_sigmoid>:
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b081      	sub	sp, #4
 80039c0:	6942      	ldr	r2, [r0, #20]
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	2900      	cmp	r1, #0
 80039c6:	bf1a      	itte	ne
 80039c8:	6850      	ldrne	r0, [r2, #4]
 80039ca:	1d00      	addne	r0, r0, #4
 80039cc:	2004      	moveq	r0, #4
 80039ce:	f04f 0501 	mov.w	r5, #1
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	bf14      	ite	ne
 80039d8:	6803      	ldrne	r3, [r0, #0]
 80039da:	2300      	moveq	r3, #0
 80039dc:	2902      	cmp	r1, #2
 80039de:	bfa6      	itte	ge
 80039e0:	6850      	ldrge	r0, [r2, #4]
 80039e2:	3010      	addge	r0, #16
 80039e4:	2004      	movlt	r0, #4
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bf19      	ittee	ne
 80039ec:	6800      	ldrne	r0, [r0, #0]
 80039ee:	f100 0418 	addne.w	r4, r0, #24
 80039f2:	2100      	moveq	r1, #0
 80039f4:	f101 0418 	addeq.w	r4, r1, #24
 80039f8:	f103 0108 	add.w	r1, r3, #8
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	d01e      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a02:	684e      	ldr	r6, [r1, #4]
 8003a04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a08:	4610      	mov	r0, r2
 8003a0a:	1f0f      	subs	r7, r1, #4
 8003a0c:	f010 0103 	ands.w	r1, r0, #3
 8003a10:	d006      	beq.n	8003a20 <forward_sigmoid+0x64>
 8003a12:	1e52      	subs	r2, r2, #1
 8003a14:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a18:	1e49      	subs	r1, r1, #1
 8003a1a:	fb0c f505 	mul.w	r5, ip, r5
 8003a1e:	d1f8      	bne.n	8003a12 <forward_sigmoid+0x56>
 8003a20:	0880      	lsrs	r0, r0, #2
 8003a22:	d00d      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a28:	3910      	subs	r1, #16
 8003a2a:	68ca      	ldr	r2, [r1, #12]
 8003a2c:	688e      	ldr	r6, [r1, #8]
 8003a2e:	684f      	ldr	r7, [r1, #4]
 8003a30:	4372      	muls	r2, r6
 8003a32:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a36:	437a      	muls	r2, r7
 8003a38:	4372      	muls	r2, r6
 8003a3a:	4355      	muls	r5, r2
 8003a3c:	1e40      	subs	r0, r0, #1
 8003a3e:	d1f4      	bne.n	8003a2a <forward_sigmoid+0x6e>
 8003a40:	6998      	ldr	r0, [r3, #24]
 8003a42:	6886      	ldr	r6, [r0, #8]
 8003a44:	6821      	ldr	r1, [r4, #0]
 8003a46:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a4a:	1f07      	subs	r7, r0, #4
 8003a4c:	6888      	ldr	r0, [r1, #8]
 8003a4e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a52:	1f14      	subs	r4, r2, #4
 8003a54:	42b7      	cmp	r7, r6
 8003a56:	d313      	bcc.n	8003a80 <forward_sigmoid+0xc4>
 8003a58:	ed97 0a00 	vldr	s0, [r7]
 8003a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a60:	f011 fa10 	bl	8014e84 <expf>
 8003a64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a68:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a70:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a74:	ed84 0a00 	vstr	s0, [r4]
 8003a78:	1f3f      	subs	r7, r7, #4
 8003a7a:	1f24      	subs	r4, r4, #4
 8003a7c:	42b7      	cmp	r7, r6
 8003a7e:	d2eb      	bcs.n	8003a58 <forward_sigmoid+0x9c>
 8003a80:	b001      	add	sp, #4
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a84 <nl_func_sign_array_f32>:
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	6880      	ldr	r0, [r0, #8]
 8003a88:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a90:	1f1b      	subs	r3, r3, #4
 8003a92:	1f10      	subs	r0, r2, #4
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d314      	bcc.n	8003ac2 <nl_func_sign_array_f32+0x3e>
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	ed93 0a00 	vldr	s0, [r3]
 8003aa0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bfcc      	ite	gt
 8003aaa:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b90 <.text_49>
 8003aae:	ee00 2a10 	vmovle	s0, r2
 8003ab2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003ab6:	ed80 0a00 	vstr	s0, [r0]
 8003aba:	1f1b      	subs	r3, r3, #4
 8003abc:	1f00      	subs	r0, r0, #4
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d2ec      	bcs.n	8003a9c <nl_func_sign_array_f32+0x18>
 8003ac2:	4770      	bx	lr

08003ac4 <forward_sign>:
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
 8003ac6:	6942      	ldr	r2, [r0, #20]
 8003ac8:	8811      	ldrh	r1, [r2, #0]
 8003aca:	2900      	cmp	r1, #0
 8003acc:	bf1a      	itte	ne
 8003ace:	6850      	ldrne	r0, [r2, #4]
 8003ad0:	1d00      	addne	r0, r0, #4
 8003ad2:	2004      	moveq	r0, #4
 8003ad4:	f04f 0501 	mov.w	r5, #1
 8003ad8:	6800      	ldr	r0, [r0, #0]
 8003ada:	2800      	cmp	r0, #0
 8003adc:	bf14      	ite	ne
 8003ade:	6803      	ldrne	r3, [r0, #0]
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	2901      	cmp	r1, #1
 8003ae4:	bfc6      	itte	gt
 8003ae6:	6850      	ldrgt	r0, [r2, #4]
 8003ae8:	3010      	addgt	r0, #16
 8003aea:	2004      	movle	r0, #4
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	2800      	cmp	r0, #0
 8003af0:	bf19      	ittee	ne
 8003af2:	6800      	ldrne	r0, [r0, #0]
 8003af4:	f100 0418 	addne.w	r4, r0, #24
 8003af8:	2100      	moveq	r1, #0
 8003afa:	f101 0418 	addeq.w	r4, r1, #24
 8003afe:	f103 0108 	add.w	r1, r3, #8
 8003b02:	680a      	ldr	r2, [r1, #0]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	d01e      	beq.n	8003b46 <forward_sign+0x82>
 8003b08:	684e      	ldr	r6, [r1, #4]
 8003b0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b0e:	4610      	mov	r0, r2
 8003b10:	1f0f      	subs	r7, r1, #4
 8003b12:	f010 0103 	ands.w	r1, r0, #3
 8003b16:	d006      	beq.n	8003b26 <forward_sign+0x62>
 8003b18:	1e52      	subs	r2, r2, #1
 8003b1a:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b1e:	1e49      	subs	r1, r1, #1
 8003b20:	fb0c f505 	mul.w	r5, ip, r5
 8003b24:	d1f8      	bne.n	8003b18 <forward_sign+0x54>
 8003b26:	0880      	lsrs	r0, r0, #2
 8003b28:	d00d      	beq.n	8003b46 <forward_sign+0x82>
 8003b2a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b2e:	3910      	subs	r1, #16
 8003b30:	68ca      	ldr	r2, [r1, #12]
 8003b32:	688e      	ldr	r6, [r1, #8]
 8003b34:	684f      	ldr	r7, [r1, #4]
 8003b36:	4372      	muls	r2, r6
 8003b38:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b3c:	437a      	muls	r2, r7
 8003b3e:	4372      	muls	r2, r6
 8003b40:	4355      	muls	r5, r2
 8003b42:	1e40      	subs	r0, r0, #1
 8003b44:	d1f4      	bne.n	8003b30 <forward_sign+0x6c>
 8003b46:	6998      	ldr	r0, [r3, #24]
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6880      	ldr	r0, [r0, #8]
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b52:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b56:	1f09      	subs	r1, r1, #4
 8003b58:	1f22      	subs	r2, r4, #4
 8003b5a:	4281      	cmp	r1, r0
 8003b5c:	f0c0 8015 	bcc.w	8003b8a <forward_sign+0xc6>
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	ed91 0a00 	vldr	s0, [r1]
 8003b68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	bfcc      	ite	gt
 8003b72:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b90 <.text_49>
 8003b76:	ee00 3a10 	vmovle	s0, r3
 8003b7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b7e:	ed82 0a00 	vstr	s0, [r2]
 8003b82:	1f09      	subs	r1, r1, #4
 8003b84:	1f12      	subs	r2, r2, #4
 8003b86:	4281      	cmp	r1, r0
 8003b88:	d2ec      	bcs.n	8003b64 <forward_sign+0xa0>
 8003b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b8c:	4770      	bx	lr
	...

08003b90 <.text_49>:
 8003b90:	00000001 	.word	0x00000001

08003b94 <nl_func_sqrt_array_f32>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	6880      	ldr	r0, [r0, #8]
 8003b9a:	68a1      	ldr	r1, [r4, #8]
 8003b9c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ba4:	1f1d      	subs	r5, r3, #4
 8003ba6:	1f16      	subs	r6, r2, #4
 8003ba8:	428d      	cmp	r5, r1
 8003baa:	d30a      	bcc.n	8003bc2 <nl_func_sqrt_array_f32+0x2e>
 8003bac:	ed95 0a00 	vldr	s0, [r5]
 8003bb0:	f001 fba4 	bl	80052fc <ai_math_sqrt>
 8003bb4:	ed86 0a00 	vstr	s0, [r6]
 8003bb8:	1f2d      	subs	r5, r5, #4
 8003bba:	68a0      	ldr	r0, [r4, #8]
 8003bbc:	1f36      	subs	r6, r6, #4
 8003bbe:	4285      	cmp	r5, r0
 8003bc0:	d2f4      	bcs.n	8003bac <nl_func_sqrt_array_f32+0x18>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}

08003bc4 <forward_sqrt>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b081      	sub	sp, #4
 8003bc8:	6942      	ldr	r2, [r0, #20]
 8003bca:	8811      	ldrh	r1, [r2, #0]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	bf1a      	itte	ne
 8003bd0:	6850      	ldrne	r0, [r2, #4]
 8003bd2:	1d00      	addne	r0, r0, #4
 8003bd4:	2004      	moveq	r0, #4
 8003bd6:	f04f 0501 	mov.w	r5, #1
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	bf14      	ite	ne
 8003be0:	6803      	ldrne	r3, [r0, #0]
 8003be2:	2300      	moveq	r3, #0
 8003be4:	2902      	cmp	r1, #2
 8003be6:	bfa6      	itte	ge
 8003be8:	6850      	ldrge	r0, [r2, #4]
 8003bea:	3010      	addge	r0, #16
 8003bec:	2004      	movlt	r0, #4
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	bf19      	ittee	ne
 8003bf4:	6800      	ldrne	r0, [r0, #0]
 8003bf6:	f100 0418 	addne.w	r4, r0, #24
 8003bfa:	2100      	moveq	r1, #0
 8003bfc:	f101 0418 	addeq.w	r4, r1, #24
 8003c00:	f103 0108 	add.w	r1, r3, #8
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	0a12      	lsrs	r2, r2, #8
 8003c08:	d01e      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c0a:	684e      	ldr	r6, [r1, #4]
 8003c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c10:	4610      	mov	r0, r2
 8003c12:	1f0f      	subs	r7, r1, #4
 8003c14:	f010 0103 	ands.w	r1, r0, #3
 8003c18:	d006      	beq.n	8003c28 <forward_sqrt+0x64>
 8003c1a:	1e52      	subs	r2, r2, #1
 8003c1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c20:	1e49      	subs	r1, r1, #1
 8003c22:	fb0c f505 	mul.w	r5, ip, r5
 8003c26:	d1f8      	bne.n	8003c1a <forward_sqrt+0x56>
 8003c28:	0880      	lsrs	r0, r0, #2
 8003c2a:	d00d      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c30:	3910      	subs	r1, #16
 8003c32:	68ca      	ldr	r2, [r1, #12]
 8003c34:	688e      	ldr	r6, [r1, #8]
 8003c36:	684f      	ldr	r7, [r1, #4]
 8003c38:	4372      	muls	r2, r6
 8003c3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c3e:	437a      	muls	r2, r7
 8003c40:	4372      	muls	r2, r6
 8003c42:	4355      	muls	r5, r2
 8003c44:	1e40      	subs	r0, r0, #1
 8003c46:	d1f4      	bne.n	8003c32 <forward_sqrt+0x6e>
 8003c48:	699e      	ldr	r6, [r3, #24]
 8003c4a:	68b0      	ldr	r0, [r6, #8]
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c52:	1f0f      	subs	r7, r1, #4
 8003c54:	6891      	ldr	r1, [r2, #8]
 8003c56:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c5a:	1f1c      	subs	r4, r3, #4
 8003c5c:	4287      	cmp	r7, r0
 8003c5e:	d30a      	bcc.n	8003c76 <forward_sqrt+0xb2>
 8003c60:	ed97 0a00 	vldr	s0, [r7]
 8003c64:	f001 fb4a 	bl	80052fc <ai_math_sqrt>
 8003c68:	ed84 0a00 	vstr	s0, [r4]
 8003c6c:	1f3f      	subs	r7, r7, #4
 8003c6e:	68b0      	ldr	r0, [r6, #8]
 8003c70:	1f24      	subs	r4, r4, #4
 8003c72:	4287      	cmp	r7, r0
 8003c74:	d2f4      	bcs.n	8003c60 <forward_sqrt+0x9c>
 8003c76:	b001      	add	sp, #4
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c7c <nl_func_soft_plus_array_f32>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	688c      	ldr	r4, [r1, #8]
 8003c80:	6880      	ldr	r0, [r0, #8]
 8003c82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c86:	1f0d      	subs	r5, r1, #4
 8003c88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c8c:	1f0e      	subs	r6, r1, #4
 8003c8e:	42a5      	cmp	r5, r4
 8003c90:	f0c0 8010 	bcc.w	8003cb4 <nl_func_soft_plus_array_f32+0x38>
 8003c94:	ed95 0a00 	vldr	s0, [r5]
 8003c98:	f011 f8f4 	bl	8014e84 <expf>
 8003c9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ca0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003ca4:	f011 f958 	bl	8014f58 <logf>
 8003ca8:	ed86 0a00 	vstr	s0, [r6]
 8003cac:	1f2d      	subs	r5, r5, #4
 8003cae:	1f36      	subs	r6, r6, #4
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d2ef      	bcs.n	8003c94 <nl_func_soft_plus_array_f32+0x18>
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <forward_soft_plus>:
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b081      	sub	sp, #4
 8003cbc:	6942      	ldr	r2, [r0, #20]
 8003cbe:	8811      	ldrh	r1, [r2, #0]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	bf1a      	itte	ne
 8003cc4:	6850      	ldrne	r0, [r2, #4]
 8003cc6:	1d00      	addne	r0, r0, #4
 8003cc8:	2004      	moveq	r0, #4
 8003cca:	f04f 0501 	mov.w	r5, #1
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bf14      	ite	ne
 8003cd4:	6803      	ldrne	r3, [r0, #0]
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	2902      	cmp	r1, #2
 8003cda:	bfa6      	itte	ge
 8003cdc:	6850      	ldrge	r0, [r2, #4]
 8003cde:	3010      	addge	r0, #16
 8003ce0:	2004      	movlt	r0, #4
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bf19      	ittee	ne
 8003ce8:	6800      	ldrne	r0, [r0, #0]
 8003cea:	f100 0418 	addne.w	r4, r0, #24
 8003cee:	2100      	moveq	r1, #0
 8003cf0:	f101 0418 	addeq.w	r4, r1, #24
 8003cf4:	f103 0108 	add.w	r1, r3, #8
 8003cf8:	680a      	ldr	r2, [r1, #0]
 8003cfa:	0a12      	lsrs	r2, r2, #8
 8003cfc:	d01e      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003cfe:	684e      	ldr	r6, [r1, #4]
 8003d00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d04:	4610      	mov	r0, r2
 8003d06:	1f0f      	subs	r7, r1, #4
 8003d08:	f010 0103 	ands.w	r1, r0, #3
 8003d0c:	d006      	beq.n	8003d1c <forward_soft_plus+0x64>
 8003d0e:	1e52      	subs	r2, r2, #1
 8003d10:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d14:	1e49      	subs	r1, r1, #1
 8003d16:	fb0c f505 	mul.w	r5, ip, r5
 8003d1a:	d1f8      	bne.n	8003d0e <forward_soft_plus+0x56>
 8003d1c:	0880      	lsrs	r0, r0, #2
 8003d1e:	d00d      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003d20:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d24:	3910      	subs	r1, #16
 8003d26:	68ca      	ldr	r2, [r1, #12]
 8003d28:	688e      	ldr	r6, [r1, #8]
 8003d2a:	684f      	ldr	r7, [r1, #4]
 8003d2c:	4372      	muls	r2, r6
 8003d2e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d32:	437a      	muls	r2, r7
 8003d34:	4372      	muls	r2, r6
 8003d36:	4355      	muls	r5, r2
 8003d38:	1e40      	subs	r0, r0, #1
 8003d3a:	d1f4      	bne.n	8003d26 <forward_soft_plus+0x6e>
 8003d3c:	6998      	ldr	r0, [r3, #24]
 8003d3e:	6886      	ldr	r6, [r0, #8]
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d46:	1f07      	subs	r7, r0, #4
 8003d48:	6888      	ldr	r0, [r1, #8]
 8003d4a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d4e:	1f14      	subs	r4, r2, #4
 8003d50:	42b7      	cmp	r7, r6
 8003d52:	d30f      	bcc.n	8003d74 <forward_soft_plus+0xbc>
 8003d54:	ed97 0a00 	vldr	s0, [r7]
 8003d58:	f011 f894 	bl	8014e84 <expf>
 8003d5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d64:	f011 f8f8 	bl	8014f58 <logf>
 8003d68:	ed84 0a00 	vstr	s0, [r4]
 8003d6c:	1f3f      	subs	r7, r7, #4
 8003d6e:	1f24      	subs	r4, r4, #4
 8003d70:	42b7      	cmp	r7, r6
 8003d72:	d2ef      	bcs.n	8003d54 <forward_soft_plus+0x9c>
 8003d74:	b001      	add	sp, #4
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <nl_func_soft_sign_array_f32>:
 8003d78:	6889      	ldr	r1, [r1, #8]
 8003d7a:	6880      	ldr	r0, [r0, #8]
 8003d7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d84:	1f1b      	subs	r3, r3, #4
 8003d86:	1f10      	subs	r0, r2, #4
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d30f      	bcc.n	8003dac <nl_func_soft_sign_array_f32+0x34>
 8003d8c:	ed93 0a00 	vldr	s0, [r3]
 8003d90:	eef0 0ac0 	vabs.f32	s1, s0
 8003d94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d98:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d9c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003da0:	ed80 0a00 	vstr	s0, [r0]
 8003da4:	1f1b      	subs	r3, r3, #4
 8003da6:	1f00      	subs	r0, r0, #4
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d2ef      	bcs.n	8003d8c <nl_func_soft_sign_array_f32+0x14>
 8003dac:	4770      	bx	lr
	...

08003db0 <forward_soft_sign>:
 8003db0:	b4f0      	push	{r4, r5, r6, r7}
 8003db2:	6942      	ldr	r2, [r0, #20]
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	bf1a      	itte	ne
 8003dba:	6850      	ldrne	r0, [r2, #4]
 8003dbc:	1d00      	addne	r0, r0, #4
 8003dbe:	2004      	moveq	r0, #4
 8003dc0:	f04f 0501 	mov.w	r5, #1
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	6803      	ldrne	r3, [r0, #0]
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	2902      	cmp	r1, #2
 8003dd0:	bfa6      	itte	ge
 8003dd2:	6850      	ldrge	r0, [r2, #4]
 8003dd4:	3010      	addge	r0, #16
 8003dd6:	2004      	movlt	r0, #4
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	bf19      	ittee	ne
 8003dde:	6800      	ldrne	r0, [r0, #0]
 8003de0:	f100 0418 	addne.w	r4, r0, #24
 8003de4:	2100      	moveq	r1, #0
 8003de6:	f101 0418 	addeq.w	r4, r1, #24
 8003dea:	f103 0108 	add.w	r1, r3, #8
 8003dee:	680a      	ldr	r2, [r1, #0]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	d01e      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003df4:	684e      	ldr	r6, [r1, #4]
 8003df6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	1f0f      	subs	r7, r1, #4
 8003dfe:	f010 0103 	ands.w	r1, r0, #3
 8003e02:	d006      	beq.n	8003e12 <forward_soft_sign+0x62>
 8003e04:	1e52      	subs	r2, r2, #1
 8003e06:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e0a:	1e49      	subs	r1, r1, #1
 8003e0c:	fb0c f505 	mul.w	r5, ip, r5
 8003e10:	d1f8      	bne.n	8003e04 <forward_soft_sign+0x54>
 8003e12:	0880      	lsrs	r0, r0, #2
 8003e14:	d00d      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003e16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e1a:	3910      	subs	r1, #16
 8003e1c:	68ca      	ldr	r2, [r1, #12]
 8003e1e:	688e      	ldr	r6, [r1, #8]
 8003e20:	684f      	ldr	r7, [r1, #4]
 8003e22:	4372      	muls	r2, r6
 8003e24:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e28:	437a      	muls	r2, r7
 8003e2a:	4372      	muls	r2, r6
 8003e2c:	4355      	muls	r5, r2
 8003e2e:	1e40      	subs	r0, r0, #1
 8003e30:	d1f4      	bne.n	8003e1c <forward_soft_sign+0x6c>
 8003e32:	6998      	ldr	r0, [r3, #24]
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6880      	ldr	r0, [r0, #8]
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e3e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e42:	1f09      	subs	r1, r1, #4
 8003e44:	1f22      	subs	r2, r4, #4
 8003e46:	4281      	cmp	r1, r0
 8003e48:	f0c0 8010 	bcc.w	8003e6c <forward_soft_sign+0xbc>
 8003e4c:	ed91 0a00 	vldr	s0, [r1]
 8003e50:	eef0 0ac0 	vabs.f32	s1, s0
 8003e54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e58:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e5c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e60:	ed82 0a00 	vstr	s0, [r2]
 8003e64:	1f09      	subs	r1, r1, #4
 8003e66:	1f12      	subs	r2, r2, #4
 8003e68:	4281      	cmp	r1, r0
 8003e6a:	d2ef      	bcs.n	8003e4c <forward_soft_sign+0x9c>
 8003e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e6e:	4770      	bx	lr

08003e70 <nl_func_tanh_array_f32>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	688c      	ldr	r4, [r1, #8]
 8003e74:	6880      	ldr	r0, [r0, #8]
 8003e76:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e7a:	1f0d      	subs	r5, r1, #4
 8003e7c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e80:	1f0e      	subs	r6, r1, #4
 8003e82:	42a5      	cmp	r5, r4
 8003e84:	f0c0 800a 	bcc.w	8003e9c <nl_func_tanh_array_f32+0x2c>
 8003e88:	ed95 0a00 	vldr	s0, [r5]
 8003e8c:	f010 feb4 	bl	8014bf8 <tanhf>
 8003e90:	ed86 0a00 	vstr	s0, [r6]
 8003e94:	1f2d      	subs	r5, r5, #4
 8003e96:	1f36      	subs	r6, r6, #4
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d2f5      	bcs.n	8003e88 <nl_func_tanh_array_f32+0x18>
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ea0 <forward_tanh>:
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b081      	sub	sp, #4
 8003ea4:	6942      	ldr	r2, [r0, #20]
 8003ea6:	8811      	ldrh	r1, [r2, #0]
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	bf1a      	itte	ne
 8003eac:	6850      	ldrne	r0, [r2, #4]
 8003eae:	1d00      	addne	r0, r0, #4
 8003eb0:	2004      	moveq	r0, #4
 8003eb2:	f04f 0501 	mov.w	r5, #1
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	6803      	ldrne	r3, [r0, #0]
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	2902      	cmp	r1, #2
 8003ec2:	bfa6      	itte	ge
 8003ec4:	6850      	ldrge	r0, [r2, #4]
 8003ec6:	3010      	addge	r0, #16
 8003ec8:	2004      	movlt	r0, #4
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	bf19      	ittee	ne
 8003ed0:	6800      	ldrne	r0, [r0, #0]
 8003ed2:	f100 0418 	addne.w	r4, r0, #24
 8003ed6:	2100      	moveq	r1, #0
 8003ed8:	f101 0418 	addeq.w	r4, r1, #24
 8003edc:	f103 0108 	add.w	r1, r3, #8
 8003ee0:	680a      	ldr	r2, [r1, #0]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	d01e      	beq.n	8003f24 <forward_tanh+0x84>
 8003ee6:	684e      	ldr	r6, [r1, #4]
 8003ee8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eec:	4610      	mov	r0, r2
 8003eee:	1f0f      	subs	r7, r1, #4
 8003ef0:	f010 0103 	ands.w	r1, r0, #3
 8003ef4:	d006      	beq.n	8003f04 <forward_tanh+0x64>
 8003ef6:	1e52      	subs	r2, r2, #1
 8003ef8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003efc:	1e49      	subs	r1, r1, #1
 8003efe:	fb0c f505 	mul.w	r5, ip, r5
 8003f02:	d1f8      	bne.n	8003ef6 <forward_tanh+0x56>
 8003f04:	0880      	lsrs	r0, r0, #2
 8003f06:	d00d      	beq.n	8003f24 <forward_tanh+0x84>
 8003f08:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f0c:	3910      	subs	r1, #16
 8003f0e:	68ca      	ldr	r2, [r1, #12]
 8003f10:	688e      	ldr	r6, [r1, #8]
 8003f12:	684f      	ldr	r7, [r1, #4]
 8003f14:	4372      	muls	r2, r6
 8003f16:	f851 6910 	ldr.w	r6, [r1], #-16
 8003f1a:	437a      	muls	r2, r7
 8003f1c:	4372      	muls	r2, r6
 8003f1e:	4355      	muls	r5, r2
 8003f20:	1e40      	subs	r0, r0, #1
 8003f22:	d1f4      	bne.n	8003f0e <forward_tanh+0x6e>
 8003f24:	6998      	ldr	r0, [r3, #24]
 8003f26:	6886      	ldr	r6, [r0, #8]
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f2e:	1f07      	subs	r7, r0, #4
 8003f30:	6888      	ldr	r0, [r1, #8]
 8003f32:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f36:	1f14      	subs	r4, r2, #4
 8003f38:	42b7      	cmp	r7, r6
 8003f3a:	d309      	bcc.n	8003f50 <forward_tanh+0xb0>
 8003f3c:	ed97 0a00 	vldr	s0, [r7]
 8003f40:	f010 fe5a 	bl	8014bf8 <tanhf>
 8003f44:	ed84 0a00 	vstr	s0, [r4]
 8003f48:	1f3f      	subs	r7, r7, #4
 8003f4a:	1f24      	subs	r4, r4, #4
 8003f4c:	42b7      	cmp	r7, r6
 8003f4e:	d2f5      	bcs.n	8003f3c <forward_tanh+0x9c>
 8003f50:	b001      	add	sp, #4
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f54 <nl_func_relu_array_f32>:
 8003f54:	6889      	ldr	r1, [r1, #8]
 8003f56:	6880      	ldr	r0, [r0, #8]
 8003f58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f60:	1f1b      	subs	r3, r3, #4
 8003f62:	1f10      	subs	r0, r2, #4
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d30e      	bcc.n	8003f86 <nl_func_relu_array_f32+0x32>
 8003f68:	ed93 0a00 	vldr	s0, [r3]
 8003f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	bf48      	it	mi
 8003f76:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004164 <.text_62>
 8003f7a:	ed80 0a00 	vstr	s0, [r0]
 8003f7e:	1f1b      	subs	r3, r3, #4
 8003f80:	1f00      	subs	r0, r0, #4
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d2f0      	bcs.n	8003f68 <nl_func_relu_array_f32+0x14>
 8003f86:	4770      	bx	lr

08003f88 <nl_func_sm_channel_f32>:
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	688f      	ldr	r7, [r1, #8]
 8003f92:	6886      	ldr	r6, [r0, #8]
 8003f94:	ed97 8a00 	vldr	s16, [r7]
 8003f98:	4614      	mov	r4, r2
 8003f9a:	2c02      	cmp	r4, #2
 8003f9c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004164 <.text_62>
 8003fa0:	d33d      	bcc.n	800401e <nl_func_sm_channel_f32+0x96>
 8003fa2:	1e61      	subs	r1, r4, #1
 8003fa4:	1d3a      	adds	r2, r7, #4
 8003fa6:	f011 0003 	ands.w	r0, r1, #3
 8003faa:	d00c      	beq.n	8003fc6 <nl_func_sm_channel_f32+0x3e>
 8003fac:	ed92 0a00 	vldr	s0, [r2]
 8003fb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bf58      	it	pl
 8003fba:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fbe:	1e40      	subs	r0, r0, #1
 8003fc0:	f102 0204 	add.w	r2, r2, #4
 8003fc4:	d1f2      	bne.n	8003fac <nl_func_sm_channel_f32+0x24>
 8003fc6:	0889      	lsrs	r1, r1, #2
 8003fc8:	f000 802b 	beq.w	8004022 <nl_func_sm_channel_f32+0x9a>
 8003fcc:	ed92 0a00 	vldr	s0, [r2]
 8003fd0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	bf58      	it	pl
 8003fda:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fde:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fe2:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	bf58      	it	pl
 8003fec:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003ff0:	ed92 0a02 	vldr	s0, [r2, #8]
 8003ff4:	eeb4 0a48 	vcmp.f32	s0, s16
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	bf58      	it	pl
 8003ffe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004002:	ed92 0a03 	vldr	s0, [r2, #12]
 8004006:	eeb4 0a48 	vcmp.f32	s0, s16
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	bf58      	it	pl
 8004010:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004014:	1e49      	subs	r1, r1, #1
 8004016:	f102 0210 	add.w	r2, r2, #16
 800401a:	d1d7      	bne.n	8003fcc <nl_func_sm_channel_f32+0x44>
 800401c:	e001      	b.n	8004022 <nl_func_sm_channel_f32+0x9a>
 800401e:	2c00      	cmp	r4, #0
 8004020:	d040      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 8004022:	46b0      	mov	r8, r6
 8004024:	ea4f 0504 	mov.w	r5, r4
 8004028:	ed97 0a00 	vldr	s0, [r7]
 800402c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004030:	f010 ff28 	bl	8014e84 <expf>
 8004034:	1d3f      	adds	r7, r7, #4
 8004036:	ed88 0a00 	vstr	s0, [r8]
 800403a:	1e6d      	subs	r5, r5, #1
 800403c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004040:	f108 0804 	add.w	r8, r8, #4
 8004044:	d1f0      	bne.n	8004028 <nl_func_sm_channel_f32+0xa0>
 8004046:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800404a:	f014 0003 	ands.w	r0, r4, #3
 800404e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004052:	d009      	beq.n	8004068 <nl_func_sm_channel_f32+0xe0>
 8004054:	edd6 0a00 	vldr	s1, [r6]
 8004058:	ee60 0a80 	vmul.f32	s1, s1, s0
 800405c:	edc6 0a00 	vstr	s1, [r6]
 8004060:	1e40      	subs	r0, r0, #1
 8004062:	f106 0604 	add.w	r6, r6, #4
 8004066:	d1f5      	bne.n	8004054 <nl_func_sm_channel_f32+0xcc>
 8004068:	08a4      	lsrs	r4, r4, #2
 800406a:	d01b      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 800406c:	edd6 0a00 	vldr	s1, [r6]
 8004070:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004074:	edc6 0a00 	vstr	s1, [r6]
 8004078:	1e64      	subs	r4, r4, #1
 800407a:	ed96 1a01 	vldr	s2, [r6, #4]
 800407e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004082:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004086:	ed86 1a01 	vstr	s2, [r6, #4]
 800408a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800408e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004092:	edc6 0a02 	vstr	s1, [r6, #8]
 8004096:	ee21 1a00 	vmul.f32	s2, s2, s0
 800409a:	ed86 1a03 	vstr	s2, [r6, #12]
 800409e:	f106 0610 	add.w	r6, r6, #16
 80040a2:	d1e3      	bne.n	800406c <nl_func_sm_channel_f32+0xe4>
 80040a4:	ecbd 8b02 	vpop	{d8}
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040ac <nl_func_sm_array_f32>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	460d      	mov	r5, r1
 80040b2:	4604      	mov	r4, r0
 80040b4:	9f08      	ldr	r7, [sp, #32]
 80040b6:	68a8      	ldr	r0, [r5, #8]
 80040b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80040ba:	00bf      	lsls	r7, r7, #2
 80040bc:	427f      	negs	r7, r7
 80040be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	eb01 0a07 	add.w	sl, r1, r7
 80040c8:	00b6      	lsls	r6, r6, #2
 80040ca:	4276      	negs	r6, r6
 80040cc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040d0:	68ea      	ldr	r2, [r5, #12]
 80040d2:	4592      	cmp	sl, r2
 80040d4:	eb01 0906 	add.w	r9, r1, r6
 80040d8:	d30f      	bcc.n	80040fa <nl_func_sm_array_f32+0x4e>
 80040da:	4698      	mov	r8, r3
 80040dc:	f8c5 a008 	str.w	sl, [r5, #8]
 80040e0:	f8c4 9008 	str.w	r9, [r4, #8]
 80040e4:	2300      	movs	r3, #0
 80040e6:	4642      	mov	r2, r8
 80040e8:	4629      	mov	r1, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ff4c 	bl	8003f88 <nl_func_sm_channel_f32>
 80040f0:	68e8      	ldr	r0, [r5, #12]
 80040f2:	44ba      	add	sl, r7
 80040f4:	4582      	cmp	sl, r0
 80040f6:	44b1      	add	r9, r6
 80040f8:	d2f0      	bcs.n	80040dc <nl_func_sm_array_f32+0x30>
 80040fa:	68e9      	ldr	r1, [r5, #12]
 80040fc:	60a9      	str	r1, [r5, #8]
 80040fe:	68e0      	ldr	r0, [r4, #12]
 8004100:	60a0      	str	r0, [r4, #8]
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004108 <nl_func_hard_sigmoid_array_f32>:
 8004108:	6889      	ldr	r1, [r1, #8]
 800410a:	6880      	ldr	r0, [r0, #8]
 800410c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004110:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004114:	1f1b      	subs	r3, r3, #4
 8004116:	1f10      	subs	r0, r2, #4
 8004118:	428b      	cmp	r3, r1
 800411a:	d321      	bcc.n	8004160 <nl_func_hard_sigmoid_array_f32+0x58>
 800411c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004120:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8004404 <.text_68>
 8004124:	edd3 1a00 	vldr	s3, [r3]
 8004128:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8004408 <.text_69>
 800412c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004130:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004134:	eeb4 1a60 	vcmp.f32	s2, s1
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	da08      	bge.n	8004150 <nl_func_hard_sigmoid_array_f32+0x48>
 800413e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d505      	bpl.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004148:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004164 <.text_62>
 800414c:	e002      	b.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 800414e:	bf00      	nop
 8004150:	eeb0 1a40 	vmov.f32	s2, s0
 8004154:	ed80 1a00 	vstr	s2, [r0]
 8004158:	1f1b      	subs	r3, r3, #4
 800415a:	1f00      	subs	r0, r0, #4
 800415c:	428b      	cmp	r3, r1
 800415e:	d2e1      	bcs.n	8004124 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004160:	4770      	bx	lr
	...

08004164 <.text_62>:
 8004164:	00000000 	.word	0x00000000

08004168 <nl_func_clip_array_f32>:
 8004168:	6889      	ldr	r1, [r1, #8]
 800416a:	6880      	ldr	r0, [r0, #8]
 800416c:	ed93 0a00 	vldr	s0, [r3]
 8004170:	edd3 0a01 	vldr	s1, [r3, #4]
 8004174:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004178:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800417c:	1f1b      	subs	r3, r3, #4
 800417e:	1f10      	subs	r0, r2, #4
 8004180:	428b      	cmp	r3, r1
 8004182:	d315      	bcc.n	80041b0 <nl_func_clip_array_f32+0x48>
 8004184:	ed93 1a00 	vldr	s2, [r3]
 8004188:	eeb4 0a41 	vcmp.f32	s0, s2
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	bf58      	it	pl
 8004192:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004196:	eeb4 1a60 	vcmp.f32	s2, s1
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	bf58      	it	pl
 80041a0:	eeb0 1a60 	vmovpl.f32	s2, s1
 80041a4:	ed80 1a00 	vstr	s2, [r0]
 80041a8:	1f1b      	subs	r3, r3, #4
 80041aa:	1f00      	subs	r0, r0, #4
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d2e9      	bcs.n	8004184 <nl_func_clip_array_f32+0x1c>
 80041b0:	4770      	bx	lr
	...

080041b4 <nl_func_hardmax_array_f32>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	6855      	ldr	r5, [r2, #4]
 80041bc:	68d4      	ldr	r4, [r2, #12]
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80041c4:	436c      	muls	r4, r5
 80041c6:	00a1      	lsls	r1, r4, #2
 80041c8:	4640      	mov	r0, r8
 80041ca:	f00b faa1 	bl	800f710 <__aeabi_memclr>
 80041ce:	2200      	movs	r2, #0
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	4633      	mov	r3, r6
 80041d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041d8:	f000 805b 	beq.w	8004292 <nl_func_hardmax_array_f32+0xde>
 80041dc:	f102 0c01 	add.w	ip, r2, #1
 80041e0:	eb05 0e02 	add.w	lr, r5, r2
 80041e4:	45f4      	cmp	ip, lr
 80041e6:	edd3 0a00 	vldr	s1, [r3]
 80041ea:	d249      	bcs.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 80041ec:	1e69      	subs	r1, r5, #1
 80041ee:	f011 0003 	ands.w	r0, r1, #3
 80041f2:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041f6:	d00f      	beq.n	8004218 <nl_func_hardmax_array_f32+0x64>
 80041f8:	ed97 1a00 	vldr	s2, [r7]
 80041fc:	eef4 0a41 	vcmp.f32	s1, s2
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	bf44      	itt	mi
 8004206:	eef0 0a41 	vmovmi.f32	s1, s2
 800420a:	4662      	movmi	r2, ip
 800420c:	1e40      	subs	r0, r0, #1
 800420e:	f10c 0c01 	add.w	ip, ip, #1
 8004212:	f107 0704 	add.w	r7, r7, #4
 8004216:	d1ef      	bne.n	80041f8 <nl_func_hardmax_array_f32+0x44>
 8004218:	0889      	lsrs	r1, r1, #2
 800421a:	d031      	beq.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 800421c:	ed97 1a00 	vldr	s2, [r7]
 8004220:	eef4 0a41 	vcmp.f32	s1, s2
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	bf44      	itt	mi
 800422a:	eef0 0a41 	vmovmi.f32	s1, s2
 800422e:	4662      	movmi	r2, ip
 8004230:	ed97 1a01 	vldr	s2, [r7, #4]
 8004234:	eef4 0a41 	vcmp.f32	s1, s2
 8004238:	f10c 0001 	add.w	r0, ip, #1
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	bf44      	itt	mi
 8004242:	eef0 0a41 	vmovmi.f32	s1, s2
 8004246:	4602      	movmi	r2, r0
 8004248:	ed97 1a02 	vldr	s2, [r7, #8]
 800424c:	1c40      	adds	r0, r0, #1
 800424e:	eef4 0a41 	vcmp.f32	s1, s2
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	bf44      	itt	mi
 8004258:	eef0 0a41 	vmovmi.f32	s1, s2
 800425c:	4602      	movmi	r2, r0
 800425e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004262:	1c40      	adds	r0, r0, #1
 8004264:	eef4 0a41 	vcmp.f32	s1, s2
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	bf44      	itt	mi
 800426e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004272:	4602      	movmi	r2, r0
 8004274:	1e49      	subs	r1, r1, #1
 8004276:	f100 0c01 	add.w	ip, r0, #1
 800427a:	f107 0710 	add.w	r7, r7, #16
 800427e:	d1cd      	bne.n	800421c <nl_func_hardmax_array_f32+0x68>
 8004280:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004284:	4672      	mov	r2, lr
 8004286:	42a2      	cmp	r2, r4
 8004288:	ed80 0a00 	vstr	s0, [r0]
 800428c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004290:	d3a4      	bcc.n	80041dc <nl_func_hardmax_array_f32+0x28>
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004298 <nl_func_relu_generic_array_f32>:
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	ed93 0a00 	vldr	s0, [r3]
 800429e:	edd3 0a01 	vldr	s1, [r3, #4]
 80042a2:	ed93 1a02 	vldr	s2, [r3, #8]
 80042a6:	6889      	ldr	r1, [r1, #8]
 80042a8:	1f03      	subs	r3, r0, #4
 80042aa:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80042ae:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80042b2:	1f0b      	subs	r3, r1, #4
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80042bc:	d52a      	bpl.n	8004314 <nl_func_relu_generic_array_f32+0x7c>
 80042be:	eef5 0a40 	vcmp.f32	s1, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d013      	beq.n	80042f0 <nl_func_relu_generic_array_f32+0x58>
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d310      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042cc:	ed92 1a00 	vldr	s2, [r2]
 80042d0:	eeb4 1a40 	vcmp.f32	s2, s0
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf44      	itt	mi
 80042da:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042de:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042e2:	ed80 1a00 	vstr	s2, [r0]
 80042e6:	1f12      	subs	r2, r2, #4
 80042e8:	1f00      	subs	r0, r0, #4
 80042ea:	428a      	cmp	r2, r1
 80042ec:	d2ee      	bcs.n	80042cc <nl_func_relu_generic_array_f32+0x34>
 80042ee:	4770      	bx	lr
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d3fc      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042f4:	edd2 0a00 	vldr	s1, [r2]
 80042f8:	eef4 0a40 	vcmp.f32	s1, s0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	bf48      	it	mi
 8004302:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 80045a0 <.text_73>
 8004306:	edc0 0a00 	vstr	s1, [r0]
 800430a:	1f12      	subs	r2, r2, #4
 800430c:	1f00      	subs	r0, r0, #4
 800430e:	428a      	cmp	r2, r1
 8004310:	d2f0      	bcs.n	80042f4 <nl_func_relu_generic_array_f32+0x5c>
 8004312:	4770      	bx	lr
 8004314:	428a      	cmp	r2, r1
 8004316:	d3ea      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 8004318:	edd2 1a00 	vldr	s3, [r2]
 800431c:	eef4 1a41 	vcmp.f32	s3, s2
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d50a      	bpl.n	800433c <nl_func_relu_generic_array_f32+0xa4>
 8004326:	eef4 1a40 	vcmp.f32	s3, s0
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d507      	bpl.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 8004330:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004334:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004338:	e002      	b.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 800433a:	bf00      	nop
 800433c:	eef0 1a41 	vmov.f32	s3, s2
 8004340:	edc0 1a00 	vstr	s3, [r0]
 8004344:	1f12      	subs	r2, r2, #4
 8004346:	1f00      	subs	r0, r0, #4
 8004348:	428a      	cmp	r2, r1
 800434a:	d2e5      	bcs.n	8004318 <nl_func_relu_generic_array_f32+0x80>
 800434c:	4770      	bx	lr
	...

08004350 <nl_func_relu_thresholded_array_f32>:
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	6880      	ldr	r0, [r0, #8]
 8004354:	ed93 0a00 	vldr	s0, [r3]
 8004358:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800435c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004360:	1f1b      	subs	r3, r3, #4
 8004362:	1f10      	subs	r0, r2, #4
 8004364:	428b      	cmp	r3, r1
 8004366:	d30e      	bcc.n	8004386 <nl_func_relu_thresholded_array_f32+0x36>
 8004368:	edd3 0a00 	vldr	s1, [r3]
 800436c:	eef4 0a40 	vcmp.f32	s1, s0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	bf48      	it	mi
 8004376:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 80045a0 <.text_73>
 800437a:	edc0 0a00 	vstr	s1, [r0]
 800437e:	1f1b      	subs	r3, r3, #4
 8004380:	1f00      	subs	r0, r0, #4
 8004382:	428b      	cmp	r3, r1
 8004384:	d2f0      	bcs.n	8004368 <nl_func_relu_thresholded_array_f32+0x18>
 8004386:	4770      	bx	lr

08004388 <nl_func_elu_array_f32>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	ed2d 8b04 	vpush	{d8-d9}
 800438e:	688c      	ldr	r4, [r1, #8]
 8004390:	6880      	ldr	r0, [r0, #8]
 8004392:	ed93 8a00 	vldr	s16, [r3]
 8004396:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800439a:	1f0d      	subs	r5, r1, #4
 800439c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80043a0:	1f0e      	subs	r6, r1, #4
 80043a2:	42a5      	cmp	r5, r4
 80043a4:	f0c0 802a 	bcc.w	80043fc <nl_func_elu_array_f32+0x74>
 80043a8:	edd5 8a00 	vldr	s17, [r5]
 80043ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	bf4c      	ite	mi
 80043b6:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 80045a0 <.text_73>
 80043ba:	eeb0 9a68 	vmovpl.f32	s18, s17
 80043be:	eeb0 0a68 	vmov.f32	s0, s17
 80043c2:	f010 fd5f 	bl	8014e84 <expf>
 80043c6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043ca:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043da:	dc09      	bgt.n	80043f0 <nl_func_elu_array_f32+0x68>
 80043dc:	eeb0 0a68 	vmov.f32	s0, s17
 80043e0:	f010 fd50 	bl	8014e84 <expf>
 80043e4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043e8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ec:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043f0:	ed86 9a00 	vstr	s18, [r6]
 80043f4:	1f2d      	subs	r5, r5, #4
 80043f6:	1f36      	subs	r6, r6, #4
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d2d5      	bcs.n	80043a8 <nl_func_elu_array_f32+0x20>
 80043fc:	ecbd 8b04 	vpop	{d8-d9}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
	...

08004404 <.text_68>:
 8004404:	3f800001 	.word	0x3f800001

08004408 <.text_69>:
 8004408:	3e4ccccd 	.word	0x3e4ccccd

0800440c <nl_func_selu_array_f32>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	ed2d 8b04 	vpush	{d8-d9}
 8004412:	688c      	ldr	r4, [r1, #8]
 8004414:	6880      	ldr	r0, [r0, #8]
 8004416:	ed93 8a00 	vldr	s16, [r3]
 800441a:	edd3 8a01 	vldr	s17, [r3, #4]
 800441e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004422:	1f0d      	subs	r5, r1, #4
 8004424:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004428:	1f0e      	subs	r6, r1, #4
 800442a:	42a5      	cmp	r5, r4
 800442c:	f0c0 802c 	bcc.w	8004488 <nl_func_selu_array_f32+0x7c>
 8004430:	ed95 9a00 	vldr	s18, [r5]
 8004434:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	bf4c      	ite	mi
 800443e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 80045a0 <.text_73>
 8004442:	eef0 9a49 	vmovpl.f32	s19, s18
 8004446:	eeb0 0a49 	vmov.f32	s0, s18
 800444a:	f010 fd1b 	bl	8014e84 <expf>
 800444e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004452:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004456:	ee20 0a08 	vmul.f32	s0, s0, s16
 800445a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	dc09      	bgt.n	8004478 <nl_func_selu_array_f32+0x6c>
 8004464:	eeb0 0a49 	vmov.f32	s0, s18
 8004468:	f010 fd0c 	bl	8014e84 <expf>
 800446c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004470:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004474:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004478:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800447c:	ed86 0a00 	vstr	s0, [r6]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	1f36      	subs	r6, r6, #4
 8004484:	42a5      	cmp	r5, r4
 8004486:	d2d3      	bcs.n	8004430 <nl_func_selu_array_f32+0x24>
 8004488:	ecbd 8b04 	vpop	{d8-d9}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004490 <nl_func_prelu_array_f32>:
 8004490:	6889      	ldr	r1, [r1, #8]
 8004492:	6880      	ldr	r0, [r0, #8]
 8004494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004498:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800449c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80044a0:	1f1b      	subs	r3, r3, #4
 80044a2:	f1ac 0c04 	sub.w	ip, ip, #4
 80044a6:	1f10      	subs	r0, r2, #4
 80044a8:	458c      	cmp	ip, r1
 80044aa:	d320      	bcc.n	80044ee <nl_func_prelu_array_f32+0x5e>
 80044ac:	ed9c 0a00 	vldr	s0, [ip]
 80044b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf4c      	ite	mi
 80044ba:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 80045a0 <.text_73>
 80044be:	eef0 0a40 	vmovpl.f32	s1, s0
 80044c2:	461a      	mov	r2, r3
 80044c4:	eeb1 0a40 	vneg.f32	s0, s0
 80044c8:	1f13      	subs	r3, r2, #4
 80044ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	bf48      	it	mi
 80044d4:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 80045a0 <.text_73>
 80044d8:	ed92 1a00 	vldr	s2, [r2]
 80044dc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044e0:	edc0 0a00 	vstr	s1, [r0]
 80044e4:	f1ac 0c04 	sub.w	ip, ip, #4
 80044e8:	1f00      	subs	r0, r0, #4
 80044ea:	458c      	cmp	ip, r1
 80044ec:	d2de      	bcs.n	80044ac <nl_func_prelu_array_f32+0x1c>
 80044ee:	4770      	bx	lr

080044f0 <forward_relu>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	8811      	ldrh	r1, [r2, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	bf1a      	itte	ne
 80044fc:	6850      	ldrne	r0, [r2, #4]
 80044fe:	1d00      	addne	r0, r0, #4
 8004500:	2004      	moveq	r0, #4
 8004502:	6800      	ldr	r0, [r0, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	bf14      	ite	ne
 8004508:	6805      	ldrne	r5, [r0, #0]
 800450a:	2500      	moveq	r5, #0
 800450c:	2902      	cmp	r1, #2
 800450e:	bfa6      	itte	ge
 8004510:	6850      	ldrge	r0, [r2, #4]
 8004512:	3010      	addge	r0, #16
 8004514:	2004      	movlt	r0, #4
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	2800      	cmp	r0, #0
 800451a:	bf19      	ittee	ne
 800451c:	6800      	ldrne	r0, [r0, #0]
 800451e:	f100 0618 	addne.w	r6, r0, #24
 8004522:	2100      	moveq	r1, #0
 8004524:	f101 0618 	addeq.w	r6, r1, #24
 8004528:	69a0      	ldr	r0, [r4, #24]
 800452a:	b9f8      	cbnz	r0, 800456c <forward_relu+0x7c>
 800452c:	f105 0008 	add.w	r0, r5, #8
 8004530:	f7fe f80a 	bl	8002548 <ai_shape_get_size>
 8004534:	69a9      	ldr	r1, [r5, #24]
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	6889      	ldr	r1, [r1, #8]
 800453a:	689c      	ldr	r4, [r3, #8]
 800453c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004540:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004544:	1f12      	subs	r2, r2, #4
 8004546:	1f00      	subs	r0, r0, #4
 8004548:	428a      	cmp	r2, r1
 800454a:	d328      	bcc.n	800459e <forward_relu+0xae>
 800454c:	ed92 0a00 	vldr	s0, [r2]
 8004550:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	bf48      	it	mi
 800455a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 80045a0 <.text_73>
 800455e:	ed80 0a00 	vstr	s0, [r0]
 8004562:	1f12      	subs	r2, r2, #4
 8004564:	1f00      	subs	r0, r0, #4
 8004566:	428a      	cmp	r2, r1
 8004568:	d2f0      	bcs.n	800454c <forward_relu+0x5c>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6840      	ldr	r0, [r0, #4]
 800456e:	2801      	cmp	r0, #1
 8004570:	f105 0008 	add.w	r0, r5, #8
 8004574:	d109      	bne.n	800458a <forward_relu+0x9a>
 8004576:	f7fd ffe7 	bl	8002548 <ai_shape_get_size>
 800457a:	4602      	mov	r2, r0
 800457c:	69a0      	ldr	r0, [r4, #24]
 800457e:	6883      	ldr	r3, [r0, #8]
 8004580:	69a9      	ldr	r1, [r5, #24]
 8004582:	6830      	ldr	r0, [r6, #0]
 8004584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004588:	e6e2      	b.n	8004350 <nl_func_relu_thresholded_array_f32>
 800458a:	f7fd ffdd 	bl	8002548 <ai_shape_get_size>
 800458e:	69a1      	ldr	r1, [r4, #24]
 8004590:	688b      	ldr	r3, [r1, #8]
 8004592:	69a9      	ldr	r1, [r5, #24]
 8004594:	4602      	mov	r2, r0
 8004596:	6830      	ldr	r0, [r6, #0]
 8004598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459c:	e67c      	b.n	8004298 <nl_func_relu_generic_array_f32>
 800459e:	bd70      	pop	{r4, r5, r6, pc}

080045a0 <.text_73>:
 80045a0:	00000000 	.word	0x00000000

080045a4 <forward_relu_thresholded>:
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	4602      	mov	r2, r0
 80045a8:	f04f 0601 	mov.w	r6, #1
 80045ac:	6953      	ldr	r3, [r2, #20]
 80045ae:	8819      	ldrh	r1, [r3, #0]
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bf1a      	itte	ne
 80045b4:	6858      	ldrne	r0, [r3, #4]
 80045b6:	1d00      	addne	r0, r0, #4
 80045b8:	2004      	moveq	r0, #4
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	2800      	cmp	r0, #0
 80045be:	bf14      	ite	ne
 80045c0:	6804      	ldrne	r4, [r0, #0]
 80045c2:	2400      	moveq	r4, #0
 80045c4:	2902      	cmp	r1, #2
 80045c6:	bfa6      	itte	ge
 80045c8:	6858      	ldrge	r0, [r3, #4]
 80045ca:	3010      	addge	r0, #16
 80045cc:	2004      	movlt	r0, #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bf19      	ittee	ne
 80045d4:	6800      	ldrne	r0, [r0, #0]
 80045d6:	f100 0518 	addne.w	r5, r0, #24
 80045da:	2100      	moveq	r1, #0
 80045dc:	f101 0518 	addeq.w	r5, r1, #24
 80045e0:	f104 0108 	add.w	r1, r4, #8
 80045e4:	680b      	ldr	r3, [r1, #0]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	d01f      	beq.n	800462a <forward_relu_thresholded+0x86>
 80045ea:	684f      	ldr	r7, [r1, #4]
 80045ec:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f1a1 0c04 	sub.w	ip, r1, #4
 80045f6:	f010 0103 	ands.w	r1, r0, #3
 80045fa:	d006      	beq.n	800460a <forward_relu_thresholded+0x66>
 80045fc:	1e5b      	subs	r3, r3, #1
 80045fe:	f85c e904 	ldr.w	lr, [ip], #-4
 8004602:	1e49      	subs	r1, r1, #1
 8004604:	fb0e f606 	mul.w	r6, lr, r6
 8004608:	d1f8      	bne.n	80045fc <forward_relu_thresholded+0x58>
 800460a:	0880      	lsrs	r0, r0, #2
 800460c:	d00d      	beq.n	800462a <forward_relu_thresholded+0x86>
 800460e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004612:	3910      	subs	r1, #16
 8004614:	68cb      	ldr	r3, [r1, #12]
 8004616:	688f      	ldr	r7, [r1, #8]
 8004618:	437b      	muls	r3, r7
 800461a:	684f      	ldr	r7, [r1, #4]
 800461c:	437b      	muls	r3, r7
 800461e:	f851 7910 	ldr.w	r7, [r1], #-16
 8004622:	437b      	muls	r3, r7
 8004624:	435e      	muls	r6, r3
 8004626:	1e40      	subs	r0, r0, #1
 8004628:	d1f4      	bne.n	8004614 <forward_relu_thresholded+0x70>
 800462a:	6990      	ldr	r0, [r2, #24]
 800462c:	6881      	ldr	r1, [r0, #8]
 800462e:	69a0      	ldr	r0, [r4, #24]
 8004630:	682a      	ldr	r2, [r5, #0]
 8004632:	6880      	ldr	r0, [r0, #8]
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	ed91 0a00 	vldr	s0, [r1]
 800463a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800463e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004642:	1f09      	subs	r1, r1, #4
 8004644:	1f22      	subs	r2, r4, #4
 8004646:	4281      	cmp	r1, r0
 8004648:	f0c0 800f 	bcc.w	800466a <forward_relu_thresholded+0xc6>
 800464c:	edd1 0a00 	vldr	s1, [r1]
 8004650:	eef4 0a40 	vcmp.f32	s1, s0
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	bf48      	it	mi
 800465a:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004964 <.text_80>
 800465e:	edc2 0a00 	vstr	s1, [r2]
 8004662:	1f09      	subs	r1, r1, #4
 8004664:	1f12      	subs	r2, r2, #4
 8004666:	4281      	cmp	r1, r0
 8004668:	d2f0      	bcs.n	800464c <forward_relu_thresholded+0xa8>
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466c <forward_elu>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	6962      	ldr	r2, [r4, #20]
 8004672:	8811      	ldrh	r1, [r2, #0]
 8004674:	2900      	cmp	r1, #0
 8004676:	bf1a      	itte	ne
 8004678:	6850      	ldrne	r0, [r2, #4]
 800467a:	1d00      	addne	r0, r0, #4
 800467c:	2004      	moveq	r0, #4
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	2800      	cmp	r0, #0
 8004682:	bf14      	ite	ne
 8004684:	6805      	ldrne	r5, [r0, #0]
 8004686:	2500      	moveq	r5, #0
 8004688:	2902      	cmp	r1, #2
 800468a:	bfa6      	itte	ge
 800468c:	6850      	ldrge	r0, [r2, #4]
 800468e:	3010      	addge	r0, #16
 8004690:	2004      	movlt	r0, #4
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	2800      	cmp	r0, #0
 8004696:	bf19      	ittee	ne
 8004698:	6800      	ldrne	r0, [r0, #0]
 800469a:	f100 0618 	addne.w	r6, r0, #24
 800469e:	2100      	moveq	r1, #0
 80046a0:	f101 0618 	addeq.w	r6, r1, #24
 80046a4:	f105 0008 	add.w	r0, r5, #8
 80046a8:	f7fd ff4e 	bl	8002548 <ai_shape_get_size>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69a0      	ldr	r0, [r4, #24]
 80046b0:	6883      	ldr	r3, [r0, #8]
 80046b2:	69a9      	ldr	r1, [r5, #24]
 80046b4:	6830      	ldr	r0, [r6, #0]
 80046b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ba:	e665      	b.n	8004388 <nl_func_elu_array_f32>

080046bc <forward_selu>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	6962      	ldr	r2, [r4, #20]
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	bf1a      	itte	ne
 80046c8:	6850      	ldrne	r0, [r2, #4]
 80046ca:	1d00      	addne	r0, r0, #4
 80046cc:	2004      	moveq	r0, #4
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bf14      	ite	ne
 80046d4:	6805      	ldrne	r5, [r0, #0]
 80046d6:	2500      	moveq	r5, #0
 80046d8:	2902      	cmp	r1, #2
 80046da:	bfa6      	itte	ge
 80046dc:	6850      	ldrge	r0, [r2, #4]
 80046de:	3010      	addge	r0, #16
 80046e0:	2004      	movlt	r0, #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf19      	ittee	ne
 80046e8:	6800      	ldrne	r0, [r0, #0]
 80046ea:	f100 0618 	addne.w	r6, r0, #24
 80046ee:	2100      	moveq	r1, #0
 80046f0:	f101 0618 	addeq.w	r6, r1, #24
 80046f4:	f105 0008 	add.w	r0, r5, #8
 80046f8:	f7fd ff26 	bl	8002548 <ai_shape_get_size>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69a0      	ldr	r0, [r4, #24]
 8004700:	6883      	ldr	r3, [r0, #8]
 8004702:	69a9      	ldr	r1, [r5, #24]
 8004704:	6830      	ldr	r0, [r6, #0]
 8004706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800470a:	e67f      	b.n	800440c <nl_func_selu_array_f32>

0800470c <forward_prelu>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	b083      	sub	sp, #12
 8004712:	6942      	ldr	r2, [r0, #20]
 8004714:	8810      	ldrh	r0, [r2, #0]
 8004716:	2800      	cmp	r0, #0
 8004718:	bf1a      	itte	ne
 800471a:	6851      	ldrne	r1, [r2, #4]
 800471c:	1d09      	addne	r1, r1, #4
 800471e:	2104      	moveq	r1, #4
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	2900      	cmp	r1, #0
 8004724:	bf19      	ittee	ne
 8004726:	6809      	ldrne	r1, [r1, #0]
 8004728:	f101 0518 	addne.w	r5, r1, #24
 800472c:	2300      	moveq	r3, #0
 800472e:	f103 0518 	addeq.w	r5, r3, #24
 8004732:	2801      	cmp	r0, #1
 8004734:	bfc6      	itte	gt
 8004736:	6851      	ldrgt	r1, [r2, #4]
 8004738:	3110      	addgt	r1, #16
 800473a:	2104      	movle	r1, #4
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	2900      	cmp	r1, #0
 8004740:	bf19      	ittee	ne
 8004742:	6809      	ldrne	r1, [r1, #0]
 8004744:	f101 0618 	addne.w	r6, r1, #24
 8004748:	2300      	moveq	r3, #0
 800474a:	f103 0618 	addeq.w	r6, r3, #24
 800474e:	2802      	cmp	r0, #2
 8004750:	bfc6      	itte	gt
 8004752:	6850      	ldrgt	r0, [r2, #4]
 8004754:	301c      	addgt	r0, #28
 8004756:	2004      	movle	r0, #4
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	2800      	cmp	r0, #0
 800475c:	bf14      	ite	ne
 800475e:	6804      	ldrne	r4, [r0, #0]
 8004760:	2400      	moveq	r4, #0
 8004762:	69a0      	ldr	r0, [r4, #24]
 8004764:	6887      	ldr	r7, [r0, #8]
 8004766:	b12c      	cbz	r4, 8004774 <forward_prelu+0x68>
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	f000 fc86 	bl	800507c <ai_array_get_byte_size>
 8004770:	4680      	mov	r8, r0
 8004772:	e001      	b.n	8004778 <forward_prelu+0x6c>
 8004774:	f04f 0801 	mov.w	r8, #1
 8004778:	6828      	ldr	r0, [r5, #0]
 800477a:	6841      	ldr	r1, [r0, #4]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f000 fc7d 	bl	800507c <ai_array_get_byte_size>
 8004782:	4601      	mov	r1, r0
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	6832      	ldr	r2, [r6, #0]
 8004788:	6880      	ldr	r0, [r0, #8]
 800478a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800478e:	4401      	add	r1, r0
 8004790:	f104 0308 	add.w	r3, r4, #8
 8004794:	4288      	cmp	r0, r1
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	d241      	bcs.n	800481e <forward_prelu+0x112>
 800479a:	9702      	str	r7, [sp, #8]
 800479c:	9101      	str	r1, [sp, #4]
 800479e:	4607      	mov	r7, r0
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	608f      	str	r7, [r1, #8]
 80047a4:	f04f 0201 	mov.w	r2, #1
 80047a8:	6834      	ldr	r4, [r6, #0]
 80047aa:	f8c4 9008 	str.w	r9, [r4, #8]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	0a00      	lsrs	r0, r0, #8
 80047b4:	d02a      	beq.n	800480c <forward_prelu+0x100>
 80047b6:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80047ba:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 80047be:	4684      	mov	ip, r0
 80047c0:	f1a3 0a04 	sub.w	sl, r3, #4
 80047c4:	f01c 0303 	ands.w	r3, ip, #3
 80047c8:	d006      	beq.n	80047d8 <forward_prelu+0xcc>
 80047ca:	1e40      	subs	r0, r0, #1
 80047cc:	f85a b904 	ldr.w	fp, [sl], #-4
 80047d0:	1e5b      	subs	r3, r3, #1
 80047d2:	fb0b f202 	mul.w	r2, fp, r2
 80047d6:	d1f8      	bne.n	80047ca <forward_prelu+0xbe>
 80047d8:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047dc:	4663      	mov	r3, ip
 80047de:	d015      	beq.n	800480c <forward_prelu+0x100>
 80047e0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047e4:	f1b0 0010 	subs.w	r0, r0, #16
 80047e8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047f4:	f850 b910 	ldr.w	fp, [r0], #-16
 80047f8:	fb0e fc0c 	mul.w	ip, lr, ip
 80047fc:	fb0a fc0c 	mul.w	ip, sl, ip
 8004800:	fb0b fc0c 	mul.w	ip, fp, ip
 8004804:	1e5b      	subs	r3, r3, #1
 8004806:	fb0c f202 	mul.w	r2, ip, r2
 800480a:	d1ed      	bne.n	80047e8 <forward_prelu+0xdc>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff fe3e 	bl	8004490 <nl_func_prelu_array_f32>
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	4447      	add	r7, r8
 8004818:	4287      	cmp	r7, r0
 800481a:	44c1      	add	r9, r8
 800481c:	d3c0      	bcc.n	80047a0 <forward_prelu+0x94>
 800481e:	6828      	ldr	r0, [r5, #0]
 8004820:	68c1      	ldr	r1, [r0, #12]
 8004822:	6081      	str	r1, [r0, #8]
 8004824:	6830      	ldr	r0, [r6, #0]
 8004826:	68c1      	ldr	r1, [r0, #12]
 8004828:	6081      	str	r1, [r0, #8]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004830 <forward_clip>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	8811      	ldrh	r1, [r2, #0]
 8004838:	2900      	cmp	r1, #0
 800483a:	bf1a      	itte	ne
 800483c:	6850      	ldrne	r0, [r2, #4]
 800483e:	1d00      	addne	r0, r0, #4
 8004840:	2004      	moveq	r0, #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	2800      	cmp	r0, #0
 8004846:	bf14      	ite	ne
 8004848:	6805      	ldrne	r5, [r0, #0]
 800484a:	2500      	moveq	r5, #0
 800484c:	2902      	cmp	r1, #2
 800484e:	bfa6      	itte	ge
 8004850:	6850      	ldrge	r0, [r2, #4]
 8004852:	3010      	addge	r0, #16
 8004854:	2004      	movlt	r0, #4
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	bf19      	ittee	ne
 800485c:	6800      	ldrne	r0, [r0, #0]
 800485e:	f100 0618 	addne.w	r6, r0, #24
 8004862:	2100      	moveq	r1, #0
 8004864:	f101 0618 	addeq.w	r6, r1, #24
 8004868:	f105 0008 	add.w	r0, r5, #8
 800486c:	f7fd fe6c 	bl	8002548 <ai_shape_get_size>
 8004870:	4602      	mov	r2, r0
 8004872:	69a0      	ldr	r0, [r4, #24]
 8004874:	6883      	ldr	r3, [r0, #8]
 8004876:	69a9      	ldr	r1, [r5, #24]
 8004878:	6830      	ldr	r0, [r6, #0]
 800487a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800487e:	e473      	b.n	8004168 <nl_func_clip_array_f32>

08004880 <forward_hard_sigmoid>:
 8004880:	b4f0      	push	{r4, r5, r6, r7}
 8004882:	6942      	ldr	r2, [r0, #20]
 8004884:	8811      	ldrh	r1, [r2, #0]
 8004886:	2900      	cmp	r1, #0
 8004888:	bf1a      	itte	ne
 800488a:	6850      	ldrne	r0, [r2, #4]
 800488c:	1d00      	addne	r0, r0, #4
 800488e:	2004      	moveq	r0, #4
 8004890:	f04f 0501 	mov.w	r5, #1
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	2800      	cmp	r0, #0
 8004898:	bf14      	ite	ne
 800489a:	6803      	ldrne	r3, [r0, #0]
 800489c:	2300      	moveq	r3, #0
 800489e:	2902      	cmp	r1, #2
 80048a0:	bfa6      	itte	ge
 80048a2:	6850      	ldrge	r0, [r2, #4]
 80048a4:	3010      	addge	r0, #16
 80048a6:	2004      	movlt	r0, #4
 80048a8:	6800      	ldr	r0, [r0, #0]
 80048aa:	2800      	cmp	r0, #0
 80048ac:	bf19      	ittee	ne
 80048ae:	6800      	ldrne	r0, [r0, #0]
 80048b0:	f100 0418 	addne.w	r4, r0, #24
 80048b4:	2100      	moveq	r1, #0
 80048b6:	f101 0418 	addeq.w	r4, r1, #24
 80048ba:	f103 0108 	add.w	r1, r3, #8
 80048be:	680a      	ldr	r2, [r1, #0]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	d01e      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048c4:	684e      	ldr	r6, [r1, #4]
 80048c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ca:	4610      	mov	r0, r2
 80048cc:	1f0f      	subs	r7, r1, #4
 80048ce:	f010 0103 	ands.w	r1, r0, #3
 80048d2:	d006      	beq.n	80048e2 <forward_hard_sigmoid+0x62>
 80048d4:	1e52      	subs	r2, r2, #1
 80048d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80048da:	1e49      	subs	r1, r1, #1
 80048dc:	fb0c f505 	mul.w	r5, ip, r5
 80048e0:	d1f8      	bne.n	80048d4 <forward_hard_sigmoid+0x54>
 80048e2:	0880      	lsrs	r0, r0, #2
 80048e4:	d00d      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ea:	3910      	subs	r1, #16
 80048ec:	68ca      	ldr	r2, [r1, #12]
 80048ee:	688e      	ldr	r6, [r1, #8]
 80048f0:	684f      	ldr	r7, [r1, #4]
 80048f2:	4372      	muls	r2, r6
 80048f4:	f851 6910 	ldr.w	r6, [r1], #-16
 80048f8:	437a      	muls	r2, r7
 80048fa:	4372      	muls	r2, r6
 80048fc:	4355      	muls	r5, r2
 80048fe:	1e40      	subs	r0, r0, #1
 8004900:	d1f4      	bne.n	80048ec <forward_hard_sigmoid+0x6c>
 8004902:	6998      	ldr	r0, [r3, #24]
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	6880      	ldr	r0, [r0, #8]
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800490e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004912:	1f09      	subs	r1, r1, #4
 8004914:	1f22      	subs	r2, r4, #4
 8004916:	4281      	cmp	r1, r0
 8004918:	f0c0 8022 	bcc.w	8004960 <forward_hard_sigmoid+0xe0>
 800491c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004920:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004968 <.text_81>
 8004924:	edd1 1a00 	vldr	s3, [r1]
 8004928:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800496c <.text_82>
 800492c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004930:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004934:	eeb4 1a60 	vcmp.f32	s2, s1
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	da08      	bge.n	8004950 <forward_hard_sigmoid+0xd0>
 800493e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d505      	bpl.n	8004954 <forward_hard_sigmoid+0xd4>
 8004948:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004964 <.text_80>
 800494c:	e002      	b.n	8004954 <forward_hard_sigmoid+0xd4>
 800494e:	bf00      	nop
 8004950:	eeb0 1a40 	vmov.f32	s2, s0
 8004954:	ed82 1a00 	vstr	s2, [r2]
 8004958:	1f09      	subs	r1, r1, #4
 800495a:	1f12      	subs	r2, r2, #4
 800495c:	4281      	cmp	r1, r0
 800495e:	d2e1      	bcs.n	8004924 <forward_hard_sigmoid+0xa4>
 8004960:	bcf0      	pop	{r4, r5, r6, r7}
 8004962:	4770      	bx	lr

08004964 <.text_80>:
 8004964:	00000000 	.word	0x00000000

08004968 <.text_81>:
 8004968:	3f800001 	.word	0x3f800001

0800496c <.text_82>:
 800496c:	3e4ccccd 	.word	0x3e4ccccd

08004970 <forward_sm>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	6942      	ldr	r2, [r0, #20]
 8004976:	8811      	ldrh	r1, [r2, #0]
 8004978:	2900      	cmp	r1, #0
 800497a:	bf1a      	itte	ne
 800497c:	6850      	ldrne	r0, [r2, #4]
 800497e:	1d00      	addne	r0, r0, #4
 8004980:	2004      	moveq	r0, #4
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	2800      	cmp	r0, #0
 8004986:	bf14      	ite	ne
 8004988:	6804      	ldrne	r4, [r0, #0]
 800498a:	2400      	moveq	r4, #0
 800498c:	2902      	cmp	r1, #2
 800498e:	bfa6      	itte	ge
 8004990:	6850      	ldrge	r0, [r2, #4]
 8004992:	3010      	addge	r0, #16
 8004994:	2004      	movlt	r0, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	2800      	cmp	r0, #0
 800499a:	bf14      	ite	ne
 800499c:	6805      	ldrne	r5, [r0, #0]
 800499e:	2500      	moveq	r5, #0
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	68e9      	ldr	r1, [r5, #12]
 80049a4:	6846      	ldr	r6, [r0, #4]
 80049a6:	684f      	ldr	r7, [r1, #4]
 80049a8:	f104 0008 	add.w	r0, r4, #8
 80049ac:	f7fd fdcc 	bl	8002548 <ai_shape_get_size>
 80049b0:	4602      	mov	r2, r0
 80049b2:	9701      	str	r7, [sp, #4]
 80049b4:	9600      	str	r6, [sp, #0]
 80049b6:	69a1      	ldr	r1, [r4, #24]
 80049b8:	69a8      	ldr	r0, [r5, #24]
 80049ba:	4633      	mov	r3, r6
 80049bc:	f7ff fb76 	bl	80040ac <nl_func_sm_array_f32>
 80049c0:	b003      	add	sp, #12
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c4 <forward_hardmax>:
 80049c4:	b430      	push	{r4, r5}
 80049c6:	6943      	ldr	r3, [r0, #20]
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	6980      	ldr	r0, [r0, #24]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	bf1a      	itte	ne
 80049d0:	6859      	ldrne	r1, [r3, #4]
 80049d2:	1d09      	addne	r1, r1, #4
 80049d4:	2104      	moveq	r1, #4
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	2900      	cmp	r1, #0
 80049da:	bf14      	ite	ne
 80049dc:	680c      	ldrne	r4, [r1, #0]
 80049de:	2400      	moveq	r4, #0
 80049e0:	2a02      	cmp	r2, #2
 80049e2:	bfa6      	itte	ge
 80049e4:	6859      	ldrge	r1, [r3, #4]
 80049e6:	3110      	addge	r1, #16
 80049e8:	2104      	movlt	r1, #4
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	6883      	ldr	r3, [r0, #8]
 80049ee:	2900      	cmp	r1, #0
 80049f0:	bf19      	ittee	ne
 80049f2:	6809      	ldrne	r1, [r1, #0]
 80049f4:	f101 0518 	addne.w	r5, r1, #24
 80049f8:	2200      	moveq	r2, #0
 80049fa:	f102 0518 	addeq.w	r5, r2, #24
 80049fe:	69a1      	ldr	r1, [r4, #24]
 8004a00:	6828      	ldr	r0, [r5, #0]
 8004a02:	f104 0208 	add.w	r2, r4, #8
 8004a06:	bc30      	pop	{r4, r5}
 8004a08:	f7ff bbd4 	b.w	80041b4 <nl_func_hardmax_array_f32>

08004a0c <ai_array_fmt_name>:
 8004a0c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004a10:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004a14:	d062      	beq.n	8004adc <ai_array_fmt_name+0xd0>
 8004a16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a1a:	1a89      	subs	r1, r1, r2
 8004a1c:	f000 8094 	beq.w	8004b48 <ai_array_fmt_name+0x13c>
 8004a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a24:	1a89      	subs	r1, r1, r2
 8004a26:	d071      	beq.n	8004b0c <ai_array_fmt_name+0x100>
 8004a28:	1a89      	subs	r1, r1, r2
 8004a2a:	d063      	beq.n	8004af4 <ai_array_fmt_name+0xe8>
 8004a2c:	1fc9      	subs	r1, r1, #7
 8004a2e:	f000 808e 	beq.w	8004b4e <ai_array_fmt_name+0x142>
 8004a32:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004a36:	1a89      	subs	r1, r1, r2
 8004a38:	d05f      	beq.n	8004afa <ai_array_fmt_name+0xee>
 8004a3a:	390f      	subs	r1, #15
 8004a3c:	f000 808a 	beq.w	8004b54 <ai_array_fmt_name+0x148>
 8004a40:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004a44:	1a89      	subs	r1, r1, r2
 8004a46:	d05b      	beq.n	8004b00 <ai_array_fmt_name+0xf4>
 8004a48:	391f      	subs	r1, #31
 8004a4a:	f000 8086 	beq.w	8004b5a <ai_array_fmt_name+0x14e>
 8004a4e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004a52:	1a89      	subs	r1, r1, r2
 8004a54:	d057      	beq.n	8004b06 <ai_array_fmt_name+0xfa>
 8004a56:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 800502c <.text_15>
 8004a5a:	1a89      	subs	r1, r1, r2
 8004a5c:	f000 808f 	beq.w	8004b7e <ai_array_fmt_name+0x172>
 8004a60:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004a64:	1a89      	subs	r1, r1, r2
 8004a66:	f000 8087 	beq.w	8004b78 <ai_array_fmt_name+0x16c>
 8004a6a:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005030 <.text_16>
 8004a6e:	1a89      	subs	r1, r1, r2
 8004a70:	d05e      	beq.n	8004b30 <ai_array_fmt_name+0x124>
 8004a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a76:	1a89      	subs	r1, r1, r2
 8004a78:	d057      	beq.n	8004b2a <ai_array_fmt_name+0x11e>
 8004a7a:	1a89      	subs	r1, r1, r2
 8004a7c:	d049      	beq.n	8004b12 <ai_array_fmt_name+0x106>
 8004a7e:	1fc9      	subs	r1, r1, #7
 8004a80:	d059      	beq.n	8004b36 <ai_array_fmt_name+0x12a>
 8004a82:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004a86:	1a89      	subs	r1, r1, r2
 8004a88:	d046      	beq.n	8004b18 <ai_array_fmt_name+0x10c>
 8004a8a:	390f      	subs	r1, #15
 8004a8c:	d056      	beq.n	8004b3c <ai_array_fmt_name+0x130>
 8004a8e:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004a92:	1a89      	subs	r1, r1, r2
 8004a94:	d043      	beq.n	8004b1e <ai_array_fmt_name+0x112>
 8004a96:	391f      	subs	r1, #31
 8004a98:	d053      	beq.n	8004b42 <ai_array_fmt_name+0x136>
 8004a9a:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004a9e:	1a89      	subs	r1, r1, r2
 8004aa0:	d040      	beq.n	8004b24 <ai_array_fmt_name+0x118>
 8004aa2:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 800502c <.text_15>
 8004aa6:	1a89      	subs	r1, r1, r2
 8004aa8:	d063      	beq.n	8004b72 <ai_array_fmt_name+0x166>
 8004aaa:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004aae:	1a89      	subs	r1, r1, r2
 8004ab0:	d05c      	beq.n	8004b6c <ai_array_fmt_name+0x160>
 8004ab2:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005034 <.text_17>
 8004ab6:	1a89      	subs	r1, r1, r2
 8004ab8:	d019      	beq.n	8004aee <ai_array_fmt_name+0xe2>
 8004aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004abe:	1a89      	subs	r1, r1, r2
 8004ac0:	d00f      	beq.n	8004ae2 <ai_array_fmt_name+0xd6>
 8004ac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ac6:	1a89      	subs	r1, r1, r2
 8004ac8:	d00e      	beq.n	8004ae8 <ai_array_fmt_name+0xdc>
 8004aca:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005038 <.text_18>
 8004ace:	1a89      	subs	r1, r1, r2
 8004ad0:	d049      	beq.n	8004b66 <ai_array_fmt_name+0x15a>
 8004ad2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004ad6:	1a89      	subs	r1, r1, r2
 8004ad8:	d042      	beq.n	8004b60 <ai_array_fmt_name+0x154>
 8004ada:	e053      	b.n	8004b84 <ai_array_fmt_name+0x178>
 8004adc:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8004ae0:	4770      	bx	lr
 8004ae2:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8004ae6:	4770      	bx	lr
 8004ae8:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8004aec:	4770      	bx	lr
 8004aee:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8004af2:	4770      	bx	lr
 8004af4:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8004af8:	4770      	bx	lr
 8004afa:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8004afe:	4770      	bx	lr
 8004b00:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8004b04:	4770      	bx	lr
 8004b06:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8004b0a:	4770      	bx	lr
 8004b0c:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8004b10:	4770      	bx	lr
 8004b12:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8004b16:	4770      	bx	lr
 8004b18:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8004b1c:	4770      	bx	lr
 8004b1e:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8004b22:	4770      	bx	lr
 8004b24:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8004b28:	4770      	bx	lr
 8004b2a:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8004b2e:	4770      	bx	lr
 8004b30:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8004b34:	4770      	bx	lr
 8004b36:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8004b3a:	4770      	bx	lr
 8004b3c:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8004b40:	4770      	bx	lr
 8004b42:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8004b46:	4770      	bx	lr
 8004b48:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8004b4c:	4770      	bx	lr
 8004b4e:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8004b52:	4770      	bx	lr
 8004b54:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8004b58:	4770      	bx	lr
 8004b5a:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8004b5e:	4770      	bx	lr
 8004b60:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8004b64:	4770      	bx	lr
 8004b66:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8004b6a:	4770      	bx	lr
 8004b6c:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8004b70:	4770      	bx	lr
 8004b72:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8004b76:	4770      	bx	lr
 8004b78:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8004b7c:	4770      	bx	lr
 8004b7e:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8004b82:	4770      	bx	lr
 8004b84:	f36f 000d 	bfc	r0, #0, #14
 8004b88:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004b8c:	2840      	cmp	r0, #64	; 0x40
 8004b8e:	d009      	beq.n	8004ba4 <ai_array_fmt_name+0x198>
 8004b90:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 800503c <.text_19>
 8004b94:	4288      	cmp	r0, r1
 8004b96:	d00b      	beq.n	8004bb0 <ai_array_fmt_name+0x1a4>
 8004b98:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005040 <.text_20>
 8004b9c:	4288      	cmp	r0, r1
 8004b9e:	d004      	beq.n	8004baa <ai_array_fmt_name+0x19e>
 8004ba0:	a07a      	add	r0, pc, #488	; (adr r0, 8004d8c <.text_8>)
 8004ba2:	4770      	bx	lr
 8004ba4:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8004ba8:	4770      	bx	lr
 8004baa:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8004bae:	4770      	bx	lr
 8004bb0:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8004bb4:	4770      	bx	lr

08004bb6 <ai_array_fmt_exported>:
 8004bb6:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004bba:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004bbe:	d068      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004bc4:	1a89      	subs	r1, r1, r2
 8004bc6:	d064      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bcc:	1a89      	subs	r1, r1, r2
 8004bce:	d062      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bd0:	1a89      	subs	r1, r1, r2
 8004bd2:	d05e      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bd4:	1fc9      	subs	r1, r1, #7
 8004bd6:	d05c      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bd8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004bdc:	1a89      	subs	r1, r1, r2
 8004bde:	d058      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004be0:	390f      	subs	r1, #15
 8004be2:	d056      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004be4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004be8:	1a89      	subs	r1, r1, r2
 8004bea:	d054      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bec:	391f      	subs	r1, #31
 8004bee:	d052      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bf0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004bf4:	1a89      	subs	r1, r1, r2
 8004bf6:	d04e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bf8:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 800502c <.text_15>
 8004bfc:	1a89      	subs	r1, r1, r2
 8004bfe:	d04a      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c00:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004c04:	1a89      	subs	r1, r1, r2
 8004c06:	d046      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c08:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005030 <.text_16>
 8004c0c:	1a89      	subs	r1, r1, r2
 8004c0e:	d040      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c14:	1a89      	subs	r1, r1, r2
 8004c16:	d03e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c18:	1a89      	subs	r1, r1, r2
 8004c1a:	d03a      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c1c:	1fc9      	subs	r1, r1, #7
 8004c1e:	d038      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c20:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004c24:	1a89      	subs	r1, r1, r2
 8004c26:	d034      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c28:	390f      	subs	r1, #15
 8004c2a:	d032      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c2c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004c30:	1a89      	subs	r1, r1, r2
 8004c32:	d030      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c34:	391f      	subs	r1, #31
 8004c36:	d02e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c38:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004c3c:	1a89      	subs	r1, r1, r2
 8004c3e:	d02a      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c40:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 800502c <.text_15>
 8004c44:	1a89      	subs	r1, r1, r2
 8004c46:	d026      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c48:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004c4c:	1a89      	subs	r1, r1, r2
 8004c4e:	d022      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c50:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005034 <.text_17>
 8004c54:	1a89      	subs	r1, r1, r2
 8004c56:	d01e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5c:	1a89      	subs	r1, r1, r2
 8004c5e:	d018      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c64:	1a89      	subs	r1, r1, r2
 8004c66:	d016      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c68:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005038 <.text_18>
 8004c6c:	1a89      	subs	r1, r1, r2
 8004c6e:	d012      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c70:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004c74:	1a89      	subs	r1, r1, r2
 8004c76:	d00e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c78:	f36f 000d 	bfc	r0, #0, #14
 8004c7c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004c80:	2840      	cmp	r0, #64	; 0x40
 8004c82:	bf1f      	itttt	ne
 8004c84:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 800503c <.text_19>
 8004c88:	4298      	cmpne	r0, r3
 8004c8a:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005040 <.text_20>
 8004c8e:	4298      	cmpne	r0, r3
 8004c90:	d101      	bne.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c92:	2001      	movs	r0, #1
 8004c94:	4770      	bx	lr
 8004c96:	2000      	movs	r0, #0
 8004c98:	4770      	bx	lr

08004c9a <ai_array_fmt_valid>:
 8004c9a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004c9e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004ca2:	d069      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004ca4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004ca8:	1a89      	subs	r1, r1, r2
 8004caa:	d065      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb0:	1a89      	subs	r1, r1, r2
 8004cb2:	d061      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cb4:	1a89      	subs	r1, r1, r2
 8004cb6:	d05f      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cb8:	1fc9      	subs	r1, r1, #7
 8004cba:	d05d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cbc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004cc0:	1a89      	subs	r1, r1, r2
 8004cc2:	d059      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cc4:	390f      	subs	r1, #15
 8004cc6:	d057      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cc8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004ccc:	1a89      	subs	r1, r1, r2
 8004cce:	d053      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cd0:	391f      	subs	r1, #31
 8004cd2:	d051      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cd4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004cd8:	1a89      	subs	r1, r1, r2
 8004cda:	d04d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cdc:	f8df 234c 	ldr.w	r2, [pc, #844]	; 800502c <.text_15>
 8004ce0:	1a89      	subs	r1, r1, r2
 8004ce2:	d049      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004ce4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004ce8:	1a89      	subs	r1, r1, r2
 8004cea:	d045      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cec:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005030 <.text_16>
 8004cf0:	1a89      	subs	r1, r1, r2
 8004cf2:	d041      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf8:	1a89      	subs	r1, r1, r2
 8004cfa:	d03d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cfc:	1a89      	subs	r1, r1, r2
 8004cfe:	d03b      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d00:	1fc9      	subs	r1, r1, #7
 8004d02:	d039      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d04:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004d08:	1a89      	subs	r1, r1, r2
 8004d0a:	d035      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d0c:	390f      	subs	r1, #15
 8004d0e:	d033      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d10:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004d14:	1a89      	subs	r1, r1, r2
 8004d16:	d02f      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d18:	391f      	subs	r1, #31
 8004d1a:	d02d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d1c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004d20:	1a89      	subs	r1, r1, r2
 8004d22:	d029      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d24:	f8df 2304 	ldr.w	r2, [pc, #772]	; 800502c <.text_15>
 8004d28:	1a89      	subs	r1, r1, r2
 8004d2a:	d025      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d2c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004d30:	1a89      	subs	r1, r1, r2
 8004d32:	d021      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d34:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005034 <.text_17>
 8004d38:	1a89      	subs	r1, r1, r2
 8004d3a:	d01d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d40:	1a89      	subs	r1, r1, r2
 8004d42:	d019      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d48:	1a89      	subs	r1, r1, r2
 8004d4a:	d015      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d4c:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005038 <.text_18>
 8004d50:	1a89      	subs	r1, r1, r2
 8004d52:	d011      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d54:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004d58:	1a89      	subs	r1, r1, r2
 8004d5a:	bf1e      	ittt	ne
 8004d5c:	f36f 000d 	bfcne	r0, #0, #14
 8004d60:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8004d64:	2840      	cmpne	r0, #64	; 0x40
 8004d66:	d007      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d68:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 800503c <.text_19>
 8004d6c:	4298      	cmp	r0, r3
 8004d6e:	bf1c      	itt	ne
 8004d70:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005040 <.text_20>
 8004d74:	4298      	cmpne	r0, r3
 8004d76:	d101      	bne.n	8004d7c <ai_array_fmt_valid+0xe2>
 8004d78:	2001      	movs	r0, #1
 8004d7a:	4770      	bx	lr
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4770      	bx	lr

08004d80 <ai_array_fmt_get_formats>:
 8004d80:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005044 <.text_21>
 8004d84:	6001      	str	r1, [r0, #0]
 8004d86:	201c      	movs	r0, #28
 8004d88:	4770      	bx	lr
	...

08004d8c <.text_8>:
 8004d8c:	00000000 	.word	0x00000000

08004d90 <ai_buffer_fmt_name>:
 8004d90:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004d94:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004d98:	d022      	beq.n	8004de0 <ai_buffer_fmt_name+0x50>
 8004d9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004d9e:	1a89      	subs	r1, r1, r2
 8004da0:	d039      	beq.n	8004e16 <ai_buffer_fmt_name+0x86>
 8004da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da6:	1a89      	subs	r1, r1, r2
 8004da8:	d020      	beq.n	8004dec <ai_buffer_fmt_name+0x5c>
 8004daa:	1fc9      	subs	r1, r1, #7
 8004dac:	d036      	beq.n	8004e1c <ai_buffer_fmt_name+0x8c>
 8004dae:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004db2:	1a89      	subs	r1, r1, r2
 8004db4:	d01d      	beq.n	8004df2 <ai_buffer_fmt_name+0x62>
 8004db6:	390f      	subs	r1, #15
 8004db8:	d033      	beq.n	8004e22 <ai_buffer_fmt_name+0x92>
 8004dba:	4aa3      	ldr	r2, [pc, #652]	; (8005048 <.text_22>)
 8004dbc:	1a89      	subs	r1, r1, r2
 8004dbe:	d021      	beq.n	8004e04 <ai_buffer_fmt_name+0x74>
 8004dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dc4:	1a89      	subs	r1, r1, r2
 8004dc6:	d017      	beq.n	8004df8 <ai_buffer_fmt_name+0x68>
 8004dc8:	1fc9      	subs	r1, r1, #7
 8004dca:	d01e      	beq.n	8004e0a <ai_buffer_fmt_name+0x7a>
 8004dcc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004dd0:	1a89      	subs	r1, r1, r2
 8004dd2:	d014      	beq.n	8004dfe <ai_buffer_fmt_name+0x6e>
 8004dd4:	390f      	subs	r1, #15
 8004dd6:	d01b      	beq.n	8004e10 <ai_buffer_fmt_name+0x80>
 8004dd8:	4a9c      	ldr	r2, [pc, #624]	; (800504c <.text_23>)
 8004dda:	1a89      	subs	r1, r1, r2
 8004ddc:	d003      	beq.n	8004de6 <ai_buffer_fmt_name+0x56>
 8004dde:	e023      	b.n	8004e28 <ai_buffer_fmt_name+0x98>
 8004de0:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8004de4:	4770      	bx	lr
 8004de6:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8004dea:	4770      	bx	lr
 8004dec:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8004df0:	4770      	bx	lr
 8004df2:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8004df6:	4770      	bx	lr
 8004df8:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8004dfc:	4770      	bx	lr
 8004dfe:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8004e02:	4770      	bx	lr
 8004e04:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8004e08:	4770      	bx	lr
 8004e0a:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8004e0e:	4770      	bx	lr
 8004e10:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8004e14:	4770      	bx	lr
 8004e16:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8004e1a:	4770      	bx	lr
 8004e1c:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8004e20:	4770      	bx	lr
 8004e22:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8004e26:	4770      	bx	lr
 8004e28:	0b80      	lsrs	r0, r0, #14
 8004e2a:	0380      	lsls	r0, r0, #14
 8004e2c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004e30:	2840      	cmp	r0, #64	; 0x40
 8004e32:	d007      	beq.n	8004e44 <ai_buffer_fmt_name+0xb4>
 8004e34:	4981      	ldr	r1, [pc, #516]	; (800503c <.text_19>)
 8004e36:	4288      	cmp	r0, r1
 8004e38:	d00a      	beq.n	8004e50 <ai_buffer_fmt_name+0xc0>
 8004e3a:	4981      	ldr	r1, [pc, #516]	; (8005040 <.text_20>)
 8004e3c:	4288      	cmp	r0, r1
 8004e3e:	d004      	beq.n	8004e4a <ai_buffer_fmt_name+0xba>
 8004e40:	a079      	add	r0, pc, #484	; (adr r0, 8005028 <.text_14>)
 8004e42:	4770      	bx	lr
 8004e44:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8004e48:	4770      	bx	lr
 8004e4a:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8004e4e:	4770      	bx	lr
 8004e50:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8004e54:	4770      	bx	lr

08004e56 <ai_buffer_fmt_valid>:
 8004e56:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004e5a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004e5e:	d02d      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004e64:	1a89      	subs	r1, r1, r2
 8004e66:	d029      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e6c:	1a89      	subs	r1, r1, r2
 8004e6e:	d025      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e70:	1fc9      	subs	r1, r1, #7
 8004e72:	d023      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e74:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004e78:	1a89      	subs	r1, r1, r2
 8004e7a:	d01f      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e7c:	390f      	subs	r1, #15
 8004e7e:	d01d      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e80:	4a71      	ldr	r2, [pc, #452]	; (8005048 <.text_22>)
 8004e82:	1a89      	subs	r1, r1, r2
 8004e84:	d01a      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e8a:	1a89      	subs	r1, r1, r2
 8004e8c:	d016      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e8e:	1fc9      	subs	r1, r1, #7
 8004e90:	d014      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e92:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004e96:	1a89      	subs	r1, r1, r2
 8004e98:	d010      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e9a:	390f      	subs	r1, #15
 8004e9c:	d00e      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e9e:	4a6b      	ldr	r2, [pc, #428]	; (800504c <.text_23>)
 8004ea0:	1a89      	subs	r1, r1, r2
 8004ea2:	bf1f      	itttt	ne
 8004ea4:	0b80      	lsrne	r0, r0, #14
 8004ea6:	0380      	lslne	r0, r0, #14
 8004ea8:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8004eac:	2840      	cmpne	r0, #64	; 0x40
 8004eae:	d005      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004eb0:	4b62      	ldr	r3, [pc, #392]	; (800503c <.text_19>)
 8004eb2:	4298      	cmp	r0, r3
 8004eb4:	bf1c      	itt	ne
 8004eb6:	4b62      	ldrne	r3, [pc, #392]	; (8005040 <.text_20>)
 8004eb8:	4298      	cmpne	r0, r3
 8004eba:	d101      	bne.n	8004ec0 <ai_buffer_fmt_valid+0x6a>
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	4770      	bx	lr
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4770      	bx	lr

08004ec4 <ai_buffer_fmt_get_formats>:
 8004ec4:	4962      	ldr	r1, [pc, #392]	; (8005050 <.text_24>)
 8004ec6:	6001      	str	r1, [r0, #0]
 8004ec8:	200c      	movs	r0, #12
 8004eca:	4770      	bx	lr

08004ecc <ai_array_to_buffer_fmt>:
 8004ecc:	4601      	mov	r1, r0
 8004ece:	2040      	movs	r0, #64	; 0x40
 8004ed0:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8004ed4:	2a02      	cmp	r2, #2
 8004ed6:	d104      	bne.n	8004ee2 <ai_array_to_buffer_fmt+0x16>
 8004ed8:	485e      	ldr	r0, [pc, #376]	; (8005054 <.text_25>)
 8004eda:	4008      	ands	r0, r1
 8004edc:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8004ee0:	e037      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004ee2:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8004ee6:	4b55      	ldr	r3, [pc, #340]	; (800503c <.text_19>)
 8004ee8:	1ad2      	subs	r2, r2, r3
 8004eea:	d02d      	beq.n	8004f48 <ai_array_to_buffer_fmt+0x7c>
 8004eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	d01b      	beq.n	8004f2c <ai_array_to_buffer_fmt+0x60>
 8004ef4:	1fd2      	subs	r2, r2, #7
 8004ef6:	d029      	beq.n	8004f4c <ai_array_to_buffer_fmt+0x80>
 8004ef8:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8004efc:	1ad2      	subs	r2, r2, r3
 8004efe:	d017      	beq.n	8004f30 <ai_array_to_buffer_fmt+0x64>
 8004f00:	3a0f      	subs	r2, #15
 8004f02:	d025      	beq.n	8004f50 <ai_array_to_buffer_fmt+0x84>
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <.text_22>)
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	d018      	beq.n	8004f3c <ai_array_to_buffer_fmt+0x70>
 8004f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	d010      	beq.n	8004f34 <ai_array_to_buffer_fmt+0x68>
 8004f12:	1fd2      	subs	r2, r2, #7
 8004f14:	d014      	beq.n	8004f40 <ai_array_to_buffer_fmt+0x74>
 8004f16:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	d00c      	beq.n	8004f38 <ai_array_to_buffer_fmt+0x6c>
 8004f1e:	3a0f      	subs	r2, #15
 8004f20:	d010      	beq.n	8004f44 <ai_array_to_buffer_fmt+0x78>
 8004f22:	4b4a      	ldr	r3, [pc, #296]	; (800504c <.text_23>)
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	d114      	bne.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f28:	484b      	ldr	r0, [pc, #300]	; (8005058 <.text_26>)
 8004f2a:	e012      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f2c:	484b      	ldr	r0, [pc, #300]	; (800505c <.text_27>)
 8004f2e:	e010      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f30:	484b      	ldr	r0, [pc, #300]	; (8005060 <.text_28>)
 8004f32:	e00e      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f34:	484b      	ldr	r0, [pc, #300]	; (8005064 <.text_29>)
 8004f36:	e00c      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f38:	484b      	ldr	r0, [pc, #300]	; (8005068 <.text_30>)
 8004f3a:	e00a      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f3c:	4840      	ldr	r0, [pc, #256]	; (8005040 <.text_20>)
 8004f3e:	e008      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f40:	484a      	ldr	r0, [pc, #296]	; (800506c <.text_31>)
 8004f42:	e006      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f44:	484a      	ldr	r0, [pc, #296]	; (8005070 <.text_32>)
 8004f46:	e004      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f48:	4618      	mov	r0, r3
 8004f4a:	e002      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f4c:	4849      	ldr	r0, [pc, #292]	; (8005074 <.text_33>)
 8004f4e:	e000      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f50:	4849      	ldr	r0, [pc, #292]	; (8005078 <.text_34>)
 8004f52:	004a      	lsls	r2, r1, #1
 8004f54:	bf4c      	ite	mi
 8004f56:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8004f5a:	2200      	movpl	r2, #0
 8004f5c:	4310      	orrs	r0, r2
 8004f5e:	008a      	lsls	r2, r1, #2
 8004f60:	bf4c      	ite	mi
 8004f62:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8004f66:	2200      	movpl	r2, #0
 8004f68:	4310      	orrs	r0, r2
 8004f6a:	0109      	lsls	r1, r1, #4
 8004f6c:	bf4c      	ite	mi
 8004f6e:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8004f72:	2100      	movpl	r1, #0
 8004f74:	4308      	orrs	r0, r1
 8004f76:	4770      	bx	lr

08004f78 <ai_buffer_to_array_fmt>:
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8004f7e:	3840      	subs	r0, #64	; 0x40
 8004f80:	d022      	beq.n	8004fc8 <ai_buffer_to_array_fmt+0x50>
 8004f82:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8004f86:	1a40      	subs	r0, r0, r1
 8004f88:	d030      	beq.n	8004fec <ai_buffer_to_array_fmt+0x74>
 8004f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f8e:	1a40      	subs	r0, r0, r1
 8004f90:	d01e      	beq.n	8004fd0 <ai_buffer_to_array_fmt+0x58>
 8004f92:	1fc0      	subs	r0, r0, #7
 8004f94:	d02c      	beq.n	8004ff0 <ai_buffer_to_array_fmt+0x78>
 8004f96:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004f9a:	1a40      	subs	r0, r0, r1
 8004f9c:	d01a      	beq.n	8004fd4 <ai_buffer_to_array_fmt+0x5c>
 8004f9e:	380f      	subs	r0, #15
 8004fa0:	d028      	beq.n	8004ff4 <ai_buffer_to_array_fmt+0x7c>
 8004fa2:	4929      	ldr	r1, [pc, #164]	; (8005048 <.text_22>)
 8004fa4:	1a40      	subs	r0, r0, r1
 8004fa6:	d01b      	beq.n	8004fe0 <ai_buffer_to_array_fmt+0x68>
 8004fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fac:	1a40      	subs	r0, r0, r1
 8004fae:	d013      	beq.n	8004fd8 <ai_buffer_to_array_fmt+0x60>
 8004fb0:	1fc0      	subs	r0, r0, #7
 8004fb2:	d017      	beq.n	8004fe4 <ai_buffer_to_array_fmt+0x6c>
 8004fb4:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004fb8:	1a40      	subs	r0, r0, r1
 8004fba:	d00f      	beq.n	8004fdc <ai_buffer_to_array_fmt+0x64>
 8004fbc:	380f      	subs	r0, #15
 8004fbe:	d013      	beq.n	8004fe8 <ai_buffer_to_array_fmt+0x70>
 8004fc0:	4922      	ldr	r1, [pc, #136]	; (800504c <.text_23>)
 8004fc2:	1a40      	subs	r0, r0, r1
 8004fc4:	d002      	beq.n	8004fcc <ai_buffer_to_array_fmt+0x54>
 8004fc6:	e017      	b.n	8004ff8 <ai_buffer_to_array_fmt+0x80>
 8004fc8:	2040      	movs	r0, #64	; 0x40
 8004fca:	e01f      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fcc:	4822      	ldr	r0, [pc, #136]	; (8005058 <.text_26>)
 8004fce:	e01d      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fd0:	4822      	ldr	r0, [pc, #136]	; (800505c <.text_27>)
 8004fd2:	e01b      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fd4:	4822      	ldr	r0, [pc, #136]	; (8005060 <.text_28>)
 8004fd6:	e019      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fd8:	4822      	ldr	r0, [pc, #136]	; (8005064 <.text_29>)
 8004fda:	e017      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fdc:	4822      	ldr	r0, [pc, #136]	; (8005068 <.text_30>)
 8004fde:	e015      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fe0:	4817      	ldr	r0, [pc, #92]	; (8005040 <.text_20>)
 8004fe2:	e013      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fe4:	4821      	ldr	r0, [pc, #132]	; (800506c <.text_31>)
 8004fe6:	e011      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fe8:	4821      	ldr	r0, [pc, #132]	; (8005070 <.text_32>)
 8004fea:	e00f      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fec:	4813      	ldr	r0, [pc, #76]	; (800503c <.text_19>)
 8004fee:	e00d      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004ff0:	4820      	ldr	r0, [pc, #128]	; (8005074 <.text_33>)
 8004ff2:	e00b      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004ff4:	4820      	ldr	r0, [pc, #128]	; (8005078 <.text_34>)
 8004ff6:	e009      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004ff8:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8004ffc:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005000:	2900      	cmp	r1, #0
 8005002:	bf14      	ite	ne
 8005004:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005008:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 800500c:	0051      	lsls	r1, r2, #1
 800500e:	bf48      	it	mi
 8005010:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005014:	0091      	lsls	r1, r2, #2
 8005016:	bf48      	it	mi
 8005018:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 800501c:	0111      	lsls	r1, r2, #4
 800501e:	bf48      	it	mi
 8005020:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005024:	4770      	bx	lr
	...

08005028 <.text_14>:
 8005028:	00000000 	.word	0x00000000

0800502c <.text_15>:
 800502c:	002be80f 	.word	0x002be80f

08005030 <.text_16>:
 8005030:	003bf7f1 	.word	0x003bf7f1

08005034 <.text_17>:
 8005034:	00b9fff1 	.word	0x00b9fff1

08005038 <.text_18>:
 8005038:	004df000 	.word	0x004df000

0800503c <.text_19>:
 800503c:	00040040 	.word	0x00040040

08005040 <.text_20>:
 8005040:	00840040 	.word	0x00840040

08005044 <.text_21>:
 8005044:	080171e4 	.word	0x080171e4

08005048 <.text_22>:
 8005048:	007ff7f1 	.word	0x007ff7f1

0800504c <.text_23>:
 800504c:	00fe07f1 	.word	0x00fe07f1

08005050 <.text_24>:
 8005050:	08017254 	.word	0x08017254

08005054 <.text_25>:
 8005054:	00803fff 	.word	0x00803fff

08005058 <.text_26>:
 8005058:	01821040 	.word	0x01821040

0800505c <.text_27>:
 800505c:	00040440 	.word	0x00040440

08005060 <.text_28>:
 8005060:	00040840 	.word	0x00040840

08005064 <.text_29>:
 8005064:	00840440 	.word	0x00840440

08005068 <.text_30>:
 8005068:	00840840 	.word	0x00840840

0800506c <.text_31>:
 800506c:	00840447 	.word	0x00840447

08005070 <.text_32>:
 8005070:	0084084f 	.word	0x0084084f

08005074 <.text_33>:
 8005074:	00040447 	.word	0x00040447

08005078 <.text_34>:
 8005078:	0004084f 	.word	0x0004084f

0800507c <ai_array_get_byte_size>:
 800507c:	b909      	cbnz	r1, 8005082 <ai_array_get_byte_size+0x6>
 800507e:	2000      	movs	r0, #0
 8005080:	4770      	bx	lr
 8005082:	11c2      	asrs	r2, r0, #7
 8005084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005088:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800508c:	189b      	adds	r3, r3, r2
 800508e:	4359      	muls	r1, r3
 8005090:	1dc9      	adds	r1, r1, #7
 8005092:	08c9      	lsrs	r1, r1, #3
 8005094:	1543      	asrs	r3, r0, #21
 8005096:	00c9      	lsls	r1, r1, #3
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	ea4f 4c60 	mov.w	ip, r0, asr #17
 80050a0:	40d9      	lsrs	r1, r3
 80050a2:	f00c 0c0f 	and.w	ip, ip, #15
 80050a6:	f1bc 0f04 	cmp.w	ip, #4
 80050aa:	d00a      	beq.n	80050c2 <ai_array_get_byte_size+0x46>
 80050ac:	f1bc 0f08 	cmp.w	ip, #8
 80050b0:	bf02      	ittt	eq
 80050b2:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 80050b6:	1882      	addeq	r2, r0, r2
 80050b8:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 80050bc:	1dc9      	adds	r1, r1, #7
 80050be:	08c8      	lsrs	r0, r1, #3
 80050c0:	4770      	bx	lr
 80050c2:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80050c6:	1882      	adds	r2, r0, r2
 80050c8:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80050cc:	1dc9      	adds	r1, r1, #7
 80050ce:	08c8      	lsrs	r0, r1, #3
 80050d0:	4770      	bx	lr

080050d2 <ai_array_get_data_byte_size>:
 80050d2:	b909      	cbnz	r1, 80050d8 <ai_array_get_data_byte_size+0x6>
 80050d4:	2000      	movs	r0, #0
 80050d6:	4770      	bx	lr
 80050d8:	11c2      	asrs	r2, r0, #7
 80050da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050de:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80050e2:	189a      	adds	r2, r3, r2
 80050e4:	4351      	muls	r1, r2
 80050e6:	1dc9      	adds	r1, r1, #7
 80050e8:	08c9      	lsrs	r1, r1, #3
 80050ea:	1540      	asrs	r0, r0, #21
 80050ec:	00c9      	lsls	r1, r1, #3
 80050ee:	f000 0003 	and.w	r0, r0, #3
 80050f2:	40c1      	lsrs	r1, r0
 80050f4:	1dc9      	adds	r1, r1, #7
 80050f6:	08c8      	lsrs	r0, r1, #3
 80050f8:	4770      	bx	lr

080050fa <ai_array_get_elems_from_size>:
 80050fa:	b909      	cbnz	r1, 8005100 <ai_array_get_elems_from_size+0x6>
 80050fc:	2000      	movs	r0, #0
 80050fe:	4770      	bx	lr
 8005100:	1442      	asrs	r2, r0, #17
 8005102:	00c9      	lsls	r1, r1, #3
 8005104:	f002 020f 	and.w	r2, r2, #15
 8005108:	2a04      	cmp	r2, #4
 800510a:	d002      	beq.n	8005112 <ai_array_get_elems_from_size+0x18>
 800510c:	2a08      	cmp	r2, #8
 800510e:	d009      	beq.n	8005124 <ai_array_get_elems_from_size+0x2a>
 8005110:	e010      	b.n	8005134 <ai_array_get_elems_from_size+0x3a>
 8005112:	11c3      	asrs	r3, r0, #7
 8005114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005118:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800511c:	18d2      	adds	r2, r2, r3
 800511e:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005122:	e007      	b.n	8005134 <ai_array_get_elems_from_size+0x3a>
 8005124:	11c2      	asrs	r2, r0, #7
 8005126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800512a:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800512e:	189a      	adds	r2, r3, r2
 8005130:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005134:	1542      	asrs	r2, r0, #21
 8005136:	f002 0203 	and.w	r2, r2, #3
 800513a:	4091      	lsls	r1, r2
 800513c:	1dc9      	adds	r1, r1, #7
 800513e:	11c2      	asrs	r2, r0, #7
 8005140:	08c9      	lsrs	r1, r1, #3
 8005142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005146:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800514a:	00c9      	lsls	r1, r1, #3
 800514c:	1880      	adds	r0, r0, r2
 800514e:	fbb1 f0f0 	udiv	r0, r1, r0
 8005152:	4770      	bx	lr

08005154 <.text_38>:
 8005154:	5f544d46 	.word	0x5f544d46
 8005158:	454e4f4e 	.word	0x454e4f4e
 800515c:	00          	.byte	0x00
 800515d:	00          	.byte	0x00
	...

08005160 <.text_39>:
 8005160:	5f544d46 	.word	0x5f544d46
 8005164:	414f4c46 	.word	0x414f4c46
 8005168:	0054      	.short	0x0054
	...

0800516c <.text_40>:
 800516c:	5f544d46 	.word	0x5f544d46
 8005170:	414f4c46 	.word	0x414f4c46
 8005174:	00343654 	.word	0x00343654

08005178 <.text_41>:
 8005178:	5f544d46 	.word	0x5f544d46
 800517c:	414f4c46 	.word	0x414f4c46
 8005180:	00363154 	.word	0x00363154

08005184 <.text_42>:
 8005184:	5f544d46 	.word	0x5f544d46
 8005188:	00003855 	.word	0x00003855

0800518c <.text_43>:
 800518c:	5f544d46 	.word	0x5f544d46
 8005190:	00363155 	.word	0x00363155

08005194 <.text_44>:
 8005194:	5f544d46 	.word	0x5f544d46
 8005198:	00323355 	.word	0x00323355

0800519c <.text_45>:
 800519c:	5f544d46 	.word	0x5f544d46
 80051a0:	00343655 	.word	0x00343655

080051a4 <.text_46>:
 80051a4:	5f544d46 	.word	0x5f544d46
 80051a8:	00003455 	.word	0x00003455

080051ac <.text_47>:
 80051ac:	5f544d46 	.word	0x5f544d46
 80051b0:	00003853 	.word	0x00003853

080051b4 <.text_48>:
 80051b4:	5f544d46 	.word	0x5f544d46
 80051b8:	00363153 	.word	0x00363153

080051bc <.text_49>:
 80051bc:	5f544d46 	.word	0x5f544d46
 80051c0:	00323353 	.word	0x00323353

080051c4 <.text_50>:
 80051c4:	5f544d46 	.word	0x5f544d46
 80051c8:	00343653 	.word	0x00343653

080051cc <.text_51>:
 80051cc:	5f544d46 	.word	0x5f544d46
 80051d0:	00003453 	.word	0x00003453

080051d4 <.text_52>:
 80051d4:	5f544d46 	.word	0x5f544d46
 80051d8:	0051      	.short	0x0051
	...

080051dc <.text_53>:
 80051dc:	5f544d46 	.word	0x5f544d46
 80051e0:	00003751 	.word	0x00003751

080051e4 <.text_54>:
 80051e4:	5f544d46 	.word	0x5f544d46
 80051e8:	00353151 	.word	0x00353151

080051ec <.text_55>:
 80051ec:	5f544d46 	.word	0x5f544d46
 80051f0:	00313351 	.word	0x00313351

080051f4 <.text_56>:
 80051f4:	5f544d46 	.word	0x5f544d46
 80051f8:	00005155 	.word	0x00005155

080051fc <.text_57>:
 80051fc:	5f544d46 	.word	0x5f544d46
 8005200:	00375155 	.word	0x00375155

08005204 <.text_58>:
 8005204:	5f544d46 	.word	0x5f544d46
 8005208:	35315155 	.word	0x35315155
 800520c:	00          	.byte	0x00
 800520d:	00          	.byte	0x00
	...

08005210 <.text_59>:
 8005210:	5f544d46 	.word	0x5f544d46
 8005214:	31335155 	.word	0x31335155
 8005218:	00          	.byte	0x00
 8005219:	00          	.byte	0x00
	...

0800521c <.text_60>:
 800521c:	5f544d46 	.word	0x5f544d46
 8005220:	3454554c 	.word	0x3454554c
 8005224:	4f4c465f 	.word	0x4f4c465f
 8005228:	00005441 	.word	0x00005441

0800522c <.text_61>:
 800522c:	5f544d46 	.word	0x5f544d46
 8005230:	3854554c 	.word	0x3854554c
 8005234:	4f4c465f 	.word	0x4f4c465f
 8005238:	00005441 	.word	0x00005441

0800523c <.text_62>:
 800523c:	5f544d46 	.word	0x5f544d46
 8005240:	3454554c 	.word	0x3454554c
 8005244:	3531515f 	.word	0x3531515f
 8005248:	00          	.byte	0x00
 8005249:	00          	.byte	0x00
	...

0800524c <.text_63>:
 800524c:	5f544d46 	.word	0x5f544d46
 8005250:	3854554c 	.word	0x3854554c
 8005254:	3531515f 	.word	0x3531515f
 8005258:	00          	.byte	0x00
 8005259:	00          	.byte	0x00
	...

0800525c <.text_64>:
 800525c:	5f544d46 	.word	0x5f544d46
 8005260:	3454554c 	.word	0x3454554c
 8005264:	3151555f 	.word	0x3151555f
 8005268:	0035      	.short	0x0035
	...

0800526c <.text_65>:
 800526c:	5f544d46 	.word	0x5f544d46
 8005270:	3854554c 	.word	0x3854554c
 8005274:	3151555f 	.word	0x3151555f
 8005278:	0035      	.short	0x0035
	...

0800527c <.text_66>:
 800527c:	415f4941 	.word	0x415f4941
 8005280:	59415252 	.word	0x59415252
 8005284:	524f465f 	.word	0x524f465f
 8005288:	5f54414d 	.word	0x5f54414d
 800528c:	454e4f4e 	.word	0x454e4f4e
 8005290:	00          	.byte	0x00
 8005291:	00          	.byte	0x00
	...

08005294 <.text_67>:
 8005294:	415f4941 	.word	0x415f4941
 8005298:	59415252 	.word	0x59415252
 800529c:	524f465f 	.word	0x524f465f
 80052a0:	5f54414d 	.word	0x5f54414d
 80052a4:	0051      	.short	0x0051
	...

080052a8 <.text_68>:
 80052a8:	415f4941 	.word	0x415f4941
 80052ac:	59415252 	.word	0x59415252
 80052b0:	524f465f 	.word	0x524f465f
 80052b4:	5f54414d 	.word	0x5f54414d
 80052b8:	00005155 	.word	0x00005155

080052bc <.text_69>:
 80052bc:	425f4941 	.word	0x425f4941
 80052c0:	45464655 	.word	0x45464655
 80052c4:	4f465f52 	.word	0x4f465f52
 80052c8:	54414d52 	.word	0x54414d52
 80052cc:	4e4f4e5f 	.word	0x4e4f4e5f
 80052d0:	0045      	.short	0x0045
	...

080052d4 <.text_70>:
 80052d4:	425f4941 	.word	0x425f4941
 80052d8:	45464655 	.word	0x45464655
 80052dc:	4f465f52 	.word	0x4f465f52
 80052e0:	54414d52 	.word	0x54414d52
 80052e4:	0000515f 	.word	0x0000515f

080052e8 <.text_71>:
 80052e8:	425f4941 	.word	0x425f4941
 80052ec:	45464655 	.word	0x45464655
 80052f0:	4f465f52 	.word	0x4f465f52
 80052f4:	54414d52 	.word	0x54414d52
 80052f8:	0051555f 	.word	0x0051555f

080052fc <ai_math_sqrt>:
 80052fc:	eef0 0a40 	vmov.f32	s1, s0
 8005300:	eef5 0a40 	vcmp.f32	s1, #0.0
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80053b0 <.text_12>
 800530c:	db01      	blt.n	8005312 <ai_math_sqrt+0x16>
 800530e:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8005312:	4770      	bx	lr

08005314 <ai_math_exp>:
 8005314:	f00f bdb6 	b.w	8014e84 <expf>

08005318 <ai_math_pow>:
 8005318:	f00f be54 	b.w	8014fc4 <powf>

0800531c <ai_math_tanh>:
 800531c:	f00f bc6c 	b.w	8014bf8 <tanhf>

08005320 <ai_math_cosh>:
 8005320:	f00f bd80 	b.w	8014e24 <coshf>

08005324 <ai_math_relu>:
 8005324:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532c:	bf48      	it	mi
 800532e:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80053b0 <.text_12>
 8005332:	4770      	bx	lr

08005334 <ai_math_prelu>:
 8005334:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	bf48      	it	mi
 800533e:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8005342:	4770      	bx	lr

08005344 <ai_math_sigmoid>:
 8005344:	b500      	push	{lr}
 8005346:	b081      	sub	sp, #4
 8005348:	eeb1 0a40 	vneg.f32	s0, s0
 800534c:	f00f fd9a 	bl	8014e84 <expf>
 8005350:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005354:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005358:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800535c:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8005360:	b001      	add	sp, #4
 8005362:	bd00      	pop	{pc}

08005364 <ai_math_hard_sigmoid>:
 8005364:	eef0 0a40 	vmov.f32	s1, s0
 8005368:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80053b4 <.text_13>
 800536c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005370:	ee00 0a81 	vmla.f32	s0, s1, s2
 8005374:	eddf 0a10 	vldr	s1, [pc, #64]	; 80053b8 <.text_14>
 8005378:	eeb4 0a60 	vcmp.f32	s0, s1
 800537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005380:	da07      	bge.n	8005392 <ai_math_hard_sigmoid+0x2e>
 8005382:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538a:	d504      	bpl.n	8005396 <ai_math_hard_sigmoid+0x32>
 800538c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80053b0 <.text_12>
 8005390:	4770      	bx	lr
 8005392:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005396:	4770      	bx	lr

08005398 <ai_math_sign>:
 8005398:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	bfcc      	ite	gt
 80053a2:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80053bc <.text_15>
 80053a6:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80053c0 <.text_16>
 80053aa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80053ae:	4770      	bx	lr

080053b0 <.text_12>:
 80053b0:	00000000 	.word	0x00000000

080053b4 <.text_13>:
 80053b4:	3e4ccccd 	.word	0x3e4ccccd

080053b8 <.text_14>:
 80053b8:	3f800001 	.word	0x3f800001

080053bc <.text_15>:
 80053bc:	00000001 	.word	0x00000001

080053c0 <.text_16>:
 80053c0:	ffffffff 	.word	0xffffffff

080053c4 <ai_div>:
 80053c4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80053c8:	4770      	bx	lr

080053ca <ai_floor_div>:
 80053ca:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80053ce:	f00f ba3f 	b.w	8014850 <floorf>

080053d2 <ai_floor_mod>:
 80053d2:	f00f bd95 	b.w	8014f00 <fmodf>

080053d6 <ai_max>:
 80053d6:	eef4 0a40 	vcmp.f32	s1, s0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	bf58      	it	pl
 80053e0:	eeb0 0a60 	vmovpl.f32	s0, s1
 80053e4:	4770      	bx	lr

080053e6 <ai_min>:
 80053e6:	eeb4 0a60 	vcmp.f32	s0, s1
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ee:	bf58      	it	pl
 80053f0:	eeb0 0a60 	vmovpl.f32	s0, s1
 80053f4:	4770      	bx	lr

080053f6 <ai_mul>:
 80053f6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80053fa:	4770      	bx	lr

080053fc <ai_sub>:
 80053fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005400:	4770      	bx	lr

08005402 <ai_sum>:
 8005402:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005406:	4770      	bx	lr

08005408 <arm_mat_init_f32>:
 8005408:	8001      	strh	r1, [r0, #0]
 800540a:	8042      	strh	r2, [r0, #2]
 800540c:	6043      	str	r3, [r0, #4]
 800540e:	4770      	bx	lr

08005410 <__aeabi_memset>:
 8005410:	b470      	push	{r4, r5, r6}
 8005412:	0784      	lsls	r4, r0, #30
 8005414:	d046      	beq.n	80054a4 <__aeabi_memset+0x94>
 8005416:	1e4c      	subs	r4, r1, #1
 8005418:	2900      	cmp	r1, #0
 800541a:	d041      	beq.n	80054a0 <__aeabi_memset+0x90>
 800541c:	b2d5      	uxtb	r5, r2
 800541e:	4603      	mov	r3, r0
 8005420:	e002      	b.n	8005428 <__aeabi_memset+0x18>
 8005422:	1e61      	subs	r1, r4, #1
 8005424:	b3e4      	cbz	r4, 80054a0 <__aeabi_memset+0x90>
 8005426:	460c      	mov	r4, r1
 8005428:	f803 5b01 	strb.w	r5, [r3], #1
 800542c:	0799      	lsls	r1, r3, #30
 800542e:	d1f8      	bne.n	8005422 <__aeabi_memset+0x12>
 8005430:	2c03      	cmp	r4, #3
 8005432:	d92e      	bls.n	8005492 <__aeabi_memset+0x82>
 8005434:	b2d5      	uxtb	r5, r2
 8005436:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800543a:	2c0f      	cmp	r4, #15
 800543c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005440:	d919      	bls.n	8005476 <__aeabi_memset+0x66>
 8005442:	4626      	mov	r6, r4
 8005444:	f103 0110 	add.w	r1, r3, #16
 8005448:	3e10      	subs	r6, #16
 800544a:	2e0f      	cmp	r6, #15
 800544c:	f841 5c10 	str.w	r5, [r1, #-16]
 8005450:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005454:	f841 5c08 	str.w	r5, [r1, #-8]
 8005458:	f841 5c04 	str.w	r5, [r1, #-4]
 800545c:	f101 0110 	add.w	r1, r1, #16
 8005460:	d8f2      	bhi.n	8005448 <__aeabi_memset+0x38>
 8005462:	f1a4 0110 	sub.w	r1, r4, #16
 8005466:	f021 010f 	bic.w	r1, r1, #15
 800546a:	f004 040f 	and.w	r4, r4, #15
 800546e:	3110      	adds	r1, #16
 8005470:	2c03      	cmp	r4, #3
 8005472:	440b      	add	r3, r1
 8005474:	d90d      	bls.n	8005492 <__aeabi_memset+0x82>
 8005476:	461e      	mov	r6, r3
 8005478:	4621      	mov	r1, r4
 800547a:	3904      	subs	r1, #4
 800547c:	2903      	cmp	r1, #3
 800547e:	f846 5b04 	str.w	r5, [r6], #4
 8005482:	d8fa      	bhi.n	800547a <__aeabi_memset+0x6a>
 8005484:	1f21      	subs	r1, r4, #4
 8005486:	f021 0103 	bic.w	r1, r1, #3
 800548a:	3104      	adds	r1, #4
 800548c:	440b      	add	r3, r1
 800548e:	f004 0403 	and.w	r4, r4, #3
 8005492:	b12c      	cbz	r4, 80054a0 <__aeabi_memset+0x90>
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	441c      	add	r4, r3
 8005498:	f803 2b01 	strb.w	r2, [r3], #1
 800549c:	42a3      	cmp	r3, r4
 800549e:	d1fb      	bne.n	8005498 <__aeabi_memset+0x88>
 80054a0:	bc70      	pop	{r4, r5, r6}
 80054a2:	4770      	bx	lr
 80054a4:	460c      	mov	r4, r1
 80054a6:	4603      	mov	r3, r0
 80054a8:	e7c2      	b.n	8005430 <__aeabi_memset+0x20>

080054aa <strlen>:
 80054aa:	4603      	mov	r3, r0
 80054ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	d1fb      	bne.n	80054ac <strlen+0x2>
 80054b4:	1a18      	subs	r0, r3, r0
 80054b6:	3801      	subs	r0, #1
 80054b8:	4770      	bx	lr
 80054ba:	0000      	movs	r0, r0
 80054bc:	0000      	movs	r0, r0
	...

080054c0 <memchr>:
 80054c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80054c4:	2a10      	cmp	r2, #16
 80054c6:	db2b      	blt.n	8005520 <memchr+0x60>
 80054c8:	f010 0f07 	tst.w	r0, #7
 80054cc:	d008      	beq.n	80054e0 <memchr+0x20>
 80054ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80054d2:	3a01      	subs	r2, #1
 80054d4:	428b      	cmp	r3, r1
 80054d6:	d02d      	beq.n	8005534 <memchr+0x74>
 80054d8:	f010 0f07 	tst.w	r0, #7
 80054dc:	b342      	cbz	r2, 8005530 <memchr+0x70>
 80054de:	d1f6      	bne.n	80054ce <memchr+0xe>
 80054e0:	b4f0      	push	{r4, r5, r6, r7}
 80054e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80054e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80054ea:	f022 0407 	bic.w	r4, r2, #7
 80054ee:	f07f 0700 	mvns.w	r7, #0
 80054f2:	2300      	movs	r3, #0
 80054f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80054f8:	3c08      	subs	r4, #8
 80054fa:	ea85 0501 	eor.w	r5, r5, r1
 80054fe:	ea86 0601 	eor.w	r6, r6, r1
 8005502:	fa85 f547 	uadd8	r5, r5, r7
 8005506:	faa3 f587 	sel	r5, r3, r7
 800550a:	fa86 f647 	uadd8	r6, r6, r7
 800550e:	faa5 f687 	sel	r6, r5, r7
 8005512:	b98e      	cbnz	r6, 8005538 <memchr+0x78>
 8005514:	d1ee      	bne.n	80054f4 <memchr+0x34>
 8005516:	bcf0      	pop	{r4, r5, r6, r7}
 8005518:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800551c:	f002 0207 	and.w	r2, r2, #7
 8005520:	b132      	cbz	r2, 8005530 <memchr+0x70>
 8005522:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005526:	3a01      	subs	r2, #1
 8005528:	ea83 0301 	eor.w	r3, r3, r1
 800552c:	b113      	cbz	r3, 8005534 <memchr+0x74>
 800552e:	d1f8      	bne.n	8005522 <memchr+0x62>
 8005530:	2000      	movs	r0, #0
 8005532:	4770      	bx	lr
 8005534:	3801      	subs	r0, #1
 8005536:	4770      	bx	lr
 8005538:	2d00      	cmp	r5, #0
 800553a:	bf06      	itte	eq
 800553c:	4635      	moveq	r5, r6
 800553e:	3803      	subeq	r0, #3
 8005540:	3807      	subne	r0, #7
 8005542:	f015 0f01 	tst.w	r5, #1
 8005546:	d107      	bne.n	8005558 <memchr+0x98>
 8005548:	3001      	adds	r0, #1
 800554a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800554e:	bf02      	ittt	eq
 8005550:	3001      	addeq	r0, #1
 8005552:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005556:	3001      	addeq	r0, #1
 8005558:	bcf0      	pop	{r4, r5, r6, r7}
 800555a:	3801      	subs	r0, #1
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop

08005560 <__aeabi_drsub>:
 8005560:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005564:	e002      	b.n	800556c <__adddf3>
 8005566:	bf00      	nop

08005568 <__aeabi_dsub>:
 8005568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800556c <__adddf3>:
 800556c:	b530      	push	{r4, r5, lr}
 800556e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005572:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005576:	ea94 0f05 	teq	r4, r5
 800557a:	bf08      	it	eq
 800557c:	ea90 0f02 	teqeq	r0, r2
 8005580:	bf1f      	itttt	ne
 8005582:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005586:	ea55 0c02 	orrsne.w	ip, r5, r2
 800558a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800558e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005592:	f000 80e2 	beq.w	800575a <__adddf3+0x1ee>
 8005596:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800559a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800559e:	bfb8      	it	lt
 80055a0:	426d      	neglt	r5, r5
 80055a2:	dd0c      	ble.n	80055be <__adddf3+0x52>
 80055a4:	442c      	add	r4, r5
 80055a6:	ea80 0202 	eor.w	r2, r0, r2
 80055aa:	ea81 0303 	eor.w	r3, r1, r3
 80055ae:	ea82 0000 	eor.w	r0, r2, r0
 80055b2:	ea83 0101 	eor.w	r1, r3, r1
 80055b6:	ea80 0202 	eor.w	r2, r0, r2
 80055ba:	ea81 0303 	eor.w	r3, r1, r3
 80055be:	2d36      	cmp	r5, #54	; 0x36
 80055c0:	bf88      	it	hi
 80055c2:	bd30      	pophi	{r4, r5, pc}
 80055c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80055c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80055cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80055d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80055d4:	d002      	beq.n	80055dc <__adddf3+0x70>
 80055d6:	4240      	negs	r0, r0
 80055d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80055dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80055e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80055e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80055e8:	d002      	beq.n	80055f0 <__adddf3+0x84>
 80055ea:	4252      	negs	r2, r2
 80055ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80055f0:	ea94 0f05 	teq	r4, r5
 80055f4:	f000 80a7 	beq.w	8005746 <__adddf3+0x1da>
 80055f8:	f1a4 0401 	sub.w	r4, r4, #1
 80055fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8005600:	db0d      	blt.n	800561e <__adddf3+0xb2>
 8005602:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005606:	fa22 f205 	lsr.w	r2, r2, r5
 800560a:	1880      	adds	r0, r0, r2
 800560c:	f141 0100 	adc.w	r1, r1, #0
 8005610:	fa03 f20e 	lsl.w	r2, r3, lr
 8005614:	1880      	adds	r0, r0, r2
 8005616:	fa43 f305 	asr.w	r3, r3, r5
 800561a:	4159      	adcs	r1, r3
 800561c:	e00e      	b.n	800563c <__adddf3+0xd0>
 800561e:	f1a5 0520 	sub.w	r5, r5, #32
 8005622:	f10e 0e20 	add.w	lr, lr, #32
 8005626:	2a01      	cmp	r2, #1
 8005628:	fa03 fc0e 	lsl.w	ip, r3, lr
 800562c:	bf28      	it	cs
 800562e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005632:	fa43 f305 	asr.w	r3, r3, r5
 8005636:	18c0      	adds	r0, r0, r3
 8005638:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800563c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005640:	d507      	bpl.n	8005652 <__adddf3+0xe6>
 8005642:	f04f 0e00 	mov.w	lr, #0
 8005646:	f1dc 0c00 	rsbs	ip, ip, #0
 800564a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800564e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005652:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005656:	d31b      	bcc.n	8005690 <__adddf3+0x124>
 8005658:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800565c:	d30c      	bcc.n	8005678 <__adddf3+0x10c>
 800565e:	0849      	lsrs	r1, r1, #1
 8005660:	ea5f 0030 	movs.w	r0, r0, rrx
 8005664:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005668:	f104 0401 	add.w	r4, r4, #1
 800566c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005670:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005674:	f080 809a 	bcs.w	80057ac <__adddf3+0x240>
 8005678:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800567c:	bf08      	it	eq
 800567e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005682:	f150 0000 	adcs.w	r0, r0, #0
 8005686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800568a:	ea41 0105 	orr.w	r1, r1, r5
 800568e:	bd30      	pop	{r4, r5, pc}
 8005690:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005694:	4140      	adcs	r0, r0
 8005696:	eb41 0101 	adc.w	r1, r1, r1
 800569a:	3c01      	subs	r4, #1
 800569c:	bf28      	it	cs
 800569e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80056a2:	d2e9      	bcs.n	8005678 <__adddf3+0x10c>
 80056a4:	f091 0f00 	teq	r1, #0
 80056a8:	bf04      	itt	eq
 80056aa:	4601      	moveq	r1, r0
 80056ac:	2000      	moveq	r0, #0
 80056ae:	fab1 f381 	clz	r3, r1
 80056b2:	bf08      	it	eq
 80056b4:	3320      	addeq	r3, #32
 80056b6:	f1a3 030b 	sub.w	r3, r3, #11
 80056ba:	f1b3 0220 	subs.w	r2, r3, #32
 80056be:	da0c      	bge.n	80056da <__adddf3+0x16e>
 80056c0:	320c      	adds	r2, #12
 80056c2:	dd08      	ble.n	80056d6 <__adddf3+0x16a>
 80056c4:	f102 0c14 	add.w	ip, r2, #20
 80056c8:	f1c2 020c 	rsb	r2, r2, #12
 80056cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80056d0:	fa21 f102 	lsr.w	r1, r1, r2
 80056d4:	e00c      	b.n	80056f0 <__adddf3+0x184>
 80056d6:	f102 0214 	add.w	r2, r2, #20
 80056da:	bfd8      	it	le
 80056dc:	f1c2 0c20 	rsble	ip, r2, #32
 80056e0:	fa01 f102 	lsl.w	r1, r1, r2
 80056e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80056e8:	bfdc      	itt	le
 80056ea:	ea41 010c 	orrle.w	r1, r1, ip
 80056ee:	4090      	lslle	r0, r2
 80056f0:	1ae4      	subs	r4, r4, r3
 80056f2:	bfa2      	ittt	ge
 80056f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80056f8:	4329      	orrge	r1, r5
 80056fa:	bd30      	popge	{r4, r5, pc}
 80056fc:	ea6f 0404 	mvn.w	r4, r4
 8005700:	3c1f      	subs	r4, #31
 8005702:	da1c      	bge.n	800573e <__adddf3+0x1d2>
 8005704:	340c      	adds	r4, #12
 8005706:	dc0e      	bgt.n	8005726 <__adddf3+0x1ba>
 8005708:	f104 0414 	add.w	r4, r4, #20
 800570c:	f1c4 0220 	rsb	r2, r4, #32
 8005710:	fa20 f004 	lsr.w	r0, r0, r4
 8005714:	fa01 f302 	lsl.w	r3, r1, r2
 8005718:	ea40 0003 	orr.w	r0, r0, r3
 800571c:	fa21 f304 	lsr.w	r3, r1, r4
 8005720:	ea45 0103 	orr.w	r1, r5, r3
 8005724:	bd30      	pop	{r4, r5, pc}
 8005726:	f1c4 040c 	rsb	r4, r4, #12
 800572a:	f1c4 0220 	rsb	r2, r4, #32
 800572e:	fa20 f002 	lsr.w	r0, r0, r2
 8005732:	fa01 f304 	lsl.w	r3, r1, r4
 8005736:	ea40 0003 	orr.w	r0, r0, r3
 800573a:	4629      	mov	r1, r5
 800573c:	bd30      	pop	{r4, r5, pc}
 800573e:	fa21 f004 	lsr.w	r0, r1, r4
 8005742:	4629      	mov	r1, r5
 8005744:	bd30      	pop	{r4, r5, pc}
 8005746:	f094 0f00 	teq	r4, #0
 800574a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800574e:	bf06      	itte	eq
 8005750:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005754:	3401      	addeq	r4, #1
 8005756:	3d01      	subne	r5, #1
 8005758:	e74e      	b.n	80055f8 <__adddf3+0x8c>
 800575a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800575e:	bf18      	it	ne
 8005760:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005764:	d029      	beq.n	80057ba <__adddf3+0x24e>
 8005766:	ea94 0f05 	teq	r4, r5
 800576a:	bf08      	it	eq
 800576c:	ea90 0f02 	teqeq	r0, r2
 8005770:	d005      	beq.n	800577e <__adddf3+0x212>
 8005772:	ea54 0c00 	orrs.w	ip, r4, r0
 8005776:	bf04      	itt	eq
 8005778:	4619      	moveq	r1, r3
 800577a:	4610      	moveq	r0, r2
 800577c:	bd30      	pop	{r4, r5, pc}
 800577e:	ea91 0f03 	teq	r1, r3
 8005782:	bf1e      	ittt	ne
 8005784:	2100      	movne	r1, #0
 8005786:	2000      	movne	r0, #0
 8005788:	bd30      	popne	{r4, r5, pc}
 800578a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800578e:	d105      	bne.n	800579c <__adddf3+0x230>
 8005790:	0040      	lsls	r0, r0, #1
 8005792:	4149      	adcs	r1, r1
 8005794:	bf28      	it	cs
 8005796:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800579a:	bd30      	pop	{r4, r5, pc}
 800579c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80057a0:	bf3c      	itt	cc
 80057a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80057a6:	bd30      	popcc	{r4, r5, pc}
 80057a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80057ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80057b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	bd30      	pop	{r4, r5, pc}
 80057ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80057be:	bf1a      	itte	ne
 80057c0:	4619      	movne	r1, r3
 80057c2:	4610      	movne	r0, r2
 80057c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80057c8:	bf1c      	itt	ne
 80057ca:	460b      	movne	r3, r1
 80057cc:	4602      	movne	r2, r0
 80057ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80057d2:	bf06      	itte	eq
 80057d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80057d8:	ea91 0f03 	teqeq	r1, r3
 80057dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80057e0:	bd30      	pop	{r4, r5, pc}
 80057e2:	bf00      	nop

080057e4 <__aeabi_ui2d>:
 80057e4:	f090 0f00 	teq	r0, #0
 80057e8:	bf04      	itt	eq
 80057ea:	2100      	moveq	r1, #0
 80057ec:	4770      	bxeq	lr
 80057ee:	b530      	push	{r4, r5, lr}
 80057f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80057f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80057f8:	f04f 0500 	mov.w	r5, #0
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	e750      	b.n	80056a4 <__adddf3+0x138>
 8005802:	bf00      	nop

08005804 <__aeabi_i2d>:
 8005804:	f090 0f00 	teq	r0, #0
 8005808:	bf04      	itt	eq
 800580a:	2100      	moveq	r1, #0
 800580c:	4770      	bxeq	lr
 800580e:	b530      	push	{r4, r5, lr}
 8005810:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005814:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005818:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800581c:	bf48      	it	mi
 800581e:	4240      	negmi	r0, r0
 8005820:	f04f 0100 	mov.w	r1, #0
 8005824:	e73e      	b.n	80056a4 <__adddf3+0x138>
 8005826:	bf00      	nop

08005828 <__aeabi_f2d>:
 8005828:	0042      	lsls	r2, r0, #1
 800582a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800582e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005832:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005836:	bf1f      	itttt	ne
 8005838:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800583c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005840:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005844:	4770      	bxne	lr
 8005846:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800584a:	bf08      	it	eq
 800584c:	4770      	bxeq	lr
 800584e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005852:	bf04      	itt	eq
 8005854:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005858:	4770      	bxeq	lr
 800585a:	b530      	push	{r4, r5, lr}
 800585c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005868:	e71c      	b.n	80056a4 <__adddf3+0x138>
 800586a:	bf00      	nop

0800586c <__aeabi_ul2d>:
 800586c:	ea50 0201 	orrs.w	r2, r0, r1
 8005870:	bf08      	it	eq
 8005872:	4770      	bxeq	lr
 8005874:	b530      	push	{r4, r5, lr}
 8005876:	f04f 0500 	mov.w	r5, #0
 800587a:	e00a      	b.n	8005892 <__aeabi_l2d+0x16>

0800587c <__aeabi_l2d>:
 800587c:	ea50 0201 	orrs.w	r2, r0, r1
 8005880:	bf08      	it	eq
 8005882:	4770      	bxeq	lr
 8005884:	b530      	push	{r4, r5, lr}
 8005886:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800588a:	d502      	bpl.n	8005892 <__aeabi_l2d+0x16>
 800588c:	4240      	negs	r0, r0
 800588e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005892:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005896:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800589a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800589e:	f43f aed8 	beq.w	8005652 <__adddf3+0xe6>
 80058a2:	f04f 0203 	mov.w	r2, #3
 80058a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80058aa:	bf18      	it	ne
 80058ac:	3203      	addne	r2, #3
 80058ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80058b2:	bf18      	it	ne
 80058b4:	3203      	addne	r2, #3
 80058b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80058ba:	f1c2 0320 	rsb	r3, r2, #32
 80058be:	fa00 fc03 	lsl.w	ip, r0, r3
 80058c2:	fa20 f002 	lsr.w	r0, r0, r2
 80058c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80058ca:	ea40 000e 	orr.w	r0, r0, lr
 80058ce:	fa21 f102 	lsr.w	r1, r1, r2
 80058d2:	4414      	add	r4, r2
 80058d4:	e6bd      	b.n	8005652 <__adddf3+0xe6>
 80058d6:	bf00      	nop

080058d8 <__aeabi_dmul>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80058de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80058e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80058e6:	bf1d      	ittte	ne
 80058e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80058ec:	ea94 0f0c 	teqne	r4, ip
 80058f0:	ea95 0f0c 	teqne	r5, ip
 80058f4:	f000 f8de 	bleq	8005ab4 <__aeabi_dmul+0x1dc>
 80058f8:	442c      	add	r4, r5
 80058fa:	ea81 0603 	eor.w	r6, r1, r3
 80058fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005902:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005906:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800590a:	bf18      	it	ne
 800590c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005918:	d038      	beq.n	800598c <__aeabi_dmul+0xb4>
 800591a:	fba0 ce02 	umull	ip, lr, r0, r2
 800591e:	f04f 0500 	mov.w	r5, #0
 8005922:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005926:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800592a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800592e:	f04f 0600 	mov.w	r6, #0
 8005932:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005936:	f09c 0f00 	teq	ip, #0
 800593a:	bf18      	it	ne
 800593c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005940:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005944:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005948:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800594c:	d204      	bcs.n	8005958 <__aeabi_dmul+0x80>
 800594e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005952:	416d      	adcs	r5, r5
 8005954:	eb46 0606 	adc.w	r6, r6, r6
 8005958:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800595c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005960:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005964:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005968:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800596c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005970:	bf88      	it	hi
 8005972:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005976:	d81e      	bhi.n	80059b6 <__aeabi_dmul+0xde>
 8005978:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800597c:	bf08      	it	eq
 800597e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005982:	f150 0000 	adcs.w	r0, r0, #0
 8005986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005990:	ea46 0101 	orr.w	r1, r6, r1
 8005994:	ea40 0002 	orr.w	r0, r0, r2
 8005998:	ea81 0103 	eor.w	r1, r1, r3
 800599c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80059a0:	bfc2      	ittt	gt
 80059a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80059a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80059aa:	bd70      	popgt	{r4, r5, r6, pc}
 80059ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80059b0:	f04f 0e00 	mov.w	lr, #0
 80059b4:	3c01      	subs	r4, #1
 80059b6:	f300 80ab 	bgt.w	8005b10 <__aeabi_dmul+0x238>
 80059ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80059be:	bfde      	ittt	le
 80059c0:	2000      	movle	r0, #0
 80059c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80059c6:	bd70      	pople	{r4, r5, r6, pc}
 80059c8:	f1c4 0400 	rsb	r4, r4, #0
 80059cc:	3c20      	subs	r4, #32
 80059ce:	da35      	bge.n	8005a3c <__aeabi_dmul+0x164>
 80059d0:	340c      	adds	r4, #12
 80059d2:	dc1b      	bgt.n	8005a0c <__aeabi_dmul+0x134>
 80059d4:	f104 0414 	add.w	r4, r4, #20
 80059d8:	f1c4 0520 	rsb	r5, r4, #32
 80059dc:	fa00 f305 	lsl.w	r3, r0, r5
 80059e0:	fa20 f004 	lsr.w	r0, r0, r4
 80059e4:	fa01 f205 	lsl.w	r2, r1, r5
 80059e8:	ea40 0002 	orr.w	r0, r0, r2
 80059ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80059f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80059f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80059f8:	fa21 f604 	lsr.w	r6, r1, r4
 80059fc:	eb42 0106 	adc.w	r1, r2, r6
 8005a00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a04:	bf08      	it	eq
 8005a06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f1c4 040c 	rsb	r4, r4, #12
 8005a10:	f1c4 0520 	rsb	r5, r4, #32
 8005a14:	fa00 f304 	lsl.w	r3, r0, r4
 8005a18:	fa20 f005 	lsr.w	r0, r0, r5
 8005a1c:	fa01 f204 	lsl.w	r2, r1, r4
 8005a20:	ea40 0002 	orr.w	r0, r0, r2
 8005a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005a28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005a2c:	f141 0100 	adc.w	r1, r1, #0
 8005a30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a34:	bf08      	it	eq
 8005a36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	f1c4 0520 	rsb	r5, r4, #32
 8005a40:	fa00 f205 	lsl.w	r2, r0, r5
 8005a44:	ea4e 0e02 	orr.w	lr, lr, r2
 8005a48:	fa20 f304 	lsr.w	r3, r0, r4
 8005a4c:	fa01 f205 	lsl.w	r2, r1, r5
 8005a50:	ea43 0302 	orr.w	r3, r3, r2
 8005a54:	fa21 f004 	lsr.w	r0, r1, r4
 8005a58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005a5c:	fa21 f204 	lsr.w	r2, r1, r4
 8005a60:	ea20 0002 	bic.w	r0, r0, r2
 8005a64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a6c:	bf08      	it	eq
 8005a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	f094 0f00 	teq	r4, #0
 8005a78:	d10f      	bne.n	8005a9a <__aeabi_dmul+0x1c2>
 8005a7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005a7e:	0040      	lsls	r0, r0, #1
 8005a80:	eb41 0101 	adc.w	r1, r1, r1
 8005a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005a88:	bf08      	it	eq
 8005a8a:	3c01      	subeq	r4, #1
 8005a8c:	d0f7      	beq.n	8005a7e <__aeabi_dmul+0x1a6>
 8005a8e:	ea41 0106 	orr.w	r1, r1, r6
 8005a92:	f095 0f00 	teq	r5, #0
 8005a96:	bf18      	it	ne
 8005a98:	4770      	bxne	lr
 8005a9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005a9e:	0052      	lsls	r2, r2, #1
 8005aa0:	eb43 0303 	adc.w	r3, r3, r3
 8005aa4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005aa8:	bf08      	it	eq
 8005aaa:	3d01      	subeq	r5, #1
 8005aac:	d0f7      	beq.n	8005a9e <__aeabi_dmul+0x1c6>
 8005aae:	ea43 0306 	orr.w	r3, r3, r6
 8005ab2:	4770      	bx	lr
 8005ab4:	ea94 0f0c 	teq	r4, ip
 8005ab8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005abc:	bf18      	it	ne
 8005abe:	ea95 0f0c 	teqne	r5, ip
 8005ac2:	d00c      	beq.n	8005ade <__aeabi_dmul+0x206>
 8005ac4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005ac8:	bf18      	it	ne
 8005aca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005ace:	d1d1      	bne.n	8005a74 <__aeabi_dmul+0x19c>
 8005ad0:	ea81 0103 	eor.w	r1, r1, r3
 8005ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005ad8:	f04f 0000 	mov.w	r0, #0
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005ae2:	bf06      	itte	eq
 8005ae4:	4610      	moveq	r0, r2
 8005ae6:	4619      	moveq	r1, r3
 8005ae8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005aec:	d019      	beq.n	8005b22 <__aeabi_dmul+0x24a>
 8005aee:	ea94 0f0c 	teq	r4, ip
 8005af2:	d102      	bne.n	8005afa <__aeabi_dmul+0x222>
 8005af4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005af8:	d113      	bne.n	8005b22 <__aeabi_dmul+0x24a>
 8005afa:	ea95 0f0c 	teq	r5, ip
 8005afe:	d105      	bne.n	8005b0c <__aeabi_dmul+0x234>
 8005b00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005b04:	bf1c      	itt	ne
 8005b06:	4610      	movne	r0, r2
 8005b08:	4619      	movne	r1, r3
 8005b0a:	d10a      	bne.n	8005b22 <__aeabi_dmul+0x24a>
 8005b0c:	ea81 0103 	eor.w	r1, r1, r3
 8005b10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005b14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005b18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b1c:	f04f 0000 	mov.w	r0, #0
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
 8005b22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005b26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}

08005b2c <__aeabi_ddiv>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005b32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005b36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005b3a:	bf1d      	ittte	ne
 8005b3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005b40:	ea94 0f0c 	teqne	r4, ip
 8005b44:	ea95 0f0c 	teqne	r5, ip
 8005b48:	f000 f8a7 	bleq	8005c9a <__aeabi_ddiv+0x16e>
 8005b4c:	eba4 0405 	sub.w	r4, r4, r5
 8005b50:	ea81 0e03 	eor.w	lr, r1, r3
 8005b54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005b58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005b5c:	f000 8088 	beq.w	8005c70 <__aeabi_ddiv+0x144>
 8005b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005b64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005b68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005b6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005b70:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005b74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005b78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005b7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005b80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005b84:	429d      	cmp	r5, r3
 8005b86:	bf08      	it	eq
 8005b88:	4296      	cmpeq	r6, r2
 8005b8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005b8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005b92:	d202      	bcs.n	8005b9a <__aeabi_ddiv+0x6e>
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b9a:	1ab6      	subs	r6, r6, r2
 8005b9c:	eb65 0503 	sbc.w	r5, r5, r3
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ba6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005baa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005bae:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bb6:	bf22      	ittt	cs
 8005bb8:	1ab6      	subcs	r6, r6, r2
 8005bba:	4675      	movcs	r5, lr
 8005bbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bce:	bf22      	ittt	cs
 8005bd0:	1ab6      	subcs	r6, r6, r2
 8005bd2:	4675      	movcs	r5, lr
 8005bd4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bde:	ebb6 0e02 	subs.w	lr, r6, r2
 8005be2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005be6:	bf22      	ittt	cs
 8005be8:	1ab6      	subcs	r6, r6, r2
 8005bea:	4675      	movcs	r5, lr
 8005bec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bf6:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bfe:	bf22      	ittt	cs
 8005c00:	1ab6      	subcs	r6, r6, r2
 8005c02:	4675      	movcs	r5, lr
 8005c04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005c08:	ea55 0e06 	orrs.w	lr, r5, r6
 8005c0c:	d018      	beq.n	8005c40 <__aeabi_ddiv+0x114>
 8005c0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005c12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005c16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005c1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005c1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005c22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005c26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005c2a:	d1c0      	bne.n	8005bae <__aeabi_ddiv+0x82>
 8005c2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005c30:	d10b      	bne.n	8005c4a <__aeabi_ddiv+0x11e>
 8005c32:	ea41 0100 	orr.w	r1, r1, r0
 8005c36:	f04f 0000 	mov.w	r0, #0
 8005c3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005c3e:	e7b6      	b.n	8005bae <__aeabi_ddiv+0x82>
 8005c40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005c44:	bf04      	itt	eq
 8005c46:	4301      	orreq	r1, r0
 8005c48:	2000      	moveq	r0, #0
 8005c4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005c4e:	bf88      	it	hi
 8005c50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005c54:	f63f aeaf 	bhi.w	80059b6 <__aeabi_dmul+0xde>
 8005c58:	ebb5 0c03 	subs.w	ip, r5, r3
 8005c5c:	bf04      	itt	eq
 8005c5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005c62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005c66:	f150 0000 	adcs.w	r0, r0, #0
 8005c6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005c74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005c78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005c7c:	bfc2      	ittt	gt
 8005c7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005c82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005c86:	bd70      	popgt	{r4, r5, r6, pc}
 8005c88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005c8c:	f04f 0e00 	mov.w	lr, #0
 8005c90:	3c01      	subs	r4, #1
 8005c92:	e690      	b.n	80059b6 <__aeabi_dmul+0xde>
 8005c94:	ea45 0e06 	orr.w	lr, r5, r6
 8005c98:	e68d      	b.n	80059b6 <__aeabi_dmul+0xde>
 8005c9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005c9e:	ea94 0f0c 	teq	r4, ip
 8005ca2:	bf08      	it	eq
 8005ca4:	ea95 0f0c 	teqeq	r5, ip
 8005ca8:	f43f af3b 	beq.w	8005b22 <__aeabi_dmul+0x24a>
 8005cac:	ea94 0f0c 	teq	r4, ip
 8005cb0:	d10a      	bne.n	8005cc8 <__aeabi_ddiv+0x19c>
 8005cb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005cb6:	f47f af34 	bne.w	8005b22 <__aeabi_dmul+0x24a>
 8005cba:	ea95 0f0c 	teq	r5, ip
 8005cbe:	f47f af25 	bne.w	8005b0c <__aeabi_dmul+0x234>
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	e72c      	b.n	8005b22 <__aeabi_dmul+0x24a>
 8005cc8:	ea95 0f0c 	teq	r5, ip
 8005ccc:	d106      	bne.n	8005cdc <__aeabi_ddiv+0x1b0>
 8005cce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005cd2:	f43f aefd 	beq.w	8005ad0 <__aeabi_dmul+0x1f8>
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	e722      	b.n	8005b22 <__aeabi_dmul+0x24a>
 8005cdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005ce0:	bf18      	it	ne
 8005ce2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005ce6:	f47f aec5 	bne.w	8005a74 <__aeabi_dmul+0x19c>
 8005cea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005cee:	f47f af0d 	bne.w	8005b0c <__aeabi_dmul+0x234>
 8005cf2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005cf6:	f47f aeeb 	bne.w	8005ad0 <__aeabi_dmul+0x1f8>
 8005cfa:	e712      	b.n	8005b22 <__aeabi_dmul+0x24a>

08005cfc <__gedf2>:
 8005cfc:	f04f 3cff 	mov.w	ip, #4294967295
 8005d00:	e006      	b.n	8005d10 <__cmpdf2+0x4>
 8005d02:	bf00      	nop

08005d04 <__ledf2>:
 8005d04:	f04f 0c01 	mov.w	ip, #1
 8005d08:	e002      	b.n	8005d10 <__cmpdf2+0x4>
 8005d0a:	bf00      	nop

08005d0c <__cmpdf2>:
 8005d0c:	f04f 0c01 	mov.w	ip, #1
 8005d10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005d14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005d1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005d20:	bf18      	it	ne
 8005d22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005d26:	d01b      	beq.n	8005d60 <__cmpdf2+0x54>
 8005d28:	b001      	add	sp, #4
 8005d2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005d2e:	bf0c      	ite	eq
 8005d30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005d34:	ea91 0f03 	teqne	r1, r3
 8005d38:	bf02      	ittt	eq
 8005d3a:	ea90 0f02 	teqeq	r0, r2
 8005d3e:	2000      	moveq	r0, #0
 8005d40:	4770      	bxeq	lr
 8005d42:	f110 0f00 	cmn.w	r0, #0
 8005d46:	ea91 0f03 	teq	r1, r3
 8005d4a:	bf58      	it	pl
 8005d4c:	4299      	cmppl	r1, r3
 8005d4e:	bf08      	it	eq
 8005d50:	4290      	cmpeq	r0, r2
 8005d52:	bf2c      	ite	cs
 8005d54:	17d8      	asrcs	r0, r3, #31
 8005d56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005d5a:	f040 0001 	orr.w	r0, r0, #1
 8005d5e:	4770      	bx	lr
 8005d60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005d64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005d68:	d102      	bne.n	8005d70 <__cmpdf2+0x64>
 8005d6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005d6e:	d107      	bne.n	8005d80 <__cmpdf2+0x74>
 8005d70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005d74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005d78:	d1d6      	bne.n	8005d28 <__cmpdf2+0x1c>
 8005d7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005d7e:	d0d3      	beq.n	8005d28 <__cmpdf2+0x1c>
 8005d80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop

08005d88 <__aeabi_cdrcmple>:
 8005d88:	4684      	mov	ip, r0
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4662      	mov	r2, ip
 8005d8e:	468c      	mov	ip, r1
 8005d90:	4619      	mov	r1, r3
 8005d92:	4663      	mov	r3, ip
 8005d94:	e000      	b.n	8005d98 <__aeabi_cdcmpeq>
 8005d96:	bf00      	nop

08005d98 <__aeabi_cdcmpeq>:
 8005d98:	b501      	push	{r0, lr}
 8005d9a:	f7ff ffb7 	bl	8005d0c <__cmpdf2>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	bf48      	it	mi
 8005da2:	f110 0f00 	cmnmi.w	r0, #0
 8005da6:	bd01      	pop	{r0, pc}

08005da8 <__aeabi_dcmpeq>:
 8005da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005dac:	f7ff fff4 	bl	8005d98 <__aeabi_cdcmpeq>
 8005db0:	bf0c      	ite	eq
 8005db2:	2001      	moveq	r0, #1
 8005db4:	2000      	movne	r0, #0
 8005db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005dba:	bf00      	nop

08005dbc <__aeabi_dcmplt>:
 8005dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005dc0:	f7ff ffea 	bl	8005d98 <__aeabi_cdcmpeq>
 8005dc4:	bf34      	ite	cc
 8005dc6:	2001      	movcc	r0, #1
 8005dc8:	2000      	movcs	r0, #0
 8005dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8005dce:	bf00      	nop

08005dd0 <__aeabi_dcmple>:
 8005dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005dd4:	f7ff ffe0 	bl	8005d98 <__aeabi_cdcmpeq>
 8005dd8:	bf94      	ite	ls
 8005dda:	2001      	movls	r0, #1
 8005ddc:	2000      	movhi	r0, #0
 8005dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8005de2:	bf00      	nop

08005de4 <__aeabi_dcmpge>:
 8005de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005de8:	f7ff ffce 	bl	8005d88 <__aeabi_cdrcmple>
 8005dec:	bf94      	ite	ls
 8005dee:	2001      	movls	r0, #1
 8005df0:	2000      	movhi	r0, #0
 8005df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005df6:	bf00      	nop

08005df8 <__aeabi_dcmpgt>:
 8005df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005dfc:	f7ff ffc4 	bl	8005d88 <__aeabi_cdrcmple>
 8005e00:	bf34      	ite	cc
 8005e02:	2001      	movcc	r0, #1
 8005e04:	2000      	movcs	r0, #0
 8005e06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005e0a:	bf00      	nop

08005e0c <__aeabi_dcmpun>:
 8005e0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005e10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005e14:	d102      	bne.n	8005e1c <__aeabi_dcmpun+0x10>
 8005e16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005e1a:	d10a      	bne.n	8005e32 <__aeabi_dcmpun+0x26>
 8005e1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005e20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005e24:	d102      	bne.n	8005e2c <__aeabi_dcmpun+0x20>
 8005e26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005e2a:	d102      	bne.n	8005e32 <__aeabi_dcmpun+0x26>
 8005e2c:	f04f 0000 	mov.w	r0, #0
 8005e30:	4770      	bx	lr
 8005e32:	f04f 0001 	mov.w	r0, #1
 8005e36:	4770      	bx	lr

08005e38 <__aeabi_d2iz>:
 8005e38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005e3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005e40:	d215      	bcs.n	8005e6e <__aeabi_d2iz+0x36>
 8005e42:	d511      	bpl.n	8005e68 <__aeabi_d2iz+0x30>
 8005e44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005e48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005e4c:	d912      	bls.n	8005e74 <__aeabi_d2iz+0x3c>
 8005e4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005e5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005e5e:	fa23 f002 	lsr.w	r0, r3, r2
 8005e62:	bf18      	it	ne
 8005e64:	4240      	negne	r0, r0
 8005e66:	4770      	bx	lr
 8005e68:	f04f 0000 	mov.w	r0, #0
 8005e6c:	4770      	bx	lr
 8005e6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005e72:	d105      	bne.n	8005e80 <__aeabi_d2iz+0x48>
 8005e74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005e78:	bf08      	it	eq
 8005e7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005e7e:	4770      	bx	lr
 8005e80:	f04f 0000 	mov.w	r0, #0
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop

08005e88 <__aeabi_d2uiz>:
 8005e88:	004a      	lsls	r2, r1, #1
 8005e8a:	d211      	bcs.n	8005eb0 <__aeabi_d2uiz+0x28>
 8005e8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005e90:	d211      	bcs.n	8005eb6 <__aeabi_d2uiz+0x2e>
 8005e92:	d50d      	bpl.n	8005eb0 <__aeabi_d2uiz+0x28>
 8005e94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005e98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005e9c:	d40e      	bmi.n	8005ebc <__aeabi_d2uiz+0x34>
 8005e9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005eaa:	fa23 f002 	lsr.w	r0, r3, r2
 8005eae:	4770      	bx	lr
 8005eb0:	f04f 0000 	mov.w	r0, #0
 8005eb4:	4770      	bx	lr
 8005eb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005eba:	d102      	bne.n	8005ec2 <__aeabi_d2uiz+0x3a>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	4770      	bx	lr
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	4770      	bx	lr

08005ec8 <__aeabi_d2f>:
 8005ec8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005ecc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005ed0:	bf24      	itt	cs
 8005ed2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005ed6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005eda:	d90d      	bls.n	8005ef8 <__aeabi_d2f+0x30>
 8005edc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005ee0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005ee4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005ee8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005eec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005ef0:	bf08      	it	eq
 8005ef2:	f020 0001 	biceq.w	r0, r0, #1
 8005ef6:	4770      	bx	lr
 8005ef8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005efc:	d121      	bne.n	8005f42 <__aeabi_d2f+0x7a>
 8005efe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005f02:	bfbc      	itt	lt
 8005f04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005f08:	4770      	bxlt	lr
 8005f0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005f0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005f12:	f1c2 0218 	rsb	r2, r2, #24
 8005f16:	f1c2 0c20 	rsb	ip, r2, #32
 8005f1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8005f1e:	fa20 f002 	lsr.w	r0, r0, r2
 8005f22:	bf18      	it	ne
 8005f24:	f040 0001 	orrne.w	r0, r0, #1
 8005f28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005f2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005f30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005f34:	ea40 000c 	orr.w	r0, r0, ip
 8005f38:	fa23 f302 	lsr.w	r3, r3, r2
 8005f3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f40:	e7cc      	b.n	8005edc <__aeabi_d2f+0x14>
 8005f42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005f46:	d107      	bne.n	8005f58 <__aeabi_d2f+0x90>
 8005f48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005f4c:	bf1e      	ittt	ne
 8005f4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005f52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005f56:	4770      	bxne	lr
 8005f58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005f5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005f60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <__aeabi_uldivmod>:
 8005f68:	b953      	cbnz	r3, 8005f80 <__aeabi_uldivmod+0x18>
 8005f6a:	b94a      	cbnz	r2, 8005f80 <__aeabi_uldivmod+0x18>
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	bf08      	it	eq
 8005f70:	2800      	cmpeq	r0, #0
 8005f72:	bf1c      	itt	ne
 8005f74:	f04f 31ff 	movne.w	r1, #4294967295
 8005f78:	f04f 30ff 	movne.w	r0, #4294967295
 8005f7c:	f000 b9a4 	b.w	80062c8 <__aeabi_idiv0>
 8005f80:	f1ad 0c08 	sub.w	ip, sp, #8
 8005f84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005f88:	f000 f83c 	bl	8006004 <__udivmoddi4>
 8005f8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f94:	b004      	add	sp, #16
 8005f96:	4770      	bx	lr

08005f98 <__aeabi_d2lz>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	f7ff ff0b 	bl	8005dbc <__aeabi_dcmplt>
 8005fa6:	b928      	cbnz	r0, 8005fb4 <__aeabi_d2lz+0x1c>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fb0:	f000 b80a 	b.w	8005fc8 <__aeabi_d2ulz>
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8005fba:	f000 f805 	bl	8005fc8 <__aeabi_d2ulz>
 8005fbe:	4240      	negs	r0, r0
 8005fc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop

08005fc8 <__aeabi_d2ulz>:
 8005fc8:	b5d0      	push	{r4, r6, r7, lr}
 8005fca:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <__aeabi_d2ulz+0x34>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4606      	mov	r6, r0
 8005fd0:	460f      	mov	r7, r1
 8005fd2:	f7ff fc81 	bl	80058d8 <__aeabi_dmul>
 8005fd6:	f7ff ff57 	bl	8005e88 <__aeabi_d2uiz>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f7ff fc02 	bl	80057e4 <__aeabi_ui2d>
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <__aeabi_d2ulz+0x38>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f7ff fc78 	bl	80058d8 <__aeabi_dmul>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4630      	mov	r0, r6
 8005fee:	4639      	mov	r1, r7
 8005ff0:	f7ff faba 	bl	8005568 <__aeabi_dsub>
 8005ff4:	f7ff ff48 	bl	8005e88 <__aeabi_d2uiz>
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	bdd0      	pop	{r4, r6, r7, pc}
 8005ffc:	3df00000 	.word	0x3df00000
 8006000:	41f00000 	.word	0x41f00000

08006004 <__udivmoddi4>:
 8006004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	9d08      	ldr	r5, [sp, #32]
 800600a:	4604      	mov	r4, r0
 800600c:	468c      	mov	ip, r1
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 8083 	bne.w	800611a <__udivmoddi4+0x116>
 8006014:	428a      	cmp	r2, r1
 8006016:	4617      	mov	r7, r2
 8006018:	d947      	bls.n	80060aa <__udivmoddi4+0xa6>
 800601a:	fab2 f282 	clz	r2, r2
 800601e:	b142      	cbz	r2, 8006032 <__udivmoddi4+0x2e>
 8006020:	f1c2 0020 	rsb	r0, r2, #32
 8006024:	fa24 f000 	lsr.w	r0, r4, r0
 8006028:	4091      	lsls	r1, r2
 800602a:	4097      	lsls	r7, r2
 800602c:	ea40 0c01 	orr.w	ip, r0, r1
 8006030:	4094      	lsls	r4, r2
 8006032:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8006036:	0c23      	lsrs	r3, r4, #16
 8006038:	fbbc f6f8 	udiv	r6, ip, r8
 800603c:	fa1f fe87 	uxth.w	lr, r7
 8006040:	fb08 c116 	mls	r1, r8, r6, ip
 8006044:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006048:	fb06 f10e 	mul.w	r1, r6, lr
 800604c:	4299      	cmp	r1, r3
 800604e:	d909      	bls.n	8006064 <__udivmoddi4+0x60>
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	f106 30ff 	add.w	r0, r6, #4294967295
 8006056:	f080 8119 	bcs.w	800628c <__udivmoddi4+0x288>
 800605a:	4299      	cmp	r1, r3
 800605c:	f240 8116 	bls.w	800628c <__udivmoddi4+0x288>
 8006060:	3e02      	subs	r6, #2
 8006062:	443b      	add	r3, r7
 8006064:	1a5b      	subs	r3, r3, r1
 8006066:	b2a4      	uxth	r4, r4
 8006068:	fbb3 f0f8 	udiv	r0, r3, r8
 800606c:	fb08 3310 	mls	r3, r8, r0, r3
 8006070:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006074:	fb00 fe0e 	mul.w	lr, r0, lr
 8006078:	45a6      	cmp	lr, r4
 800607a:	d909      	bls.n	8006090 <__udivmoddi4+0x8c>
 800607c:	193c      	adds	r4, r7, r4
 800607e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006082:	f080 8105 	bcs.w	8006290 <__udivmoddi4+0x28c>
 8006086:	45a6      	cmp	lr, r4
 8006088:	f240 8102 	bls.w	8006290 <__udivmoddi4+0x28c>
 800608c:	3802      	subs	r0, #2
 800608e:	443c      	add	r4, r7
 8006090:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006094:	eba4 040e 	sub.w	r4, r4, lr
 8006098:	2600      	movs	r6, #0
 800609a:	b11d      	cbz	r5, 80060a4 <__udivmoddi4+0xa0>
 800609c:	40d4      	lsrs	r4, r2
 800609e:	2300      	movs	r3, #0
 80060a0:	e9c5 4300 	strd	r4, r3, [r5]
 80060a4:	4631      	mov	r1, r6
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	b902      	cbnz	r2, 80060ae <__udivmoddi4+0xaa>
 80060ac:	deff      	udf	#255	; 0xff
 80060ae:	fab2 f282 	clz	r2, r2
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d150      	bne.n	8006158 <__udivmoddi4+0x154>
 80060b6:	1bcb      	subs	r3, r1, r7
 80060b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80060bc:	fa1f f887 	uxth.w	r8, r7
 80060c0:	2601      	movs	r6, #1
 80060c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80060c6:	0c21      	lsrs	r1, r4, #16
 80060c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80060cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80060d0:	fb08 f30c 	mul.w	r3, r8, ip
 80060d4:	428b      	cmp	r3, r1
 80060d6:	d907      	bls.n	80060e8 <__udivmoddi4+0xe4>
 80060d8:	1879      	adds	r1, r7, r1
 80060da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80060de:	d202      	bcs.n	80060e6 <__udivmoddi4+0xe2>
 80060e0:	428b      	cmp	r3, r1
 80060e2:	f200 80e9 	bhi.w	80062b8 <__udivmoddi4+0x2b4>
 80060e6:	4684      	mov	ip, r0
 80060e8:	1ac9      	subs	r1, r1, r3
 80060ea:	b2a3      	uxth	r3, r4
 80060ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80060f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80060f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80060f8:	fb08 f800 	mul.w	r8, r8, r0
 80060fc:	45a0      	cmp	r8, r4
 80060fe:	d907      	bls.n	8006110 <__udivmoddi4+0x10c>
 8006100:	193c      	adds	r4, r7, r4
 8006102:	f100 33ff 	add.w	r3, r0, #4294967295
 8006106:	d202      	bcs.n	800610e <__udivmoddi4+0x10a>
 8006108:	45a0      	cmp	r8, r4
 800610a:	f200 80d9 	bhi.w	80062c0 <__udivmoddi4+0x2bc>
 800610e:	4618      	mov	r0, r3
 8006110:	eba4 0408 	sub.w	r4, r4, r8
 8006114:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8006118:	e7bf      	b.n	800609a <__udivmoddi4+0x96>
 800611a:	428b      	cmp	r3, r1
 800611c:	d909      	bls.n	8006132 <__udivmoddi4+0x12e>
 800611e:	2d00      	cmp	r5, #0
 8006120:	f000 80b1 	beq.w	8006286 <__udivmoddi4+0x282>
 8006124:	2600      	movs	r6, #0
 8006126:	e9c5 0100 	strd	r0, r1, [r5]
 800612a:	4630      	mov	r0, r6
 800612c:	4631      	mov	r1, r6
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	fab3 f683 	clz	r6, r3
 8006136:	2e00      	cmp	r6, #0
 8006138:	d14a      	bne.n	80061d0 <__udivmoddi4+0x1cc>
 800613a:	428b      	cmp	r3, r1
 800613c:	d302      	bcc.n	8006144 <__udivmoddi4+0x140>
 800613e:	4282      	cmp	r2, r0
 8006140:	f200 80b8 	bhi.w	80062b4 <__udivmoddi4+0x2b0>
 8006144:	1a84      	subs	r4, r0, r2
 8006146:	eb61 0103 	sbc.w	r1, r1, r3
 800614a:	2001      	movs	r0, #1
 800614c:	468c      	mov	ip, r1
 800614e:	2d00      	cmp	r5, #0
 8006150:	d0a8      	beq.n	80060a4 <__udivmoddi4+0xa0>
 8006152:	e9c5 4c00 	strd	r4, ip, [r5]
 8006156:	e7a5      	b.n	80060a4 <__udivmoddi4+0xa0>
 8006158:	f1c2 0320 	rsb	r3, r2, #32
 800615c:	fa20 f603 	lsr.w	r6, r0, r3
 8006160:	4097      	lsls	r7, r2
 8006162:	fa01 f002 	lsl.w	r0, r1, r2
 8006166:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800616a:	40d9      	lsrs	r1, r3
 800616c:	4330      	orrs	r0, r6
 800616e:	0c03      	lsrs	r3, r0, #16
 8006170:	fbb1 f6fe 	udiv	r6, r1, lr
 8006174:	fa1f f887 	uxth.w	r8, r7
 8006178:	fb0e 1116 	mls	r1, lr, r6, r1
 800617c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006180:	fb06 f108 	mul.w	r1, r6, r8
 8006184:	4299      	cmp	r1, r3
 8006186:	fa04 f402 	lsl.w	r4, r4, r2
 800618a:	d909      	bls.n	80061a0 <__udivmoddi4+0x19c>
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	f106 3cff 	add.w	ip, r6, #4294967295
 8006192:	f080 808d 	bcs.w	80062b0 <__udivmoddi4+0x2ac>
 8006196:	4299      	cmp	r1, r3
 8006198:	f240 808a 	bls.w	80062b0 <__udivmoddi4+0x2ac>
 800619c:	3e02      	subs	r6, #2
 800619e:	443b      	add	r3, r7
 80061a0:	1a5b      	subs	r3, r3, r1
 80061a2:	b281      	uxth	r1, r0
 80061a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80061a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80061ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80061b0:	fb00 f308 	mul.w	r3, r0, r8
 80061b4:	428b      	cmp	r3, r1
 80061b6:	d907      	bls.n	80061c8 <__udivmoddi4+0x1c4>
 80061b8:	1879      	adds	r1, r7, r1
 80061ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80061be:	d273      	bcs.n	80062a8 <__udivmoddi4+0x2a4>
 80061c0:	428b      	cmp	r3, r1
 80061c2:	d971      	bls.n	80062a8 <__udivmoddi4+0x2a4>
 80061c4:	3802      	subs	r0, #2
 80061c6:	4439      	add	r1, r7
 80061c8:	1acb      	subs	r3, r1, r3
 80061ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80061ce:	e778      	b.n	80060c2 <__udivmoddi4+0xbe>
 80061d0:	f1c6 0c20 	rsb	ip, r6, #32
 80061d4:	fa03 f406 	lsl.w	r4, r3, r6
 80061d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80061dc:	431c      	orrs	r4, r3
 80061de:	fa20 f70c 	lsr.w	r7, r0, ip
 80061e2:	fa01 f306 	lsl.w	r3, r1, r6
 80061e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80061ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80061ee:	431f      	orrs	r7, r3
 80061f0:	0c3b      	lsrs	r3, r7, #16
 80061f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80061f6:	fa1f f884 	uxth.w	r8, r4
 80061fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80061fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8006202:	fb09 fa08 	mul.w	sl, r9, r8
 8006206:	458a      	cmp	sl, r1
 8006208:	fa02 f206 	lsl.w	r2, r2, r6
 800620c:	fa00 f306 	lsl.w	r3, r0, r6
 8006210:	d908      	bls.n	8006224 <__udivmoddi4+0x220>
 8006212:	1861      	adds	r1, r4, r1
 8006214:	f109 30ff 	add.w	r0, r9, #4294967295
 8006218:	d248      	bcs.n	80062ac <__udivmoddi4+0x2a8>
 800621a:	458a      	cmp	sl, r1
 800621c:	d946      	bls.n	80062ac <__udivmoddi4+0x2a8>
 800621e:	f1a9 0902 	sub.w	r9, r9, #2
 8006222:	4421      	add	r1, r4
 8006224:	eba1 010a 	sub.w	r1, r1, sl
 8006228:	b2bf      	uxth	r7, r7
 800622a:	fbb1 f0fe 	udiv	r0, r1, lr
 800622e:	fb0e 1110 	mls	r1, lr, r0, r1
 8006232:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8006236:	fb00 f808 	mul.w	r8, r0, r8
 800623a:	45b8      	cmp	r8, r7
 800623c:	d907      	bls.n	800624e <__udivmoddi4+0x24a>
 800623e:	19e7      	adds	r7, r4, r7
 8006240:	f100 31ff 	add.w	r1, r0, #4294967295
 8006244:	d22e      	bcs.n	80062a4 <__udivmoddi4+0x2a0>
 8006246:	45b8      	cmp	r8, r7
 8006248:	d92c      	bls.n	80062a4 <__udivmoddi4+0x2a0>
 800624a:	3802      	subs	r0, #2
 800624c:	4427      	add	r7, r4
 800624e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8006252:	eba7 0708 	sub.w	r7, r7, r8
 8006256:	fba0 8902 	umull	r8, r9, r0, r2
 800625a:	454f      	cmp	r7, r9
 800625c:	46c6      	mov	lr, r8
 800625e:	4649      	mov	r1, r9
 8006260:	d31a      	bcc.n	8006298 <__udivmoddi4+0x294>
 8006262:	d017      	beq.n	8006294 <__udivmoddi4+0x290>
 8006264:	b15d      	cbz	r5, 800627e <__udivmoddi4+0x27a>
 8006266:	ebb3 020e 	subs.w	r2, r3, lr
 800626a:	eb67 0701 	sbc.w	r7, r7, r1
 800626e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8006272:	40f2      	lsrs	r2, r6
 8006274:	ea4c 0202 	orr.w	r2, ip, r2
 8006278:	40f7      	lsrs	r7, r6
 800627a:	e9c5 2700 	strd	r2, r7, [r5]
 800627e:	2600      	movs	r6, #0
 8006280:	4631      	mov	r1, r6
 8006282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006286:	462e      	mov	r6, r5
 8006288:	4628      	mov	r0, r5
 800628a:	e70b      	b.n	80060a4 <__udivmoddi4+0xa0>
 800628c:	4606      	mov	r6, r0
 800628e:	e6e9      	b.n	8006064 <__udivmoddi4+0x60>
 8006290:	4618      	mov	r0, r3
 8006292:	e6fd      	b.n	8006090 <__udivmoddi4+0x8c>
 8006294:	4543      	cmp	r3, r8
 8006296:	d2e5      	bcs.n	8006264 <__udivmoddi4+0x260>
 8006298:	ebb8 0e02 	subs.w	lr, r8, r2
 800629c:	eb69 0104 	sbc.w	r1, r9, r4
 80062a0:	3801      	subs	r0, #1
 80062a2:	e7df      	b.n	8006264 <__udivmoddi4+0x260>
 80062a4:	4608      	mov	r0, r1
 80062a6:	e7d2      	b.n	800624e <__udivmoddi4+0x24a>
 80062a8:	4660      	mov	r0, ip
 80062aa:	e78d      	b.n	80061c8 <__udivmoddi4+0x1c4>
 80062ac:	4681      	mov	r9, r0
 80062ae:	e7b9      	b.n	8006224 <__udivmoddi4+0x220>
 80062b0:	4666      	mov	r6, ip
 80062b2:	e775      	b.n	80061a0 <__udivmoddi4+0x19c>
 80062b4:	4630      	mov	r0, r6
 80062b6:	e74a      	b.n	800614e <__udivmoddi4+0x14a>
 80062b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80062bc:	4439      	add	r1, r7
 80062be:	e713      	b.n	80060e8 <__udivmoddi4+0xe4>
 80062c0:	3802      	subs	r0, #2
 80062c2:	443c      	add	r4, r7
 80062c4:	e724      	b.n	8006110 <__udivmoddi4+0x10c>
 80062c6:	bf00      	nop

080062c8 <__aeabi_idiv0>:
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop

080062cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <MX_CRC_Init+0x20>)
 80062d2:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <MX_CRC_Init+0x24>)
 80062d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80062d6:	4805      	ldr	r0, [pc, #20]	; (80062ec <MX_CRC_Init+0x20>)
 80062d8:	f003 ff56 	bl	800a188 <HAL_CRC_Init>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80062e2:	f001 f8d7 	bl	8007494 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	200011b8 	.word	0x200011b8
 80062f0:	40023000 	.word	0x40023000

080062f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <HAL_CRC_MspInit+0x3c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10d      	bne.n	8006322 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_CRC_MspInit+0x40>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <HAL_CRC_MspInit+0x40>)
 8006310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006314:	6313      	str	r3, [r2, #48]	; 0x30
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <HAL_CRC_MspInit+0x40>)
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40023000 	.word	0x40023000
 8006334:	40023800 	.word	0x40023800

08006338 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800633c:	4b15      	ldr	r3, [pc, #84]	; (8006394 <MX_DMA2D_Init+0x5c>)
 800633e:	4a16      	ldr	r2, [pc, #88]	; (8006398 <MX_DMA2D_Init+0x60>)
 8006340:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006342:	4b14      	ldr	r3, [pc, #80]	; (8006394 <MX_DMA2D_Init+0x5c>)
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8006348:	4b12      	ldr	r3, [pc, #72]	; (8006394 <MX_DMA2D_Init+0x5c>)
 800634a:	2200      	movs	r2, #0
 800634c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800634e:	4b11      	ldr	r3, [pc, #68]	; (8006394 <MX_DMA2D_Init+0x5c>)
 8006350:	2200      	movs	r2, #0
 8006352:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <MX_DMA2D_Init+0x5c>)
 8006356:	2200      	movs	r2, #0
 8006358:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800635a:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <MX_DMA2D_Init+0x5c>)
 800635c:	2200      	movs	r2, #0
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <MX_DMA2D_Init+0x5c>)
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <MX_DMA2D_Init+0x5c>)
 8006368:	2200      	movs	r2, #0
 800636a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800636c:	4809      	ldr	r0, [pc, #36]	; (8006394 <MX_DMA2D_Init+0x5c>)
 800636e:	f004 f8e5 	bl	800a53c <HAL_DMA2D_Init>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8006378:	f001 f88c 	bl	8007494 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800637c:	2101      	movs	r1, #1
 800637e:	4805      	ldr	r0, [pc, #20]	; (8006394 <MX_DMA2D_Init+0x5c>)
 8006380:	f004 fa3a 	bl	800a7f8 <HAL_DMA2D_ConfigLayer>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800638a:	f001 f883 	bl	8007494 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800638e:	bf00      	nop
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	200011c0 	.word	0x200011c0
 8006398:	4002b000 	.word	0x4002b000

0800639c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <HAL_DMA2D_MspInit+0x3c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10d      	bne.n	80063ca <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_DMA2D_MspInit+0x40>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <HAL_DMA2D_MspInit+0x40>)
 80063b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063bc:	6313      	str	r3, [r2, #48]	; 0x30
 80063be:	4b07      	ldr	r3, [pc, #28]	; (80063dc <HAL_DMA2D_MspInit+0x40>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	4002b000 	.word	0x4002b000
 80063dc:	40023800 	.word	0x40023800

080063e0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	609a      	str	r2, [r3, #8]
 80063f0:	60da      	str	r2, [r3, #12]
 80063f2:	611a      	str	r2, [r3, #16]
 80063f4:	615a      	str	r2, [r3, #20]
 80063f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80063f8:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <MX_FMC_Init+0x98>)
 80063fa:	4a20      	ldr	r2, [pc, #128]	; (800647c <MX_FMC_Init+0x9c>)
 80063fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80063fe:	4b1e      	ldr	r3, [pc, #120]	; (8006478 <MX_FMC_Init+0x98>)
 8006400:	2201      	movs	r2, #1
 8006402:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006404:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <MX_FMC_Init+0x98>)
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800640a:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <MX_FMC_Init+0x98>)
 800640c:	2204      	movs	r2, #4
 800640e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006410:	4b19      	ldr	r3, [pc, #100]	; (8006478 <MX_FMC_Init+0x98>)
 8006412:	2210      	movs	r2, #16
 8006414:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <MX_FMC_Init+0x98>)
 8006418:	2240      	movs	r2, #64	; 0x40
 800641a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800641c:	4b16      	ldr	r3, [pc, #88]	; (8006478 <MX_FMC_Init+0x98>)
 800641e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006422:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006424:	4b14      	ldr	r3, [pc, #80]	; (8006478 <MX_FMC_Init+0x98>)
 8006426:	2200      	movs	r2, #0
 8006428:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800642a:	4b13      	ldr	r3, [pc, #76]	; (8006478 <MX_FMC_Init+0x98>)
 800642c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006430:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <MX_FMC_Init+0x98>)
 8006434:	2200      	movs	r2, #0
 8006436:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <MX_FMC_Init+0x98>)
 800643a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800643e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006440:	2302      	movs	r3, #2
 8006442:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006444:	2307      	movs	r3, #7
 8006446:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8006448:	2304      	movs	r3, #4
 800644a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800644c:	2307      	movs	r3, #7
 800644e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006450:	2303      	movs	r3, #3
 8006452:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006454:	2302      	movs	r3, #2
 8006456:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8006458:	2302      	movs	r3, #2
 800645a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4805      	ldr	r0, [pc, #20]	; (8006478 <MX_FMC_Init+0x98>)
 8006462:	f007 f80b 	bl	800d47c <HAL_SDRAM_Init>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800646c:	f001 f812 	bl	8007494 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8006470:	bf00      	nop
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20001200 	.word	0x20001200
 800647c:	a0000140 	.word	0xa0000140

08006480 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006486:	1d3b      	adds	r3, r7, #4
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006494:	4b3b      	ldr	r3, [pc, #236]	; (8006584 <HAL_FMC_MspInit+0x104>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d16f      	bne.n	800657c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800649c:	4b39      	ldr	r3, [pc, #228]	; (8006584 <HAL_FMC_MspInit+0x104>)
 800649e:	2201      	movs	r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80064a2:	2300      	movs	r3, #0
 80064a4:	603b      	str	r3, [r7, #0]
 80064a6:	4b38      	ldr	r3, [pc, #224]	; (8006588 <HAL_FMC_MspInit+0x108>)
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	4a37      	ldr	r2, [pc, #220]	; (8006588 <HAL_FMC_MspInit+0x108>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6393      	str	r3, [r2, #56]	; 0x38
 80064b2:	4b35      	ldr	r3, [pc, #212]	; (8006588 <HAL_FMC_MspInit+0x108>)
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80064be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80064c2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c4:	2302      	movs	r3, #2
 80064c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064cc:	2303      	movs	r3, #3
 80064ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064d0:	230c      	movs	r3, #12
 80064d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80064d4:	1d3b      	adds	r3, r7, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	482c      	ldr	r0, [pc, #176]	; (800658c <HAL_FMC_MspInit+0x10c>)
 80064da:	f004 fabb 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80064de:	2301      	movs	r3, #1
 80064e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e2:	2302      	movs	r3, #2
 80064e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ea:	2303      	movs	r3, #3
 80064ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064ee:	230c      	movs	r3, #12
 80064f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4826      	ldr	r0, [pc, #152]	; (8006590 <HAL_FMC_MspInit+0x110>)
 80064f8:	f004 faac 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80064fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8006500:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006502:	2302      	movs	r3, #2
 8006504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650a:	2303      	movs	r3, #3
 800650c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800650e:	230c      	movs	r3, #12
 8006510:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	4619      	mov	r1, r3
 8006516:	481f      	ldr	r0, [pc, #124]	; (8006594 <HAL_FMC_MspInit+0x114>)
 8006518:	f004 fa9c 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800651c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006520:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006522:	2302      	movs	r3, #2
 8006524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800652a:	2303      	movs	r3, #3
 800652c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800652e:	230c      	movs	r3, #12
 8006530:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006532:	1d3b      	adds	r3, r7, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4818      	ldr	r0, [pc, #96]	; (8006598 <HAL_FMC_MspInit+0x118>)
 8006538:	f004 fa8c 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800653c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006540:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006542:	2302      	movs	r3, #2
 8006544:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800654a:	2303      	movs	r3, #3
 800654c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800654e:	230c      	movs	r3, #12
 8006550:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4811      	ldr	r0, [pc, #68]	; (800659c <HAL_FMC_MspInit+0x11c>)
 8006558:	f004 fa7c 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800655c:	2360      	movs	r3, #96	; 0x60
 800655e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006560:	2302      	movs	r3, #2
 8006562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006568:	2303      	movs	r3, #3
 800656a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800656c:	230c      	movs	r3, #12
 800656e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	4619      	mov	r1, r3
 8006574:	480a      	ldr	r0, [pc, #40]	; (80065a0 <HAL_FMC_MspInit+0x120>)
 8006576:	f004 fa6d 	bl	800aa54 <HAL_GPIO_Init>
 800657a:	e000      	b.n	800657e <HAL_FMC_MspInit+0xfe>
    return;
 800657c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000964 	.word	0x20000964
 8006588:	40023800 	.word	0x40023800
 800658c:	40021400 	.word	0x40021400
 8006590:	40020800 	.word	0x40020800
 8006594:	40021800 	.word	0x40021800
 8006598:	40021000 	.word	0x40021000
 800659c:	40020c00 	.word	0x40020c00
 80065a0:	40020400 	.word	0x40020400

080065a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80065ac:	f7ff ff68 	bl	8006480 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08e      	sub	sp, #56	; 0x38
 80065bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	4b8a      	ldr	r3, [pc, #552]	; (80067fc <MX_GPIO_Init+0x244>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	4a89      	ldr	r2, [pc, #548]	; (80067fc <MX_GPIO_Init+0x244>)
 80065d8:	f043 0304 	orr.w	r3, r3, #4
 80065dc:	6313      	str	r3, [r2, #48]	; 0x30
 80065de:	4b87      	ldr	r3, [pc, #540]	; (80067fc <MX_GPIO_Init+0x244>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	4b83      	ldr	r3, [pc, #524]	; (80067fc <MX_GPIO_Init+0x244>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	4a82      	ldr	r2, [pc, #520]	; (80067fc <MX_GPIO_Init+0x244>)
 80065f4:	f043 0320 	orr.w	r3, r3, #32
 80065f8:	6313      	str	r3, [r2, #48]	; 0x30
 80065fa:	4b80      	ldr	r3, [pc, #512]	; (80067fc <MX_GPIO_Init+0x244>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	4b7c      	ldr	r3, [pc, #496]	; (80067fc <MX_GPIO_Init+0x244>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	4a7b      	ldr	r2, [pc, #492]	; (80067fc <MX_GPIO_Init+0x244>)
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	6313      	str	r3, [r2, #48]	; 0x30
 8006616:	4b79      	ldr	r3, [pc, #484]	; (80067fc <MX_GPIO_Init+0x244>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	4b75      	ldr	r3, [pc, #468]	; (80067fc <MX_GPIO_Init+0x244>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4a74      	ldr	r2, [pc, #464]	; (80067fc <MX_GPIO_Init+0x244>)
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	6313      	str	r3, [r2, #48]	; 0x30
 8006632:	4b72      	ldr	r3, [pc, #456]	; (80067fc <MX_GPIO_Init+0x244>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	4b6e      	ldr	r3, [pc, #440]	; (80067fc <MX_GPIO_Init+0x244>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a6d      	ldr	r2, [pc, #436]	; (80067fc <MX_GPIO_Init+0x244>)
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b6b      	ldr	r3, [pc, #428]	; (80067fc <MX_GPIO_Init+0x244>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	4b67      	ldr	r3, [pc, #412]	; (80067fc <MX_GPIO_Init+0x244>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a66      	ldr	r2, [pc, #408]	; (80067fc <MX_GPIO_Init+0x244>)
 8006664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006668:	6313      	str	r3, [r2, #48]	; 0x30
 800666a:	4b64      	ldr	r3, [pc, #400]	; (80067fc <MX_GPIO_Init+0x244>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	4b60      	ldr	r3, [pc, #384]	; (80067fc <MX_GPIO_Init+0x244>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	4a5f      	ldr	r2, [pc, #380]	; (80067fc <MX_GPIO_Init+0x244>)
 8006680:	f043 0310 	orr.w	r3, r3, #16
 8006684:	6313      	str	r3, [r2, #48]	; 0x30
 8006686:	4b5d      	ldr	r3, [pc, #372]	; (80067fc <MX_GPIO_Init+0x244>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	4b59      	ldr	r3, [pc, #356]	; (80067fc <MX_GPIO_Init+0x244>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a58      	ldr	r2, [pc, #352]	; (80067fc <MX_GPIO_Init+0x244>)
 800669c:	f043 0308 	orr.w	r3, r3, #8
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b56      	ldr	r3, [pc, #344]	; (80067fc <MX_GPIO_Init+0x244>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2116      	movs	r1, #22
 80066b2:	4853      	ldr	r0, [pc, #332]	; (8006800 <MX_GPIO_Init+0x248>)
 80066b4:	f004 fc9e 	bl	800aff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80066b8:	2200      	movs	r2, #0
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	4851      	ldr	r0, [pc, #324]	; (8006804 <MX_GPIO_Init+0x24c>)
 80066be:	f004 fc99 	bl	800aff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80066c2:	2200      	movs	r2, #0
 80066c4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80066c8:	484f      	ldr	r0, [pc, #316]	; (8006808 <MX_GPIO_Init+0x250>)
 80066ca:	f004 fc93 	bl	800aff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80066ce:	2200      	movs	r2, #0
 80066d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80066d4:	484d      	ldr	r0, [pc, #308]	; (800680c <MX_GPIO_Init+0x254>)
 80066d6:	f004 fc8d 	bl	800aff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80066da:	2316      	movs	r3, #22
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066de:	2301      	movs	r3, #1
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e6:	2300      	movs	r3, #0
 80066e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ee:	4619      	mov	r1, r3
 80066f0:	4843      	ldr	r0, [pc, #268]	; (8006800 <MX_GPIO_Init+0x248>)
 80066f2:	f004 f9af 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80066f6:	f248 0307 	movw	r3, #32775	; 0x8007
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80066fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006702:	2300      	movs	r3, #0
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800670a:	4619      	mov	r1, r3
 800670c:	483d      	ldr	r0, [pc, #244]	; (8006804 <MX_GPIO_Init+0x24c>)
 800670e:	f004 f9a1 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006716:	2301      	movs	r3, #1
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671a:	2300      	movs	r3, #0
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800671e:	2300      	movs	r3, #0
 8006720:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8006722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006726:	4619      	mov	r1, r3
 8006728:	4836      	ldr	r0, [pc, #216]	; (8006804 <MX_GPIO_Init+0x24c>)
 800672a:	f004 f993 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800672e:	2320      	movs	r3, #32
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006732:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800673c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006740:	4619      	mov	r1, r3
 8006742:	482f      	ldr	r0, [pc, #188]	; (8006800 <MX_GPIO_Init+0x248>)
 8006744:	f004 f986 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006748:	2304      	movs	r3, #4
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800674c:	2300      	movs	r3, #0
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006750:	2300      	movs	r3, #0
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006758:	4619      	mov	r1, r3
 800675a:	482d      	ldr	r0, [pc, #180]	; (8006810 <MX_GPIO_Init+0x258>)
 800675c:	f004 f97a 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006760:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006766:	2302      	movs	r3, #2
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676a:	2300      	movs	r3, #0
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800676e:	2300      	movs	r3, #0
 8006770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006772:	230c      	movs	r3, #12
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800677a:	4619      	mov	r1, r3
 800677c:	4824      	ldr	r0, [pc, #144]	; (8006810 <MX_GPIO_Init+0x258>)
 800677e:	f004 f969 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006788:	2300      	movs	r3, #0
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678c:	2300      	movs	r3, #0
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006794:	4619      	mov	r1, r3
 8006796:	481e      	ldr	r0, [pc, #120]	; (8006810 <MX_GPIO_Init+0x258>)
 8006798:	f004 f95c 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800679c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067a2:	2300      	movs	r3, #0
 80067a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80067aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ae:	4619      	mov	r1, r3
 80067b0:	4815      	ldr	r0, [pc, #84]	; (8006808 <MX_GPIO_Init+0x250>)
 80067b2:	f004 f94f 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80067b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067bc:	2301      	movs	r3, #1
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c4:	2300      	movs	r3, #0
 80067c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067cc:	4619      	mov	r1, r3
 80067ce:	480e      	ldr	r0, [pc, #56]	; (8006808 <MX_GPIO_Init+0x250>)
 80067d0:	f004 f940 	bl	800aa54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80067d4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067da:	2301      	movs	r3, #1
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e2:	2300      	movs	r3, #0
 80067e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80067e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ea:	4619      	mov	r1, r3
 80067ec:	4807      	ldr	r0, [pc, #28]	; (800680c <MX_GPIO_Init+0x254>)
 80067ee:	f004 f931 	bl	800aa54 <HAL_GPIO_Init>

}
 80067f2:	bf00      	nop
 80067f4:	3738      	adds	r7, #56	; 0x38
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800
 8006800:	40020800 	.word	0x40020800
 8006804:	40020000 	.word	0x40020000
 8006808:	40020c00 	.word	0x40020c00
 800680c:	40021800 	.word	0x40021800
 8006810:	40020400 	.word	0x40020400

08006814 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <MX_I2C3_Init+0x74>)
 800681a:	4a1c      	ldr	r2, [pc, #112]	; (800688c <MX_I2C3_Init+0x78>)
 800681c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800681e:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <MX_I2C3_Init+0x74>)
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <MX_I2C3_Init+0x7c>)
 8006822:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006824:	4b18      	ldr	r3, [pc, #96]	; (8006888 <MX_I2C3_Init+0x74>)
 8006826:	2200      	movs	r2, #0
 8006828:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <MX_I2C3_Init+0x74>)
 800682c:	2200      	movs	r2, #0
 800682e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006830:	4b15      	ldr	r3, [pc, #84]	; (8006888 <MX_I2C3_Init+0x74>)
 8006832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006836:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006838:	4b13      	ldr	r3, [pc, #76]	; (8006888 <MX_I2C3_Init+0x74>)
 800683a:	2200      	movs	r2, #0
 800683c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <MX_I2C3_Init+0x74>)
 8006840:	2200      	movs	r2, #0
 8006842:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006844:	4b10      	ldr	r3, [pc, #64]	; (8006888 <MX_I2C3_Init+0x74>)
 8006846:	2200      	movs	r2, #0
 8006848:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800684a:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <MX_I2C3_Init+0x74>)
 800684c:	2200      	movs	r2, #0
 800684e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006850:	480d      	ldr	r0, [pc, #52]	; (8006888 <MX_I2C3_Init+0x74>)
 8006852:	f004 fbe9 	bl	800b028 <HAL_I2C_Init>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800685c:	f000 fe1a 	bl	8007494 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006860:	2100      	movs	r1, #0
 8006862:	4809      	ldr	r0, [pc, #36]	; (8006888 <MX_I2C3_Init+0x74>)
 8006864:	f005 fbdd 	bl	800c022 <HAL_I2CEx_ConfigAnalogFilter>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800686e:	f000 fe11 	bl	8007494 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006872:	2100      	movs	r1, #0
 8006874:	4804      	ldr	r0, [pc, #16]	; (8006888 <MX_I2C3_Init+0x74>)
 8006876:	f005 fc10 	bl	800c09a <HAL_I2CEx_ConfigDigitalFilter>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006880:	f000 fe08 	bl	8007494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006884:	bf00      	nop
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20001234 	.word	0x20001234
 800688c:	40005c00 	.word	0x40005c00
 8006890:	000186a0 	.word	0x000186a0

08006894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08a      	sub	sp, #40	; 0x28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800689c:	f107 0314 	add.w	r3, r7, #20
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	605a      	str	r2, [r3, #4]
 80068a6:	609a      	str	r2, [r3, #8]
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a29      	ldr	r2, [pc, #164]	; (8006958 <HAL_I2C_MspInit+0xc4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d14b      	bne.n	800694e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_I2C_MspInit+0xc8>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	4a27      	ldr	r2, [pc, #156]	; (800695c <HAL_I2C_MspInit+0xc8>)
 80068c0:	f043 0304 	orr.w	r3, r3, #4
 80068c4:	6313      	str	r3, [r2, #48]	; 0x30
 80068c6:	4b25      	ldr	r3, [pc, #148]	; (800695c <HAL_I2C_MspInit+0xc8>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <HAL_I2C_MspInit+0xc8>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a20      	ldr	r2, [pc, #128]	; (800695c <HAL_I2C_MspInit+0xc8>)
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30
 80068e2:	4b1e      	ldr	r3, [pc, #120]	; (800695c <HAL_I2C_MspInit+0xc8>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80068ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068f4:	2312      	movs	r3, #18
 80068f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068f8:	2301      	movs	r3, #1
 80068fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068fc:	2300      	movs	r3, #0
 80068fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006900:	2304      	movs	r3, #4
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4619      	mov	r1, r3
 800690a:	4815      	ldr	r0, [pc, #84]	; (8006960 <HAL_I2C_MspInit+0xcc>)
 800690c:	f004 f8a2 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8006910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006916:	2312      	movs	r3, #18
 8006918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800691a:	2301      	movs	r3, #1
 800691c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691e:	2300      	movs	r3, #0
 8006920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006922:	2304      	movs	r3, #4
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	4619      	mov	r1, r3
 800692c:	480d      	ldr	r0, [pc, #52]	; (8006964 <HAL_I2C_MspInit+0xd0>)
 800692e:	f004 f891 	bl	800aa54 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006932:	2300      	movs	r3, #0
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	4b09      	ldr	r3, [pc, #36]	; (800695c <HAL_I2C_MspInit+0xc8>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	4a08      	ldr	r2, [pc, #32]	; (800695c <HAL_I2C_MspInit+0xc8>)
 800693c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006940:	6413      	str	r3, [r2, #64]	; 0x40
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_I2C_MspInit+0xc8>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800694e:	bf00      	nop
 8006950:	3728      	adds	r7, #40	; 0x28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40005c00 	.word	0x40005c00
 800695c:	40023800 	.word	0x40023800
 8006960:	40020800 	.word	0x40020800
 8006964:	40020000 	.word	0x40020000

08006968 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0b      	ldr	r2, [pc, #44]	; (80069a4 <HAL_I2C_MspDeInit+0x3c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d10f      	bne.n	800699a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_I2C_MspDeInit+0x40>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <HAL_I2C_MspDeInit+0x40>)
 8006980:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006984:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8006986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800698a:	4808      	ldr	r0, [pc, #32]	; (80069ac <HAL_I2C_MspDeInit+0x44>)
 800698c:	f004 fa0e 	bl	800adac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8006990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006994:	4806      	ldr	r0, [pc, #24]	; (80069b0 <HAL_I2C_MspDeInit+0x48>)
 8006996:	f004 fa09 	bl	800adac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40005c00 	.word	0x40005c00
 80069a8:	40023800 	.word	0x40023800
 80069ac:	40020800 	.word	0x40020800
 80069b0:	40020000 	.word	0x40020000

080069b4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08e      	sub	sp, #56	; 0x38
 80069b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80069ba:	1d3b      	adds	r3, r7, #4
 80069bc:	2234      	movs	r2, #52	; 0x34
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f008 fef1 	bl	800f7a8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80069c6:	4b39      	ldr	r3, [pc, #228]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069c8:	4a39      	ldr	r2, [pc, #228]	; (8006ab0 <MX_LTDC_Init+0xfc>)
 80069ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80069cc:	4b37      	ldr	r3, [pc, #220]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80069d2:	4b36      	ldr	r3, [pc, #216]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80069d8:	4b34      	ldr	r3, [pc, #208]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069da:	2200      	movs	r2, #0
 80069dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80069de:	4b33      	ldr	r3, [pc, #204]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80069e4:	4b31      	ldr	r3, [pc, #196]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069e6:	2209      	movs	r2, #9
 80069e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80069ea:	4b30      	ldr	r3, [pc, #192]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80069f0:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069f2:	221d      	movs	r2, #29
 80069f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80069f6:	4b2d      	ldr	r3, [pc, #180]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069f8:	2203      	movs	r2, #3
 80069fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80069fc:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <MX_LTDC_Init+0xf8>)
 80069fe:	f240 120d 	movw	r2, #269	; 0x10d
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8006a04:	4b29      	ldr	r3, [pc, #164]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a06:	f240 1243 	movw	r2, #323	; 0x143
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8006a0c:	4b27      	ldr	r3, [pc, #156]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a0e:	f240 1217 	movw	r2, #279	; 0x117
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8006a14:	4b25      	ldr	r3, [pc, #148]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a16:	f240 1247 	movw	r2, #327	; 0x147
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006a1c:	4b23      	ldr	r3, [pc, #140]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006a24:	4b21      	ldr	r3, [pc, #132]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006a34:	481d      	ldr	r0, [pc, #116]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a36:	f005 fb6f 	bl	800c118 <HAL_LTDC_Init>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8006a40:	f000 fd28 	bl	8007494 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8006a48:	23f0      	movs	r3, #240	; 0xf0
 8006a4a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8006a50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006a54:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8006a56:	2302      	movs	r3, #2
 8006a58:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8006a5a:	23ff      	movs	r3, #255	; 0xff
 8006a5c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006a66:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006a68:	2307      	movs	r3, #7
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8006a6c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8006a72:	23f0      	movs	r3, #240	; 0xf0
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8006a76:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006a8e:	1d3b      	adds	r3, r7, #4
 8006a90:	2200      	movs	r2, #0
 8006a92:	4619      	mov	r1, r3
 8006a94:	4805      	ldr	r0, [pc, #20]	; (8006aac <MX_LTDC_Init+0xf8>)
 8006a96:	f005 fc0f 	bl	800c2b8 <HAL_LTDC_ConfigLayer>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8006aa0:	f000 fcf8 	bl	8007494 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006aa4:	bf00      	nop
 8006aa6:	3738      	adds	r7, #56	; 0x38
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20001288 	.word	0x20001288
 8006ab0:	40016800 	.word	0x40016800

08006ab4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08e      	sub	sp, #56	; 0x38
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a77      	ldr	r2, [pc, #476]	; (8006cb0 <HAL_LTDC_MspInit+0x1fc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f040 80e8 	bne.w	8006ca8 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006ad8:	2300      	movs	r3, #0
 8006ada:	623b      	str	r3, [r7, #32]
 8006adc:	4b75      	ldr	r3, [pc, #468]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	4a74      	ldr	r2, [pc, #464]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ae8:	4b72      	ldr	r3, [pc, #456]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006af0:	623b      	str	r3, [r7, #32]
 8006af2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	4b6e      	ldr	r3, [pc, #440]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	4a6d      	ldr	r2, [pc, #436]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006afe:	f043 0320 	orr.w	r3, r3, #32
 8006b02:	6313      	str	r3, [r2, #48]	; 0x30
 8006b04:	4b6b      	ldr	r3, [pc, #428]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	4b67      	ldr	r3, [pc, #412]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	4a66      	ldr	r2, [pc, #408]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b20:	4b64      	ldr	r3, [pc, #400]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	4b60      	ldr	r3, [pc, #384]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	4a5f      	ldr	r2, [pc, #380]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b36:	f043 0302 	orr.w	r3, r3, #2
 8006b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3c:	4b5d      	ldr	r3, [pc, #372]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	4b59      	ldr	r3, [pc, #356]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	4a58      	ldr	r2, [pc, #352]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b56:	6313      	str	r3, [r2, #48]	; 0x30
 8006b58:	4b56      	ldr	r3, [pc, #344]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	4b52      	ldr	r3, [pc, #328]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	4a51      	ldr	r2, [pc, #324]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b6e:	f043 0304 	orr.w	r3, r3, #4
 8006b72:	6313      	str	r3, [r2, #48]	; 0x30
 8006b74:	4b4f      	ldr	r3, [pc, #316]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b80:	2300      	movs	r3, #0
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	4b4b      	ldr	r3, [pc, #300]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	4a4a      	ldr	r2, [pc, #296]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b8a:	f043 0308 	orr.w	r3, r3, #8
 8006b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b90:	4b48      	ldr	r3, [pc, #288]	; (8006cb4 <HAL_LTDC_MspInit+0x200>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8006b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006baa:	2300      	movs	r3, #0
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006bae:	230e      	movs	r3, #14
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8006bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	483f      	ldr	r0, [pc, #252]	; (8006cb8 <HAL_LTDC_MspInit+0x204>)
 8006bba:	f003 ff4b 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8006bbe:	f641 0358 	movw	r3, #6232	; 0x1858
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006bd0:	230e      	movs	r3, #14
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4838      	ldr	r0, [pc, #224]	; (8006cbc <HAL_LTDC_MspInit+0x208>)
 8006bdc:	f003 ff3a 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8006be0:	2303      	movs	r3, #3
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be4:	2302      	movs	r3, #2
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bec:	2300      	movs	r3, #0
 8006bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006bf0:	2309      	movs	r3, #9
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4831      	ldr	r0, [pc, #196]	; (8006cc0 <HAL_LTDC_MspInit+0x20c>)
 8006bfc:	f003 ff2a 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8006c00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c06:	2302      	movs	r3, #2
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006c12:	230e      	movs	r3, #14
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4828      	ldr	r0, [pc, #160]	; (8006cc0 <HAL_LTDC_MspInit+0x20c>)
 8006c1e:	f003 ff19 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8006c22:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c30:	2300      	movs	r3, #0
 8006c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006c34:	230e      	movs	r3, #14
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4821      	ldr	r0, [pc, #132]	; (8006cc4 <HAL_LTDC_MspInit+0x210>)
 8006c40:	f003 ff08 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8006c44:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c52:	2300      	movs	r3, #0
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006c56:	230e      	movs	r3, #14
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4819      	ldr	r0, [pc, #100]	; (8006cc8 <HAL_LTDC_MspInit+0x214>)
 8006c62:	f003 fef7 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8006c66:	2348      	movs	r3, #72	; 0x48
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c72:	2300      	movs	r3, #0
 8006c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006c76:	230e      	movs	r3, #14
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4812      	ldr	r0, [pc, #72]	; (8006ccc <HAL_LTDC_MspInit+0x218>)
 8006c82:	f003 fee7 	bl	800aa54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8006c86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c94:	2300      	movs	r3, #0
 8006c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006c98:	2309      	movs	r3, #9
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4808      	ldr	r0, [pc, #32]	; (8006cc4 <HAL_LTDC_MspInit+0x210>)
 8006ca4:	f003 fed6 	bl	800aa54 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8006ca8:	bf00      	nop
 8006caa:	3738      	adds	r7, #56	; 0x38
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40016800 	.word	0x40016800
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	40021400 	.word	0x40021400
 8006cbc:	40020000 	.word	0x40020000
 8006cc0:	40020400 	.word	0x40020400
 8006cc4:	40021800 	.word	0x40021800
 8006cc8:	40020800 	.word	0x40020800
 8006ccc:	40020c00 	.word	0x40020c00

08006cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	f6ad 4d94 	subw	sp, sp, #3220	; 0xc94
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006cd8:	f003 f90e 	bl	8009ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006cdc:	f000 fa6a 	bl	80071b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ce0:	f7ff fc6a 	bl	80065b8 <MX_GPIO_Init>
  MX_CRC_Init();
 8006ce4:	f7ff faf2 	bl	80062cc <MX_CRC_Init>
  MX_DMA2D_Init();
 8006ce8:	f7ff fb26 	bl	8006338 <MX_DMA2D_Init>
  MX_FMC_Init();
 8006cec:	f7ff fb78 	bl	80063e0 <MX_FMC_Init>
  MX_I2C3_Init();
 8006cf0:	f7ff fd90 	bl	8006814 <MX_I2C3_Init>
  MX_LTDC_Init();
 8006cf4:	f7ff fe5e 	bl	80069b4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8006cf8:	f000 fbd2 	bl	80074a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8006cfc:	f000 fde0 	bl	80078c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8006d00:	f000 fe50 	bl	80079a4 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8006d04:	f008 fb96 	bl	800f434 <MX_X_CUBE_AI_Init>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_PB_Init(BUTTON_KEY,0);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	f001 fb0c 	bl	8008328 <BSP_PB_Init>
  touch_sensor_init();
 8006d10:	f000 fafe 	bl	8007310 <touch_sensor_init>

  user_interface_init();
 8006d14:	f000 fb10 	bl	8007338 <user_interface_init>
  user_interface_reset();
 8006d18:	f000 fb40 	bl	800739c <user_interface_reset>

  ai_float nn_input_data[NN_INPUT_IMAGE_HEIGHT][NN_INPUT_IMAGE_WIDTH];
  ai_float nn_output_data[NUM_CLASSES];

  pred_probType _1st_pred, _2nd_pred;
  _1st_pred.prob = _2nd_pred.prob =0.0;
 8006d1c:	f107 030c 	add.w	r3, r7, #12
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f107 030c 	add.w	r3, r7, #12
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	601a      	str	r2, [r3, #0]

  while (1)
  {


	  BSP_TS_GetState(&ui_state);
 8006d32:	48c9      	ldr	r0, [pc, #804]	; (8007058 <main+0x388>)
 8006d34:	f003 f82e 	bl	8009d94 <BSP_TS_GetState>

	       if(ui_state.TouchDetected){
 8006d38:	4bc7      	ldr	r3, [pc, #796]	; (8007058 <main+0x388>)
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8174 	beq.w	800702a <main+0x35a>

	        if((ui_state.X > DRAW_IMG_X1 && ui_state.X < DRAW_IMG_X2) && (ui_state.Y > DRAW_IMG_Y1 && ui_state.Y < DRAW_IMG_Y2))
 8006d42:	4bc5      	ldr	r3, [pc, #788]	; (8007058 <main+0x388>)
 8006d44:	885b      	ldrh	r3, [r3, #2]
 8006d46:	2b0a      	cmp	r3, #10
 8006d48:	f240 8152 	bls.w	8006ff0 <main+0x320>
 8006d4c:	4bc2      	ldr	r3, [pc, #776]	; (8007058 <main+0x388>)
 8006d4e:	885b      	ldrh	r3, [r3, #2]
 8006d50:	2be5      	cmp	r3, #229	; 0xe5
 8006d52:	f200 814d 	bhi.w	8006ff0 <main+0x320>
 8006d56:	4bc0      	ldr	r3, [pc, #768]	; (8007058 <main+0x388>)
 8006d58:	889b      	ldrh	r3, [r3, #4]
 8006d5a:	2b0a      	cmp	r3, #10
 8006d5c:	f240 8148 	bls.w	8006ff0 <main+0x320>
 8006d60:	4bbd      	ldr	r3, [pc, #756]	; (8007058 <main+0x388>)
 8006d62:	889b      	ldrh	r3, [r3, #4]
 8006d64:	2be5      	cmp	r3, #229	; 0xe5
 8006d66:	f200 8143 	bhi.w	8006ff0 <main+0x320>
	        {
	    	   BSP_LCD_FillCircle(ui_state.X,ui_state.Y,5);
 8006d6a:	4bbb      	ldr	r3, [pc, #748]	; (8007058 <main+0x388>)
 8006d6c:	885b      	ldrh	r3, [r3, #2]
 8006d6e:	4aba      	ldr	r2, [pc, #744]	; (8007058 <main+0x388>)
 8006d70:	8891      	ldrh	r1, [r2, #4]
 8006d72:	2205      	movs	r2, #5
 8006d74:	4618      	mov	r0, r3
 8006d76:	f002 fb6b 	bl	8009450 <BSP_LCD_FillCircle>

	    	   int x  = ui_state.Y*((float)28/240);
 8006d7a:	4bb7      	ldr	r3, [pc, #732]	; (8007058 <main+0x388>)
 8006d7c:	889b      	ldrh	r3, [r3, #4]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d86:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800705c <main+0x38c>
 8006d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d92:	ee17 3a90 	vmov	r3, s15
 8006d96:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
	    	   int y  = ui_state.X*((float)28/240);
 8006d9a:	4baf      	ldr	r3, [pc, #700]	; (8007058 <main+0x388>)
 8006d9c:	885b      	ldrh	r3, [r3, #2]
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006da6:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800705c <main+0x38c>
 8006daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db2:	ee17 3a90 	vmov	r3, s15
 8006db6:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

	    	   BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1,255);
 8006dba:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	33c9      	adds	r3, #201	; 0xc9
 8006dc2:	b298      	uxth	r0, r3
 8006dc4:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	33fb      	adds	r3, #251	; 0xfb
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	22ff      	movs	r2, #255	; 0xff
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f002 fcc3 	bl	800975c <BSP_LCD_DrawPixel>
	    	   BSP_LCD_DrawPixel(y-1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1,255);
 8006dd6:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	33c7      	adds	r3, #199	; 0xc7
 8006dde:	b298      	uxth	r0, r3
 8006de0:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	33f9      	adds	r3, #249	; 0xf9
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	22ff      	movs	r2, #255	; 0xff
 8006dec:	4619      	mov	r1, r3
 8006dee:	f002 fcb5 	bl	800975c <BSP_LCD_DrawPixel>
	    	   BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x,255);
 8006df2:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	33c9      	adds	r3, #201	; 0xc9
 8006dfa:	b298      	uxth	r0, r3
 8006dfc:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	33fa      	adds	r3, #250	; 0xfa
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	22ff      	movs	r2, #255	; 0xff
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f002 fca7 	bl	800975c <BSP_LCD_DrawPixel>
	    	   BSP_LCD_DrawPixel(y-1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x,255);
 8006e0e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	33c7      	adds	r3, #199	; 0xc7
 8006e16:	b298      	uxth	r0, r3
 8006e18:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	33fa      	adds	r3, #250	; 0xfa
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	22ff      	movs	r2, #255	; 0xff
 8006e24:	4619      	mov	r1, r3
 8006e26:	f002 fc99 	bl	800975c <BSP_LCD_DrawPixel>

	    	   BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x,255);
 8006e2a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	33c8      	adds	r3, #200	; 0xc8
 8006e32:	b298      	uxth	r0, r3
 8006e34:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	33fa      	adds	r3, #250	; 0xfa
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	22ff      	movs	r2, #255	; 0xff
 8006e40:	4619      	mov	r1, r3
 8006e42:	f002 fc8b 	bl	800975c <BSP_LCD_DrawPixel>
	    	   BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1,255);
 8006e46:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	33c8      	adds	r3, #200	; 0xc8
 8006e4e:	b298      	uxth	r0, r3
 8006e50:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	33fb      	adds	r3, #251	; 0xfb
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	22ff      	movs	r2, #255	; 0xff
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f002 fc7d 	bl	800975c <BSP_LCD_DrawPixel>
	    	   BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1,255);
 8006e62:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	33c8      	adds	r3, #200	; 0xc8
 8006e6a:	b298      	uxth	r0, r3
 8006e6c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	33f9      	adds	r3, #249	; 0xf9
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	22ff      	movs	r2, #255	; 0xff
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f002 fc6f 	bl	800975c <BSP_LCD_DrawPixel>
	    	   BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1,255);
 8006e7e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	33c9      	adds	r3, #201	; 0xc9
 8006e86:	b298      	uxth	r0, r3
 8006e88:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	33f9      	adds	r3, #249	; 0xf9
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	22ff      	movs	r2, #255	; 0xff
 8006e94:	4619      	mov	r1, r3
 8006e96:	f002 fc61 	bl	800975c <BSP_LCD_DrawPixel>
	    	   BSP_LCD_DrawPixel(y-1+ IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1,255);
 8006e9a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	33c7      	adds	r3, #199	; 0xc7
 8006ea2:	b298      	uxth	r0, r3
 8006ea4:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	33fb      	adds	r3, #251	; 0xfb
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	22ff      	movs	r2, #255	; 0xff
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f002 fc53 	bl	800975c <BSP_LCD_DrawPixel>

	    	  nn_input_data[x+1][y+1] = PXL_SET;
 8006eb6:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006ec0:	1c58      	adds	r0, r3, #1
 8006ec2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	1a9b      	subs	r3, r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4403      	add	r3, r0
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	4a62      	ldr	r2, [pc, #392]	; (8007060 <main+0x390>)
 8006ed6:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x-1][y-1] = PXL_SET;
 8006ed8:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006edc:	1e5a      	subs	r2, r3, #1
 8006ede:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006ee2:	1e58      	subs	r0, r3, #1
 8006ee4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006ee8:	4613      	mov	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4403      	add	r3, r0
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	4a5a      	ldr	r2, [pc, #360]	; (8007060 <main+0x390>)
 8006ef8:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x+1][y]   = PXL_SET;
 8006efa:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	4a52      	ldr	r2, [pc, #328]	; (8007060 <main+0x390>)
 8006f18:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x-1][y]   = PXL_SET;
 8006f1a:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006f1e:	1e5a      	subs	r2, r3, #1
 8006f20:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006f24:	4613      	mov	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	4a4a      	ldr	r2, [pc, #296]	; (8007060 <main+0x390>)
 8006f38:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x][y+1]   = PXL_SET;
 8006f3a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006f3e:	1c58      	adds	r0, r3, #1
 8006f40:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006f44:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8006f48:	4613      	mov	r3, r2
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4403      	add	r3, r0
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	4a42      	ldr	r2, [pc, #264]	; (8007060 <main+0x390>)
 8006f58:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x][y-1]   = PXL_SET;
 8006f5a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006f5e:	1e58      	subs	r0, r3, #1
 8006f60:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006f64:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4403      	add	r3, r0
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	4a3a      	ldr	r2, [pc, #232]	; (8007060 <main+0x390>)
 8006f78:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x+1][y-1] = PXL_SET;
 8006f7a:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006f84:	1e58      	subs	r0, r3, #1
 8006f86:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4403      	add	r3, r0
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	4a31      	ldr	r2, [pc, #196]	; (8007060 <main+0x390>)
 8006f9a:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x-1][y+1] = PXL_SET;
 8006f9c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8006fa6:	1c58      	adds	r0, r3, #1
 8006fa8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006fac:	4613      	mov	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4403      	add	r3, r0
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	4a29      	ldr	r2, [pc, #164]	; (8007060 <main+0x390>)
 8006fbc:	601a      	str	r2, [r3, #0]
	    	  nn_input_data[x][y]     = PXL_SET;
 8006fbe:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006fc2:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	4a21      	ldr	r2, [pc, #132]	; (8007060 <main+0x390>)
 8006fda:	601a      	str	r2, [r3, #0]

	    	 printf("X =%d Y=%d\r\n", ui_state.X,ui_state.Y);
 8006fdc:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <main+0x388>)
 8006fde:	885b      	ldrh	r3, [r3, #2]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <main+0x388>)
 8006fe4:	889b      	ldrh	r3, [r3, #4]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	481e      	ldr	r0, [pc, #120]	; (8007064 <main+0x394>)
 8006fea:	f009 fa5f 	bl	80104ac <iprintf>
	        {
 8006fee:	e01c      	b.n	800702a <main+0x35a>


	        }

	        else if((ui_state.X  > ERASE_BUTTON_X1 && ui_state.X <ERASE_BUTTON_X2)  && (ui_state.Y >ERASE_BUTTON_Y1 && ui_state.Y < ERASE_BUTTON_Y2) )
 8006ff0:	4b19      	ldr	r3, [pc, #100]	; (8007058 <main+0x388>)
 8006ff2:	885b      	ldrh	r3, [r3, #2]
 8006ff4:	2b05      	cmp	r3, #5
 8006ff6:	d918      	bls.n	800702a <main+0x35a>
 8006ff8:	4b17      	ldr	r3, [pc, #92]	; (8007058 <main+0x388>)
 8006ffa:	885b      	ldrh	r3, [r3, #2]
 8006ffc:	2bea      	cmp	r3, #234	; 0xea
 8006ffe:	d814      	bhi.n	800702a <main+0x35a>
 8007000:	4b15      	ldr	r3, [pc, #84]	; (8007058 <main+0x388>)
 8007002:	889b      	ldrh	r3, [r3, #4]
 8007004:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8007008:	d30f      	bcc.n	800702a <main+0x35a>
 800700a:	4b13      	ldr	r3, [pc, #76]	; (8007058 <main+0x388>)
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007012:	d80a      	bhi.n	800702a <main+0x35a>
	        {
	      	  user_interface_reset();
 8007014:	f000 f9c2 	bl	800739c <user_interface_reset>
	      	  mnist_game_reset(&nn_input_data, &_1st_pred,&_2nd_pred);
 8007018:	f107 020c 	add.w	r2, r7, #12
 800701c:	f107 0114 	add.w	r1, r7, #20
 8007020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f947 	bl	80072b8 <mnist_game_reset>

	        }
	       }
	      HAL_Delay(1);
 800702a:	2001      	movs	r0, #1
 800702c:	f002 ffa6 	bl	8009f7c <HAL_Delay>

	       if(BSP_PB_GetState(BUTTON_KEY)){
 8007030:	2000      	movs	r0, #0
 8007032:	f001 f9cf 	bl	80083d4 <BSP_PB_GetState>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f43f ae7a 	beq.w	8006d32 <main+0x62>


	        MX_X_CUBE_AI_Process(nn_input_data,nn_output_data);
 800703e:	f107 021c 	add.w	r2, r7, #28
 8007042:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f008 f9fd 	bl	800f448 <MX_X_CUBE_AI_Process>

	        for(int i =0;i<NUM_CLASSES;i++){
 800704e:	2300      	movs	r3, #0
 8007050:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8007054:	e05c      	b.n	8007110 <main+0x440>
 8007056:	bf00      	nop
 8007058:	20001330 	.word	0x20001330
 800705c:	3deeeeef 	.word	0x3deeeeef
 8007060:	3f7d70a4 	.word	0x3f7d70a4
 8007064:	08017138 	.word	0x08017138

	      	  if(_1st_pred.prob  < nn_output_data[i]){
 8007068:	f107 0314 	add.w	r3, r7, #20
 800706c:	ed93 7a00 	vldr	s14, [r3]
 8007070:	f107 021c 	add.w	r2, r7, #28
 8007074:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	edd3 7a00 	vldr	s15, [r3]
 8007080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	d51c      	bpl.n	80070c4 <main+0x3f4>
	      		  _2nd_pred.label = _1st_pred.label;
 800708a:	f107 0314 	add.w	r3, r7, #20
 800708e:	791a      	ldrb	r2, [r3, #4]
 8007090:	f107 030c 	add.w	r3, r7, #12
 8007094:	711a      	strb	r2, [r3, #4]
	      		  _2nd_pred.prob  = _1st_pred.prob;
 8007096:	f107 0314 	add.w	r3, r7, #20
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f107 030c 	add.w	r3, r7, #12
 80070a0:	601a      	str	r2, [r3, #0]
	      		  _1st_pred.prob  = nn_output_data[i];
 80070a2:	f107 021c 	add.w	r2, r7, #28
 80070a6:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	f107 0314 	add.w	r3, r7, #20
 80070b4:	601a      	str	r2, [r3, #0]
	      		  _1st_pred.label =i;
 80070b6:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	f107 0314 	add.w	r3, r7, #20
 80070c0:	711a      	strb	r2, [r3, #4]
 80070c2:	e020      	b.n	8007106 <main+0x436>

	           }
	      	  else if(_2nd_pred.prob < nn_output_data[i]){
 80070c4:	f107 030c 	add.w	r3, r7, #12
 80070c8:	ed93 7a00 	vldr	s14, [r3]
 80070cc:	f107 021c 	add.w	r2, r7, #28
 80070d0:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	edd3 7a00 	vldr	s15, [r3]
 80070dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e4:	d50f      	bpl.n	8007106 <main+0x436>
	      		  _2nd_pred.label = i;
 80070e6:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	f107 030c 	add.w	r3, r7, #12
 80070f0:	711a      	strb	r2, [r3, #4]
	      		  _2nd_pred.prob =  nn_output_data[i];
 80070f2:	f107 021c 	add.w	r2, r7, #28
 80070f6:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	601a      	str	r2, [r3, #0]
	        for(int i =0;i<NUM_CLASSES;i++){
 8007106:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 800710a:	3301      	adds	r3, #1
 800710c:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8007110:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007114:	2b09      	cmp	r3, #9
 8007116:	dda7      	ble.n	8007068 <main+0x398>
	      	  }
	        }

	  	  printf("  AI First Guess %d  %f \n\r",_1st_pred.label,_1st_pred.prob);
 8007118:	f107 0314 	add.w	r3, r7, #20
 800711c:	791b      	ldrb	r3, [r3, #4]
 800711e:	461c      	mov	r4, r3
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fb7e 	bl	8005828 <__aeabi_f2d>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	4621      	mov	r1, r4
 8007132:	481b      	ldr	r0, [pc, #108]	; (80071a0 <main+0x4d0>)
 8007134:	f009 f9ba 	bl	80104ac <iprintf>
	  	  printf("  AI Second Guess %d  %f \n\r",_2nd_pred.label,_2nd_pred.prob);
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	791b      	ldrb	r3, [r3, #4]
 800713e:	461c      	mov	r4, r3
 8007140:	f107 030c 	add.w	r3, r7, #12
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fb6e 	bl	8005828 <__aeabi_f2d>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4621      	mov	r1, r4
 8007152:	4814      	ldr	r0, [pc, #80]	; (80071a4 <main+0x4d4>)
 8007154:	f009 f9aa 	bl	80104ac <iprintf>

	  	  sprintf(_1st_pred_str,"%d",_1st_pred.label);
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	791b      	ldrb	r3, [r3, #4]
 800715e:	461a      	mov	r2, r3
 8007160:	463b      	mov	r3, r7
 8007162:	4911      	ldr	r1, [pc, #68]	; (80071a8 <main+0x4d8>)
 8007164:	4618      	mov	r0, r3
 8007166:	f009 fa35 	bl	80105d4 <siprintf>

	  	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800716a:	4810      	ldr	r0, [pc, #64]	; (80071ac <main+0x4dc>)
 800716c:	f001 fe04 	bl	8008d78 <BSP_LCD_SetTextColor>
	  	  BSP_LCD_SetFont(&Font20);
 8007170:	480f      	ldr	r0, [pc, #60]	; (80071b0 <main+0x4e0>)
 8007172:	f001 fe33 	bl	8008ddc <BSP_LCD_SetFont>
	  	  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8007176:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800717a:	f001 fe15 	bl	8008da8 <BSP_LCD_SetBackColor>
	  	  BSP_LCD_DisplayStringAt(130,255,(uint8_t *)_1st_pred_str,LEFT_MODE);
 800717e:	463a      	mov	r2, r7
 8007180:	2303      	movs	r3, #3
 8007182:	21ff      	movs	r1, #255	; 0xff
 8007184:	2082      	movs	r0, #130	; 0x82
 8007186:	f001 feaf 	bl	8008ee8 <BSP_LCD_DisplayStringAt>


	  	  mnist_game_reset(&nn_input_data, &_1st_pred,&_2nd_pred);
 800718a:	f107 020c 	add.w	r2, r7, #12
 800718e:	f107 0114 	add.w	r1, r7, #20
 8007192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f88e 	bl	80072b8 <mnist_game_reset>
	  BSP_TS_GetState(&ui_state);
 800719c:	e5c9      	b.n	8006d32 <main+0x62>
 800719e:	bf00      	nop
 80071a0:	08017148 	.word	0x08017148
 80071a4:	08017164 	.word	0x08017164
 80071a8:	08017180 	.word	0x08017180
 80071ac:	ffff0000 	.word	0xffff0000
 80071b0:	20000078 	.word	0x20000078

080071b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b0a0      	sub	sp, #128	; 0x80
 80071b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071be:	2230      	movs	r2, #48	; 0x30
 80071c0:	2100      	movs	r1, #0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f008 faf0 	bl	800f7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	609a      	str	r2, [r3, #8]
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071d8:	f107 030c 	add.w	r3, r7, #12
 80071dc:	2230      	movs	r2, #48	; 0x30
 80071de:	2100      	movs	r1, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f008 fae1 	bl	800f7a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80071e6:	2300      	movs	r3, #0
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	4b31      	ldr	r3, [pc, #196]	; (80072b0 <SystemClock_Config+0xfc>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	4a30      	ldr	r2, [pc, #192]	; (80072b0 <SystemClock_Config+0xfc>)
 80071f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f4:	6413      	str	r3, [r2, #64]	; 0x40
 80071f6:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <SystemClock_Config+0xfc>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007202:	2300      	movs	r3, #0
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	4b2b      	ldr	r3, [pc, #172]	; (80072b4 <SystemClock_Config+0x100>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <SystemClock_Config+0x100>)
 800720c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	4b28      	ldr	r3, [pc, #160]	; (80072b4 <SystemClock_Config+0x100>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800721e:	2301      	movs	r3, #1
 8007220:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007226:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007228:	2302      	movs	r3, #2
 800722a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800722c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007230:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007232:	2304      	movs	r3, #4
 8007234:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007236:	23a8      	movs	r3, #168	; 0xa8
 8007238:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800723a:	2302      	movs	r3, #2
 800723c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800723e:	2307      	movs	r3, #7
 8007240:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007242:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007246:	4618      	mov	r0, r3
 8007248:	f005 fab4 	bl	800c7b4 <HAL_RCC_OscConfig>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007252:	f000 f91f 	bl	8007494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007256:	230f      	movs	r3, #15
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800725a:	2302      	movs	r3, #2
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800725e:	2300      	movs	r3, #0
 8007260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800726c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800726e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007272:	2105      	movs	r1, #5
 8007274:	4618      	mov	r0, r3
 8007276:	f005 fd15 	bl	800cca4 <HAL_RCC_ClockConfig>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007280:	f000 f908 	bl	8007494 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007284:	2308      	movs	r3, #8
 8007286:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8007288:	2332      	movs	r3, #50	; 0x32
 800728a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800728c:	2302      	movs	r3, #2
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007290:	2300      	movs	r3, #0
 8007292:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	4618      	mov	r0, r3
 800729a:	f005 ff31 	bl	800d100 <HAL_RCCEx_PeriphCLKConfig>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80072a4:	f000 f8f6 	bl	8007494 <Error_Handler>
  }
}
 80072a8:	bf00      	nop
 80072aa:	3780      	adds	r7, #128	; 0x80
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40007000 	.word	0x40007000

080072b8 <mnist_game_reset>:

/* USER CODE BEGIN 4 */
void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred){
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]

	memset(in_data,0.0,sizeof(in_data[0][0])*NN_INPUT_IMAGE_WIDTH *NN_INPUT_IMAGE_HEIGHT);
 80072c4:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 80072c8:	2100      	movs	r1, #0
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f008 fa6c 	bl	800f7a8 <memset>
	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob  =0.0;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2200      	movs	r2, #0
 80072dc:	711a      	strb	r2, [r3, #4]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	edc3 7a00 	vstr	s15, [r3]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	edd3 7a00 	vldr	s15, [r3]
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	edc7 7a00 	vstr	s15, [r7]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	711a      	strb	r2, [r3, #4]
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <touch_sensor_init>:

void touch_sensor_init(){
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
if(BSP_TS_Init(240,320) == TS_ERROR){
 8007314:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007318:	20f0      	movs	r0, #240	; 0xf0
 800731a:	f002 fd01 	bl	8009d20 <BSP_TS_Init>
 800731e:	4603      	mov	r3, r0
 8007320:	2b01      	cmp	r3, #1
 8007322:	d102      	bne.n	800732a <touch_sensor_init+0x1a>
	printf("Touch sensor failure\r\n");
 8007324:	4803      	ldr	r0, [pc, #12]	; (8007334 <touch_sensor_init+0x24>)
 8007326:	f009 f947 	bl	80105b8 <puts>
 }
  HAL_Delay(100);
 800732a:	2064      	movs	r0, #100	; 0x64
 800732c:	f002 fe26 	bl	8009f7c <HAL_Delay>
}
 8007330:	bf00      	nop
 8007332:	bd80      	pop	{r7, pc}
 8007334:	08017184 	.word	0x08017184

08007338 <user_interface_init>:
void user_interface_init(void){
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 800733c:	f001 fbd4 	bl	8008ae8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER_LAYER1);
 8007340:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8007344:	2001      	movs	r0, #1
 8007346:	f001 fc51 	bl	8008bec <BSP_LCD_LayerDefaultInit>

  BSP_LCD_SelectLayer(1);
 800734a:	2001      	movs	r0, #1
 800734c:	f001 fcb2 	bl	8008cb4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8007350:	480f      	ldr	r0, [pc, #60]	; (8007390 <user_interface_init+0x58>)
 8007352:	f001 fd5d 	bl	8008e10 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1,LCD_COLOR_DARKCYAN);
 8007356:	490f      	ldr	r1, [pc, #60]	; (8007394 <user_interface_init+0x5c>)
 8007358:	2001      	movs	r0, #1
 800735a:	f001 fcf9 	bl	8008d50 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1,DISABLE);
 800735e:	2100      	movs	r1, #0
 8007360:	2001      	movs	r0, #1
 8007362:	f001 fcb7 	bl	8008cd4 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0,LCD_FRAME_BUFFER_LAYER0);
 8007366:	490c      	ldr	r1, [pc, #48]	; (8007398 <user_interface_init+0x60>)
 8007368:	2000      	movs	r0, #0
 800736a:	f001 fc3f 	bl	8008bec <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800736e:	2000      	movs	r0, #0
 8007370:	f001 fca0 	bl	8008cb4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8007374:	f002 f90c 	bl	8009590 <BSP_LCD_DisplayOn>
  HAL_Delay(150);
 8007378:	2096      	movs	r0, #150	; 0x96
 800737a:	f002 fdff 	bl	8009f7c <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 800737e:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8007382:	f001 fd45 	bl	8008e10 <BSP_LCD_Clear>
  HAL_Delay(100);
 8007386:	2064      	movs	r0, #100	; 0x64
 8007388:	f002 fdf8 	bl	8009f7c <HAL_Delay>

}
 800738c:	bf00      	nop
 800738e:	bd80      	pop	{r7, pc}
 8007390:	ffff0000 	.word	0xffff0000
 8007394:	ff008080 	.word	0xff008080
 8007398:	d0130000 	.word	0xd0130000

0800739c <user_interface_reset>:


void user_interface_reset(){
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 80073a0:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80073a4:	f001 fd34 	bl	8008e10 <BSP_LCD_Clear>
  //NOTE COLOR CHANGED FROM DARKYELLOW TO BLACK
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80073a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80073ac:	f001 fce4 	bl	8008d78 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 80073b0:	481d      	ldr	r0, [pc, #116]	; (8007428 <user_interface_reset+0x8c>)
 80073b2:	f001 fd13 	bl	8008ddc <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 80073b6:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80073ba:	f001 fcf5 	bl	8008da8 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(5,255,(uint8_t*) "NN  Guess:", LEFT_MODE);
 80073be:	2303      	movs	r3, #3
 80073c0:	4a1a      	ldr	r2, [pc, #104]	; (800742c <user_interface_reset+0x90>)
 80073c2:	21ff      	movs	r1, #255	; 0xff
 80073c4:	2005      	movs	r0, #5
 80073c6:	f001 fd8f 	bl	8008ee8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(200,250,28,28);
 80073ca:	231c      	movs	r3, #28
 80073cc:	221c      	movs	r2, #28
 80073ce:	21fa      	movs	r1, #250	; 0xfa
 80073d0:	20c8      	movs	r0, #200	; 0xc8
 80073d2:	f001 fec7 	bl	8009164 <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80073d6:	4816      	ldr	r0, [pc, #88]	; (8007430 <user_interface_reset+0x94>)
 80073d8:	f001 fcce 	bl	8008d78 <BSP_LCD_SetTextColor>

  BSP_LCD_FillRect(5,285,230,30);
 80073dc:	231e      	movs	r3, #30
 80073de:	22e6      	movs	r2, #230	; 0xe6
 80073e0:	f240 111d 	movw	r1, #285	; 0x11d
 80073e4:	2005      	movs	r0, #5
 80073e6:	f001 ffd9 	bl	800939c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	f001 fcc3 	bl	8008d78 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 80073f2:	480d      	ldr	r0, [pc, #52]	; (8007428 <user_interface_reset+0x8c>)
 80073f4:	f001 fcf2 	bl	8008ddc <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80073f8:	480d      	ldr	r0, [pc, #52]	; (8007430 <user_interface_reset+0x94>)
 80073fa:	f001 fcd5 	bl	8008da8 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(330,291,(uint8_t*) "ERASE", LEFT_MODE);
 80073fe:	2303      	movs	r3, #3
 8007400:	4a0c      	ldr	r2, [pc, #48]	; (8007434 <user_interface_reset+0x98>)
 8007402:	f240 1123 	movw	r1, #291	; 0x123
 8007406:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800740a:	f001 fd6d 	bl	8008ee8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(2,2,237,237);
 800740e:	23ed      	movs	r3, #237	; 0xed
 8007410:	22ed      	movs	r2, #237	; 0xed
 8007412:	2102      	movs	r1, #2
 8007414:	2002      	movs	r0, #2
 8007416:	f001 fea5 	bl	8009164 <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800741a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800741e:	f001 fcab 	bl	8008d78 <BSP_LCD_SetTextColor>
}
 8007422:	bf00      	nop
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000080 	.word	0x20000080
 800742c:	0801719c 	.word	0x0801719c
 8007430:	ff0000ff 	.word	0xff0000ff
 8007434:	080171a8 	.word	0x080171a8

08007438 <_write>:

int _write(int fd, const void *buff, int c){
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]

	 HAL_StatusTypeDef st;

	 st =  HAL_UART_Transmit(&huart1,(uint8_t *)buff,c,HAL_MAX_DELAY);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	b29a      	uxth	r2, r3
 8007448:	f04f 33ff 	mov.w	r3, #4294967295
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	4807      	ldr	r0, [pc, #28]	; (800746c <_write+0x34>)
 8007450:	f007 fb41 	bl	800ead6 <HAL_UART_Transmit>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
	 return (st == HAL_OK ? c :0);
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <_write+0x2a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	e000      	b.n	8007464 <_write+0x2c>
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20001420 	.word	0x20001420

08007470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a04      	ldr	r2, [pc, #16]	; (8007490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007482:	f002 fd5b 	bl	8009f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	40001000 	.word	0x40001000

08007494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007498:	b672      	cpsid	i
}
 800749a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800749c:	e7fe      	b.n	800749c <Error_Handler+0x8>
	...

080074a0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80074a4:	4b17      	ldr	r3, [pc, #92]	; (8007504 <MX_SPI5_Init+0x64>)
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <MX_SPI5_Init+0x68>)
 80074a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <MX_SPI5_Init+0x64>)
 80074ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80074b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <MX_SPI5_Init+0x64>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80074b8:	4b12      	ldr	r3, [pc, #72]	; (8007504 <MX_SPI5_Init+0x64>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <MX_SPI5_Init+0x64>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074c4:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <MX_SPI5_Init+0x64>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80074ca:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <MX_SPI5_Init+0x64>)
 80074cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <MX_SPI5_Init+0x64>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <MX_SPI5_Init+0x64>)
 80074da:	2200      	movs	r2, #0
 80074dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <MX_SPI5_Init+0x64>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <MX_SPI5_Init+0x64>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <MX_SPI5_Init+0x64>)
 80074ec:	220a      	movs	r2, #10
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80074f0:	4804      	ldr	r0, [pc, #16]	; (8007504 <MX_SPI5_Init+0x64>)
 80074f2:	f006 f842 	bl	800d57a <HAL_SPI_Init>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80074fc:	f7ff ffca 	bl	8007494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8007500:	bf00      	nop
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20001338 	.word	0x20001338
 8007508:	40015000 	.word	0x40015000

0800750c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	; 0x28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007514:	f107 0314 	add.w	r3, r7, #20
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	60da      	str	r2, [r3, #12]
 8007522:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a19      	ldr	r2, [pc, #100]	; (8007590 <HAL_SPI_MspInit+0x84>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d12c      	bne.n	8007588 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800752e:	2300      	movs	r3, #0
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	4b18      	ldr	r3, [pc, #96]	; (8007594 <HAL_SPI_MspInit+0x88>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	4a17      	ldr	r2, [pc, #92]	; (8007594 <HAL_SPI_MspInit+0x88>)
 8007538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800753c:	6453      	str	r3, [r2, #68]	; 0x44
 800753e:	4b15      	ldr	r3, [pc, #84]	; (8007594 <HAL_SPI_MspInit+0x88>)
 8007540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <HAL_SPI_MspInit+0x88>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	4a10      	ldr	r2, [pc, #64]	; (8007594 <HAL_SPI_MspInit+0x88>)
 8007554:	f043 0320 	orr.w	r3, r3, #32
 8007558:	6313      	str	r3, [r2, #48]	; 0x30
 800755a:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <HAL_SPI_MspInit+0x88>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8007566:	f44f 7360 	mov.w	r3, #896	; 0x380
 800756a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800756c:	2302      	movs	r3, #2
 800756e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007574:	2300      	movs	r3, #0
 8007576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007578:	2305      	movs	r3, #5
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	4619      	mov	r1, r3
 8007582:	4805      	ldr	r0, [pc, #20]	; (8007598 <HAL_SPI_MspInit+0x8c>)
 8007584:	f003 fa66 	bl	800aa54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8007588:	bf00      	nop
 800758a:	3728      	adds	r7, #40	; 0x28
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	40015000 	.word	0x40015000
 8007594:	40023800 	.word	0x40023800
 8007598:	40021400 	.word	0x40021400

0800759c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a08      	ldr	r2, [pc, #32]	; (80075cc <HAL_SPI_MspDeInit+0x30>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d10a      	bne.n	80075c4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80075ae:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <HAL_SPI_MspDeInit+0x34>)
 80075b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b2:	4a07      	ldr	r2, [pc, #28]	; (80075d0 <HAL_SPI_MspDeInit+0x34>)
 80075b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075b8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80075ba:	f44f 7160 	mov.w	r1, #896	; 0x380
 80075be:	4805      	ldr	r0, [pc, #20]	; (80075d4 <HAL_SPI_MspDeInit+0x38>)
 80075c0:	f003 fbf4 	bl	800adac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40015000 	.word	0x40015000
 80075d0:	40023800 	.word	0x40023800
 80075d4:	40021400 	.word	0x40021400

080075d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <HAL_MspInit+0x4c>)
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <HAL_MspInit+0x4c>)
 80075e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075ec:	6453      	str	r3, [r2, #68]	; 0x44
 80075ee:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <HAL_MspInit+0x4c>)
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f6:	607b      	str	r3, [r7, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075fa:	2300      	movs	r3, #0
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <HAL_MspInit+0x4c>)
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	4a08      	ldr	r2, [pc, #32]	; (8007624 <HAL_MspInit+0x4c>)
 8007604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007608:	6413      	str	r3, [r2, #64]	; 0x40
 800760a:	4b06      	ldr	r3, [pc, #24]	; (8007624 <HAL_MspInit+0x4c>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800

08007628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	; 0x30
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8007638:	2200      	movs	r2, #0
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	2036      	movs	r0, #54	; 0x36
 800763e:	f002 fd79 	bl	800a134 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007642:	2036      	movs	r0, #54	; 0x36
 8007644:	f002 fd92 	bl	800a16c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <HAL_InitTick+0xa4>)
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	4a1e      	ldr	r2, [pc, #120]	; (80076cc <HAL_InitTick+0xa4>)
 8007652:	f043 0310 	orr.w	r3, r3, #16
 8007656:	6413      	str	r3, [r2, #64]	; 0x40
 8007658:	4b1c      	ldr	r3, [pc, #112]	; (80076cc <HAL_InitTick+0xa4>)
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007664:	f107 0210 	add.w	r2, r7, #16
 8007668:	f107 0314 	add.w	r3, r7, #20
 800766c:	4611      	mov	r1, r2
 800766e:	4618      	mov	r0, r3
 8007670:	f005 fd14 	bl	800d09c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007674:	f005 fcea 	bl	800d04c <HAL_RCC_GetPCLK1Freq>
 8007678:	4603      	mov	r3, r0
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <HAL_InitTick+0xa8>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	0c9b      	lsrs	r3, r3, #18
 8007688:	3b01      	subs	r3, #1
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <HAL_InitTick+0xac>)
 800768e:	4a12      	ldr	r2, [pc, #72]	; (80076d8 <HAL_InitTick+0xb0>)
 8007690:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <HAL_InitTick+0xac>)
 8007694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007698:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800769a:	4a0e      	ldr	r2, [pc, #56]	; (80076d4 <HAL_InitTick+0xac>)
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80076a0:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <HAL_InitTick+0xac>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076a6:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <HAL_InitTick+0xac>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80076ac:	4809      	ldr	r0, [pc, #36]	; (80076d4 <HAL_InitTick+0xac>)
 80076ae:	f006 fd43 	bl	800e138 <HAL_TIM_Base_Init>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80076b8:	4806      	ldr	r0, [pc, #24]	; (80076d4 <HAL_InitTick+0xac>)
 80076ba:	f006 fd8d 	bl	800e1d8 <HAL_TIM_Base_Start_IT>
 80076be:	4603      	mov	r3, r0
 80076c0:	e000      	b.n	80076c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3730      	adds	r7, #48	; 0x30
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40023800 	.word	0x40023800
 80076d0:	431bde83 	.word	0x431bde83
 80076d4:	20001390 	.word	0x20001390
 80076d8:	40001000 	.word	0x40001000

080076dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80076e0:	e7fe      	b.n	80076e0 <NMI_Handler+0x4>

080076e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076e2:	b480      	push	{r7}
 80076e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076e6:	e7fe      	b.n	80076e6 <HardFault_Handler+0x4>

080076e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076ec:	e7fe      	b.n	80076ec <MemManage_Handler+0x4>

080076ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076ee:	b480      	push	{r7}
 80076f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076f2:	e7fe      	b.n	80076f2 <BusFault_Handler+0x4>

080076f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076f8:	e7fe      	b.n	80076f8 <UsageFault_Handler+0x4>

080076fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076fa:	b480      	push	{r7}
 80076fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076fe:	bf00      	nop
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800770c:	bf00      	nop
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007716:	b480      	push	{r7}
 8007718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800771a:	bf00      	nop
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007728:	bf00      	nop
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007738:	4802      	ldr	r0, [pc, #8]	; (8007744 <TIM6_DAC_IRQHandler+0x10>)
 800773a:	f006 fdbd 	bl	800e2b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800773e:	bf00      	nop
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20001390 	.word	0x20001390

08007748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
	return 1;
 800774c:	2301      	movs	r3, #1
}
 800774e:	4618      	mov	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <_kill>:

int _kill(int pid, int sig)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007762:	f007 ffdb 	bl	800f71c <__errno>
 8007766:	4603      	mov	r3, r0
 8007768:	2216      	movs	r2, #22
 800776a:	601a      	str	r2, [r3, #0]
	return -1;
 800776c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <_exit>:

void _exit (int status)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007780:	f04f 31ff 	mov.w	r1, #4294967295
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ffe7 	bl	8007758 <_kill>
	while (1) {}		/* Make sure we hang here */
 800778a:	e7fe      	b.n	800778a <_exit+0x12>

0800778c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e00a      	b.n	80077b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800779e:	f3af 8000 	nop.w
 80077a2:	4601      	mov	r1, r0
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	60ba      	str	r2, [r7, #8]
 80077aa:	b2ca      	uxtb	r2, r1
 80077ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	3301      	adds	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	dbf0      	blt.n	800779e <_read+0x12>
	}

return len;
 80077bc:	687b      	ldr	r3, [r7, #4]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
	return -1;
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077ee:	605a      	str	r2, [r3, #4]
	return 0;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <_isatty>:

int _isatty(int file)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
	return 1;
 8007806:	2301      	movs	r3, #1
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
	return 0;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
	...

08007830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007838:	4a14      	ldr	r2, [pc, #80]	; (800788c <_sbrk+0x5c>)
 800783a:	4b15      	ldr	r3, [pc, #84]	; (8007890 <_sbrk+0x60>)
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007844:	4b13      	ldr	r3, [pc, #76]	; (8007894 <_sbrk+0x64>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800784c:	4b11      	ldr	r3, [pc, #68]	; (8007894 <_sbrk+0x64>)
 800784e:	4a12      	ldr	r2, [pc, #72]	; (8007898 <_sbrk+0x68>)
 8007850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007852:	4b10      	ldr	r3, [pc, #64]	; (8007894 <_sbrk+0x64>)
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4413      	add	r3, r2
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	429a      	cmp	r2, r3
 800785e:	d207      	bcs.n	8007870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007860:	f007 ff5c 	bl	800f71c <__errno>
 8007864:	4603      	mov	r3, r0
 8007866:	220c      	movs	r2, #12
 8007868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800786a:	f04f 33ff 	mov.w	r3, #4294967295
 800786e:	e009      	b.n	8007884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007870:	4b08      	ldr	r3, [pc, #32]	; (8007894 <_sbrk+0x64>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007876:	4b07      	ldr	r3, [pc, #28]	; (8007894 <_sbrk+0x64>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	4a05      	ldr	r2, [pc, #20]	; (8007894 <_sbrk+0x64>)
 8007880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007882:	68fb      	ldr	r3, [r7, #12]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20030000 	.word	0x20030000
 8007890:	00004000 	.word	0x00004000
 8007894:	20000968 	.word	0x20000968
 8007898:	20001578 	.word	0x20001578

0800789c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <SystemInit+0x20>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a6:	4a05      	ldr	r2, [pc, #20]	; (80078bc <SystemInit+0x20>)
 80078a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	e000ed00 	.word	0xe000ed00

080078c0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078c6:	f107 0308 	add.w	r3, r7, #8
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	605a      	str	r2, [r3, #4]
 80078d0:	609a      	str	r2, [r3, #8]
 80078d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078d4:	463b      	mov	r3, r7
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80078dc:	4b1e      	ldr	r3, [pc, #120]	; (8007958 <MX_TIM1_Init+0x98>)
 80078de:	4a1f      	ldr	r2, [pc, #124]	; (800795c <MX_TIM1_Init+0x9c>)
 80078e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <MX_TIM1_Init+0x98>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078e8:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <MX_TIM1_Init+0x98>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80078ee:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <MX_TIM1_Init+0x98>)
 80078f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078f6:	4b18      	ldr	r3, [pc, #96]	; (8007958 <MX_TIM1_Init+0x98>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <MX_TIM1_Init+0x98>)
 80078fe:	2200      	movs	r2, #0
 8007900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <MX_TIM1_Init+0x98>)
 8007904:	2200      	movs	r2, #0
 8007906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007908:	4813      	ldr	r0, [pc, #76]	; (8007958 <MX_TIM1_Init+0x98>)
 800790a:	f006 fc15 	bl	800e138 <HAL_TIM_Base_Init>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8007914:	f7ff fdbe 	bl	8007494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800791c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800791e:	f107 0308 	add.w	r3, r7, #8
 8007922:	4619      	mov	r1, r3
 8007924:	480c      	ldr	r0, [pc, #48]	; (8007958 <MX_TIM1_Init+0x98>)
 8007926:	f006 fdcf 	bl	800e4c8 <HAL_TIM_ConfigClockSource>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8007930:	f7ff fdb0 	bl	8007494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007934:	2300      	movs	r3, #0
 8007936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007938:	2300      	movs	r3, #0
 800793a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800793c:	463b      	mov	r3, r7
 800793e:	4619      	mov	r1, r3
 8007940:	4805      	ldr	r0, [pc, #20]	; (8007958 <MX_TIM1_Init+0x98>)
 8007942:	f006 ffeb 	bl	800e91c <HAL_TIMEx_MasterConfigSynchronization>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800794c:	f7ff fda2 	bl	8007494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007950:	bf00      	nop
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200013d8 	.word	0x200013d8
 800795c:	40010000 	.word	0x40010000

08007960 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a0b      	ldr	r2, [pc, #44]	; (800799c <HAL_TIM_Base_MspInit+0x3c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d10d      	bne.n	800798e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <HAL_TIM_Base_MspInit+0x40>)
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <HAL_TIM_Base_MspInit+0x40>)
 800797c:	f043 0301 	orr.w	r3, r3, #1
 8007980:	6453      	str	r3, [r2, #68]	; 0x44
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <HAL_TIM_Base_MspInit+0x40>)
 8007984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40010000 	.word	0x40010000
 80079a0:	40023800 	.word	0x40023800

080079a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80079a8:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079aa:	4a12      	ldr	r2, [pc, #72]	; (80079f4 <MX_USART1_UART_Init+0x50>)
 80079ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80079ae:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80079b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80079bc:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079be:	2200      	movs	r2, #0
 80079c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80079c8:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079ca:	220c      	movs	r2, #12
 80079cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079ce:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80079d4:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80079da:	4805      	ldr	r0, [pc, #20]	; (80079f0 <MX_USART1_UART_Init+0x4c>)
 80079dc:	f007 f82e 	bl	800ea3c <HAL_UART_Init>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80079e6:	f7ff fd55 	bl	8007494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80079ea:	bf00      	nop
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20001420 	.word	0x20001420
 80079f4:	40011000 	.word	0x40011000

080079f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	; 0x28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a00:	f107 0314 	add.w	r3, r7, #20
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	605a      	str	r2, [r3, #4]
 8007a0a:	609a      	str	r2, [r3, #8]
 8007a0c:	60da      	str	r2, [r3, #12]
 8007a0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a19      	ldr	r2, [pc, #100]	; (8007a7c <HAL_UART_MspInit+0x84>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d12c      	bne.n	8007a74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	4b18      	ldr	r3, [pc, #96]	; (8007a80 <HAL_UART_MspInit+0x88>)
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <HAL_UART_MspInit+0x88>)
 8007a24:	f043 0310 	orr.w	r3, r3, #16
 8007a28:	6453      	str	r3, [r2, #68]	; 0x44
 8007a2a:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <HAL_UART_MspInit+0x88>)
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	f003 0310 	and.w	r3, r3, #16
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <HAL_UART_MspInit+0x88>)
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	4a10      	ldr	r2, [pc, #64]	; (8007a80 <HAL_UART_MspInit+0x88>)
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	6313      	str	r3, [r2, #48]	; 0x30
 8007a46:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <HAL_UART_MspInit+0x88>)
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007a52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a60:	2303      	movs	r3, #3
 8007a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007a64:	2307      	movs	r3, #7
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a68:	f107 0314 	add.w	r3, r7, #20
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4805      	ldr	r0, [pc, #20]	; (8007a84 <HAL_UART_MspInit+0x8c>)
 8007a70:	f002 fff0 	bl	800aa54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007a74:	bf00      	nop
 8007a76:	3728      	adds	r7, #40	; 0x28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40011000 	.word	0x40011000
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40020000 	.word	0x40020000

08007a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ac0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007a8c:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007a8e:	490e      	ldr	r1, [pc, #56]	; (8007ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007a90:	4a0e      	ldr	r2, [pc, #56]	; (8007acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a94:	e002      	b.n	8007a9c <LoopCopyDataInit>

08007a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a9a:	3304      	adds	r3, #4

08007a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007aa0:	d3f9      	bcc.n	8007a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007aa2:	4a0b      	ldr	r2, [pc, #44]	; (8007ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007aa4:	4c0b      	ldr	r4, [pc, #44]	; (8007ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007aa8:	e001      	b.n	8007aae <LoopFillZerobss>

08007aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007aac:	3204      	adds	r2, #4

08007aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ab0:	d3fb      	bcc.n	8007aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007ab2:	f7ff fef3 	bl	800789c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ab6:	f007 fe37 	bl	800f728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007aba:	f7ff f909 	bl	8006cd0 <main>
  bx  lr    
 8007abe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007ac0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ac8:	20000948 	.word	0x20000948
  ldr r2, =_sidata
 8007acc:	08100b64 	.word	0x08100b64
  ldr r2, =_sbss
 8007ad0:	20000948 	.word	0x20000948
  ldr r4, =_ebss
 8007ad4:	20001578 	.word	0x20001578

08007ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ad8:	e7fe      	b.n	8007ad8 <ADC_IRQHandler>

08007ada <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8007ade:	f000 feb5 	bl	800884c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8007ae2:	20ca      	movs	r0, #202	; 0xca
 8007ae4:	f000 f95d 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8007ae8:	20c3      	movs	r0, #195	; 0xc3
 8007aea:	f000 f967 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8007aee:	2008      	movs	r0, #8
 8007af0:	f000 f964 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8007af4:	2050      	movs	r0, #80	; 0x50
 8007af6:	f000 f961 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8007afa:	20cf      	movs	r0, #207	; 0xcf
 8007afc:	f000 f951 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007b00:	2000      	movs	r0, #0
 8007b02:	f000 f95b 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8007b06:	20c1      	movs	r0, #193	; 0xc1
 8007b08:	f000 f958 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8007b0c:	2030      	movs	r0, #48	; 0x30
 8007b0e:	f000 f955 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8007b12:	20ed      	movs	r0, #237	; 0xed
 8007b14:	f000 f945 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8007b18:	2064      	movs	r0, #100	; 0x64
 8007b1a:	f000 f94f 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8007b1e:	2003      	movs	r0, #3
 8007b20:	f000 f94c 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8007b24:	2012      	movs	r0, #18
 8007b26:	f000 f949 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8007b2a:	2081      	movs	r0, #129	; 0x81
 8007b2c:	f000 f946 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8007b30:	20e8      	movs	r0, #232	; 0xe8
 8007b32:	f000 f936 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8007b36:	2085      	movs	r0, #133	; 0x85
 8007b38:	f000 f940 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f000 f93d 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8007b42:	2078      	movs	r0, #120	; 0x78
 8007b44:	f000 f93a 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8007b48:	20cb      	movs	r0, #203	; 0xcb
 8007b4a:	f000 f92a 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8007b4e:	2039      	movs	r0, #57	; 0x39
 8007b50:	f000 f934 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8007b54:	202c      	movs	r0, #44	; 0x2c
 8007b56:	f000 f931 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f000 f92e 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8007b60:	2034      	movs	r0, #52	; 0x34
 8007b62:	f000 f92b 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8007b66:	2002      	movs	r0, #2
 8007b68:	f000 f928 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8007b6c:	20f7      	movs	r0, #247	; 0xf7
 8007b6e:	f000 f918 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8007b72:	2020      	movs	r0, #32
 8007b74:	f000 f922 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8007b78:	20ea      	movs	r0, #234	; 0xea
 8007b7a:	f000 f912 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f000 f91c 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007b84:	2000      	movs	r0, #0
 8007b86:	f000 f919 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8007b8a:	20b1      	movs	r0, #177	; 0xb1
 8007b8c:	f000 f909 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007b90:	2000      	movs	r0, #0
 8007b92:	f000 f913 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8007b96:	201b      	movs	r0, #27
 8007b98:	f000 f910 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8007b9c:	20b6      	movs	r0, #182	; 0xb6
 8007b9e:	f000 f900 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8007ba2:	200a      	movs	r0, #10
 8007ba4:	f000 f90a 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8007ba8:	20a2      	movs	r0, #162	; 0xa2
 8007baa:	f000 f907 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8007bae:	20c0      	movs	r0, #192	; 0xc0
 8007bb0:	f000 f8f7 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8007bb4:	2010      	movs	r0, #16
 8007bb6:	f000 f901 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8007bba:	20c1      	movs	r0, #193	; 0xc1
 8007bbc:	f000 f8f1 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8007bc0:	2010      	movs	r0, #16
 8007bc2:	f000 f8fb 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8007bc6:	20c5      	movs	r0, #197	; 0xc5
 8007bc8:	f000 f8eb 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8007bcc:	2045      	movs	r0, #69	; 0x45
 8007bce:	f000 f8f5 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8007bd2:	2015      	movs	r0, #21
 8007bd4:	f000 f8f2 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8007bd8:	20c7      	movs	r0, #199	; 0xc7
 8007bda:	f000 f8e2 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8007bde:	2090      	movs	r0, #144	; 0x90
 8007be0:	f000 f8ec 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8007be4:	2036      	movs	r0, #54	; 0x36
 8007be6:	f000 f8dc 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8007bea:	20c8      	movs	r0, #200	; 0xc8
 8007bec:	f000 f8e6 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8007bf0:	20f2      	movs	r0, #242	; 0xf2
 8007bf2:	f000 f8d6 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	f000 f8e0 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8007bfc:	20b0      	movs	r0, #176	; 0xb0
 8007bfe:	f000 f8d0 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8007c02:	20c2      	movs	r0, #194	; 0xc2
 8007c04:	f000 f8da 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8007c08:	20b6      	movs	r0, #182	; 0xb6
 8007c0a:	f000 f8ca 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8007c0e:	200a      	movs	r0, #10
 8007c10:	f000 f8d4 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8007c14:	20a7      	movs	r0, #167	; 0xa7
 8007c16:	f000 f8d1 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8007c1a:	2027      	movs	r0, #39	; 0x27
 8007c1c:	f000 f8ce 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8007c20:	2004      	movs	r0, #4
 8007c22:	f000 f8cb 	bl	8007dbc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8007c26:	202a      	movs	r0, #42	; 0x2a
 8007c28:	f000 f8bb 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f000 f8c5 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007c32:	2000      	movs	r0, #0
 8007c34:	f000 f8c2 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007c38:	2000      	movs	r0, #0
 8007c3a:	f000 f8bf 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8007c3e:	20ef      	movs	r0, #239	; 0xef
 8007c40:	f000 f8bc 	bl	8007dbc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8007c44:	202b      	movs	r0, #43	; 0x2b
 8007c46:	f000 f8ac 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	f000 f8b6 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007c50:	2000      	movs	r0, #0
 8007c52:	f000 f8b3 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8007c56:	2001      	movs	r0, #1
 8007c58:	f000 f8b0 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8007c5c:	203f      	movs	r0, #63	; 0x3f
 8007c5e:	f000 f8ad 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8007c62:	20f6      	movs	r0, #246	; 0xf6
 8007c64:	f000 f89d 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8007c68:	2001      	movs	r0, #1
 8007c6a:	f000 f8a7 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f000 f8a4 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8007c74:	2006      	movs	r0, #6
 8007c76:	f000 f8a1 	bl	8007dbc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8007c7a:	202c      	movs	r0, #44	; 0x2c
 8007c7c:	f000 f891 	bl	8007da2 <ili9341_WriteReg>
  LCD_Delay(200);
 8007c80:	20c8      	movs	r0, #200	; 0xc8
 8007c82:	f000 fed1 	bl	8008a28 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8007c86:	2026      	movs	r0, #38	; 0x26
 8007c88:	f000 f88b 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f000 f895 	bl	8007dbc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8007c92:	20e0      	movs	r0, #224	; 0xe0
 8007c94:	f000 f885 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8007c98:	200f      	movs	r0, #15
 8007c9a:	f000 f88f 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8007c9e:	2029      	movs	r0, #41	; 0x29
 8007ca0:	f000 f88c 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8007ca4:	2024      	movs	r0, #36	; 0x24
 8007ca6:	f000 f889 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007caa:	200c      	movs	r0, #12
 8007cac:	f000 f886 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8007cb0:	200e      	movs	r0, #14
 8007cb2:	f000 f883 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8007cb6:	2009      	movs	r0, #9
 8007cb8:	f000 f880 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8007cbc:	204e      	movs	r0, #78	; 0x4e
 8007cbe:	f000 f87d 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8007cc2:	2078      	movs	r0, #120	; 0x78
 8007cc4:	f000 f87a 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8007cc8:	203c      	movs	r0, #60	; 0x3c
 8007cca:	f000 f877 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8007cce:	2009      	movs	r0, #9
 8007cd0:	f000 f874 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8007cd4:	2013      	movs	r0, #19
 8007cd6:	f000 f871 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8007cda:	2005      	movs	r0, #5
 8007cdc:	f000 f86e 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8007ce0:	2017      	movs	r0, #23
 8007ce2:	f000 f86b 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8007ce6:	2011      	movs	r0, #17
 8007ce8:	f000 f868 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007cec:	2000      	movs	r0, #0
 8007cee:	f000 f865 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8007cf2:	20e1      	movs	r0, #225	; 0xe1
 8007cf4:	f000 f855 	bl	8007da2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f000 f85f 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8007cfe:	2016      	movs	r0, #22
 8007d00:	f000 f85c 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8007d04:	201b      	movs	r0, #27
 8007d06:	f000 f859 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8007d0a:	2004      	movs	r0, #4
 8007d0c:	f000 f856 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8007d10:	2011      	movs	r0, #17
 8007d12:	f000 f853 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8007d16:	2007      	movs	r0, #7
 8007d18:	f000 f850 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8007d1c:	2031      	movs	r0, #49	; 0x31
 8007d1e:	f000 f84d 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8007d22:	2033      	movs	r0, #51	; 0x33
 8007d24:	f000 f84a 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8007d28:	2042      	movs	r0, #66	; 0x42
 8007d2a:	f000 f847 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8007d2e:	2005      	movs	r0, #5
 8007d30:	f000 f844 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007d34:	200c      	movs	r0, #12
 8007d36:	f000 f841 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8007d3a:	200a      	movs	r0, #10
 8007d3c:	f000 f83e 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8007d40:	2028      	movs	r0, #40	; 0x28
 8007d42:	f000 f83b 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8007d46:	202f      	movs	r0, #47	; 0x2f
 8007d48:	f000 f838 	bl	8007dbc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8007d4c:	200f      	movs	r0, #15
 8007d4e:	f000 f835 	bl	8007dbc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8007d52:	2011      	movs	r0, #17
 8007d54:	f000 f825 	bl	8007da2 <ili9341_WriteReg>
  LCD_Delay(200);
 8007d58:	20c8      	movs	r0, #200	; 0xc8
 8007d5a:	f000 fe65 	bl	8008a28 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007d5e:	2029      	movs	r0, #41	; 0x29
 8007d60:	f000 f81f 	bl	8007da2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8007d64:	202c      	movs	r0, #44	; 0x2c
 8007d66:	f000 f81c 	bl	8007da2 <ili9341_WriteReg>
}
 8007d6a:	bf00      	nop
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8007d72:	f000 fd6b 	bl	800884c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8007d76:	2103      	movs	r1, #3
 8007d78:	20d3      	movs	r0, #211	; 0xd3
 8007d7a:	f000 f82c 	bl	8007dd6 <ili9341_ReadData>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	b29b      	uxth	r3, r3
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007d8a:	2029      	movs	r0, #41	; 0x29
 8007d8c:	f000 f809 	bl	8007da2 <ili9341_WriteReg>
}
 8007d90:	bf00      	nop
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8007d98:	2028      	movs	r0, #40	; 0x28
 8007d9a:	f000 f802 	bl	8007da2 <ili9341_WriteReg>
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	4603      	mov	r3, r0
 8007daa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fde6 	bl	8008980 <LCD_IO_WriteReg>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fdb7 	bl	800893c <LCD_IO_WriteData>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	4603      	mov	r3, r0
 8007dde:	460a      	mov	r2, r1
 8007de0:	80fb      	strh	r3, [r7, #6]
 8007de2:	4613      	mov	r3, r2
 8007de4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8007de6:	797a      	ldrb	r2, [r7, #5]
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	4611      	mov	r1, r2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 fde9 	bl	80089c4 <LCD_IO_ReadData>
 8007df2:	4603      	mov	r3, r0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8007e00:	23f0      	movs	r3, #240	; 0xf0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8007e10:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
	...

08007e20 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fa59 	bl	80082e4 <stmpe811_GetInstance>
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2bff      	cmp	r3, #255	; 0xff
 8007e3a:	d112      	bne.n	8007e62 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	f000 fa51 	bl	80082e4 <stmpe811_GetInstance>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d80a      	bhi.n	8007e62 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	88fa      	ldrh	r2, [r7, #6]
 8007e50:	b2d1      	uxtb	r1, r2
 8007e52:	4a06      	ldr	r2, [pc, #24]	; (8007e6c <stmpe811_Init+0x4c>)
 8007e54:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8007e56:	f000 fdf2 	bl	8008a3e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f807 	bl	8007e70 <stmpe811_Reset>
    }
  }
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	2000096c 	.word	0x2000096c

08007e70 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8007e7a:	88fb      	ldrh	r3, [r7, #6]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2202      	movs	r2, #2
 8007e80:	2103      	movs	r1, #3
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fde7 	bl	8008a56 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8007e88:	200a      	movs	r0, #10
 8007e8a:	f000 fe21 	bl	8008ad0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2200      	movs	r2, #0
 8007e94:	2103      	movs	r1, #3
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fddd 	bl	8008a56 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8007e9c:	2002      	movs	r0, #2
 8007e9e:	f000 fe17 	bl	8008ad0 <IOE_Delay>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8007eaa:	b590      	push	{r4, r7, lr}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8007eb4:	f000 fdc3 	bl	8008a3e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fddc 	bl	8008a7c <IOE_Read>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fdd3 	bl	8008a7c <IOE_Read>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8007eda:	4323      	orrs	r3, r4
 8007edc:	b21b      	sxth	r3, r3
 8007ede:	b29b      	uxth	r3, r3
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd90      	pop	{r4, r7, pc}

08007ee8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2109      	movs	r1, #9
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fdbd 	bl	8008a7c <IOE_Read>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	f043 0301 	orr.w	r3, r3, #1
 8007f0c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8007f0e:	88fb      	ldrh	r3, [r7, #6]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	7bfa      	ldrb	r2, [r7, #15]
 8007f14:	2109      	movs	r1, #9
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fd9d 	bl	8008a56 <IOE_Write>
}
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2109      	movs	r1, #9
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fd9f 	bl	8008a7c <IOE_Read>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	f023 0301 	bic.w	r3, r3, #1
 8007f48:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	7bfa      	ldrb	r2, [r7, #15]
 8007f50:	2109      	movs	r1, #9
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fd7f 	bl	8008a56 <IOE_Write>
    
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	460a      	mov	r2, r1
 8007f6a:	80fb      	strh	r3, [r7, #6]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	210a      	movs	r1, #10
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fd7e 	bl	8008a7c <IOE_Read>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8007f84:	7bfa      	ldrb	r2, [r7, #15]
 8007f86:	797b      	ldrb	r3, [r7, #5]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	7bfa      	ldrb	r2, [r7, #15]
 8007f92:	210a      	movs	r1, #10
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fd5e 	bl	8008a56 <IOE_Write>
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	4603      	mov	r3, r0
 8007faa:	460a      	mov	r2, r1
 8007fac:	80fb      	strh	r3, [r7, #6]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8007fb6:	88fb      	ldrh	r3, [r7, #6]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	210a      	movs	r1, #10
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fd5d 	bl	8008a7c <IOE_Read>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8007fc6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	b25a      	sxtb	r2, r3
 8007fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	b25b      	sxtb	r3, r3
 8007fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	7bfa      	ldrb	r2, [r7, #15]
 8007fde:	210a      	movs	r1, #10
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fd38 	bl	8008a56 <IOE_Write>
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	80fb      	strh	r3, [r7, #6]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	210b      	movs	r1, #11
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fd39 	bl	8008a7c <IOE_Read>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
 800800e:	797b      	ldrb	r3, [r7, #5]
 8008010:	4013      	ands	r3, r2
 8008012:	b2db      	uxtb	r3, r3
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	460a      	mov	r2, r1
 8008026:	80fb      	strh	r3, [r7, #6]
 8008028:	4613      	mov	r3, r2
 800802a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	797a      	ldrb	r2, [r7, #5]
 8008032:	210b      	movs	r1, #11
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fd0e 	bl	8008a56 <IOE_Write>
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	4603      	mov	r3, r0
 800804a:	6039      	str	r1, [r7, #0]
 800804c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2117      	movs	r1, #23
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fd0f 	bl	8008a7c <IOE_Read>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	b25b      	sxtb	r3, r3
 8008066:	43db      	mvns	r3, r3
 8008068:	b25a      	sxtb	r2, r3
 800806a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800806e:	4013      	ands	r3, r2
 8008070:	b25b      	sxtb	r3, r3
 8008072:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	7bfa      	ldrb	r2, [r7, #15]
 800807a:	2117      	movs	r1, #23
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fcea 	bl	8008a56 <IOE_Write>
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	4603      	mov	r3, r0
 8008092:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8008094:	88fb      	ldrh	r3, [r7, #6]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2104      	movs	r1, #4
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fcee 	bl	8008a7c <IOE_Read>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	f023 0304 	bic.w	r3, r3, #4
 80080aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	7bfa      	ldrb	r2, [r7, #15]
 80080b2:	2104      	movs	r1, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fcce 	bl	8008a56 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	21f0      	movs	r1, #240	; 0xf0
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff ffbf 	bl	8008042 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	7bfa      	ldrb	r2, [r7, #15]
 80080d2:	2104      	movs	r1, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fcbe 	bl	8008a56 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80080da:	88fb      	ldrh	r3, [r7, #6]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2249      	movs	r2, #73	; 0x49
 80080e0:	2120      	movs	r1, #32
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fcb7 	bl	8008a56 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80080e8:	2002      	movs	r0, #2
 80080ea:	f000 fcf1 	bl	8008ad0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2201      	movs	r2, #1
 80080f4:	2121      	movs	r1, #33	; 0x21
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fcad 	bl	8008a56 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	229a      	movs	r2, #154	; 0x9a
 8008102:	2141      	movs	r1, #65	; 0x41
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fca6 	bl	8008a56 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2201      	movs	r2, #1
 8008110:	214a      	movs	r1, #74	; 0x4a
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fc9f 	bl	8008a56 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2201      	movs	r2, #1
 800811e:	214b      	movs	r1, #75	; 0x4b
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fc98 	bl	8008a56 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2200      	movs	r2, #0
 800812c:	214b      	movs	r1, #75	; 0x4b
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fc91 	bl	8008a56 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8008134:	88fb      	ldrh	r3, [r7, #6]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2201      	movs	r2, #1
 800813a:	2156      	movs	r1, #86	; 0x56
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fc8a 	bl	8008a56 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2201      	movs	r2, #1
 8008148:	2158      	movs	r1, #88	; 0x58
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fc83 	bl	8008a56 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2201      	movs	r2, #1
 8008156:	2140      	movs	r1, #64	; 0x40
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fc7c 	bl	8008a56 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	22ff      	movs	r2, #255	; 0xff
 8008164:	210b      	movs	r1, #11
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fc75 	bl	8008a56 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800816c:	2002      	movs	r0, #2
 800816e:	f000 fcaf 	bl	8008ad0 <IOE_Delay>
}
 8008172:	bf00      	nop
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	4603      	mov	r3, r0
 8008182:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2140      	movs	r1, #64	; 0x40
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fc74 	bl	8008a7c <IOE_Read>
 8008194:	4603      	mov	r3, r0
 8008196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819a:	2b80      	cmp	r3, #128	; 0x80
 800819c:	bf0c      	ite	eq
 800819e:	2301      	moveq	r3, #1
 80081a0:	2300      	movne	r3, #0
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80081ac:	88fb      	ldrh	r3, [r7, #6]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	214c      	movs	r1, #76	; 0x4c
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fc62 	bl	8008a7c <IOE_Read>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d010      	beq.n	80081e0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80081be:	2301      	movs	r3, #1
 80081c0:	73fb      	strb	r3, [r7, #15]
 80081c2:	e00d      	b.n	80081e0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2201      	movs	r2, #1
 80081ca:	214b      	movs	r1, #75	; 0x4b
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fc42 	bl	8008a56 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2200      	movs	r2, #0
 80081d8:	214b      	movs	r1, #75	; 0x4b
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fc3b 	bl	8008a56 <IOE_Write>
  }
  
  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b086      	sub	sp, #24
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	4603      	mov	r3, r0
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
 80081f6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80081f8:	89fb      	ldrh	r3, [r7, #14]
 80081fa:	b2d8      	uxtb	r0, r3
 80081fc:	f107 0210 	add.w	r2, r7, #16
 8008200:	2304      	movs	r3, #4
 8008202:	21d7      	movs	r1, #215	; 0xd7
 8008204:	f000 fc4d 	bl	8008aa2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8008208:	7c3b      	ldrb	r3, [r7, #16]
 800820a:	061a      	lsls	r2, r3, #24
 800820c:	7c7b      	ldrb	r3, [r7, #17]
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	431a      	orrs	r2, r3
 8008212:	7cbb      	ldrb	r3, [r7, #18]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	4313      	orrs	r3, r2
 8008218:	7cfa      	ldrb	r2, [r7, #19]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	0d1b      	lsrs	r3, r3, #20
 8008222:	b29a      	uxth	r2, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	b29b      	uxth	r3, r3
 800822e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8008238:	89fb      	ldrh	r3, [r7, #14]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2201      	movs	r2, #1
 800823e:	214b      	movs	r1, #75	; 0x4b
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fc08 	bl	8008a56 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8008246:	89fb      	ldrh	r3, [r7, #14]
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2200      	movs	r2, #0
 800824c:	214b      	movs	r1, #75	; 0x4b
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fc01 	bl	8008a56 <IOE_Write>
}
 8008254:	bf00      	nop
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8008266:	f000 fbf0 	bl	8008a4a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	211f      	movs	r1, #31
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff fe76 	bl	8007f60 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff fe36 	bl	8007ee8 <stmpe811_EnableGlobalIT>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800828e:	88fb      	ldrh	r3, [r7, #6]
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff fe47 	bl	8007f24 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	211f      	movs	r1, #31
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fe81 	bl	8007fa2 <stmpe811_DisableITSource>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80082b2:	88fb      	ldrh	r3, [r7, #6]
 80082b4:	211f      	movs	r1, #31
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fe99 	bl	8007fee <stmpe811_ReadGITStatus>
 80082bc:	4603      	mov	r3, r0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	4603      	mov	r3, r0
 80082ce:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	211f      	movs	r1, #31
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fea1 	bl	800801c <stmpe811_ClearGlobalIT>
}
 80082da:	bf00      	nop
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	e00b      	b.n	8008310 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4a0a      	ldr	r2, [pc, #40]	; (8008324 <stmpe811_GetInstance+0x40>)
 80082fc:	5cd3      	ldrb	r3, [r2, r3]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	88fa      	ldrh	r2, [r7, #6]
 8008302:	429a      	cmp	r2, r3
 8008304:	d101      	bne.n	800830a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	e006      	b.n	8008318 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	3301      	adds	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d9f0      	bls.n	80082f8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8008316:	23ff      	movs	r3, #255	; 0xff
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	2000096c 	.word	0x2000096c

08008328 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	460a      	mov	r2, r1
 8008332:	71fb      	strb	r3, [r7, #7]
 8008334:	4613      	mov	r3, r2
 8008336:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10d      	bne.n	800835a <BSP_PB_Init+0x32>
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	4b22      	ldr	r3, [pc, #136]	; (80083cc <BSP_PB_Init+0xa4>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008346:	4a21      	ldr	r2, [pc, #132]	; (80083cc <BSP_PB_Init+0xa4>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6313      	str	r3, [r2, #48]	; 0x30
 800834e:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <BSP_PB_Init+0xa4>)
 8008350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	60bb      	str	r3, [r7, #8]
 8008358:	68bb      	ldr	r3, [r7, #8]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 800835a:	79bb      	ldrb	r3, [r7, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d111      	bne.n	8008384 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8008360:	2301      	movs	r3, #1
 8008362:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008364:	2300      	movs	r3, #0
 8008366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008368:	2302      	movs	r3, #2
 800836a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800836c:	2302      	movs	r3, #2
 800836e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <BSP_PB_Init+0xa8>)
 8008374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008378:	f107 020c 	add.w	r2, r7, #12
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f002 fb68 	bl	800aa54 <HAL_GPIO_Init>
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
 8008384:	79bb      	ldrb	r3, [r7, #6]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d11c      	bne.n	80083c4 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800838a:	2301      	movs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8008392:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008396:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <BSP_PB_Init+0xa8>)
 800839c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a0:	f107 020c 	add.w	r2, r7, #12
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f002 fb54 	bl	800aa54 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80083ac:	2306      	movs	r3, #6
 80083ae:	b25b      	sxtb	r3, r3
 80083b0:	2200      	movs	r2, #0
 80083b2:	210f      	movs	r1, #15
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 febd 	bl	800a134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80083ba:	2306      	movs	r3, #6
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fed4 	bl	800a16c <HAL_NVIC_EnableIRQ>
  }
}
 80083c4:	bf00      	nop
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40023800 	.word	0x40023800
 80083d0:	20000064 	.word	0x20000064

080083d4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	4a06      	ldr	r2, [pc, #24]	; (80083fc <BSP_PB_GetState+0x28>)
 80083e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e6:	2201      	movs	r2, #1
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f002 fdea 	bl	800afc4 <HAL_GPIO_ReadPin>
 80083f0:	4603      	mov	r3, r0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20000064 	.word	0x20000064

08008400 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a33      	ldr	r2, [pc, #204]	; (80084dc <I2Cx_MspInit+0xdc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d15f      	bne.n	80084d2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8008412:	2300      	movs	r3, #0
 8008414:	613b      	str	r3, [r7, #16]
 8008416:	4b32      	ldr	r3, [pc, #200]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	4a31      	ldr	r2, [pc, #196]	; (80084e0 <I2Cx_MspInit+0xe0>)
 800841c:	f043 0304 	orr.w	r3, r3, #4
 8008420:	6313      	str	r3, [r2, #48]	; 0x30
 8008422:	4b2f      	ldr	r3, [pc, #188]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	4b2b      	ldr	r3, [pc, #172]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	4a2a      	ldr	r2, [pc, #168]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	6313      	str	r3, [r2, #48]	; 0x30
 800843e:	4b28      	ldr	r3, [pc, #160]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800844a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800844e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8008450:	2312      	movs	r3, #18
 8008452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008454:	2300      	movs	r3, #0
 8008456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8008458:	2302      	movs	r3, #2
 800845a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800845c:	2304      	movs	r3, #4
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8008460:	f107 0314 	add.w	r3, r7, #20
 8008464:	4619      	mov	r1, r3
 8008466:	481f      	ldr	r0, [pc, #124]	; (80084e4 <I2Cx_MspInit+0xe4>)
 8008468:	f002 faf4 	bl	800aa54 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800846c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008470:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8008472:	f107 0314 	add.w	r3, r7, #20
 8008476:	4619      	mov	r1, r3
 8008478:	481b      	ldr	r0, [pc, #108]	; (80084e8 <I2Cx_MspInit+0xe8>)
 800847a:	f002 faeb 	bl	800aa54 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
 8008482:	4b17      	ldr	r3, [pc, #92]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	4a16      	ldr	r2, [pc, #88]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800848c:	6413      	str	r3, [r2, #64]	; 0x40
 800848e:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <I2Cx_MspInit+0xe0>)
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008496:	60bb      	str	r3, [r7, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800849a:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <I2Cx_MspInit+0xe0>)
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	4a10      	ldr	r2, [pc, #64]	; (80084e0 <I2Cx_MspInit+0xe0>)
 80084a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084a4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80084a6:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <I2Cx_MspInit+0xe0>)
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <I2Cx_MspInit+0xe0>)
 80084ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80084b0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80084b2:	2200      	movs	r2, #0
 80084b4:	210f      	movs	r1, #15
 80084b6:	2048      	movs	r0, #72	; 0x48
 80084b8:	f001 fe3c 	bl	800a134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80084bc:	2048      	movs	r0, #72	; 0x48
 80084be:	f001 fe55 	bl	800a16c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80084c2:	2200      	movs	r2, #0
 80084c4:	210f      	movs	r1, #15
 80084c6:	2049      	movs	r0, #73	; 0x49
 80084c8:	f001 fe34 	bl	800a134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80084cc:	2049      	movs	r0, #73	; 0x49
 80084ce:	f001 fe4d 	bl	800a16c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80084d2:	bf00      	nop
 80084d4:	3728      	adds	r7, #40	; 0x28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40005c00 	.word	0x40005c00
 80084e0:	40023800 	.word	0x40023800
 80084e4:	40020000 	.word	0x40020000
 80084e8:	40020800 	.word	0x40020800

080084ec <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80084f0:	4814      	ldr	r0, [pc, #80]	; (8008544 <I2Cx_Init+0x58>)
 80084f2:	f003 fa2d 	bl	800b950 <HAL_I2C_GetState>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d121      	bne.n	8008540 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <I2Cx_Init+0x58>)
 80084fe:	4a12      	ldr	r2, [pc, #72]	; (8008548 <I2Cx_Init+0x5c>)
 8008500:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8008502:	4b10      	ldr	r3, [pc, #64]	; (8008544 <I2Cx_Init+0x58>)
 8008504:	4a11      	ldr	r2, [pc, #68]	; (800854c <I2Cx_Init+0x60>)
 8008506:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8008508:	4b0e      	ldr	r3, [pc, #56]	; (8008544 <I2Cx_Init+0x58>)
 800850a:	2200      	movs	r2, #0
 800850c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800850e:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <I2Cx_Init+0x58>)
 8008510:	2200      	movs	r2, #0
 8008512:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008514:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <I2Cx_Init+0x58>)
 8008516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800851a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800851c:	4b09      	ldr	r3, [pc, #36]	; (8008544 <I2Cx_Init+0x58>)
 800851e:	2200      	movs	r2, #0
 8008520:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8008522:	4b08      	ldr	r3, [pc, #32]	; (8008544 <I2Cx_Init+0x58>)
 8008524:	2200      	movs	r2, #0
 8008526:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <I2Cx_Init+0x58>)
 800852a:	2200      	movs	r2, #0
 800852c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <I2Cx_Init+0x58>)
 8008530:	2200      	movs	r2, #0
 8008532:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8008534:	4803      	ldr	r0, [pc, #12]	; (8008544 <I2Cx_Init+0x58>)
 8008536:	f7ff ff63 	bl	8008400 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800853a:	4802      	ldr	r0, [pc, #8]	; (8008544 <I2Cx_Init+0x58>)
 800853c:	f002 fd74 	bl	800b028 <HAL_I2C_Init>
  }
}
 8008540:	bf00      	nop
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20001464 	.word	0x20001464
 8008548:	40005c00 	.word	0x40005c00
 800854c:	000186a0 	.word	0x000186a0

08008550 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8008556:	2300      	movs	r3, #0
 8008558:	603b      	str	r3, [r7, #0]
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <I2Cx_ITConfig+0x58>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	4a12      	ldr	r2, [pc, #72]	; (80085a8 <I2Cx_ITConfig+0x58>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	6313      	str	r3, [r2, #48]	; 0x30
 8008566:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <I2Cx_ITConfig+0x58>)
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8008572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8008578:	2301      	movs	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800857c:	2300      	movs	r3, #0
 800857e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8008580:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008584:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8008586:	1d3b      	adds	r3, r7, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4808      	ldr	r0, [pc, #32]	; (80085ac <I2Cx_ITConfig+0x5c>)
 800858c:	f002 fa62 	bl	800aa54 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8008590:	2200      	movs	r2, #0
 8008592:	210f      	movs	r1, #15
 8008594:	2028      	movs	r0, #40	; 0x28
 8008596:	f001 fdcd 	bl	800a134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800859a:	2028      	movs	r0, #40	; 0x28
 800859c:	f001 fde6 	bl	800a16c <HAL_NVIC_EnableIRQ>
}
 80085a0:	bf00      	nop
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40023800 	.word	0x40023800
 80085ac:	40020000 	.word	0x40020000

080085b0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]
 80085ba:	460b      	mov	r3, r1
 80085bc:	71bb      	strb	r3, [r7, #6]
 80085be:	4613      	mov	r3, r2
 80085c0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	b299      	uxth	r1, r3
 80085ca:	79bb      	ldrb	r3, [r7, #6]
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <I2Cx_WriteData+0x4c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	9302      	str	r3, [sp, #8]
 80085d4:	2301      	movs	r3, #1
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	1d7b      	adds	r3, r7, #5
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2301      	movs	r3, #1
 80085de:	4808      	ldr	r0, [pc, #32]	; (8008600 <I2Cx_WriteData+0x50>)
 80085e0:	f002 fe96 	bl	800b310 <HAL_I2C_Mem_Write>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80085ee:	f000 f863 	bl	80086b8 <I2Cx_Error>
  }        
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000068 	.word	0x20000068
 8008600:	20001464 	.word	0x20001464

08008604 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af04      	add	r7, sp, #16
 800860a:	4603      	mov	r3, r0
 800860c:	460a      	mov	r2, r1
 800860e:	71fb      	strb	r3, [r7, #7]
 8008610:	4613      	mov	r3, r2
 8008612:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	b299      	uxth	r1, r3
 8008620:	79bb      	ldrb	r3, [r7, #6]
 8008622:	b29a      	uxth	r2, r3
 8008624:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <I2Cx_ReadData+0x50>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9302      	str	r3, [sp, #8]
 800862a:	2301      	movs	r3, #1
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	f107 030e 	add.w	r3, r7, #14
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	2301      	movs	r3, #1
 8008636:	4808      	ldr	r0, [pc, #32]	; (8008658 <I2Cx_ReadData+0x54>)
 8008638:	f002 ff64 	bl	800b504 <HAL_I2C_Mem_Read>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8008646:	f000 f837 	bl	80086b8 <I2Cx_Error>
  
  }
  return value;
 800864a:	7bbb      	ldrb	r3, [r7, #14]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000068 	.word	0x20000068
 8008658:	20001464 	.word	0x20001464

0800865c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af04      	add	r7, sp, #16
 8008662:	603a      	str	r2, [r7, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	4603      	mov	r3, r0
 8008668:	71fb      	strb	r3, [r7, #7]
 800866a:	460b      	mov	r3, r1
 800866c:	71bb      	strb	r3, [r7, #6]
 800866e:	4613      	mov	r3, r2
 8008670:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	b299      	uxth	r1, r3
 800867a:	79bb      	ldrb	r3, [r7, #6]
 800867c:	b29a      	uxth	r2, r3
 800867e:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <I2Cx_ReadBuffer+0x54>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	9302      	str	r3, [sp, #8]
 8008684:	88bb      	ldrh	r3, [r7, #4]
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	2301      	movs	r3, #1
 800868e:	4809      	ldr	r0, [pc, #36]	; (80086b4 <I2Cx_ReadBuffer+0x58>)
 8008690:	f002 ff38 	bl	800b504 <HAL_I2C_Mem_Read>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	e002      	b.n	80086a8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80086a2:	f000 f809 	bl	80086b8 <I2Cx_Error>

    return 1;
 80086a6:	2301      	movs	r3, #1
  }
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20000068 	.word	0x20000068
 80086b4:	20001464 	.word	0x20001464

080086b8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80086bc:	4803      	ldr	r0, [pc, #12]	; (80086cc <I2Cx_Error+0x14>)
 80086be:	f002 fdf7 	bl	800b2b0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80086c2:	f7ff ff13 	bl	80084ec <I2Cx_Init>
}
 80086c6:	bf00      	nop
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20001464 	.word	0x20001464

080086d0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80086d4:	4819      	ldr	r0, [pc, #100]	; (800873c <SPIx_Init+0x6c>)
 80086d6:	f005 fbf0 	bl	800deba <HAL_SPI_GetState>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d12b      	bne.n	8008738 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80086e0:	4b16      	ldr	r3, [pc, #88]	; (800873c <SPIx_Init+0x6c>)
 80086e2:	4a17      	ldr	r2, [pc, #92]	; (8008740 <SPIx_Init+0x70>)
 80086e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80086e6:	4b15      	ldr	r3, [pc, #84]	; (800873c <SPIx_Init+0x6c>)
 80086e8:	2218      	movs	r2, #24
 80086ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80086ec:	4b13      	ldr	r3, [pc, #76]	; (800873c <SPIx_Init+0x6c>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80086f2:	4b12      	ldr	r3, [pc, #72]	; (800873c <SPIx_Init+0x6c>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80086f8:	4b10      	ldr	r3, [pc, #64]	; (800873c <SPIx_Init+0x6c>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <SPIx_Init+0x6c>)
 8008700:	2200      	movs	r2, #0
 8008702:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8008704:	4b0d      	ldr	r3, [pc, #52]	; (800873c <SPIx_Init+0x6c>)
 8008706:	2207      	movs	r2, #7
 8008708:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800870a:	4b0c      	ldr	r3, [pc, #48]	; (800873c <SPIx_Init+0x6c>)
 800870c:	2200      	movs	r2, #0
 800870e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8008710:	4b0a      	ldr	r3, [pc, #40]	; (800873c <SPIx_Init+0x6c>)
 8008712:	2200      	movs	r2, #0
 8008714:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <SPIx_Init+0x6c>)
 8008718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800871c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <SPIx_Init+0x6c>)
 8008720:	2200      	movs	r2, #0
 8008722:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <SPIx_Init+0x6c>)
 8008726:	f44f 7282 	mov.w	r2, #260	; 0x104
 800872a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800872c:	4803      	ldr	r0, [pc, #12]	; (800873c <SPIx_Init+0x6c>)
 800872e:	f000 f853 	bl	80087d8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8008732:	4802      	ldr	r0, [pc, #8]	; (800873c <SPIx_Init+0x6c>)
 8008734:	f004 ff21 	bl	800d57a <HAL_SPI_Init>
  } 
}
 8008738:	bf00      	nop
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20000970 	.word	0x20000970
 8008740:	40015000 	.word	0x40015000

08008744 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	b29a      	uxth	r2, r3
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <SPIx_Read+0x38>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f107 0108 	add.w	r1, r7, #8
 800875e:	4808      	ldr	r0, [pc, #32]	; (8008780 <SPIx_Read+0x3c>)
 8008760:	f005 f8f8 	bl	800d954 <HAL_SPI_Receive>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800876e:	f000 f827 	bl	80087c0 <SPIx_Error>
  }
  
  return readvalue;
 8008772:	68bb      	ldr	r3, [r7, #8]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	2000006c 	.word	0x2000006c
 8008780:	20000970 	.word	0x20000970

08008784 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8008792:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <SPIx_Write+0x34>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	1db9      	adds	r1, r7, #6
 8008798:	2201      	movs	r2, #1
 800879a:	4808      	ldr	r0, [pc, #32]	; (80087bc <SPIx_Write+0x38>)
 800879c:	f004 ff9e 	bl	800d6dc <HAL_SPI_Transmit>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80087aa:	f000 f809 	bl	80087c0 <SPIx_Error>
  }
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	2000006c 	.word	0x2000006c
 80087bc:	20000970 	.word	0x20000970

080087c0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80087c4:	4803      	ldr	r0, [pc, #12]	; (80087d4 <SPIx_Error+0x14>)
 80087c6:	f004 ff61 	bl	800d68c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80087ca:	f7ff ff81 	bl	80086d0 <SPIx_Init>
}
 80087ce:	bf00      	nop
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000970 	.word	0x20000970

080087d8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08a      	sub	sp, #40	; 0x28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <SPIx_MspInit+0x6c>)
 80087e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e8:	4a16      	ldr	r2, [pc, #88]	; (8008844 <SPIx_MspInit+0x6c>)
 80087ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ee:	6453      	str	r3, [r2, #68]	; 0x44
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <SPIx_MspInit+0x6c>)
 80087f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f8:	613b      	str	r3, [r7, #16]
 80087fa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	4b10      	ldr	r3, [pc, #64]	; (8008844 <SPIx_MspInit+0x6c>)
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	4a0f      	ldr	r2, [pc, #60]	; (8008844 <SPIx_MspInit+0x6c>)
 8008806:	f043 0320 	orr.w	r3, r3, #32
 800880a:	6313      	str	r3, [r2, #48]	; 0x30
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <SPIx_MspInit+0x6c>)
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	f003 0320 	and.w	r3, r3, #32
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8008818:	f44f 7360 	mov.w	r3, #896	; 0x380
 800881c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800881e:	2302      	movs	r3, #2
 8008820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8008822:	2302      	movs	r3, #2
 8008824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8008826:	2301      	movs	r3, #1
 8008828:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800882a:	2305      	movs	r3, #5
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800882e:	f107 0314 	add.w	r3, r7, #20
 8008832:	4619      	mov	r1, r3
 8008834:	4804      	ldr	r0, [pc, #16]	; (8008848 <SPIx_MspInit+0x70>)
 8008836:	f002 f90d 	bl	800aa54 <HAL_GPIO_Init>
}
 800883a:	bf00      	nop
 800883c:	3728      	adds	r7, #40	; 0x28
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40023800 	.word	0x40023800
 8008848:	40021400 	.word	0x40021400

0800884c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8008852:	4b36      	ldr	r3, [pc, #216]	; (800892c <LCD_IO_Init+0xe0>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d164      	bne.n	8008924 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800885a:	4b34      	ldr	r3, [pc, #208]	; (800892c <LCD_IO_Init+0xe0>)
 800885c:	2201      	movs	r2, #1
 800885e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8008860:	2300      	movs	r3, #0
 8008862:	60bb      	str	r3, [r7, #8]
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <LCD_IO_Init+0xe4>)
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	4a31      	ldr	r2, [pc, #196]	; (8008930 <LCD_IO_Init+0xe4>)
 800886a:	f043 0308 	orr.w	r3, r3, #8
 800886e:	6313      	str	r3, [r2, #48]	; 0x30
 8008870:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <LCD_IO_Init+0xe4>)
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800887c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008880:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8008882:	2301      	movs	r3, #1
 8008884:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800888a:	2302      	movs	r3, #2
 800888c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800888e:	f107 030c 	add.w	r3, r7, #12
 8008892:	4619      	mov	r1, r3
 8008894:	4827      	ldr	r0, [pc, #156]	; (8008934 <LCD_IO_Init+0xe8>)
 8008896:	f002 f8dd 	bl	800aa54 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	4b24      	ldr	r3, [pc, #144]	; (8008930 <LCD_IO_Init+0xe4>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	4a23      	ldr	r2, [pc, #140]	; (8008930 <LCD_IO_Init+0xe4>)
 80088a4:	f043 0308 	orr.w	r3, r3, #8
 80088a8:	6313      	str	r3, [r2, #48]	; 0x30
 80088aa:	4b21      	ldr	r3, [pc, #132]	; (8008930 <LCD_IO_Init+0xe4>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80088b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80088bc:	2301      	movs	r3, #1
 80088be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80088c0:	2300      	movs	r3, #0
 80088c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80088c4:	2302      	movs	r3, #2
 80088c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80088c8:	f107 030c 	add.w	r3, r7, #12
 80088cc:	4619      	mov	r1, r3
 80088ce:	4819      	ldr	r0, [pc, #100]	; (8008934 <LCD_IO_Init+0xe8>)
 80088d0:	f002 f8c0 	bl	800aa54 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80088d4:	2300      	movs	r3, #0
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	4b15      	ldr	r3, [pc, #84]	; (8008930 <LCD_IO_Init+0xe4>)
 80088da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088dc:	4a14      	ldr	r2, [pc, #80]	; (8008930 <LCD_IO_Init+0xe4>)
 80088de:	f043 0304 	orr.w	r3, r3, #4
 80088e2:	6313      	str	r3, [r2, #48]	; 0x30
 80088e4:	4b12      	ldr	r3, [pc, #72]	; (8008930 <LCD_IO_Init+0xe4>)
 80088e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	603b      	str	r3, [r7, #0]
 80088ee:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80088f0:	2304      	movs	r3, #4
 80088f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80088f4:	2301      	movs	r3, #1
 80088f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80088fc:	2302      	movs	r3, #2
 80088fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8008900:	f107 030c 	add.w	r3, r7, #12
 8008904:	4619      	mov	r1, r3
 8008906:	480c      	ldr	r0, [pc, #48]	; (8008938 <LCD_IO_Init+0xec>)
 8008908:	f002 f8a4 	bl	800aa54 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800890c:	2200      	movs	r2, #0
 800890e:	2104      	movs	r1, #4
 8008910:	4809      	ldr	r0, [pc, #36]	; (8008938 <LCD_IO_Init+0xec>)
 8008912:	f002 fb6f 	bl	800aff4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8008916:	2201      	movs	r2, #1
 8008918:	2104      	movs	r1, #4
 800891a:	4807      	ldr	r0, [pc, #28]	; (8008938 <LCD_IO_Init+0xec>)
 800891c:	f002 fb6a 	bl	800aff4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8008920:	f7ff fed6 	bl	80086d0 <SPIx_Init>
  }
}
 8008924:	bf00      	nop
 8008926:	3720      	adds	r7, #32
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	200009c8 	.word	0x200009c8
 8008930:	40023800 	.word	0x40023800
 8008934:	40020c00 	.word	0x40020c00
 8008938:	40020800 	.word	0x40020800

0800893c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008946:	2201      	movs	r2, #1
 8008948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800894c:	480a      	ldr	r0, [pc, #40]	; (8008978 <LCD_IO_WriteData+0x3c>)
 800894e:	f002 fb51 	bl	800aff4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8008952:	2200      	movs	r2, #0
 8008954:	2104      	movs	r1, #4
 8008956:	4809      	ldr	r0, [pc, #36]	; (800897c <LCD_IO_WriteData+0x40>)
 8008958:	f002 fb4c 	bl	800aff4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800895c:	88fb      	ldrh	r3, [r7, #6]
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff ff10 	bl	8008784 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008964:	2201      	movs	r2, #1
 8008966:	2104      	movs	r1, #4
 8008968:	4804      	ldr	r0, [pc, #16]	; (800897c <LCD_IO_WriteData+0x40>)
 800896a:	f002 fb43 	bl	800aff4 <HAL_GPIO_WritePin>
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	40020c00 	.word	0x40020c00
 800897c:	40020800 	.word	0x40020800

08008980 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800898a:	2200      	movs	r2, #0
 800898c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008990:	480a      	ldr	r0, [pc, #40]	; (80089bc <LCD_IO_WriteReg+0x3c>)
 8008992:	f002 fb2f 	bl	800aff4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8008996:	2200      	movs	r2, #0
 8008998:	2104      	movs	r1, #4
 800899a:	4809      	ldr	r0, [pc, #36]	; (80089c0 <LCD_IO_WriteReg+0x40>)
 800899c:	f002 fb2a 	bl	800aff4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff feed 	bl	8008784 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80089aa:	2201      	movs	r2, #1
 80089ac:	2104      	movs	r1, #4
 80089ae:	4804      	ldr	r0, [pc, #16]	; (80089c0 <LCD_IO_WriteReg+0x40>)
 80089b0:	f002 fb20 	bl	800aff4 <HAL_GPIO_WritePin>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40020c00 	.word	0x40020c00
 80089c0:	40020800 	.word	0x40020800

080089c4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	460a      	mov	r2, r1
 80089ce:	80fb      	strh	r3, [r7, #6]
 80089d0:	4613      	mov	r3, r2
 80089d2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80089d8:	2200      	movs	r2, #0
 80089da:	2104      	movs	r1, #4
 80089dc:	4810      	ldr	r0, [pc, #64]	; (8008a20 <LCD_IO_ReadData+0x5c>)
 80089de:	f002 fb09 	bl	800aff4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80089e2:	2200      	movs	r2, #0
 80089e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089e8:	480e      	ldr	r0, [pc, #56]	; (8008a24 <LCD_IO_ReadData+0x60>)
 80089ea:	f002 fb03 	bl	800aff4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff fec7 	bl	8008784 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80089f6:	797b      	ldrb	r3, [r7, #5]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fea3 	bl	8008744 <SPIx_Read>
 80089fe:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8008a00:	2201      	movs	r2, #1
 8008a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008a06:	4807      	ldr	r0, [pc, #28]	; (8008a24 <LCD_IO_ReadData+0x60>)
 8008a08:	f002 faf4 	bl	800aff4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	2104      	movs	r1, #4
 8008a10:	4803      	ldr	r0, [pc, #12]	; (8008a20 <LCD_IO_ReadData+0x5c>)
 8008a12:	f002 faef 	bl	800aff4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8008a16:	68fb      	ldr	r3, [r7, #12]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	40020800 	.word	0x40020800
 8008a24:	40020c00 	.word	0x40020c00

08008a28 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 faa3 	bl	8009f7c <HAL_Delay>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8008a42:	f7ff fd53 	bl	80084ec <I2Cx_Init>
}
 8008a46:	bf00      	nop
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8008a4e:	f7ff fd7f 	bl	8008550 <I2Cx_ITConfig>
}
 8008a52:	bf00      	nop
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	71fb      	strb	r3, [r7, #7]
 8008a60:	460b      	mov	r3, r1
 8008a62:	71bb      	strb	r3, [r7, #6]
 8008a64:	4613      	mov	r3, r2
 8008a66:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8008a68:	797a      	ldrb	r2, [r7, #5]
 8008a6a:	79b9      	ldrb	r1, [r7, #6]
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff fd9e 	bl	80085b0 <I2Cx_WriteData>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	460a      	mov	r2, r1
 8008a86:	71fb      	strb	r3, [r7, #7]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8008a8c:	79ba      	ldrb	r2, [r7, #6]
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fdb6 	bl	8008604 <I2Cx_ReadData>
 8008a98:	4603      	mov	r3, r0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	603a      	str	r2, [r7, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	4603      	mov	r3, r0
 8008aae:	71fb      	strb	r3, [r7, #7]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	71bb      	strb	r3, [r7, #6]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8008ab8:	88bb      	ldrh	r3, [r7, #4]
 8008aba:	79b9      	ldrb	r1, [r7, #6]
 8008abc:	79f8      	ldrb	r0, [r7, #7]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	f7ff fdcc 	bl	800865c <I2Cx_ReadBuffer>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	b29b      	uxth	r3, r3
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fa4f 	bl	8009f7c <HAL_Delay>
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8008aec:	4b2d      	ldr	r3, [pc, #180]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008aee:	4a2e      	ldr	r2, [pc, #184]	; (8008ba8 <BSP_LCD_Init+0xc0>)
 8008af0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8008af2:	4b2c      	ldr	r3, [pc, #176]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008af4:	2209      	movs	r2, #9
 8008af6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8008af8:	4b2a      	ldr	r3, [pc, #168]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008afa:	2201      	movs	r2, #1
 8008afc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8008afe:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b00:	221d      	movs	r2, #29
 8008b02:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b06:	2203      	movs	r2, #3
 8008b08:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8008b0a:	4b26      	ldr	r3, [pc, #152]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b0c:	f240 120d 	movw	r2, #269	; 0x10d
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8008b12:	4b24      	ldr	r3, [pc, #144]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b14:	f240 1243 	movw	r2, #323	; 0x143
 8008b18:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8008b1a:	4b22      	ldr	r3, [pc, #136]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b1c:	f240 1217 	movw	r2, #279	; 0x117
 8008b20:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8008b22:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b24:	f240 1247 	movw	r2, #327	; 0x147
 8008b28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8008b2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8008b32:	4b1c      	ldr	r3, [pc, #112]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8008b3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008b42:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <BSP_LCD_Init+0xc4>)
 8008b44:	2208      	movs	r2, #8
 8008b46:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8008b48:	4b18      	ldr	r3, [pc, #96]	; (8008bac <BSP_LCD_Init+0xc4>)
 8008b4a:	22c0      	movs	r2, #192	; 0xc0
 8008b4c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8008b4e:	4b17      	ldr	r3, [pc, #92]	; (8008bac <BSP_LCD_Init+0xc4>)
 8008b50:	2204      	movs	r2, #4
 8008b52:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8008b54:	4b15      	ldr	r3, [pc, #84]	; (8008bac <BSP_LCD_Init+0xc4>)
 8008b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b5a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8008b5c:	4813      	ldr	r0, [pc, #76]	; (8008bac <BSP_LCD_Init+0xc4>)
 8008b5e:	f004 facf 	bl	800d100 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008b62:	4b10      	ldr	r3, [pc, #64]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008b74:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8008b7a:	f000 fd19 	bl	80095b0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8008b7e:	4809      	ldr	r0, [pc, #36]	; (8008ba4 <BSP_LCD_Init+0xbc>)
 8008b80:	f003 faca 	bl	800c118 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8008b84:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <BSP_LCD_Init+0xc8>)
 8008b86:	4a0b      	ldr	r2, [pc, #44]	; (8008bb4 <BSP_LCD_Init+0xcc>)
 8008b88:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8008b8a:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <BSP_LCD_Init+0xc8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8008b92:	f000 fefb 	bl	800998c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008b96:	4808      	ldr	r0, [pc, #32]	; (8008bb8 <BSP_LCD_Init+0xd0>)
 8008b98:	f000 f920 	bl	8008ddc <BSP_LCD_SetFont>

  return LCD_OK;
 8008b9c:	2300      	movs	r3, #0
}  
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200014b8 	.word	0x200014b8
 8008ba8:	40016800 	.word	0x40016800
 8008bac:	20000a0c 	.word	0x20000a0c
 8008bb0:	20001560 	.word	0x20001560
 8008bb4:	20000004 	.word	0x20000004
 8008bb8:	20000070 	.word	0x20000070

08008bbc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8008bc0:	4b03      	ldr	r3, [pc, #12]	; (8008bd0 <BSP_LCD_GetXSize+0x14>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	4798      	blx	r3
 8008bc8:	4603      	mov	r3, r0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20001560 	.word	0x20001560

08008bd4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8008bd8:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <BSP_LCD_GetYSize+0x14>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	4798      	blx	r3
 8008be0:	4603      	mov	r3, r0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20001560 	.word	0x20001560

08008bec <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b090      	sub	sp, #64	; 0x40
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8008bfc:	f7ff ffde 	bl	8008bbc <BSP_LCD_GetXSize>
 8008c00:	4603      	mov	r3, r0
 8008c02:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8008c08:	f7ff ffe4 	bl	8008bd4 <BSP_LCD_GetYSize>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8008c18:	23ff      	movs	r3, #255	; 0xff
 8008c1a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008c32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008c38:	2307      	movs	r3, #7
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8008c3c:	f7ff ffbe 	bl	8008bbc <BSP_LCD_GetXSize>
 8008c40:	4603      	mov	r3, r0
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8008c44:	f7ff ffc6 	bl	8008bd4 <BSP_LCD_GetYSize>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8008c4c:	88fa      	ldrh	r2, [r7, #6]
 8008c4e:	f107 030c 	add.w	r3, r7, #12
 8008c52:	4619      	mov	r1, r3
 8008c54:	4814      	ldr	r0, [pc, #80]	; (8008ca8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8008c56:	f003 fb2f 	bl	800c2b8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	4913      	ldr	r1, [pc, #76]	; (8008cac <BSP_LCD_LayerDefaultInit+0xc0>)
 8008c5e:	4613      	mov	r3, r2
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	3304      	adds	r3, #4
 8008c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	490e      	ldr	r1, [pc, #56]	; (8008cac <BSP_LCD_LayerDefaultInit+0xc0>)
 8008c74:	4613      	mov	r3, r2
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3308      	adds	r3, #8
 8008c80:	4a0b      	ldr	r2, [pc, #44]	; (8008cb0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8008c82:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8008c84:	88fa      	ldrh	r2, [r7, #6]
 8008c86:	4909      	ldr	r1, [pc, #36]	; (8008cac <BSP_LCD_LayerDefaultInit+0xc0>)
 8008c88:	4613      	mov	r3, r2
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8008c96:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8008c98:	4803      	ldr	r0, [pc, #12]	; (8008ca8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8008c9a:	f003 fbc9 	bl	800c430 <HAL_LTDC_EnableDither>
}
 8008c9e:	bf00      	nop
 8008ca0:	3740      	adds	r7, #64	; 0x40
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	200014b8 	.word	0x200014b8
 8008cac:	20000a40 	.word	0x20000a40
 8008cb0:	20000070 	.word	0x20000070

08008cb4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8008cbc:	4a04      	ldr	r2, [pc, #16]	; (8008cd0 <BSP_LCD_SelectLayer+0x1c>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6013      	str	r3, [r2, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20000a3c 	.word	0x20000a3c

08008cd4 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d112      	bne.n	8008d0c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8008ce6:	4b19      	ldr	r3, [pc, #100]	; (8008d4c <BSP_LCD_SetLayerVisible+0x78>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	01db      	lsls	r3, r3, #7
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3384      	adds	r3, #132	; 0x84
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <BSP_LCD_SetLayerVisible+0x78>)
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	01d2      	lsls	r2, r2, #7
 8008d00:	440a      	add	r2, r1
 8008d02:	3284      	adds	r2, #132	; 0x84
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	e011      	b.n	8008d30 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8008d0c:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <BSP_LCD_SetLayerVisible+0x78>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	01db      	lsls	r3, r3, #7
 8008d16:	4413      	add	r3, r2
 8008d18:	3384      	adds	r3, #132	; 0x84
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <BSP_LCD_SetLayerVisible+0x78>)
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	4611      	mov	r1, r2
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	01d2      	lsls	r2, r2, #7
 8008d26:	440a      	add	r2, r1
 8008d28:	3284      	adds	r2, #132	; 0x84
 8008d2a:	f023 0301 	bic.w	r3, r3, #1
 8008d2e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <BSP_LCD_SetLayerVisible+0x78>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <BSP_LCD_SetLayerVisible+0x78>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	200014b8 	.word	0x200014b8

08008d50 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	4805      	ldr	r0, [pc, #20]	; (8008d74 <BSP_LCD_SetColorKeying+0x24>)
 8008d60:	f003 fae8 	bl	800c334 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	4803      	ldr	r0, [pc, #12]	; (8008d74 <BSP_LCD_SetColorKeying+0x24>)
 8008d68:	f003 fb28 	bl	800c3bc <HAL_LTDC_EnableColorKeying>
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	200014b8 	.word	0x200014b8

08008d78 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8008d80:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <BSP_LCD_SetTextColor+0x28>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4907      	ldr	r1, [pc, #28]	; (8008da4 <BSP_LCD_SetTextColor+0x2c>)
 8008d86:	4613      	mov	r3, r2
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	440b      	add	r3, r1
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000a3c 	.word	0x20000a3c
 8008da4:	20000a40 	.word	0x20000a40

08008da8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8008db0:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <BSP_LCD_SetBackColor+0x2c>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4908      	ldr	r1, [pc, #32]	; (8008dd8 <BSP_LCD_SetBackColor+0x30>)
 8008db6:	4613      	mov	r3, r2
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000a3c 	.word	0x20000a3c
 8008dd8:	20000a40 	.word	0x20000a40

08008ddc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8008de4:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <BSP_LCD_SetFont+0x2c>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	4908      	ldr	r1, [pc, #32]	; (8008e0c <BSP_LCD_SetFont+0x30>)
 8008dea:	4613      	mov	r3, r2
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3308      	adds	r3, #8
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000a3c 	.word	0x20000a3c
 8008e0c:	20000a40 	.word	0x20000a40

08008e10 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8008e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <BSP_LCD_Clear+0x48>)
 8008e1a:	681c      	ldr	r4, [r3, #0]
 8008e1c:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <BSP_LCD_Clear+0x48>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a0e      	ldr	r2, [pc, #56]	; (8008e5c <BSP_LCD_Clear+0x4c>)
 8008e22:	2134      	movs	r1, #52	; 0x34
 8008e24:	fb01 f303 	mul.w	r3, r1, r3
 8008e28:	4413      	add	r3, r2
 8008e2a:	335c      	adds	r3, #92	; 0x5c
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	461e      	mov	r6, r3
 8008e30:	f7ff fec4 	bl	8008bbc <BSP_LCD_GetXSize>
 8008e34:	4605      	mov	r5, r0
 8008e36:	f7ff fecd 	bl	8008bd4 <BSP_LCD_GetYSize>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	2300      	movs	r3, #0
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	4613      	mov	r3, r2
 8008e46:	462a      	mov	r2, r5
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 fd66 	bl	800991c <FillBuffer>
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e58:	20000a3c 	.word	0x20000a3c
 8008e5c:	200014b8 	.word	0x200014b8

08008e60 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	80fb      	strh	r3, [r7, #6]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	80bb      	strh	r3, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <BSP_LCD_DisplayChar+0x80>)
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	491b      	ldr	r1, [pc, #108]	; (8008ee4 <BSP_LCD_DisplayChar+0x84>)
 8008e78:	4613      	mov	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	3308      	adds	r3, #8
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6819      	ldr	r1, [r3, #0]
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <BSP_LCD_DisplayChar+0x80>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	4c14      	ldr	r4, [pc, #80]	; (8008ee4 <BSP_LCD_DisplayChar+0x84>)
 8008e94:	4613      	mov	r3, r2
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4423      	add	r3, r4
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008ea4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <BSP_LCD_DisplayChar+0x80>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	4c0d      	ldr	r4, [pc, #52]	; (8008ee4 <BSP_LCD_DisplayChar+0x84>)
 8008eae:	4613      	mov	r3, r2
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4423      	add	r3, r4
 8008eb8:	3308      	adds	r3, #8
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	889b      	ldrh	r3, [r3, #4]
 8008ebe:	3307      	adds	r3, #7
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	da00      	bge.n	8008ec6 <BSP_LCD_DisplayChar+0x66>
 8008ec4:	3307      	adds	r3, #7
 8008ec6:	10db      	asrs	r3, r3, #3
 8008ec8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008ecc:	18ca      	adds	r2, r1, r3
 8008ece:	88b9      	ldrh	r1, [r7, #4]
 8008ed0:	88fb      	ldrh	r3, [r7, #6]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fc68 	bl	80097a8 <DrawChar>
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}
 8008ee0:	20000a3c 	.word	0x20000a3c
 8008ee4:	20000a40 	.word	0x20000a40

08008ee8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8008ee8:	b5b0      	push	{r4, r5, r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60ba      	str	r2, [r7, #8]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	81fb      	strh	r3, [r7, #14]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	81bb      	strh	r3, [r7, #12]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8008efe:	2301      	movs	r3, #1
 8008f00:	83fb      	strh	r3, [r7, #30]
 8008f02:	2300      	movs	r3, #0
 8008f04:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8008f06:	2300      	movs	r3, #0
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8008f12:	e002      	b.n	8008f1a <BSP_LCD_DisplayStringAt+0x32>
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	3301      	adds	r3, #1
 8008f18:	61bb      	str	r3, [r7, #24]
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	617a      	str	r2, [r7, #20]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f6      	bne.n	8008f14 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008f26:	f7ff fe49 	bl	8008bbc <BSP_LCD_GetXSize>
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	4b4b      	ldr	r3, [pc, #300]	; (800905c <BSP_LCD_DisplayStringAt+0x174>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	484b      	ldr	r0, [pc, #300]	; (8009060 <BSP_LCD_DisplayStringAt+0x178>)
 8008f32:	4613      	mov	r3, r2
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4403      	add	r3, r0
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	889b      	ldrh	r3, [r3, #4]
 8008f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f46:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d01c      	beq.n	8008f88 <BSP_LCD_DisplayStringAt+0xa0>
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	dc33      	bgt.n	8008fba <BSP_LCD_DisplayStringAt+0xd2>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d002      	beq.n	8008f5c <BSP_LCD_DisplayStringAt+0x74>
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d019      	beq.n	8008f8e <BSP_LCD_DisplayStringAt+0xa6>
 8008f5a:	e02e      	b.n	8008fba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	1ad1      	subs	r1, r2, r3
 8008f62:	4b3e      	ldr	r3, [pc, #248]	; (800905c <BSP_LCD_DisplayStringAt+0x174>)
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	483e      	ldr	r0, [pc, #248]	; (8009060 <BSP_LCD_DisplayStringAt+0x178>)
 8008f68:	4613      	mov	r3, r2
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4403      	add	r3, r0
 8008f72:	3308      	adds	r3, #8
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	889b      	ldrh	r3, [r3, #4]
 8008f78:	fb03 f301 	mul.w	r3, r3, r1
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	89fb      	ldrh	r3, [r7, #14]
 8008f82:	4413      	add	r3, r2
 8008f84:	83fb      	strh	r3, [r7, #30]
      break;
 8008f86:	e01b      	b.n	8008fc0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8008f88:	89fb      	ldrh	r3, [r7, #14]
 8008f8a:	83fb      	strh	r3, [r7, #30]
      break;
 8008f8c:	e018      	b.n	8008fc0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	b299      	uxth	r1, r3
 8008f96:	4b31      	ldr	r3, [pc, #196]	; (800905c <BSP_LCD_DisplayStringAt+0x174>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4831      	ldr	r0, [pc, #196]	; (8009060 <BSP_LCD_DisplayStringAt+0x178>)
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4403      	add	r3, r0
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	889b      	ldrh	r3, [r3, #4]
 8008fac:	fb11 f303 	smulbb	r3, r1, r3
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	83fb      	strh	r3, [r7, #30]
      break;
 8008fb8:	e002      	b.n	8008fc0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8008fba:	89fb      	ldrh	r3, [r7, #14]
 8008fbc:	83fb      	strh	r3, [r7, #30]
      break;
 8008fbe:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008fc0:	e01a      	b.n	8008ff8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	781a      	ldrb	r2, [r3, #0]
 8008fc6:	89b9      	ldrh	r1, [r7, #12]
 8008fc8:	8bfb      	ldrh	r3, [r7, #30]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff ff48 	bl	8008e60 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8008fd0:	4b22      	ldr	r3, [pc, #136]	; (800905c <BSP_LCD_DisplayStringAt+0x174>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	4922      	ldr	r1, [pc, #136]	; (8009060 <BSP_LCD_DisplayStringAt+0x178>)
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	889a      	ldrh	r2, [r3, #4]
 8008fe6:	8bfb      	ldrh	r3, [r7, #30]
 8008fe8:	4413      	add	r3, r2
 8008fea:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	60bb      	str	r3, [r7, #8]
    i++;
 8008ff2:	8bbb      	ldrh	r3, [r7, #28]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2dc      	uxtb	r4, r3
 8009006:	f7ff fdd9 	bl	8008bbc <BSP_LCD_GetXSize>
 800900a:	8bb9      	ldrh	r1, [r7, #28]
 800900c:	4b13      	ldr	r3, [pc, #76]	; (800905c <BSP_LCD_DisplayStringAt+0x174>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	4d13      	ldr	r5, [pc, #76]	; (8009060 <BSP_LCD_DisplayStringAt+0x178>)
 8009012:	4613      	mov	r3, r2
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	442b      	add	r3, r5
 800901c:	3308      	adds	r3, #8
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	889b      	ldrh	r3, [r3, #4]
 8009022:	fb03 f301 	mul.w	r3, r3, r1
 8009026:	1ac3      	subs	r3, r0, r3
 8009028:	b299      	uxth	r1, r3
 800902a:	4b0c      	ldr	r3, [pc, #48]	; (800905c <BSP_LCD_DisplayStringAt+0x174>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	480c      	ldr	r0, [pc, #48]	; (8009060 <BSP_LCD_DisplayStringAt+0x178>)
 8009030:	4613      	mov	r3, r2
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4403      	add	r3, r0
 800903a:	3308      	adds	r3, #8
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	889b      	ldrh	r3, [r3, #4]
 8009040:	4299      	cmp	r1, r3
 8009042:	bf2c      	ite	cs
 8009044:	2301      	movcs	r3, #1
 8009046:	2300      	movcc	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	4023      	ands	r3, r4
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1b7      	bne.n	8008fc2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	3720      	adds	r7, #32
 8009058:	46bd      	mov	sp, r7
 800905a:	bdb0      	pop	{r4, r5, r7, pc}
 800905c:	20000a3c 	.word	0x20000a3c
 8009060:	20000a40 	.word	0x20000a40

08009064 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8009064:	b5b0      	push	{r4, r5, r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af02      	add	r7, sp, #8
 800906a:	4603      	mov	r3, r0
 800906c:	80fb      	strh	r3, [r7, #6]
 800906e:	460b      	mov	r3, r1
 8009070:	80bb      	strh	r3, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800907a:	4b16      	ldr	r3, [pc, #88]	; (80090d4 <BSP_LCD_DrawHLine+0x70>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a16      	ldr	r2, [pc, #88]	; (80090d8 <BSP_LCD_DrawHLine+0x74>)
 8009080:	2134      	movs	r1, #52	; 0x34
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	4413      	add	r3, r2
 8009088:	335c      	adds	r3, #92	; 0x5c
 800908a:	681c      	ldr	r4, [r3, #0]
 800908c:	f7ff fd96 	bl	8008bbc <BSP_LCD_GetXSize>
 8009090:	4602      	mov	r2, r0
 8009092:	88bb      	ldrh	r3, [r7, #4]
 8009094:	fb03 f202 	mul.w	r2, r3, r2
 8009098:	88fb      	ldrh	r3, [r7, #6]
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4423      	add	r3, r4
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80090a2:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <BSP_LCD_DrawHLine+0x70>)
 80090a4:	6818      	ldr	r0, [r3, #0]
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	887c      	ldrh	r4, [r7, #2]
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <BSP_LCD_DrawHLine+0x70>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4d0b      	ldr	r5, [pc, #44]	; (80090dc <BSP_LCD_DrawHLine+0x78>)
 80090b0:	4613      	mov	r3, r2
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	442b      	add	r3, r5
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	2300      	movs	r3, #0
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	2301      	movs	r3, #1
 80090c4:	4622      	mov	r2, r4
 80090c6:	f000 fc29 	bl	800991c <FillBuffer>
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bdb0      	pop	{r4, r5, r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20000a3c 	.word	0x20000a3c
 80090d8:	200014b8 	.word	0x200014b8
 80090dc:	20000a40 	.word	0x20000a40

080090e0 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80090e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	4603      	mov	r3, r0
 80090e8:	80fb      	strh	r3, [r7, #6]
 80090ea:	460b      	mov	r3, r1
 80090ec:	80bb      	strh	r3, [r7, #4]
 80090ee:	4613      	mov	r3, r2
 80090f0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80090f6:	4b18      	ldr	r3, [pc, #96]	; (8009158 <BSP_LCD_DrawVLine+0x78>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a18      	ldr	r2, [pc, #96]	; (800915c <BSP_LCD_DrawVLine+0x7c>)
 80090fc:	2134      	movs	r1, #52	; 0x34
 80090fe:	fb01 f303 	mul.w	r3, r1, r3
 8009102:	4413      	add	r3, r2
 8009104:	335c      	adds	r3, #92	; 0x5c
 8009106:	681c      	ldr	r4, [r3, #0]
 8009108:	f7ff fd58 	bl	8008bbc <BSP_LCD_GetXSize>
 800910c:	4602      	mov	r2, r0
 800910e:	88bb      	ldrh	r3, [r7, #4]
 8009110:	fb03 f202 	mul.w	r2, r3, r2
 8009114:	88fb      	ldrh	r3, [r7, #6]
 8009116:	4413      	add	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4423      	add	r3, r4
 800911c:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800911e:	4b0e      	ldr	r3, [pc, #56]	; (8009158 <BSP_LCD_DrawVLine+0x78>)
 8009120:	681c      	ldr	r4, [r3, #0]
 8009122:	68fd      	ldr	r5, [r7, #12]
 8009124:	887e      	ldrh	r6, [r7, #2]
 8009126:	f7ff fd49 	bl	8008bbc <BSP_LCD_GetXSize>
 800912a:	4603      	mov	r3, r0
 800912c:	1e59      	subs	r1, r3, #1
 800912e:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <BSP_LCD_DrawVLine+0x78>)
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	480b      	ldr	r0, [pc, #44]	; (8009160 <BSP_LCD_DrawVLine+0x80>)
 8009134:	4613      	mov	r3, r2
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4403      	add	r3, r0
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	9100      	str	r1, [sp, #0]
 8009144:	4633      	mov	r3, r6
 8009146:	2201      	movs	r2, #1
 8009148:	4629      	mov	r1, r5
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fbe6 	bl	800991c <FillBuffer>
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009158:	20000a3c 	.word	0x20000a3c
 800915c:	200014b8 	.word	0x200014b8
 8009160:	20000a40 	.word	0x20000a40

08009164 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8009164:	b590      	push	{r4, r7, lr}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	4611      	mov	r1, r2
 8009170:	461a      	mov	r2, r3
 8009172:	4623      	mov	r3, r4
 8009174:	80fb      	strh	r3, [r7, #6]
 8009176:	4603      	mov	r3, r0
 8009178:	80bb      	strh	r3, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	807b      	strh	r3, [r7, #2]
 800917e:	4613      	mov	r3, r2
 8009180:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8009182:	887a      	ldrh	r2, [r7, #2]
 8009184:	88b9      	ldrh	r1, [r7, #4]
 8009186:	88fb      	ldrh	r3, [r7, #6]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff ff6b 	bl	8009064 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800918e:	88ba      	ldrh	r2, [r7, #4]
 8009190:	883b      	ldrh	r3, [r7, #0]
 8009192:	4413      	add	r3, r2
 8009194:	b299      	uxth	r1, r3
 8009196:	887a      	ldrh	r2, [r7, #2]
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff ff62 	bl	8009064 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80091a0:	883a      	ldrh	r2, [r7, #0]
 80091a2:	88b9      	ldrh	r1, [r7, #4]
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff ff9a 	bl	80090e0 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	887b      	ldrh	r3, [r7, #2]
 80091b0:	4413      	add	r3, r2
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	883a      	ldrh	r2, [r7, #0]
 80091b6:	88b9      	ldrh	r1, [r7, #4]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff ff91 	bl	80090e0 <BSP_LCD_DrawVLine>
}
 80091be:	bf00      	nop
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd90      	pop	{r4, r7, pc}
	...

080091c8 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80091c8:	b590      	push	{r4, r7, lr}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	80fb      	strh	r3, [r7, #6]
 80091d2:	460b      	mov	r3, r1
 80091d4:	80bb      	strh	r3, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80091da:	887b      	ldrh	r3, [r7, #2]
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	f1c3 0303 	rsb	r3, r3, #3
 80091e2:	617b      	str	r3, [r7, #20]
  curx = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80091e8:	887b      	ldrh	r3, [r7, #2]
 80091ea:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80091ec:	e0c7      	b.n	800937e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	88fb      	ldrh	r3, [r7, #6]
 80091f4:	4413      	add	r3, r2
 80091f6:	b298      	uxth	r0, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	88ba      	ldrh	r2, [r7, #4]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	b299      	uxth	r1, r3
 8009202:	4b64      	ldr	r3, [pc, #400]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	4c64      	ldr	r4, [pc, #400]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4423      	add	r3, r4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	f000 faa1 	bl	800975c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	b29b      	uxth	r3, r3
 800921e:	88fa      	ldrh	r2, [r7, #6]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	b298      	uxth	r0, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	b29b      	uxth	r3, r3
 8009228:	88ba      	ldrh	r2, [r7, #4]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	b299      	uxth	r1, r3
 800922e:	4b59      	ldr	r3, [pc, #356]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4c59      	ldr	r4, [pc, #356]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 8009234:	4613      	mov	r3, r2
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4423      	add	r3, r4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	f000 fa8b 	bl	800975c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	b29a      	uxth	r2, r3
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	4413      	add	r3, r2
 800924e:	b298      	uxth	r0, r3
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	b29b      	uxth	r3, r3
 8009254:	88ba      	ldrh	r2, [r7, #4]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	b299      	uxth	r1, r3
 800925a:	4b4e      	ldr	r3, [pc, #312]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4c4e      	ldr	r4, [pc, #312]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 8009260:	4613      	mov	r3, r2
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4423      	add	r3, r4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	f000 fa75 	bl	800975c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	b29b      	uxth	r3, r3
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	b298      	uxth	r0, r3
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	b29b      	uxth	r3, r3
 8009280:	88ba      	ldrh	r2, [r7, #4]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	b299      	uxth	r1, r3
 8009286:	4b43      	ldr	r3, [pc, #268]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	4c43      	ldr	r4, [pc, #268]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 800928c:	4613      	mov	r3, r2
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4423      	add	r3, r4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	f000 fa5f 	bl	800975c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	4413      	add	r3, r2
 80092a6:	b298      	uxth	r0, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	88bb      	ldrh	r3, [r7, #4]
 80092ae:	4413      	add	r3, r2
 80092b0:	b299      	uxth	r1, r3
 80092b2:	4b38      	ldr	r3, [pc, #224]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4c38      	ldr	r4, [pc, #224]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 80092b8:	4613      	mov	r3, r2
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4423      	add	r3, r4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	f000 fa49 	bl	800975c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	88fa      	ldrh	r2, [r7, #6]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	b298      	uxth	r0, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	88bb      	ldrh	r3, [r7, #4]
 80092da:	4413      	add	r3, r2
 80092dc:	b299      	uxth	r1, r3
 80092de:	4b2d      	ldr	r3, [pc, #180]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	4c2d      	ldr	r4, [pc, #180]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 80092e4:	4613      	mov	r3, r2
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4423      	add	r3, r4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	f000 fa33 	bl	800975c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	4413      	add	r3, r2
 80092fe:	b298      	uxth	r0, r3
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	b29a      	uxth	r2, r3
 8009304:	88bb      	ldrh	r3, [r7, #4]
 8009306:	4413      	add	r3, r2
 8009308:	b299      	uxth	r1, r3
 800930a:	4b22      	ldr	r3, [pc, #136]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4c22      	ldr	r4, [pc, #136]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 8009310:	4613      	mov	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4423      	add	r3, r4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	f000 fa1d 	bl	800975c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	b29b      	uxth	r3, r3
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	b298      	uxth	r0, r3
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	b29a      	uxth	r2, r3
 8009330:	88bb      	ldrh	r3, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	b299      	uxth	r1, r3
 8009336:	4b17      	ldr	r3, [pc, #92]	; (8009394 <BSP_LCD_DrawCircle+0x1cc>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4c17      	ldr	r4, [pc, #92]	; (8009398 <BSP_LCD_DrawCircle+0x1d0>)
 800933c:	4613      	mov	r3, r2
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4423      	add	r3, r4
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	f000 fa07 	bl	800975c <BSP_LCD_DrawPixel>

    if (d < 0)
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	da06      	bge.n	8009362 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	009a      	lsls	r2, r3, #2
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	4413      	add	r3, r2
 800935c:	3306      	adds	r3, #6
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e00a      	b.n	8009378 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	009a      	lsls	r2, r3, #2
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	330a      	adds	r3, #10
 8009370:	617b      	str	r3, [r7, #20]
      cury--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3b01      	subs	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	3301      	adds	r3, #1
 800937c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	429a      	cmp	r2, r3
 8009384:	f67f af33 	bls.w	80091ee <BSP_LCD_DrawCircle+0x26>
  } 
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	bd90      	pop	{r4, r7, pc}
 8009392:	bf00      	nop
 8009394:	20000a3c 	.word	0x20000a3c
 8009398:	20000a40 	.word	0x20000a40

0800939c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a0:	b086      	sub	sp, #24
 80093a2:	af02      	add	r7, sp, #8
 80093a4:	4604      	mov	r4, r0
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	461a      	mov	r2, r3
 80093ac:	4623      	mov	r3, r4
 80093ae:	80fb      	strh	r3, [r7, #6]
 80093b0:	4603      	mov	r3, r0
 80093b2:	80bb      	strh	r3, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	807b      	strh	r3, [r7, #2]
 80093b8:	4613      	mov	r3, r2
 80093ba:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80093c0:	4b20      	ldr	r3, [pc, #128]	; (8009444 <BSP_LCD_FillRect+0xa8>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	4920      	ldr	r1, [pc, #128]	; (8009448 <BSP_LCD_FillRect+0xac>)
 80093c6:	4613      	mov	r3, r2
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff fcd0 	bl	8008d78 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80093d8:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <BSP_LCD_FillRect+0xa8>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a1b      	ldr	r2, [pc, #108]	; (800944c <BSP_LCD_FillRect+0xb0>)
 80093de:	2134      	movs	r1, #52	; 0x34
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	4413      	add	r3, r2
 80093e6:	335c      	adds	r3, #92	; 0x5c
 80093e8:	681c      	ldr	r4, [r3, #0]
 80093ea:	f7ff fbe7 	bl	8008bbc <BSP_LCD_GetXSize>
 80093ee:	4602      	mov	r2, r0
 80093f0:	88bb      	ldrh	r3, [r7, #4]
 80093f2:	fb03 f202 	mul.w	r2, r3, r2
 80093f6:	88fb      	ldrh	r3, [r7, #6]
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4423      	add	r3, r4
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8009400:	4b10      	ldr	r3, [pc, #64]	; (8009444 <BSP_LCD_FillRect+0xa8>)
 8009402:	681c      	ldr	r4, [r3, #0]
 8009404:	68fd      	ldr	r5, [r7, #12]
 8009406:	887e      	ldrh	r6, [r7, #2]
 8009408:	f8b7 8000 	ldrh.w	r8, [r7]
 800940c:	f7ff fbd6 	bl	8008bbc <BSP_LCD_GetXSize>
 8009410:	4602      	mov	r2, r0
 8009412:	887b      	ldrh	r3, [r7, #2]
 8009414:	1ad1      	subs	r1, r2, r3
 8009416:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <BSP_LCD_FillRect+0xa8>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	480b      	ldr	r0, [pc, #44]	; (8009448 <BSP_LCD_FillRect+0xac>)
 800941c:	4613      	mov	r3, r2
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4403      	add	r3, r0
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	9100      	str	r1, [sp, #0]
 800942c:	4643      	mov	r3, r8
 800942e:	4632      	mov	r2, r6
 8009430:	4629      	mov	r1, r5
 8009432:	4620      	mov	r0, r4
 8009434:	f000 fa72 	bl	800991c <FillBuffer>
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009442:	bf00      	nop
 8009444:	20000a3c 	.word	0x20000a3c
 8009448:	20000a40 	.word	0x20000a40
 800944c:	200014b8 	.word	0x200014b8

08009450 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	80fb      	strh	r3, [r7, #6]
 800945a:	460b      	mov	r3, r1
 800945c:	80bb      	strh	r3, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8009462:	887b      	ldrh	r3, [r7, #2]
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	f1c3 0303 	rsb	r3, r3, #3
 800946a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8009470:	887b      	ldrh	r3, [r7, #2]
 8009472:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009474:	4b44      	ldr	r3, [pc, #272]	; (8009588 <BSP_LCD_FillCircle+0x138>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	4944      	ldr	r1, [pc, #272]	; (800958c <BSP_LCD_FillCircle+0x13c>)
 800947a:	4613      	mov	r3, r2
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fc76 	bl	8008d78 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800948c:	e061      	b.n	8009552 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d021      	beq.n	80094d8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	b29b      	uxth	r3, r3
 8009498:	88fa      	ldrh	r2, [r7, #6]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	b298      	uxth	r0, r3
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	88bb      	ldrh	r3, [r7, #4]
 80094a4:	4413      	add	r3, r2
 80094a6:	b299      	uxth	r1, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	f7ff fdd7 	bl	8009064 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	88fa      	ldrh	r2, [r7, #6]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	b298      	uxth	r0, r3
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	88ba      	ldrh	r2, [r7, #4]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	b299      	uxth	r1, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	f7ff fdc6 	bl	8009064 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d021      	beq.n	8009522 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	88fa      	ldrh	r2, [r7, #6]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	b298      	uxth	r0, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	88ba      	ldrh	r2, [r7, #4]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	b299      	uxth	r1, r3
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	f7ff fdb2 	bl	8009064 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	b29b      	uxth	r3, r3
 8009504:	88fa      	ldrh	r2, [r7, #6]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	b298      	uxth	r0, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	b29a      	uxth	r2, r3
 800950e:	88bb      	ldrh	r3, [r7, #4]
 8009510:	4413      	add	r3, r2
 8009512:	b299      	uxth	r1, r3
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	b29b      	uxth	r3, r3
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	b29b      	uxth	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	f7ff fda1 	bl	8009064 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	da06      	bge.n	8009536 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	009a      	lsls	r2, r3, #2
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	4413      	add	r3, r2
 8009530:	3306      	adds	r3, #6
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e00a      	b.n	800954c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	009a      	lsls	r2, r3, #2
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	4413      	add	r3, r2
 8009542:	330a      	adds	r3, #10
 8009544:	617b      	str	r3, [r7, #20]
      cury--;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3b01      	subs	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	3301      	adds	r3, #1
 8009550:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	429a      	cmp	r2, r3
 8009558:	d999      	bls.n	800948e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <BSP_LCD_FillCircle+0x138>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	490b      	ldr	r1, [pc, #44]	; (800958c <BSP_LCD_FillCircle+0x13c>)
 8009560:	4613      	mov	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff fc03 	bl	8008d78 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8009572:	887a      	ldrh	r2, [r7, #2]
 8009574:	88b9      	ldrh	r1, [r7, #4]
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	4618      	mov	r0, r3
 800957a:	f7ff fe25 	bl	80091c8 <BSP_LCD_DrawCircle>
}
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000a3c 	.word	0x20000a3c
 800958c:	20000a40 	.word	0x20000a40

08009590 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <BSP_LCD_DisplayOn+0x1c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800959e:	4b03      	ldr	r3, [pc, #12]	; (80095ac <BSP_LCD_DisplayOn+0x1c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	4798      	blx	r3
  }
}
 80095a6:	bf00      	nop
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20001560 	.word	0x20001560

080095b0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08e      	sub	sp, #56	; 0x38
 80095b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80095b6:	2300      	movs	r3, #0
 80095b8:	623b      	str	r3, [r7, #32]
 80095ba:	4b61      	ldr	r3, [pc, #388]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095be:	4a60      	ldr	r2, [pc, #384]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095c4:	6453      	str	r3, [r2, #68]	; 0x44
 80095c6:	4b5e      	ldr	r3, [pc, #376]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095ce:	623b      	str	r3, [r7, #32]
 80095d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80095d2:	2300      	movs	r3, #0
 80095d4:	61fb      	str	r3, [r7, #28]
 80095d6:	4b5a      	ldr	r3, [pc, #360]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	4a59      	ldr	r2, [pc, #356]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095e0:	6313      	str	r3, [r2, #48]	; 0x30
 80095e2:	4b57      	ldr	r3, [pc, #348]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ea:	61fb      	str	r3, [r7, #28]
 80095ec:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095ee:	2300      	movs	r3, #0
 80095f0:	61bb      	str	r3, [r7, #24]
 80095f2:	4b53      	ldr	r3, [pc, #332]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	4a52      	ldr	r2, [pc, #328]	; (8009740 <BSP_LCD_MspInit+0x190>)
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	6313      	str	r3, [r2, #48]	; 0x30
 80095fe:	4b50      	ldr	r3, [pc, #320]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	61bb      	str	r3, [r7, #24]
 8009608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	4b4c      	ldr	r3, [pc, #304]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	4a4b      	ldr	r2, [pc, #300]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009614:	f043 0302 	orr.w	r3, r3, #2
 8009618:	6313      	str	r3, [r2, #48]	; 0x30
 800961a:	4b49      	ldr	r3, [pc, #292]	; (8009740 <BSP_LCD_MspInit+0x190>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	4b45      	ldr	r3, [pc, #276]	; (8009740 <BSP_LCD_MspInit+0x190>)
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	4a44      	ldr	r2, [pc, #272]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009630:	f043 0304 	orr.w	r3, r3, #4
 8009634:	6313      	str	r3, [r2, #48]	; 0x30
 8009636:	4b42      	ldr	r3, [pc, #264]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963a:	f003 0304 	and.w	r3, r3, #4
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	4b3e      	ldr	r3, [pc, #248]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	4a3d      	ldr	r2, [pc, #244]	; (8009740 <BSP_LCD_MspInit+0x190>)
 800964c:	f043 0308 	orr.w	r3, r3, #8
 8009650:	6313      	str	r3, [r2, #48]	; 0x30
 8009652:	4b3b      	ldr	r3, [pc, #236]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800965e:	2300      	movs	r3, #0
 8009660:	60bb      	str	r3, [r7, #8]
 8009662:	4b37      	ldr	r3, [pc, #220]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009666:	4a36      	ldr	r2, [pc, #216]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009668:	f043 0320 	orr.w	r3, r3, #32
 800966c:	6313      	str	r3, [r2, #48]	; 0x30
 800966e:	4b34      	ldr	r3, [pc, #208]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	60bb      	str	r3, [r7, #8]
 8009678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	4b30      	ldr	r3, [pc, #192]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	4a2f      	ldr	r2, [pc, #188]	; (8009740 <BSP_LCD_MspInit+0x190>)
 8009684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009688:	6313      	str	r3, [r2, #48]	; 0x30
 800968a:	4b2d      	ldr	r3, [pc, #180]	; (8009740 <BSP_LCD_MspInit+0x190>)
 800968c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009692:	607b      	str	r3, [r7, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8009696:	f641 0358 	movw	r3, #6232	; 0x1858
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800969c:	2302      	movs	r3, #2
 800969e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80096a4:	2302      	movs	r3, #2
 80096a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80096a8:	230e      	movs	r3, #14
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80096ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b0:	4619      	mov	r1, r3
 80096b2:	4824      	ldr	r0, [pc, #144]	; (8009744 <BSP_LCD_MspInit+0x194>)
 80096b4:	f001 f9ce 	bl	800aa54 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80096b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80096be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096c2:	4619      	mov	r1, r3
 80096c4:	4820      	ldr	r0, [pc, #128]	; (8009748 <BSP_LCD_MspInit+0x198>)
 80096c6:	f001 f9c5 	bl	800aa54 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80096ca:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80096ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80096d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096d4:	4619      	mov	r1, r3
 80096d6:	481d      	ldr	r0, [pc, #116]	; (800974c <BSP_LCD_MspInit+0x19c>)
 80096d8:	f001 f9bc 	bl	800aa54 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80096dc:	2348      	movs	r3, #72	; 0x48
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80096e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096e4:	4619      	mov	r1, r3
 80096e6:	481a      	ldr	r0, [pc, #104]	; (8009750 <BSP_LCD_MspInit+0x1a0>)
 80096e8:	f001 f9b4 	bl	800aa54 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80096ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80096f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f6:	4619      	mov	r1, r3
 80096f8:	4816      	ldr	r0, [pc, #88]	; (8009754 <BSP_LCD_MspInit+0x1a4>)
 80096fa:	f001 f9ab 	bl	800aa54 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80096fe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8009702:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8009704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009708:	4619      	mov	r1, r3
 800970a:	4813      	ldr	r0, [pc, #76]	; (8009758 <BSP_LCD_MspInit+0x1a8>)
 800970c:	f001 f9a2 	bl	800aa54 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8009710:	2303      	movs	r3, #3
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8009714:	2309      	movs	r3, #9
 8009716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8009718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800971c:	4619      	mov	r1, r3
 800971e:	480a      	ldr	r0, [pc, #40]	; (8009748 <BSP_LCD_MspInit+0x198>)
 8009720:	f001 f998 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8009724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800972a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800972e:	4619      	mov	r1, r3
 8009730:	4809      	ldr	r0, [pc, #36]	; (8009758 <BSP_LCD_MspInit+0x1a8>)
 8009732:	f001 f98f 	bl	800aa54 <HAL_GPIO_Init>
}
 8009736:	bf00      	nop
 8009738:	3738      	adds	r7, #56	; 0x38
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	40023800 	.word	0x40023800
 8009744:	40020000 	.word	0x40020000
 8009748:	40020400 	.word	0x40020400
 800974c:	40020800 	.word	0x40020800
 8009750:	40020c00 	.word	0x40020c00
 8009754:	40021400 	.word	0x40021400
 8009758:	40021800 	.word	0x40021800

0800975c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800975c:	b5b0      	push	{r4, r5, r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	603a      	str	r2, [r7, #0]
 8009766:	80fb      	strh	r3, [r7, #6]
 8009768:	460b      	mov	r3, r1
 800976a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800976c:	4b0c      	ldr	r3, [pc, #48]	; (80097a0 <BSP_LCD_DrawPixel+0x44>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a0c      	ldr	r2, [pc, #48]	; (80097a4 <BSP_LCD_DrawPixel+0x48>)
 8009772:	2134      	movs	r1, #52	; 0x34
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	4413      	add	r3, r2
 800977a:	335c      	adds	r3, #92	; 0x5c
 800977c:	681c      	ldr	r4, [r3, #0]
 800977e:	88bd      	ldrh	r5, [r7, #4]
 8009780:	f7ff fa1c 	bl	8008bbc <BSP_LCD_GetXSize>
 8009784:	4603      	mov	r3, r0
 8009786:	fb03 f205 	mul.w	r2, r3, r5
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	4413      	add	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4423      	add	r3, r4
 8009792:	461a      	mov	r2, r3
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	6013      	str	r3, [r2, #0]
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bdb0      	pop	{r4, r5, r7, pc}
 80097a0:	20000a3c 	.word	0x20000a3c
 80097a4:	200014b8 	.word	0x200014b8

080097a8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	603a      	str	r2, [r7, #0]
 80097b2:	80fb      	strh	r3, [r7, #6]
 80097b4:	460b      	mov	r3, r1
 80097b6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	61fb      	str	r3, [r7, #28]
 80097bc:	2300      	movs	r3, #0
 80097be:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80097c4:	4b53      	ldr	r3, [pc, #332]	; (8009914 <DrawChar+0x16c>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	4953      	ldr	r1, [pc, #332]	; (8009918 <DrawChar+0x170>)
 80097ca:	4613      	mov	r3, r2
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	440b      	add	r3, r1
 80097d4:	3308      	adds	r3, #8
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	88db      	ldrh	r3, [r3, #6]
 80097da:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80097dc:	4b4d      	ldr	r3, [pc, #308]	; (8009914 <DrawChar+0x16c>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	494d      	ldr	r1, [pc, #308]	; (8009918 <DrawChar+0x170>)
 80097e2:	4613      	mov	r3, r2
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	440b      	add	r3, r1
 80097ec:	3308      	adds	r3, #8
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	889b      	ldrh	r3, [r3, #4]
 80097f2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80097f4:	8a3b      	ldrh	r3, [r7, #16]
 80097f6:	3307      	adds	r3, #7
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	da00      	bge.n	80097fe <DrawChar+0x56>
 80097fc:	3307      	adds	r3, #7
 80097fe:	10db      	asrs	r3, r3, #3
 8009800:	b2db      	uxtb	r3, r3
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	b2da      	uxtb	r2, r3
 8009806:	8a3b      	ldrh	r3, [r7, #16]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800980e:	2300      	movs	r3, #0
 8009810:	61fb      	str	r3, [r7, #28]
 8009812:	e076      	b.n	8009902 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8009814:	8a3b      	ldrh	r3, [r7, #16]
 8009816:	3307      	adds	r3, #7
 8009818:	2b00      	cmp	r3, #0
 800981a:	da00      	bge.n	800981e <DrawChar+0x76>
 800981c:	3307      	adds	r3, #7
 800981e:	10db      	asrs	r3, r3, #3
 8009820:	461a      	mov	r2, r3
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	fb03 f302 	mul.w	r3, r3, r2
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	4413      	add	r3, r2
 800982c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800982e:	8a3b      	ldrh	r3, [r7, #16]
 8009830:	3307      	adds	r3, #7
 8009832:	2b00      	cmp	r3, #0
 8009834:	da00      	bge.n	8009838 <DrawChar+0x90>
 8009836:	3307      	adds	r3, #7
 8009838:	10db      	asrs	r3, r3, #3
 800983a:	2b01      	cmp	r3, #1
 800983c:	d002      	beq.n	8009844 <DrawChar+0x9c>
 800983e:	2b02      	cmp	r3, #2
 8009840:	d004      	beq.n	800984c <DrawChar+0xa4>
 8009842:	e00c      	b.n	800985e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	617b      	str	r3, [r7, #20]
      break;
 800984a:	e016      	b.n	800987a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	021b      	lsls	r3, r3, #8
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	3201      	adds	r2, #1
 8009856:	7812      	ldrb	r2, [r2, #0]
 8009858:	4313      	orrs	r3, r2
 800985a:	617b      	str	r3, [r7, #20]
      break;
 800985c:	e00d      	b.n	800987a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	041a      	lsls	r2, r3, #16
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	3301      	adds	r3, #1
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	4313      	orrs	r3, r2
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	3202      	adds	r2, #2
 8009872:	7812      	ldrb	r2, [r2, #0]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]
      break;
 8009878:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800987a:	2300      	movs	r3, #0
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	e036      	b.n	80098ee <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8009880:	8a3a      	ldrh	r2, [r7, #16]
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	1ad2      	subs	r2, r2, r3
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	4413      	add	r3, r2
 800988a:	3b01      	subs	r3, #1
 800988c:	2201      	movs	r2, #1
 800988e:	fa02 f303 	lsl.w	r3, r2, r3
 8009892:	461a      	mov	r2, r3
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	4013      	ands	r3, r2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d012      	beq.n	80098c2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	4413      	add	r3, r2
 80098a4:	b298      	uxth	r0, r3
 80098a6:	4b1b      	ldr	r3, [pc, #108]	; (8009914 <DrawChar+0x16c>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	491b      	ldr	r1, [pc, #108]	; (8009918 <DrawChar+0x170>)
 80098ac:	4613      	mov	r3, r2
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	88bb      	ldrh	r3, [r7, #4]
 80098ba:	4619      	mov	r1, r3
 80098bc:	f7ff ff4e 	bl	800975c <BSP_LCD_DrawPixel>
 80098c0:	e012      	b.n	80098e8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	88fb      	ldrh	r3, [r7, #6]
 80098c8:	4413      	add	r3, r2
 80098ca:	b298      	uxth	r0, r3
 80098cc:	4b11      	ldr	r3, [pc, #68]	; (8009914 <DrawChar+0x16c>)
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	4911      	ldr	r1, [pc, #68]	; (8009918 <DrawChar+0x170>)
 80098d2:	4613      	mov	r3, r2
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	3304      	adds	r3, #4
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	88bb      	ldrh	r3, [r7, #4]
 80098e2:	4619      	mov	r1, r3
 80098e4:	f7ff ff3a 	bl	800975c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	3301      	adds	r3, #1
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	8a3b      	ldrh	r3, [r7, #16]
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d3c4      	bcc.n	8009880 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80098f6:	88bb      	ldrh	r3, [r7, #4]
 80098f8:	3301      	adds	r3, #1
 80098fa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	3301      	adds	r3, #1
 8009900:	61fb      	str	r3, [r7, #28]
 8009902:	8a7b      	ldrh	r3, [r7, #18]
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	429a      	cmp	r2, r3
 8009908:	d384      	bcc.n	8009814 <DrawChar+0x6c>
  }
}
 800990a:	bf00      	nop
 800990c:	bf00      	nop
 800990e:	3720      	adds	r7, #32
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	20000a3c 	.word	0x20000a3c
 8009918:	20000a40 	.word	0x20000a40

0800991c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af02      	add	r7, sp, #8
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800992a:	4b16      	ldr	r3, [pc, #88]	; (8009984 <FillBuffer+0x68>)
 800992c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009930:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8009932:	4b14      	ldr	r3, [pc, #80]	; (8009984 <FillBuffer+0x68>)
 8009934:	2200      	movs	r2, #0
 8009936:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8009938:	4a12      	ldr	r2, [pc, #72]	; (8009984 <FillBuffer+0x68>)
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800993e:	4b11      	ldr	r3, [pc, #68]	; (8009984 <FillBuffer+0x68>)
 8009940:	4a11      	ldr	r2, [pc, #68]	; (8009988 <FillBuffer+0x6c>)
 8009942:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8009944:	480f      	ldr	r0, [pc, #60]	; (8009984 <FillBuffer+0x68>)
 8009946:	f000 fdf9 	bl	800a53c <HAL_DMA2D_Init>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d115      	bne.n	800997c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8009950:	68f9      	ldr	r1, [r7, #12]
 8009952:	480c      	ldr	r0, [pc, #48]	; (8009984 <FillBuffer+0x68>)
 8009954:	f000 ff50 	bl	800a7f8 <HAL_DMA2D_ConfigLayer>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10e      	bne.n	800997c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69f9      	ldr	r1, [r7, #28]
 8009968:	4806      	ldr	r0, [pc, #24]	; (8009984 <FillBuffer+0x68>)
 800996a:	f000 fe30 	bl	800a5ce <HAL_DMA2D_Start>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8009974:	210a      	movs	r1, #10
 8009976:	4803      	ldr	r0, [pc, #12]	; (8009984 <FillBuffer+0x68>)
 8009978:	f000 fe54 	bl	800a624 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	200009cc 	.word	0x200009cc
 8009988:	4002b000 	.word	0x4002b000

0800998c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8009990:	4b29      	ldr	r3, [pc, #164]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 8009992:	4a2a      	ldr	r2, [pc, #168]	; (8009a3c <BSP_SDRAM_Init+0xb0>)
 8009994:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8009996:	4b2a      	ldr	r3, [pc, #168]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 8009998:	2202      	movs	r2, #2
 800999a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800999c:	4b28      	ldr	r3, [pc, #160]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 800999e:	2207      	movs	r2, #7
 80099a0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80099a2:	4b27      	ldr	r3, [pc, #156]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 80099a4:	2204      	movs	r2, #4
 80099a6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80099a8:	4b25      	ldr	r3, [pc, #148]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 80099aa:	2207      	movs	r2, #7
 80099ac:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80099ae:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 80099b0:	2202      	movs	r2, #2
 80099b2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80099b4:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 80099b6:	2202      	movs	r2, #2
 80099b8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80099ba:	4b21      	ldr	r3, [pc, #132]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 80099bc:	2202      	movs	r2, #2
 80099be:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80099c0:	4b1d      	ldr	r3, [pc, #116]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80099cc:	4b1a      	ldr	r3, [pc, #104]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099ce:	2204      	movs	r2, #4
 80099d0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80099d2:	4b19      	ldr	r3, [pc, #100]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099d4:	2210      	movs	r2, #16
 80099d6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80099d8:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099da:	2240      	movs	r2, #64	; 0x40
 80099dc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80099de:	4b16      	ldr	r3, [pc, #88]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80099e4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80099e6:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80099ec:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099f2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80099f4:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 80099fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a00:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8009a02:	2100      	movs	r1, #0
 8009a04:	480c      	ldr	r0, [pc, #48]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 8009a06:	f000 f87f 	bl	8009b08 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8009a0a:	490d      	ldr	r1, [pc, #52]	; (8009a40 <BSP_SDRAM_Init+0xb4>)
 8009a0c:	480a      	ldr	r0, [pc, #40]	; (8009a38 <BSP_SDRAM_Init+0xac>)
 8009a0e:	f003 fd35 	bl	800d47c <HAL_SDRAM_Init>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8009a18:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <BSP_SDRAM_Init+0xb8>)
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	e002      	b.n	8009a26 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8009a20:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <BSP_SDRAM_Init+0xb8>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8009a26:	f240 506a 	movw	r0, #1386	; 0x56a
 8009a2a:	f000 f80d 	bl	8009a48 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <BSP_SDRAM_Init+0xb8>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20000a58 	.word	0x20000a58
 8009a3c:	a0000140 	.word	0xa0000140
 8009a40:	20000a8c 	.word	0x20000a8c
 8009a44:	20000088 	.word	0x20000088

08009a48 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8009a54:	4b2a      	ldr	r3, [pc, #168]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a56:	2201      	movs	r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8009a5a:	4b29      	ldr	r3, [pc, #164]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a5c:	2208      	movs	r2, #8
 8009a5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8009a60:	4b27      	ldr	r3, [pc, #156]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8009a66:	4b26      	ldr	r3, [pc, #152]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8009a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a70:	4923      	ldr	r1, [pc, #140]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a72:	4824      	ldr	r0, [pc, #144]	; (8009b04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009a74:	f003 fd36 	bl	800d4e4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8009a78:	2001      	movs	r0, #1
 8009a7a:	f000 fa7f 	bl	8009f7c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8009a7e:	4b20      	ldr	r3, [pc, #128]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a80:	2202      	movs	r2, #2
 8009a82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8009a84:	4b1e      	ldr	r3, [pc, #120]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a86:	2208      	movs	r2, #8
 8009a88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8009a8a:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8009a90:	4b1b      	ldr	r3, [pc, #108]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8009a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a9a:	4919      	ldr	r1, [pc, #100]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009a9c:	4819      	ldr	r0, [pc, #100]	; (8009b04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009a9e:	f003 fd21 	bl	800d4e4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009aa2:	4b17      	ldr	r3, [pc, #92]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8009aa8:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009aaa:	2208      	movs	r2, #8
 8009aac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8009aae:	4b14      	ldr	r3, [pc, #80]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8009ab4:	4b12      	ldr	r3, [pc, #72]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8009aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009abe:	4910      	ldr	r1, [pc, #64]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009ac0:	4810      	ldr	r0, [pc, #64]	; (8009b04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009ac2:	f003 fd0f 	bl	800d4e4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8009ac6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8009aca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8009acc:	4b0c      	ldr	r3, [pc, #48]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009ace:	2204      	movs	r2, #4
 8009ad0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4a07      	ldr	r2, [pc, #28]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009ae2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8009ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ae8:	4905      	ldr	r1, [pc, #20]	; (8009b00 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009aea:	4806      	ldr	r0, [pc, #24]	; (8009b04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009aec:	f003 fcfa 	bl	800d4e4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4804      	ldr	r0, [pc, #16]	; (8009b04 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009af4:	f003 fd21 	bl	800d53a <HAL_SDRAM_ProgramRefreshRate>
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000aa8 	.word	0x20000aa8
 8009b04:	20000a58 	.word	0x20000a58

08009b08 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b090      	sub	sp, #64	; 0x40
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80ec 	beq.w	8009cf2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b1e:	4b77      	ldr	r3, [pc, #476]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	4a76      	ldr	r2, [pc, #472]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b24:	f043 0301 	orr.w	r3, r3, #1
 8009b28:	6393      	str	r3, [r2, #56]	; 0x38
 8009b2a:	4b74      	ldr	r3, [pc, #464]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8009b36:	2300      	movs	r3, #0
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3a:	4b70      	ldr	r3, [pc, #448]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3e:	4a6f      	ldr	r2, [pc, #444]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b44:	6313      	str	r3, [r2, #48]	; 0x30
 8009b46:	4b6d      	ldr	r3, [pc, #436]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b52:	2300      	movs	r3, #0
 8009b54:	623b      	str	r3, [r7, #32]
 8009b56:	4b69      	ldr	r3, [pc, #420]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	4a68      	ldr	r2, [pc, #416]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b5c:	f043 0302 	orr.w	r3, r3, #2
 8009b60:	6313      	str	r3, [r2, #48]	; 0x30
 8009b62:	4b66      	ldr	r3, [pc, #408]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	623b      	str	r3, [r7, #32]
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61fb      	str	r3, [r7, #28]
 8009b72:	4b62      	ldr	r3, [pc, #392]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b76:	4a61      	ldr	r2, [pc, #388]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b78:	f043 0304 	orr.w	r3, r3, #4
 8009b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b7e:	4b5f      	ldr	r3, [pc, #380]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61bb      	str	r3, [r7, #24]
 8009b8e:	4b5b      	ldr	r3, [pc, #364]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	4a5a      	ldr	r2, [pc, #360]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b94:	f043 0308 	orr.w	r3, r3, #8
 8009b98:	6313      	str	r3, [r2, #48]	; 0x30
 8009b9a:	4b58      	ldr	r3, [pc, #352]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	61bb      	str	r3, [r7, #24]
 8009ba4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	4b54      	ldr	r3, [pc, #336]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	4a53      	ldr	r2, [pc, #332]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009bb0:	f043 0310 	orr.w	r3, r3, #16
 8009bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8009bb6:	4b51      	ldr	r3, [pc, #324]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bba:	f003 0310 	and.w	r3, r3, #16
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	613b      	str	r3, [r7, #16]
 8009bc6:	4b4d      	ldr	r3, [pc, #308]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bca:	4a4c      	ldr	r2, [pc, #304]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009bcc:	f043 0320 	orr.w	r3, r3, #32
 8009bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8009bd2:	4b4a      	ldr	r3, [pc, #296]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd6:	f003 0320 	and.w	r3, r3, #32
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	4b46      	ldr	r3, [pc, #280]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be6:	4a45      	ldr	r2, [pc, #276]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bec:	6313      	str	r3, [r2, #48]	; 0x30
 8009bee:	4b43      	ldr	r3, [pc, #268]	; (8009cfc <BSP_SDRAM_MspInit+0x1f4>)
 8009bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8009c06:	230c      	movs	r3, #12
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8009c0a:	2360      	movs	r3, #96	; 0x60
 8009c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8009c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c12:	4619      	mov	r1, r3
 8009c14:	483a      	ldr	r0, [pc, #232]	; (8009d00 <BSP_SDRAM_MspInit+0x1f8>)
 8009c16:	f000 ff1d 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8009c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c22:	4619      	mov	r1, r3
 8009c24:	4837      	ldr	r0, [pc, #220]	; (8009d04 <BSP_SDRAM_MspInit+0x1fc>)
 8009c26:	f000 ff15 	bl	800aa54 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8009c2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8009c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c34:	4619      	mov	r1, r3
 8009c36:	4834      	ldr	r0, [pc, #208]	; (8009d08 <BSP_SDRAM_MspInit+0x200>)
 8009c38:	f000 ff0c 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8009c3c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009c40:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8009c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c46:	4619      	mov	r1, r3
 8009c48:	4830      	ldr	r0, [pc, #192]	; (8009d0c <BSP_SDRAM_MspInit+0x204>)
 8009c4a:	f000 ff03 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8009c4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8009c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c58:	4619      	mov	r1, r3
 8009c5a:	482d      	ldr	r0, [pc, #180]	; (8009d10 <BSP_SDRAM_MspInit+0x208>)
 8009c5c:	f000 fefa 	bl	800aa54 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8009c60:	f248 1333 	movw	r3, #33075	; 0x8133
 8009c64:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8009c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4829      	ldr	r0, [pc, #164]	; (8009d14 <BSP_SDRAM_MspInit+0x20c>)
 8009c6e:	f000 fef1 	bl	800aa54 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8009c72:	4b29      	ldr	r3, [pc, #164]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8009c78:	4b27      	ldr	r3, [pc, #156]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009c7a:	2280      	movs	r2, #128	; 0x80
 8009c7c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8009c7e:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c84:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8009c86:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c8c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009c8e:	4b22      	ldr	r3, [pc, #136]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c94:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8009c96:	4b20      	ldr	r3, [pc, #128]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009c98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c9c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8009c9e:	4b1e      	ldr	r3, [pc, #120]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8009ca4:	4b1c      	ldr	r3, [pc, #112]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009ca6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009caa:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8009cac:	4b1a      	ldr	r3, [pc, #104]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009cb2:	4b19      	ldr	r3, [pc, #100]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8009cb8:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8009cbe:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8009cc4:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cc6:	4a15      	ldr	r2, [pc, #84]	; (8009d1c <BSP_SDRAM_MspInit+0x214>)
 8009cc8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a12      	ldr	r2, [pc, #72]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cce:	631a      	str	r2, [r3, #48]	; 0x30
 8009cd0:	4a11      	ldr	r2, [pc, #68]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8009cd6:	4810      	ldr	r0, [pc, #64]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cd8:	f000 fb20 	bl	800a31c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8009cdc:	480e      	ldr	r0, [pc, #56]	; (8009d18 <BSP_SDRAM_MspInit+0x210>)
 8009cde:	f000 fa6f 	bl	800a1c0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	210f      	movs	r1, #15
 8009ce6:	2038      	movs	r0, #56	; 0x38
 8009ce8:	f000 fa24 	bl	800a134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8009cec:	2038      	movs	r0, #56	; 0x38
 8009cee:	f000 fa3d 	bl	800a16c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8009cf2:	bf00      	nop
 8009cf4:	3740      	adds	r7, #64	; 0x40
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	40023800 	.word	0x40023800
 8009d00:	40020400 	.word	0x40020400
 8009d04:	40020800 	.word	0x40020800
 8009d08:	40020c00 	.word	0x40020c00
 8009d0c:	40021000 	.word	0x40021000
 8009d10:	40021400 	.word	0x40021400
 8009d14:	40021800 	.word	0x40021800
 8009d18:	20000ab8 	.word	0x20000ab8
 8009d1c:	40026410 	.word	0x40026410

08009d20 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	460a      	mov	r2, r1
 8009d2a:	80fb      	strh	r3, [r7, #6]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8009d34:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <BSP_TS_Init+0x64>)
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8009d3a:	4a13      	ldr	r2, [pc, #76]	; (8009d88 <BSP_TS_Init+0x68>)
 8009d3c:	88bb      	ldrh	r3, [r7, #4]
 8009d3e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8009d40:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <BSP_TS_Init+0x6c>)
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	2082      	movs	r0, #130	; 0x82
 8009d46:	4798      	blx	r3
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f640 0311 	movw	r3, #2065	; 0x811
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d104      	bne.n	8009d5e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8009d54:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <BSP_TS_Init+0x70>)
 8009d56:	4a0d      	ldr	r2, [pc, #52]	; (8009d8c <BSP_TS_Init+0x6c>)
 8009d58:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d109      	bne.n	8009d78 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <BSP_TS_Init+0x70>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2082      	movs	r0, #130	; 0x82
 8009d6c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8009d6e:	4b08      	ldr	r3, [pc, #32]	; (8009d90 <BSP_TS_Init+0x70>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	2082      	movs	r0, #130	; 0x82
 8009d76:	4798      	blx	r3
  }

  return ret;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000b1c 	.word	0x20000b1c
 8009d88:	20000b1e 	.word	0x20000b1e
 8009d8c:	2000003c 	.word	0x2000003c
 8009d90:	20000b18 	.word	0x20000b18

08009d94 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8009d9c:	4b4f      	ldr	r3, [pc, #316]	; (8009edc <BSP_TS_GetState+0x148>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2082      	movs	r0, #130	; 0x82
 8009da4:	4798      	blx	r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 808d 	beq.w	8009ed2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8009db8:	4b48      	ldr	r3, [pc, #288]	; (8009edc <BSP_TS_GetState+0x148>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	f107 020c 	add.w	r2, r7, #12
 8009dc2:	f107 010e 	add.w	r1, r7, #14
 8009dc6:	2082      	movs	r0, #130	; 0x82
 8009dc8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8009dca:	89bb      	ldrh	r3, [r7, #12]
 8009dcc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8009dd4:	89bb      	ldrh	r3, [r7, #12]
 8009dd6:	4a42      	ldr	r2, [pc, #264]	; (8009ee0 <BSP_TS_GetState+0x14c>)
 8009dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ddc:	08db      	lsrs	r3, r3, #3
 8009dde:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8009de0:	8abb      	ldrh	r3, [r7, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	82bb      	strh	r3, [r7, #20]
 8009dea:	e008      	b.n	8009dfe <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8009dec:	4b3d      	ldr	r3, [pc, #244]	; (8009ee4 <BSP_TS_GetState+0x150>)
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	8aba      	ldrh	r2, [r7, #20]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d903      	bls.n	8009dfe <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8009df6:	4b3b      	ldr	r3, [pc, #236]	; (8009ee4 <BSP_TS_GetState+0x150>)
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8009dfe:	8abb      	ldrh	r3, [r7, #20]
 8009e00:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8009e02:	89fb      	ldrh	r3, [r7, #14]
 8009e04:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d806      	bhi.n	8009e1a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8009e0c:	89fb      	ldrh	r3, [r7, #14]
 8009e0e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8009e12:	330e      	adds	r3, #14
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	81fb      	strh	r3, [r7, #14]
 8009e18:	e005      	b.n	8009e26 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8009e1a:	89fb      	ldrh	r3, [r7, #14]
 8009e1c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8009e20:	3308      	adds	r3, #8
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8009e26:	89fb      	ldrh	r3, [r7, #14]
 8009e28:	4a2f      	ldr	r2, [pc, #188]	; (8009ee8 <BSP_TS_GetState+0x154>)
 8009e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2e:	08db      	lsrs	r3, r3, #3
 8009e30:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8009e32:	8afb      	ldrh	r3, [r7, #22]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	82fb      	strh	r3, [r7, #22]
 8009e3c:	e008      	b.n	8009e50 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8009e3e:	4b2b      	ldr	r3, [pc, #172]	; (8009eec <BSP_TS_GetState+0x158>)
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	8afa      	ldrh	r2, [r7, #22]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d903      	bls.n	8009e50 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8009e48:	4b28      	ldr	r3, [pc, #160]	; (8009eec <BSP_TS_GetState+0x158>)
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8009e50:	8afb      	ldrh	r3, [r7, #22]
 8009e52:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8009e54:	89fb      	ldrh	r3, [r7, #14]
 8009e56:	461a      	mov	r2, r3
 8009e58:	4b25      	ldr	r3, [pc, #148]	; (8009ef0 <BSP_TS_GetState+0x15c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d906      	bls.n	8009e6e <BSP_TS_GetState+0xda>
 8009e60:	89fa      	ldrh	r2, [r7, #14]
 8009e62:	4b23      	ldr	r3, [pc, #140]	; (8009ef0 <BSP_TS_GetState+0x15c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	e005      	b.n	8009e7a <BSP_TS_GetState+0xe6>
 8009e6e:	4b20      	ldr	r3, [pc, #128]	; (8009ef0 <BSP_TS_GetState+0x15c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	89fb      	ldrh	r3, [r7, #14]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8009e7c:	89bb      	ldrh	r3, [r7, #12]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <BSP_TS_GetState+0x160>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d906      	bls.n	8009e96 <BSP_TS_GetState+0x102>
 8009e88:	89ba      	ldrh	r2, [r7, #12]
 8009e8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ef4 <BSP_TS_GetState+0x160>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	e005      	b.n	8009ea2 <BSP_TS_GetState+0x10e>
 8009e96:	4b17      	ldr	r3, [pc, #92]	; (8009ef4 <BSP_TS_GetState+0x160>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	89bb      	ldrh	r3, [r7, #12]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8009ea4:	8a7a      	ldrh	r2, [r7, #18]
 8009ea6:	8a3b      	ldrh	r3, [r7, #16]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	dd07      	ble.n	8009ebe <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8009eae:	89fb      	ldrh	r3, [r7, #14]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ef0 <BSP_TS_GetState+0x15c>)
 8009eb4:	601a      	str	r2, [r3, #0]
      _y = y; 
 8009eb6:	89bb      	ldrh	r3, [r7, #12]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	4b0e      	ldr	r3, [pc, #56]	; (8009ef4 <BSP_TS_GetState+0x160>)
 8009ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8009ebe:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <BSP_TS_GetState+0x15c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <BSP_TS_GetState+0x160>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	809a      	strh	r2, [r3, #4]
  }
}
 8009ed2:	bf00      	nop
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20000b18 	.word	0x20000b18
 8009ee0:	ba2e8ba3 	.word	0xba2e8ba3
 8009ee4:	20000b1e 	.word	0x20000b1e
 8009ee8:	88888889 	.word	0x88888889
 8009eec:	20000b1c 	.word	0x20000b1c
 8009ef0:	20000b20 	.word	0x20000b20
 8009ef4:	20000b24 	.word	0x20000b24

08009ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009efc:	4b0e      	ldr	r3, [pc, #56]	; (8009f38 <HAL_Init+0x40>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a0d      	ldr	r2, [pc, #52]	; (8009f38 <HAL_Init+0x40>)
 8009f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <HAL_Init+0x40>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a0a      	ldr	r2, [pc, #40]	; (8009f38 <HAL_Init+0x40>)
 8009f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009f14:	4b08      	ldr	r3, [pc, #32]	; (8009f38 <HAL_Init+0x40>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a07      	ldr	r2, [pc, #28]	; (8009f38 <HAL_Init+0x40>)
 8009f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f20:	2003      	movs	r0, #3
 8009f22:	f000 f8fc 	bl	800a11e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7fd fb7e 	bl	8007628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f2c:	f7fd fb54 	bl	80075d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40023c00 	.word	0x40023c00

08009f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009f40:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <HAL_IncTick+0x20>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <HAL_IncTick+0x24>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <HAL_IncTick+0x24>)
 8009f4e:	6013      	str	r3, [r2, #0]
}
 8009f50:	bf00      	nop
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000090 	.word	0x20000090
 8009f60:	20001564 	.word	0x20001564

08009f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f64:	b480      	push	{r7}
 8009f66:	af00      	add	r7, sp, #0
  return uwTick;
 8009f68:	4b03      	ldr	r3, [pc, #12]	; (8009f78 <HAL_GetTick+0x14>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	20001564 	.word	0x20001564

08009f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f84:	f7ff ffee 	bl	8009f64 <HAL_GetTick>
 8009f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f94:	d005      	beq.n	8009fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f96:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <HAL_Delay+0x44>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009fa2:	bf00      	nop
 8009fa4:	f7ff ffde 	bl	8009f64 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d8f7      	bhi.n	8009fa4 <HAL_Delay+0x28>
  {
  }
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000090 	.word	0x20000090

08009fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <__NVIC_SetPriorityGrouping+0x44>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ff6:	4a04      	ldr	r2, [pc, #16]	; (800a008 <__NVIC_SetPriorityGrouping+0x44>)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	60d3      	str	r3, [r2, #12]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	e000ed00 	.word	0xe000ed00

0800a00c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a010:	4b04      	ldr	r3, [pc, #16]	; (800a024 <__NVIC_GetPriorityGrouping+0x18>)
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	0a1b      	lsrs	r3, r3, #8
 800a016:	f003 0307 	and.w	r3, r3, #7
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	e000ed00 	.word	0xe000ed00

0800a028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a036:	2b00      	cmp	r3, #0
 800a038:	db0b      	blt.n	800a052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	f003 021f 	and.w	r2, r3, #31
 800a040:	4907      	ldr	r1, [pc, #28]	; (800a060 <__NVIC_EnableIRQ+0x38>)
 800a042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a046:	095b      	lsrs	r3, r3, #5
 800a048:	2001      	movs	r0, #1
 800a04a:	fa00 f202 	lsl.w	r2, r0, r2
 800a04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	e000e100 	.word	0xe000e100

0800a064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a074:	2b00      	cmp	r3, #0
 800a076:	db0a      	blt.n	800a08e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	490c      	ldr	r1, [pc, #48]	; (800a0b0 <__NVIC_SetPriority+0x4c>)
 800a07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a082:	0112      	lsls	r2, r2, #4
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	440b      	add	r3, r1
 800a088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a08c:	e00a      	b.n	800a0a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	b2da      	uxtb	r2, r3
 800a092:	4908      	ldr	r1, [pc, #32]	; (800a0b4 <__NVIC_SetPriority+0x50>)
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	f003 030f 	and.w	r3, r3, #15
 800a09a:	3b04      	subs	r3, #4
 800a09c:	0112      	lsls	r2, r2, #4
 800a09e:	b2d2      	uxtb	r2, r2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	761a      	strb	r2, [r3, #24]
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	e000e100 	.word	0xe000e100
 800a0b4:	e000ed00 	.word	0xe000ed00

0800a0b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b089      	sub	sp, #36	; 0x24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f1c3 0307 	rsb	r3, r3, #7
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	bf28      	it	cs
 800a0d6:	2304      	movcs	r3, #4
 800a0d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	2b06      	cmp	r3, #6
 800a0e0:	d902      	bls.n	800a0e8 <NVIC_EncodePriority+0x30>
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	3b03      	subs	r3, #3
 800a0e6:	e000      	b.n	800a0ea <NVIC_EncodePriority+0x32>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f6:	43da      	mvns	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	401a      	ands	r2, r3
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a100:	f04f 31ff 	mov.w	r1, #4294967295
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	fa01 f303 	lsl.w	r3, r1, r3
 800a10a:	43d9      	mvns	r1, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a110:	4313      	orrs	r3, r2
         );
}
 800a112:	4618      	mov	r0, r3
 800a114:	3724      	adds	r7, #36	; 0x24
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff ff4c 	bl	8009fc4 <__NVIC_SetPriorityGrouping>
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a146:	f7ff ff61 	bl	800a00c <__NVIC_GetPriorityGrouping>
 800a14a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	6978      	ldr	r0, [r7, #20]
 800a152:	f7ff ffb1 	bl	800a0b8 <NVIC_EncodePriority>
 800a156:	4602      	mov	r2, r0
 800a158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff ff80 	bl	800a064 <__NVIC_SetPriority>
}
 800a164:	bf00      	nop
 800a166:	3718      	adds	r7, #24
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff ff54 	bl	800a028 <__NVIC_EnableIRQ>
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e00e      	b.n	800a1b8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	795b      	ldrb	r3, [r3, #5]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d105      	bne.n	800a1b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7fc f8a2 	bl	80062f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a1cc:	f7ff feca 	bl	8009f64 <HAL_GetTick>
 800a1d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e099      	b.n	800a310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 0201 	bic.w	r2, r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1fc:	e00f      	b.n	800a21e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a1fe:	f7ff feb1 	bl	8009f64 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b05      	cmp	r3, #5
 800a20a:	d908      	bls.n	800a21e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2203      	movs	r2, #3
 800a216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e078      	b.n	800a310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e8      	bne.n	800a1fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4b38      	ldr	r3, [pc, #224]	; (800a318 <HAL_DMA_Init+0x158>)
 800a238:	4013      	ands	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a24a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b04      	cmp	r3, #4
 800a276:	d107      	bne.n	800a288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a280:	4313      	orrs	r3, r2
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	4313      	orrs	r3, r2
 800a286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f023 0307 	bic.w	r3, r3, #7
 800a29e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d117      	bne.n	800a2e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00e      	beq.n	800a2e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f8bd 	bl	800a444 <DMA_CheckFifoParam>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d008      	beq.n	800a2e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2240      	movs	r2, #64	; 0x40
 800a2d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e016      	b.n	800a310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f874 	bl	800a3d8 <DMA_CalcBaseAndBitshift>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f8:	223f      	movs	r2, #63	; 0x3f
 800a2fa:	409a      	lsls	r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	f010803f 	.word	0xf010803f

0800a31c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e050      	b.n	800a3d0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b02      	cmp	r3, #2
 800a338:	d101      	bne.n	800a33e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800a33a:	2302      	movs	r3, #2
 800a33c:	e048      	b.n	800a3d0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0201 	bic.w	r2, r2, #1
 800a34c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2200      	movs	r2, #0
 800a35c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2200      	movs	r2, #0
 800a36c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2221      	movs	r2, #33	; 0x21
 800a37c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f82a 	bl	800a3d8 <DMA_CalcBaseAndBitshift>
 800a384:	4603      	mov	r3, r0
 800a386:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3b0:	223f      	movs	r2, #63	; 0x3f
 800a3b2:	409a      	lsls	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	3b10      	subs	r3, #16
 800a3e8:	4a14      	ldr	r2, [pc, #80]	; (800a43c <DMA_CalcBaseAndBitshift+0x64>)
 800a3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ee:	091b      	lsrs	r3, r3, #4
 800a3f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a3f2:	4a13      	ldr	r2, [pc, #76]	; (800a440 <DMA_CalcBaseAndBitshift+0x68>)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b03      	cmp	r3, #3
 800a404:	d909      	bls.n	800a41a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a40e:	f023 0303 	bic.w	r3, r3, #3
 800a412:	1d1a      	adds	r2, r3, #4
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	659a      	str	r2, [r3, #88]	; 0x58
 800a418:	e007      	b.n	800a42a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a422:	f023 0303 	bic.w	r3, r3, #3
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	aaaaaaab 	.word	0xaaaaaaab
 800a440:	0801a80c 	.word	0x0801a80c

0800a444 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a454:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d11f      	bne.n	800a49e <DMA_CheckFifoParam+0x5a>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b03      	cmp	r3, #3
 800a462:	d856      	bhi.n	800a512 <DMA_CheckFifoParam+0xce>
 800a464:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <DMA_CheckFifoParam+0x28>)
 800a466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46a:	bf00      	nop
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a48f 	.word	0x0800a48f
 800a474:	0800a47d 	.word	0x0800a47d
 800a478:	0800a513 	.word	0x0800a513
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d046      	beq.n	800a516 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a48c:	e043      	b.n	800a516 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a496:	d140      	bne.n	800a51a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a49c:	e03d      	b.n	800a51a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4a6:	d121      	bne.n	800a4ec <DMA_CheckFifoParam+0xa8>
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d837      	bhi.n	800a51e <DMA_CheckFifoParam+0xda>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <DMA_CheckFifoParam+0x70>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a4cb 	.word	0x0800a4cb
 800a4bc:	0800a4c5 	.word	0x0800a4c5
 800a4c0:	0800a4dd 	.word	0x0800a4dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c8:	e030      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d025      	beq.n	800a522 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4da:	e022      	b.n	800a522 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a4e4:	d11f      	bne.n	800a526 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a4ea:	e01c      	b.n	800a526 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d903      	bls.n	800a4fa <DMA_CheckFifoParam+0xb6>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d003      	beq.n	800a500 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a4f8:	e018      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fe:	e015      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00e      	beq.n	800a52a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	73fb      	strb	r3, [r7, #15]
      break;
 800a510:	e00b      	b.n	800a52a <DMA_CheckFifoParam+0xe6>
      break;
 800a512:	bf00      	nop
 800a514:	e00a      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      break;
 800a516:	bf00      	nop
 800a518:	e008      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      break;
 800a51a:	bf00      	nop
 800a51c:	e006      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      break;
 800a51e:	bf00      	nop
 800a520:	e004      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      break;
 800a522:	bf00      	nop
 800a524:	e002      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      break;   
 800a526:	bf00      	nop
 800a528:	e000      	b.n	800a52c <DMA_CheckFifoParam+0xe8>
      break;
 800a52a:	bf00      	nop
    }
  } 
  
  return status; 
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop

0800a53c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e03b      	b.n	800a5c6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7fb ff1a 	bl	800639c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2202      	movs	r2, #2
 800a56c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58c:	f023 0107 	bic.w	r1, r3, #7
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689a      	ldr	r2, [r3, #8]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a5a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	68d1      	ldr	r1, [r2, #12]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b086      	sub	sp, #24
 800a5d2:	af02      	add	r7, sp, #8
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
 800a5da:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <HAL_DMA2D_Start+0x1c>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e018      	b.n	800a61c <HAL_DMA2D_Start+0x4e>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	68b9      	ldr	r1, [r7, #8]
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f989 	bl	800a91c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0201 	orr.w	r2, r2, #1
 800a618:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d056      	beq.n	800a6ee <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a640:	f7ff fc90 	bl	8009f64 <HAL_GetTick>
 800a644:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a646:	e04b      	b.n	800a6e0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a656:	2b00      	cmp	r3, #0
 800a658:	d023      	beq.n	800a6a2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a668:	f043 0202 	orr.w	r2, r3, #2
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67e:	f043 0201 	orr.w	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2221      	movs	r2, #33	; 0x21
 800a68c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2204      	movs	r2, #4
 800a692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e0a5      	b.n	800a7ee <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d01a      	beq.n	800a6e0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a6aa:	f7ff fc5b 	bl	8009f64 <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d302      	bcc.n	800a6c0 <HAL_DMA2D_PollForTransfer+0x9c>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10f      	bne.n	800a6e0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c4:	f043 0220 	orr.w	r2, r3, #32
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e086      	b.n	800a7ee <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0ac      	beq.n	800a648 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	4313      	orrs	r3, r2
 800a708:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d061      	beq.n	800a7d4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a710:	f7ff fc28 	bl	8009f64 <HAL_GetTick>
 800a714:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a716:	e056      	b.n	800a7c6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800a726:	2b00      	cmp	r3, #0
 800a728:	d02e      	beq.n	800a788 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b00      	cmp	r3, #0
 800a732:	d005      	beq.n	800a740 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a738:	f043 0204 	orr.w	r2, r3, #4
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f003 0320 	and.w	r3, r3, #32
 800a746:	2b00      	cmp	r3, #0
 800a748:	d005      	beq.n	800a756 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	f043 0202 	orr.w	r2, r3, #2
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a764:	f043 0201 	orr.w	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2229      	movs	r2, #41	; 0x29
 800a772:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2204      	movs	r2, #4
 800a778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e032      	b.n	800a7ee <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78e:	d01a      	beq.n	800a7c6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a790:	f7ff fbe8 	bl	8009f64 <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d302      	bcc.n	800a7a6 <HAL_DMA2D_PollForTransfer+0x182>
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10f      	bne.n	800a7c6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7aa:	f043 0220 	orr.w	r2, r3, #32
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e013      	b.n	800a7ee <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f003 0310 	and.w	r3, r3, #16
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0a1      	beq.n	800a718 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2212      	movs	r2, #18
 800a7da:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a810:	2b01      	cmp	r3, #1
 800a812:	d101      	bne.n	800a818 <HAL_DMA2D_ConfigLayer+0x20>
 800a814:	2302      	movs	r3, #2
 800a816:	e079      	b.n	800a90c <HAL_DMA2D_ConfigLayer+0x114>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2202      	movs	r2, #2
 800a824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	011b      	lsls	r3, r3, #4
 800a82c:	3318      	adds	r3, #24
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	4413      	add	r3, r2
 800a832:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	041b      	lsls	r3, r3, #16
 800a83e:	4313      	orrs	r3, r2
 800a840:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800a842:	4b35      	ldr	r3, [pc, #212]	; (800a918 <HAL_DMA2D_ConfigLayer+0x120>)
 800a844:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	2b0a      	cmp	r3, #10
 800a84c:	d003      	beq.n	800a856 <HAL_DMA2D_ConfigLayer+0x5e>
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	2b09      	cmp	r3, #9
 800a854:	d107      	bne.n	800a866 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	4313      	orrs	r3, r2
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	e005      	b.n	800a872 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	061b      	lsls	r3, r3, #24
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d120      	bne.n	800a8ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	43db      	mvns	r3, r3
 800a882:	ea02 0103 	and.w	r1, r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	430a      	orrs	r2, r1
 800a88e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	6812      	ldr	r2, [r2, #0]
 800a898:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2b0a      	cmp	r3, #10
 800a8a0:	d003      	beq.n	800a8aa <HAL_DMA2D_ConfigLayer+0xb2>
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2b09      	cmp	r3, #9
 800a8a8:	d127      	bne.n	800a8fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a8b6:	629a      	str	r2, [r3, #40]	; 0x28
 800a8b8:	e01f      	b.n	800a8fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	69da      	ldr	r2, [r3, #28]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	43db      	mvns	r3, r3
 800a8c4:	ea02 0103 	and.w	r1, r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	6812      	ldr	r2, [r2, #0]
 800a8da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b0a      	cmp	r3, #10
 800a8e2:	d003      	beq.n	800a8ec <HAL_DMA2D_ConfigLayer+0xf4>
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	2b09      	cmp	r3, #9
 800a8ea:	d106      	bne.n	800a8fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a8f8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	ff03000f 	.word	0xff03000f

0800a91c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b08b      	sub	sp, #44	; 0x2c
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a930:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	041a      	lsls	r2, r3, #16
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	431a      	orrs	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a954:	d174      	bne.n	800aa40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a95c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a964:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a96c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d108      	bne.n	800a98e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	431a      	orrs	r2, r3
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	4313      	orrs	r3, r2
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4313      	orrs	r3, r2
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
 800a98c:	e053      	b.n	800aa36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d106      	bne.n	800a9a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	697a      	ldr	r2, [r7, #20]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a2:	e048      	b.n	800aa36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d111      	bne.n	800a9d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	0cdb      	lsrs	r3, r3, #19
 800a9b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	0a9b      	lsrs	r3, r3, #10
 800a9b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	08db      	lsrs	r3, r3, #3
 800a9bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	02db      	lsls	r3, r3, #11
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ce:	e032      	b.n	800aa36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d117      	bne.n	800aa08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	0fdb      	lsrs	r3, r3, #31
 800a9dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	0cdb      	lsrs	r3, r3, #19
 800a9e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	0adb      	lsrs	r3, r3, #11
 800a9e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	08db      	lsrs	r3, r3, #3
 800a9ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	029b      	lsls	r3, r3, #10
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	03db      	lsls	r3, r3, #15
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
 800aa06:	e016      	b.n	800aa36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	0f1b      	lsrs	r3, r3, #28
 800aa0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	0d1b      	lsrs	r3, r3, #20
 800aa12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	0b1b      	lsrs	r3, r3, #12
 800aa18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	091b      	lsrs	r3, r3, #4
 800aa1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	011a      	lsls	r2, r3, #4
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	431a      	orrs	r2, r3
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	031b      	lsls	r3, r3, #12
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800aa3e:	e003      	b.n	800aa48 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	60da      	str	r2, [r3, #12]
}
 800aa48:	bf00      	nop
 800aa4a:	372c      	adds	r7, #44	; 0x2c
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b089      	sub	sp, #36	; 0x24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	61fb      	str	r3, [r7, #28]
 800aa6e:	e177      	b.n	800ad60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aa70:	2201      	movs	r2, #1
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	fa02 f303 	lsl.w	r3, r2, r3
 800aa78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	4013      	ands	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	f040 8166 	bne.w	800ad5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d005      	beq.n	800aaa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d130      	bne.n	800ab08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	2203      	movs	r2, #3
 800aab2:	fa02 f303 	lsl.w	r3, r2, r3
 800aab6:	43db      	mvns	r3, r3
 800aab8:	69ba      	ldr	r2, [r7, #24]
 800aaba:	4013      	ands	r3, r2
 800aabc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	68da      	ldr	r2, [r3, #12]
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	4313      	orrs	r3, r2
 800aace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aadc:	2201      	movs	r2, #1
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	43db      	mvns	r3, r3
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	4013      	ands	r3, r2
 800aaea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	091b      	lsrs	r3, r3, #4
 800aaf2:	f003 0201 	and.w	r2, r3, #1
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69ba      	ldr	r2, [r7, #24]
 800ab06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d017      	beq.n	800ab44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	2203      	movs	r2, #3
 800ab20:	fa02 f303 	lsl.w	r3, r2, r3
 800ab24:	43db      	mvns	r3, r3
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	4013      	ands	r3, r2
 800ab2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	fa02 f303 	lsl.w	r3, r2, r3
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d123      	bne.n	800ab98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	08da      	lsrs	r2, r3, #3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	3208      	adds	r2, #8
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	f003 0307 	and.w	r3, r3, #7
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	220f      	movs	r2, #15
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	4013      	ands	r3, r2
 800ab72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	691a      	ldr	r2, [r3, #16]
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	fa02 f303 	lsl.w	r3, r2, r3
 800ab84:	69ba      	ldr	r2, [r7, #24]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	08da      	lsrs	r2, r3, #3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3208      	adds	r2, #8
 800ab92:	69b9      	ldr	r1, [r7, #24]
 800ab94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	2203      	movs	r2, #3
 800aba4:	fa02 f303 	lsl.w	r3, r2, r3
 800aba8:	43db      	mvns	r3, r3
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	4013      	ands	r3, r2
 800abae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f003 0203 	and.w	r2, r3, #3
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	fa02 f303 	lsl.w	r3, r2, r3
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 80c0 	beq.w	800ad5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	4b66      	ldr	r3, [pc, #408]	; (800ad78 <HAL_GPIO_Init+0x324>)
 800abe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe2:	4a65      	ldr	r2, [pc, #404]	; (800ad78 <HAL_GPIO_Init+0x324>)
 800abe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abe8:	6453      	str	r3, [r2, #68]	; 0x44
 800abea:	4b63      	ldr	r3, [pc, #396]	; (800ad78 <HAL_GPIO_Init+0x324>)
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800abf6:	4a61      	ldr	r2, [pc, #388]	; (800ad7c <HAL_GPIO_Init+0x328>)
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	089b      	lsrs	r3, r3, #2
 800abfc:	3302      	adds	r3, #2
 800abfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	220f      	movs	r2, #15
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	43db      	mvns	r3, r3
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	4013      	ands	r3, r2
 800ac18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a58      	ldr	r2, [pc, #352]	; (800ad80 <HAL_GPIO_Init+0x32c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d037      	beq.n	800ac92 <HAL_GPIO_Init+0x23e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a57      	ldr	r2, [pc, #348]	; (800ad84 <HAL_GPIO_Init+0x330>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d031      	beq.n	800ac8e <HAL_GPIO_Init+0x23a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a56      	ldr	r2, [pc, #344]	; (800ad88 <HAL_GPIO_Init+0x334>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d02b      	beq.n	800ac8a <HAL_GPIO_Init+0x236>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a55      	ldr	r2, [pc, #340]	; (800ad8c <HAL_GPIO_Init+0x338>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d025      	beq.n	800ac86 <HAL_GPIO_Init+0x232>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a54      	ldr	r2, [pc, #336]	; (800ad90 <HAL_GPIO_Init+0x33c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d01f      	beq.n	800ac82 <HAL_GPIO_Init+0x22e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a53      	ldr	r2, [pc, #332]	; (800ad94 <HAL_GPIO_Init+0x340>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d019      	beq.n	800ac7e <HAL_GPIO_Init+0x22a>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a52      	ldr	r2, [pc, #328]	; (800ad98 <HAL_GPIO_Init+0x344>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <HAL_GPIO_Init+0x226>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a51      	ldr	r2, [pc, #324]	; (800ad9c <HAL_GPIO_Init+0x348>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d00d      	beq.n	800ac76 <HAL_GPIO_Init+0x222>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a50      	ldr	r2, [pc, #320]	; (800ada0 <HAL_GPIO_Init+0x34c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d007      	beq.n	800ac72 <HAL_GPIO_Init+0x21e>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a4f      	ldr	r2, [pc, #316]	; (800ada4 <HAL_GPIO_Init+0x350>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d101      	bne.n	800ac6e <HAL_GPIO_Init+0x21a>
 800ac6a:	2309      	movs	r3, #9
 800ac6c:	e012      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac6e:	230a      	movs	r3, #10
 800ac70:	e010      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac72:	2308      	movs	r3, #8
 800ac74:	e00e      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac76:	2307      	movs	r3, #7
 800ac78:	e00c      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac7a:	2306      	movs	r3, #6
 800ac7c:	e00a      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac7e:	2305      	movs	r3, #5
 800ac80:	e008      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac82:	2304      	movs	r3, #4
 800ac84:	e006      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac86:	2303      	movs	r3, #3
 800ac88:	e004      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	e002      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e000      	b.n	800ac94 <HAL_GPIO_Init+0x240>
 800ac92:	2300      	movs	r3, #0
 800ac94:	69fa      	ldr	r2, [r7, #28]
 800ac96:	f002 0203 	and.w	r2, r2, #3
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	4093      	lsls	r3, r2
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aca4:	4935      	ldr	r1, [pc, #212]	; (800ad7c <HAL_GPIO_Init+0x328>)
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	089b      	lsrs	r3, r3, #2
 800acaa:	3302      	adds	r3, #2
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800acb2:	4b3d      	ldr	r3, [pc, #244]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	43db      	mvns	r3, r3
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	4013      	ands	r3, r2
 800acc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800acd6:	4a34      	ldr	r2, [pc, #208]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800acdc:	4b32      	ldr	r3, [pc, #200]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	43db      	mvns	r3, r3
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	4013      	ands	r3, r2
 800acea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800acf8:	69ba      	ldr	r2, [r7, #24]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad00:	4a29      	ldr	r2, [pc, #164]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad06:	4b28      	ldr	r3, [pc, #160]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	43db      	mvns	r3, r3
 800ad10:	69ba      	ldr	r2, [r7, #24]
 800ad12:	4013      	ands	r3, r2
 800ad14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad2a:	4a1f      	ldr	r2, [pc, #124]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad30:	4b1d      	ldr	r3, [pc, #116]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	43db      	mvns	r3, r3
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad54:	4a14      	ldr	r2, [pc, #80]	; (800ada8 <HAL_GPIO_Init+0x354>)
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	61fb      	str	r3, [r7, #28]
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	2b0f      	cmp	r3, #15
 800ad64:	f67f ae84 	bls.w	800aa70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ad68:	bf00      	nop
 800ad6a:	bf00      	nop
 800ad6c:	3724      	adds	r7, #36	; 0x24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40023800 	.word	0x40023800
 800ad7c:	40013800 	.word	0x40013800
 800ad80:	40020000 	.word	0x40020000
 800ad84:	40020400 	.word	0x40020400
 800ad88:	40020800 	.word	0x40020800
 800ad8c:	40020c00 	.word	0x40020c00
 800ad90:	40021000 	.word	0x40021000
 800ad94:	40021400 	.word	0x40021400
 800ad98:	40021800 	.word	0x40021800
 800ad9c:	40021c00 	.word	0x40021c00
 800ada0:	40022000 	.word	0x40022000
 800ada4:	40022400 	.word	0x40022400
 800ada8:	40013c00 	.word	0x40013c00

0800adac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800adac:	b480      	push	{r7}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adc2:	2300      	movs	r3, #0
 800adc4:	617b      	str	r3, [r7, #20]
 800adc6:	e0d9      	b.n	800af7c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800adc8:	2201      	movs	r2, #1
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	fa02 f303 	lsl.w	r3, r2, r3
 800add0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	4013      	ands	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	429a      	cmp	r2, r3
 800ade0:	f040 80c9 	bne.w	800af76 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ade4:	4a6b      	ldr	r2, [pc, #428]	; (800af94 <HAL_GPIO_DeInit+0x1e8>)
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	089b      	lsrs	r3, r3, #2
 800adea:	3302      	adds	r3, #2
 800adec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adf0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f003 0303 	and.w	r3, r3, #3
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	220f      	movs	r2, #15
 800adfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	4013      	ands	r3, r2
 800ae04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a63      	ldr	r2, [pc, #396]	; (800af98 <HAL_GPIO_DeInit+0x1ec>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d037      	beq.n	800ae7e <HAL_GPIO_DeInit+0xd2>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a62      	ldr	r2, [pc, #392]	; (800af9c <HAL_GPIO_DeInit+0x1f0>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d031      	beq.n	800ae7a <HAL_GPIO_DeInit+0xce>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a61      	ldr	r2, [pc, #388]	; (800afa0 <HAL_GPIO_DeInit+0x1f4>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d02b      	beq.n	800ae76 <HAL_GPIO_DeInit+0xca>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a60      	ldr	r2, [pc, #384]	; (800afa4 <HAL_GPIO_DeInit+0x1f8>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d025      	beq.n	800ae72 <HAL_GPIO_DeInit+0xc6>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a5f      	ldr	r2, [pc, #380]	; (800afa8 <HAL_GPIO_DeInit+0x1fc>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d01f      	beq.n	800ae6e <HAL_GPIO_DeInit+0xc2>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a5e      	ldr	r2, [pc, #376]	; (800afac <HAL_GPIO_DeInit+0x200>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d019      	beq.n	800ae6a <HAL_GPIO_DeInit+0xbe>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a5d      	ldr	r2, [pc, #372]	; (800afb0 <HAL_GPIO_DeInit+0x204>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d013      	beq.n	800ae66 <HAL_GPIO_DeInit+0xba>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a5c      	ldr	r2, [pc, #368]	; (800afb4 <HAL_GPIO_DeInit+0x208>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d00d      	beq.n	800ae62 <HAL_GPIO_DeInit+0xb6>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a5b      	ldr	r2, [pc, #364]	; (800afb8 <HAL_GPIO_DeInit+0x20c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d007      	beq.n	800ae5e <HAL_GPIO_DeInit+0xb2>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a5a      	ldr	r2, [pc, #360]	; (800afbc <HAL_GPIO_DeInit+0x210>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d101      	bne.n	800ae5a <HAL_GPIO_DeInit+0xae>
 800ae56:	2309      	movs	r3, #9
 800ae58:	e012      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae5a:	230a      	movs	r3, #10
 800ae5c:	e010      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae5e:	2308      	movs	r3, #8
 800ae60:	e00e      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae62:	2307      	movs	r3, #7
 800ae64:	e00c      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae66:	2306      	movs	r3, #6
 800ae68:	e00a      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae6a:	2305      	movs	r3, #5
 800ae6c:	e008      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae6e:	2304      	movs	r3, #4
 800ae70:	e006      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae72:	2303      	movs	r3, #3
 800ae74:	e004      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae76:	2302      	movs	r3, #2
 800ae78:	e002      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <HAL_GPIO_DeInit+0xd4>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	f002 0203 	and.w	r2, r2, #3
 800ae86:	0092      	lsls	r2, r2, #2
 800ae88:	4093      	lsls	r3, r2
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d132      	bne.n	800aef6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ae90:	4b4b      	ldr	r3, [pc, #300]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	43db      	mvns	r3, r3
 800ae98:	4949      	ldr	r1, [pc, #292]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ae9e:	4b48      	ldr	r3, [pc, #288]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	43db      	mvns	r3, r3
 800aea6:	4946      	ldr	r1, [pc, #280]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800aea8:	4013      	ands	r3, r2
 800aeaa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800aeac:	4b44      	ldr	r3, [pc, #272]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	43db      	mvns	r3, r3
 800aeb4:	4942      	ldr	r1, [pc, #264]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800aeba:	4b41      	ldr	r3, [pc, #260]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	43db      	mvns	r3, r3
 800aec2:	493f      	ldr	r1, [pc, #252]	; (800afc0 <HAL_GPIO_DeInit+0x214>)
 800aec4:	4013      	ands	r3, r2
 800aec6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	220f      	movs	r2, #15
 800aed2:	fa02 f303 	lsl.w	r3, r2, r3
 800aed6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800aed8:	4a2e      	ldr	r2, [pc, #184]	; (800af94 <HAL_GPIO_DeInit+0x1e8>)
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	089b      	lsrs	r3, r3, #2
 800aede:	3302      	adds	r3, #2
 800aee0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	43da      	mvns	r2, r3
 800aee8:	482a      	ldr	r0, [pc, #168]	; (800af94 <HAL_GPIO_DeInit+0x1e8>)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	089b      	lsrs	r3, r3, #2
 800aeee:	400a      	ands	r2, r1
 800aef0:	3302      	adds	r3, #2
 800aef2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	2103      	movs	r1, #3
 800af00:	fa01 f303 	lsl.w	r3, r1, r3
 800af04:	43db      	mvns	r3, r3
 800af06:	401a      	ands	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	08da      	lsrs	r2, r3, #3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3208      	adds	r2, #8
 800af14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f003 0307 	and.w	r3, r3, #7
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	220f      	movs	r2, #15
 800af22:	fa02 f303 	lsl.w	r3, r2, r3
 800af26:	43db      	mvns	r3, r3
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	08d2      	lsrs	r2, r2, #3
 800af2c:	4019      	ands	r1, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3208      	adds	r2, #8
 800af32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68da      	ldr	r2, [r3, #12]
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	2103      	movs	r1, #3
 800af40:	fa01 f303 	lsl.w	r3, r1, r3
 800af44:	43db      	mvns	r3, r3
 800af46:	401a      	ands	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	2101      	movs	r1, #1
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	fa01 f303 	lsl.w	r3, r1, r3
 800af58:	43db      	mvns	r3, r3
 800af5a:	401a      	ands	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689a      	ldr	r2, [r3, #8]
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	2103      	movs	r1, #3
 800af6a:	fa01 f303 	lsl.w	r3, r1, r3
 800af6e:	43db      	mvns	r3, r3
 800af70:	401a      	ands	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	3301      	adds	r3, #1
 800af7a:	617b      	str	r3, [r7, #20]
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2b0f      	cmp	r3, #15
 800af80:	f67f af22 	bls.w	800adc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800af84:	bf00      	nop
 800af86:	bf00      	nop
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	40013800 	.word	0x40013800
 800af98:	40020000 	.word	0x40020000
 800af9c:	40020400 	.word	0x40020400
 800afa0:	40020800 	.word	0x40020800
 800afa4:	40020c00 	.word	0x40020c00
 800afa8:	40021000 	.word	0x40021000
 800afac:	40021400 	.word	0x40021400
 800afb0:	40021800 	.word	0x40021800
 800afb4:	40021c00 	.word	0x40021c00
 800afb8:	40022000 	.word	0x40022000
 800afbc:	40022400 	.word	0x40022400
 800afc0:	40013c00 	.word	0x40013c00

0800afc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	887b      	ldrh	r3, [r7, #2]
 800afd6:	4013      	ands	r3, r2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
 800afe0:	e001      	b.n	800afe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	807b      	strh	r3, [r7, #2]
 800b000:	4613      	mov	r3, r2
 800b002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b004:	787b      	ldrb	r3, [r7, #1]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b00a:	887a      	ldrh	r2, [r7, #2]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b010:	e003      	b.n	800b01a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b012:	887b      	ldrh	r3, [r7, #2]
 800b014:	041a      	lsls	r2, r3, #16
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	619a      	str	r2, [r3, #24]
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
	...

0800b028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e12b      	b.n	800b292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d106      	bne.n	800b054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7fb fc20 	bl	8006894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2224      	movs	r2, #36	; 0x24
 800b058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b07a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b08a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b08c:	f001 ffde 	bl	800d04c <HAL_RCC_GetPCLK1Freq>
 800b090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	4a81      	ldr	r2, [pc, #516]	; (800b29c <HAL_I2C_Init+0x274>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d807      	bhi.n	800b0ac <HAL_I2C_Init+0x84>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4a80      	ldr	r2, [pc, #512]	; (800b2a0 <HAL_I2C_Init+0x278>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	bf94      	ite	ls
 800b0a4:	2301      	movls	r3, #1
 800b0a6:	2300      	movhi	r3, #0
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	e006      	b.n	800b0ba <HAL_I2C_Init+0x92>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4a7d      	ldr	r2, [pc, #500]	; (800b2a4 <HAL_I2C_Init+0x27c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	bf94      	ite	ls
 800b0b4:	2301      	movls	r3, #1
 800b0b6:	2300      	movhi	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e0e7      	b.n	800b292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4a78      	ldr	r2, [pc, #480]	; (800b2a8 <HAL_I2C_Init+0x280>)
 800b0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ca:	0c9b      	lsrs	r3, r3, #18
 800b0cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6a1b      	ldr	r3, [r3, #32]
 800b0e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a6a      	ldr	r2, [pc, #424]	; (800b29c <HAL_I2C_Init+0x274>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d802      	bhi.n	800b0fc <HAL_I2C_Init+0xd4>
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	e009      	b.n	800b110 <HAL_I2C_Init+0xe8>
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b102:	fb02 f303 	mul.w	r3, r2, r3
 800b106:	4a69      	ldr	r2, [pc, #420]	; (800b2ac <HAL_I2C_Init+0x284>)
 800b108:	fba2 2303 	umull	r2, r3, r2, r3
 800b10c:	099b      	lsrs	r3, r3, #6
 800b10e:	3301      	adds	r3, #1
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	6812      	ldr	r2, [r2, #0]
 800b114:	430b      	orrs	r3, r1
 800b116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	495c      	ldr	r1, [pc, #368]	; (800b29c <HAL_I2C_Init+0x274>)
 800b12c:	428b      	cmp	r3, r1
 800b12e:	d819      	bhi.n	800b164 <HAL_I2C_Init+0x13c>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	1e59      	subs	r1, r3, #1
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b13e:	1c59      	adds	r1, r3, #1
 800b140:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b144:	400b      	ands	r3, r1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00a      	beq.n	800b160 <HAL_I2C_Init+0x138>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	1e59      	subs	r1, r3, #1
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	fbb1 f3f3 	udiv	r3, r1, r3
 800b158:	3301      	adds	r3, #1
 800b15a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b15e:	e051      	b.n	800b204 <HAL_I2C_Init+0x1dc>
 800b160:	2304      	movs	r3, #4
 800b162:	e04f      	b.n	800b204 <HAL_I2C_Init+0x1dc>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d111      	bne.n	800b190 <HAL_I2C_Init+0x168>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	1e58      	subs	r0, r3, #1
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6859      	ldr	r1, [r3, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	440b      	add	r3, r1
 800b17a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b17e:	3301      	adds	r3, #1
 800b180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b184:	2b00      	cmp	r3, #0
 800b186:	bf0c      	ite	eq
 800b188:	2301      	moveq	r3, #1
 800b18a:	2300      	movne	r3, #0
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	e012      	b.n	800b1b6 <HAL_I2C_Init+0x18e>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	1e58      	subs	r0, r3, #1
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6859      	ldr	r1, [r3, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	440b      	add	r3, r1
 800b19e:	0099      	lsls	r1, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	bf0c      	ite	eq
 800b1b0:	2301      	moveq	r3, #1
 800b1b2:	2300      	movne	r3, #0
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <HAL_I2C_Init+0x196>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e022      	b.n	800b204 <HAL_I2C_Init+0x1dc>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10e      	bne.n	800b1e4 <HAL_I2C_Init+0x1bc>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	1e58      	subs	r0, r3, #1
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6859      	ldr	r1, [r3, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	440b      	add	r3, r1
 800b1d4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b1d8:	3301      	adds	r3, #1
 800b1da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1e2:	e00f      	b.n	800b204 <HAL_I2C_Init+0x1dc>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	1e58      	subs	r0, r3, #1
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6859      	ldr	r1, [r3, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	0099      	lsls	r1, r3, #2
 800b1f4:	440b      	add	r3, r1
 800b1f6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	6809      	ldr	r1, [r1, #0]
 800b208:	4313      	orrs	r3, r2
 800b20a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69da      	ldr	r2, [r3, #28]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	431a      	orrs	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	430a      	orrs	r2, r1
 800b226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	6911      	ldr	r1, [r2, #16]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	68d2      	ldr	r2, [r2, #12]
 800b23e:	4311      	orrs	r1, r2
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6812      	ldr	r2, [r2, #0]
 800b244:	430b      	orrs	r3, r1
 800b246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	695a      	ldr	r2, [r3, #20]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	430a      	orrs	r2, r1
 800b262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f042 0201 	orr.w	r2, r2, #1
 800b272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2220      	movs	r2, #32
 800b27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	000186a0 	.word	0x000186a0
 800b2a0:	001e847f 	.word	0x001e847f
 800b2a4:	003d08ff 	.word	0x003d08ff
 800b2a8:	431bde83 	.word	0x431bde83
 800b2ac:	10624dd3 	.word	0x10624dd3

0800b2b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e021      	b.n	800b306 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2224      	movs	r2, #36	; 0x24
 800b2c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0201 	bic.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7fb fb44 	bl	8006968 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af02      	add	r7, sp, #8
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	4608      	mov	r0, r1
 800b31a:	4611      	mov	r1, r2
 800b31c:	461a      	mov	r2, r3
 800b31e:	4603      	mov	r3, r0
 800b320:	817b      	strh	r3, [r7, #10]
 800b322:	460b      	mov	r3, r1
 800b324:	813b      	strh	r3, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b32a:	f7fe fe1b 	bl	8009f64 <HAL_GetTick>
 800b32e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b20      	cmp	r3, #32
 800b33a:	f040 80d9 	bne.w	800b4f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	2319      	movs	r3, #25
 800b344:	2201      	movs	r2, #1
 800b346:	496d      	ldr	r1, [pc, #436]	; (800b4fc <HAL_I2C_Mem_Write+0x1ec>)
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fc8d 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b354:	2302      	movs	r3, #2
 800b356:	e0cc      	b.n	800b4f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d101      	bne.n	800b366 <HAL_I2C_Mem_Write+0x56>
 800b362:	2302      	movs	r3, #2
 800b364:	e0c5      	b.n	800b4f2 <HAL_I2C_Mem_Write+0x1e2>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2201      	movs	r2, #1
 800b36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d007      	beq.n	800b38c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f042 0201 	orr.w	r2, r2, #1
 800b38a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b39a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2221      	movs	r2, #33	; 0x21
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2240      	movs	r2, #64	; 0x40
 800b3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a3a      	ldr	r2, [r7, #32]
 800b3b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4a4d      	ldr	r2, [pc, #308]	; (800b500 <HAL_I2C_Mem_Write+0x1f0>)
 800b3cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3ce:	88f8      	ldrh	r0, [r7, #6]
 800b3d0:	893a      	ldrh	r2, [r7, #8]
 800b3d2:	8979      	ldrh	r1, [r7, #10]
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	4603      	mov	r3, r0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 fac4 	bl	800b96c <I2C_RequestMemoryWrite>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d052      	beq.n	800b490 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e081      	b.n	800b4f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 fd0e 	bl	800be14 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00d      	beq.n	800b41a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	2b04      	cmp	r3, #4
 800b404:	d107      	bne.n	800b416 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e06b      	b.n	800b4f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	781a      	ldrb	r2, [r3, #0]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b434:	3b01      	subs	r3, #1
 800b436:	b29a      	uxth	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b440:	b29b      	uxth	r3, r3
 800b442:	3b01      	subs	r3, #1
 800b444:	b29a      	uxth	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	695b      	ldr	r3, [r3, #20]
 800b450:	f003 0304 	and.w	r3, r3, #4
 800b454:	2b04      	cmp	r3, #4
 800b456:	d11b      	bne.n	800b490 <HAL_I2C_Mem_Write+0x180>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d017      	beq.n	800b490 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	781a      	ldrb	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b47a:	3b01      	subs	r3, #1
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b486:	b29b      	uxth	r3, r3
 800b488:	3b01      	subs	r3, #1
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1aa      	bne.n	800b3ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 fcfa 	bl	800be96 <I2C_WaitOnBTFFlagUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00d      	beq.n	800b4c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	d107      	bne.n	800b4c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e016      	b.n	800b4f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	e000      	b.n	800b4f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b4f0:	2302      	movs	r3, #2
  }
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	00100002 	.word	0x00100002
 800b500:	ffff0000 	.word	0xffff0000

0800b504 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b08c      	sub	sp, #48	; 0x30
 800b508:	af02      	add	r7, sp, #8
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	4608      	mov	r0, r1
 800b50e:	4611      	mov	r1, r2
 800b510:	461a      	mov	r2, r3
 800b512:	4603      	mov	r3, r0
 800b514:	817b      	strh	r3, [r7, #10]
 800b516:	460b      	mov	r3, r1
 800b518:	813b      	strh	r3, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b51e:	f7fe fd21 	bl	8009f64 <HAL_GetTick>
 800b522:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b20      	cmp	r3, #32
 800b52e:	f040 8208 	bne.w	800b942 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	2319      	movs	r3, #25
 800b538:	2201      	movs	r2, #1
 800b53a:	497b      	ldr	r1, [pc, #492]	; (800b728 <HAL_I2C_Mem_Read+0x224>)
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 fb93 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b548:	2302      	movs	r3, #2
 800b54a:	e1fb      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b552:	2b01      	cmp	r3, #1
 800b554:	d101      	bne.n	800b55a <HAL_I2C_Mem_Read+0x56>
 800b556:	2302      	movs	r3, #2
 800b558:	e1f4      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d007      	beq.n	800b580 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f042 0201 	orr.w	r2, r2, #1
 800b57e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b58e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2222      	movs	r2, #34	; 0x22
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2240      	movs	r2, #64	; 0x40
 800b59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b5b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4a5b      	ldr	r2, [pc, #364]	; (800b72c <HAL_I2C_Mem_Read+0x228>)
 800b5c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5c2:	88f8      	ldrh	r0, [r7, #6]
 800b5c4:	893a      	ldrh	r2, [r7, #8]
 800b5c6:	8979      	ldrh	r1, [r7, #10]
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	9301      	str	r3, [sp, #4]
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 fa60 	bl	800ba98 <I2C_RequestMemoryRead>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e1b0      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d113      	bne.n	800b612 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	623b      	str	r3, [r7, #32]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	623b      	str	r3, [r7, #32]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	623b      	str	r3, [r7, #32]
 800b5fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	e184      	b.n	800b91c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b616:	2b01      	cmp	r3, #1
 800b618:	d11b      	bne.n	800b652 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b628:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b62a:	2300      	movs	r3, #0
 800b62c:	61fb      	str	r3, [r7, #28]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	61fb      	str	r3, [r7, #28]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	61fb      	str	r3, [r7, #28]
 800b63e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	e164      	b.n	800b91c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b656:	2b02      	cmp	r3, #2
 800b658:	d11b      	bne.n	800b692 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b668:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b67a:	2300      	movs	r3, #0
 800b67c:	61bb      	str	r3, [r7, #24]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	695b      	ldr	r3, [r3, #20]
 800b684:	61bb      	str	r3, [r7, #24]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	61bb      	str	r3, [r7, #24]
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	e144      	b.n	800b91c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b692:	2300      	movs	r3, #0
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	695b      	ldr	r3, [r3, #20]
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	617b      	str	r3, [r7, #20]
 800b6a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b6a8:	e138      	b.n	800b91c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	f200 80f1 	bhi.w	800b896 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d123      	bne.n	800b704 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 fc29 	bl	800bf18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e139      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	691a      	ldr	r2, [r3, #16]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	b2d2      	uxtb	r2, r2
 800b6dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b702:	e10b      	b.n	800b91c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d14e      	bne.n	800b7aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	2200      	movs	r2, #0
 800b714:	4906      	ldr	r1, [pc, #24]	; (800b730 <HAL_I2C_Mem_Read+0x22c>)
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 faa6 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d008      	beq.n	800b734 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e10e      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
 800b726:	bf00      	nop
 800b728:	00100002 	.word	0x00100002
 800b72c:	ffff0000 	.word	0xffff0000
 800b730:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	691a      	ldr	r2, [r3, #16]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74e:	b2d2      	uxtb	r2, r2
 800b750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b760:	3b01      	subs	r3, #1
 800b762:	b29a      	uxth	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	3b01      	subs	r3, #1
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	691a      	ldr	r2, [r3, #16]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	b2d2      	uxtb	r2, r2
 800b782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b792:	3b01      	subs	r3, #1
 800b794:	b29a      	uxth	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7a8:	e0b8      	b.n	800b91c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	4966      	ldr	r1, [pc, #408]	; (800b94c <HAL_I2C_Mem_Read+0x448>)
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 fa57 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e0bf      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	691a      	ldr	r2, [r3, #16]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	b2d2      	uxtb	r2, r2
 800b7e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	3b01      	subs	r3, #1
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80c:	2200      	movs	r2, #0
 800b80e:	494f      	ldr	r1, [pc, #316]	; (800b94c <HAL_I2C_Mem_Read+0x448>)
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 fa29 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e091      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b82e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	691a      	ldr	r2, [r3, #16]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	b2d2      	uxtb	r2, r2
 800b83c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b858:	b29b      	uxth	r3, r3
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	691a      	ldr	r2, [r3, #16]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	b2d2      	uxtb	r2, r2
 800b86e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b87e:	3b01      	subs	r3, #1
 800b880:	b29a      	uxth	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	3b01      	subs	r3, #1
 800b88e:	b29a      	uxth	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b894:	e042      	b.n	800b91c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 fb3c 	bl	800bf18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e04c      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	f003 0304 	and.w	r3, r3, #4
 800b8e6:	2b04      	cmp	r3, #4
 800b8e8:	d118      	bne.n	800b91c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	b2d2      	uxtb	r2, r2
 800b8f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b906:	3b01      	subs	r3, #1
 800b908:	b29a      	uxth	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b912:	b29b      	uxth	r3, r3
 800b914:	3b01      	subs	r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b920:	2b00      	cmp	r3, #0
 800b922:	f47f aec2 	bne.w	800b6aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2220      	movs	r2, #32
 800b92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	e000      	b.n	800b944 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b942:	2302      	movs	r3, #2
  }
}
 800b944:	4618      	mov	r0, r3
 800b946:	3728      	adds	r7, #40	; 0x28
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	00010004 	.word	0x00010004

0800b950 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b95e:	b2db      	uxtb	r3, r3
}
 800b960:	4618      	mov	r0, r3
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af02      	add	r7, sp, #8
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	461a      	mov	r2, r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	817b      	strh	r3, [r7, #10]
 800b97e:	460b      	mov	r3, r1
 800b980:	813b      	strh	r3, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 f960 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00d      	beq.n	800b9ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9bc:	d103      	bne.n	800b9c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e05f      	b.n	800ba8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b9ca:	897b      	ldrh	r3, [r7, #10]
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b9d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	6a3a      	ldr	r2, [r7, #32]
 800b9de:	492d      	ldr	r1, [pc, #180]	; (800ba94 <I2C_RequestMemoryWrite+0x128>)
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 f998 	bl	800bd16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e04c      	b.n	800ba8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	617b      	str	r3, [r7, #20]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	617b      	str	r3, [r7, #20]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba08:	6a39      	ldr	r1, [r7, #32]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f000 fa02 	bl	800be14 <I2C_WaitOnTXEFlagUntilTimeout>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00d      	beq.n	800ba32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	d107      	bne.n	800ba2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e02b      	b.n	800ba8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba32:	88fb      	ldrh	r3, [r7, #6]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d105      	bne.n	800ba44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ba38:	893b      	ldrh	r3, [r7, #8]
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	611a      	str	r2, [r3, #16]
 800ba42:	e021      	b.n	800ba88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ba44:	893b      	ldrh	r3, [r7, #8]
 800ba46:	0a1b      	lsrs	r3, r3, #8
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba54:	6a39      	ldr	r1, [r7, #32]
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 f9dc 	bl	800be14 <I2C_WaitOnTXEFlagUntilTimeout>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00d      	beq.n	800ba7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba66:	2b04      	cmp	r3, #4
 800ba68:	d107      	bne.n	800ba7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e005      	b.n	800ba8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ba7e:	893b      	ldrh	r3, [r7, #8]
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	00010002 	.word	0x00010002

0800ba98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b088      	sub	sp, #32
 800ba9c:	af02      	add	r7, sp, #8
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	461a      	mov	r2, r3
 800baa6:	4603      	mov	r3, r0
 800baa8:	817b      	strh	r3, [r7, #10]
 800baaa:	460b      	mov	r3, r1
 800baac:	813b      	strh	r3, [r7, #8]
 800baae:	4613      	mov	r3, r2
 800bab0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bac0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	6a3b      	ldr	r3, [r7, #32]
 800bad8:	2200      	movs	r2, #0
 800bada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 f8c2 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00d      	beq.n	800bb06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baf8:	d103      	bne.n	800bb02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e0aa      	b.n	800bc5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bb06:	897b      	ldrh	r3, [r7, #10]
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bb14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	6a3a      	ldr	r2, [r7, #32]
 800bb1a:	4952      	ldr	r1, [pc, #328]	; (800bc64 <I2C_RequestMemoryRead+0x1cc>)
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 f8fa 	bl	800bd16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e097      	b.n	800bc5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb44:	6a39      	ldr	r1, [r7, #32]
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 f964 	bl	800be14 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00d      	beq.n	800bb6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	d107      	bne.n	800bb6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e076      	b.n	800bc5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bb6e:	88fb      	ldrh	r3, [r7, #6]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d105      	bne.n	800bb80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bb74:	893b      	ldrh	r3, [r7, #8]
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	611a      	str	r2, [r3, #16]
 800bb7e:	e021      	b.n	800bbc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bb80:	893b      	ldrh	r3, [r7, #8]
 800bb82:	0a1b      	lsrs	r3, r3, #8
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb90:	6a39      	ldr	r1, [r7, #32]
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 f93e 	bl	800be14 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00d      	beq.n	800bbba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba2:	2b04      	cmp	r3, #4
 800bba4:	d107      	bne.n	800bbb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e050      	b.n	800bc5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bbba:	893b      	ldrh	r3, [r7, #8]
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbc6:	6a39      	ldr	r1, [r7, #32]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f923 	bl	800be14 <I2C_WaitOnTXEFlagUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00d      	beq.n	800bbf0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d107      	bne.n	800bbec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e035      	b.n	800bc5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f82b 	bl	800bc68 <I2C_WaitOnFlagUntilTimeout>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00d      	beq.n	800bc34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc26:	d103      	bne.n	800bc30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e013      	b.n	800bc5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bc34:	897b      	ldrh	r3, [r7, #10]
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	f043 0301 	orr.w	r3, r3, #1
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	6a3a      	ldr	r2, [r7, #32]
 800bc48:	4906      	ldr	r1, [pc, #24]	; (800bc64 <I2C_RequestMemoryRead+0x1cc>)
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f000 f863 	bl	800bd16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e000      	b.n	800bc5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	00010002 	.word	0x00010002

0800bc68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	4613      	mov	r3, r2
 800bc76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc78:	e025      	b.n	800bcc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc80:	d021      	beq.n	800bcc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc82:	f7fe f96f 	bl	8009f64 <HAL_GetTick>
 800bc86:	4602      	mov	r2, r0
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d302      	bcc.n	800bc98 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d116      	bne.n	800bcc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2220      	movs	r2, #32
 800bca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	f043 0220 	orr.w	r2, r3, #32
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e023      	b.n	800bd0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	0c1b      	lsrs	r3, r3, #16
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d10d      	bne.n	800bcec <I2C_WaitOnFlagUntilTimeout+0x84>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	43da      	mvns	r2, r3
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	4013      	ands	r3, r2
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bf0c      	ite	eq
 800bce2:	2301      	moveq	r3, #1
 800bce4:	2300      	movne	r3, #0
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	e00c      	b.n	800bd06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	43da      	mvns	r2, r3
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	bf0c      	ite	eq
 800bcfe:	2301      	moveq	r3, #1
 800bd00:	2300      	movne	r3, #0
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	461a      	mov	r2, r3
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d0b6      	beq.n	800bc7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b084      	sub	sp, #16
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	607a      	str	r2, [r7, #4]
 800bd22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bd24:	e051      	b.n	800bdca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd34:	d123      	bne.n	800bd7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2220      	movs	r2, #32
 800bd5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6a:	f043 0204 	orr.w	r2, r3, #4
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e046      	b.n	800be0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd84:	d021      	beq.n	800bdca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd86:	f7fe f8ed 	bl	8009f64 <HAL_GetTick>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d302      	bcc.n	800bd9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d116      	bne.n	800bdca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2220      	movs	r2, #32
 800bda6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	f043 0220 	orr.w	r2, r3, #32
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e020      	b.n	800be0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	0c1b      	lsrs	r3, r3, #16
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d10c      	bne.n	800bdee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	43da      	mvns	r2, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	4013      	ands	r3, r2
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	bf14      	ite	ne
 800bde6:	2301      	movne	r3, #1
 800bde8:	2300      	moveq	r3, #0
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	e00b      	b.n	800be06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	43da      	mvns	r2, r3
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bf14      	ite	ne
 800be00:	2301      	movne	r3, #1
 800be02:	2300      	moveq	r3, #0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d18d      	bne.n	800bd26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be20:	e02d      	b.n	800be7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f000 f8ce 	bl	800bfc4 <I2C_IsAcknowledgeFailed>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e02d      	b.n	800be8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be38:	d021      	beq.n	800be7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be3a:	f7fe f893 	bl	8009f64 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	429a      	cmp	r2, r3
 800be48:	d302      	bcc.n	800be50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d116      	bne.n	800be7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2220      	movs	r2, #32
 800be5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	f043 0220 	orr.w	r2, r3, #32
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e007      	b.n	800be8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be88:	2b80      	cmp	r3, #128	; 0x80
 800be8a:	d1ca      	bne.n	800be22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bea2:	e02d      	b.n	800bf00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f000 f88d 	bl	800bfc4 <I2C_IsAcknowledgeFailed>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d001      	beq.n	800beb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e02d      	b.n	800bf10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d021      	beq.n	800bf00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bebc:	f7fe f852 	bl	8009f64 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d302      	bcc.n	800bed2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d116      	bne.n	800bf00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2220      	movs	r2, #32
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beec:	f043 0220 	orr.w	r2, r3, #32
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	e007      	b.n	800bf10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	f003 0304 	and.w	r3, r3, #4
 800bf0a:	2b04      	cmp	r3, #4
 800bf0c:	d1ca      	bne.n	800bea4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bf24:	e042      	b.n	800bfac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	f003 0310 	and.w	r3, r3, #16
 800bf30:	2b10      	cmp	r3, #16
 800bf32:	d119      	bne.n	800bf68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f06f 0210 	mvn.w	r2, #16
 800bf3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2220      	movs	r2, #32
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e029      	b.n	800bfbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf68:	f7fd fffc 	bl	8009f64 <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d302      	bcc.n	800bf7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d116      	bne.n	800bfac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2220      	movs	r2, #32
 800bf88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf98:	f043 0220 	orr.w	r2, r3, #32
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e007      	b.n	800bfbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb6:	2b40      	cmp	r3, #64	; 0x40
 800bfb8:	d1b5      	bne.n	800bf26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfda:	d11b      	bne.n	800c014 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bfe4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c000:	f043 0204 	orr.w	r2, r3, #4
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e000      	b.n	800c016 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b20      	cmp	r3, #32
 800c036:	d129      	bne.n	800c08c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2224      	movs	r2, #36	; 0x24
 800c03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f022 0201 	bic.w	r2, r2, #1
 800c04e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f022 0210 	bic.w	r2, r2, #16
 800c05e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f042 0201 	orr.w	r2, r2, #1
 800c07e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2220      	movs	r2, #32
 800c084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	e000      	b.n	800c08e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800c08c:	2302      	movs	r3, #2
  }
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b085      	sub	sp, #20
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b20      	cmp	r3, #32
 800c0b2:	d12a      	bne.n	800c10a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2224      	movs	r2, #36	; 0x24
 800c0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 0201 	bic.w	r2, r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800c0d4:	89fb      	ldrh	r3, [r7, #14]
 800c0d6:	f023 030f 	bic.w	r3, r3, #15
 800c0da:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	89fb      	ldrh	r3, [r7, #14]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	89fa      	ldrh	r2, [r7, #14]
 800c0ec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f042 0201 	orr.w	r2, r2, #1
 800c0fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2220      	movs	r2, #32
 800c102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	e000      	b.n	800c10c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800c10a:	2302      	movs	r3, #2
  }
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e0bf      	b.n	800c2aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d106      	bne.n	800c144 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7fa fcb8 	bl	8006ab4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2202      	movs	r2, #2
 800c148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	699a      	ldr	r2, [r3, #24]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c15a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6999      	ldr	r1, [r3, #24]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c170:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	430a      	orrs	r2, r1
 800c17e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6899      	ldr	r1, [r3, #8]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	4b4a      	ldr	r3, [pc, #296]	; (800c2b4 <HAL_LTDC_Init+0x19c>)
 800c18c:	400b      	ands	r3, r1
 800c18e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	041b      	lsls	r3, r3, #16
 800c196:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6899      	ldr	r1, [r3, #8]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	699a      	ldr	r2, [r3, #24]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	431a      	orrs	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68d9      	ldr	r1, [r3, #12]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	4b3e      	ldr	r3, [pc, #248]	; (800c2b4 <HAL_LTDC_Init+0x19c>)
 800c1ba:	400b      	ands	r3, r1
 800c1bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	041b      	lsls	r3, r3, #16
 800c1c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68d9      	ldr	r1, [r3, #12]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a1a      	ldr	r2, [r3, #32]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	431a      	orrs	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6919      	ldr	r1, [r3, #16]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	4b33      	ldr	r3, [pc, #204]	; (800c2b4 <HAL_LTDC_Init+0x19c>)
 800c1e8:	400b      	ands	r3, r1
 800c1ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	041b      	lsls	r3, r3, #16
 800c1f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6919      	ldr	r1, [r3, #16]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	431a      	orrs	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6959      	ldr	r1, [r3, #20]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	4b27      	ldr	r3, [pc, #156]	; (800c2b4 <HAL_LTDC_Init+0x19c>)
 800c216:	400b      	ands	r3, r1
 800c218:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21e:	041b      	lsls	r3, r3, #16
 800c220:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	6959      	ldr	r1, [r3, #20]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	431a      	orrs	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	430a      	orrs	r2, r1
 800c236:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c23e:	021b      	lsls	r3, r3, #8
 800c240:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c248:	041b      	lsls	r3, r3, #16
 800c24a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c25a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c26e:	431a      	orrs	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f042 0206 	orr.w	r2, r2, #6
 800c286:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	699a      	ldr	r2, [r3, #24]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f042 0201 	orr.w	r2, r2, #1
 800c296:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	f000f800 	.word	0xf000f800

0800c2b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c2b8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d101      	bne.n	800c2d2 <HAL_LTDC_ConfigLayer+0x1a>
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	e02c      	b.n	800c32c <HAL_LTDC_ConfigLayer+0x74>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2202      	movs	r2, #2
 800c2de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2134      	movs	r1, #52	; 0x34
 800c2e8:	fb01 f303 	mul.w	r3, r1, r3
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	4614      	mov	r4, r2
 800c2f6:	461d      	mov	r5, r3
 800c2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 f8b9 	bl	800c484 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2201      	movs	r2, #1
 800c318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bdb0      	pop	{r4, r5, r7, pc}

0800c334 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c346:	2b01      	cmp	r3, #1
 800c348:	d101      	bne.n	800c34e <HAL_LTDC_ConfigColorKeying+0x1a>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e030      	b.n	800c3b0 <HAL_LTDC_ConfigColorKeying+0x7c>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2202      	movs	r2, #2
 800c35a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	01db      	lsls	r3, r3, #7
 800c368:	4413      	add	r3, r2
 800c36a:	3384      	adds	r3, #132	; 0x84
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	6812      	ldr	r2, [r2, #0]
 800c372:	4611      	mov	r1, r2
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	01d2      	lsls	r2, r2, #7
 800c378:	440a      	add	r2, r1
 800c37a:	3284      	adds	r2, #132	; 0x84
 800c37c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c380:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	01db      	lsls	r3, r3, #7
 800c38c:	4413      	add	r3, r2
 800c38e:	3384      	adds	r3, #132	; 0x84
 800c390:	461a      	mov	r2, r3
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2201      	movs	r2, #1
 800c39c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <HAL_LTDC_EnableColorKeying+0x18>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e026      	b.n	800c422 <HAL_LTDC_EnableColorKeying+0x66>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2202      	movs	r2, #2
 800c3e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	01db      	lsls	r3, r3, #7
 800c3ee:	4413      	add	r3, r2
 800c3f0:	3384      	adds	r3, #132	; 0x84
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6812      	ldr	r2, [r2, #0]
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	01d2      	lsls	r2, r2, #7
 800c3fe:	440a      	add	r2, r1
 800c400:	3284      	adds	r2, #132	; 0x84
 800c402:	f043 0302 	orr.w	r3, r3, #2
 800c406:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2201      	movs	r2, #1
 800c40e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
	...

0800c430 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d101      	bne.n	800c446 <HAL_LTDC_EnableDither+0x16>
 800c442:	2302      	movs	r3, #2
 800c444:	e016      	b.n	800c474 <HAL_LTDC_EnableDither+0x44>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2202      	movs	r2, #2
 800c452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800c456:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <HAL_LTDC_EnableDither+0x50>)
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	4a09      	ldr	r2, [pc, #36]	; (800c480 <HAL_LTDC_EnableDither+0x50>)
 800c45c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c460:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2201      	movs	r2, #1
 800c466:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	40016800 	.word	0x40016800

0800c484 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c484:	b480      	push	{r7}
 800c486:	b089      	sub	sp, #36	; 0x24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4a0:	4413      	add	r3, r2
 800c4a2:	041b      	lsls	r3, r3, #16
 800c4a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	01db      	lsls	r3, r3, #7
 800c4b0:	4413      	add	r3, r2
 800c4b2:	3384      	adds	r3, #132	; 0x84
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	6812      	ldr	r2, [r2, #0]
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	01d2      	lsls	r2, r2, #7
 800c4c0:	440a      	add	r2, r1
 800c4c2:	3284      	adds	r2, #132	; 0x84
 800c4c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c4c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	0c1b      	lsrs	r3, r3, #16
 800c4d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4da:	4413      	add	r3, r2
 800c4dc:	1c5a      	adds	r2, r3, #1
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	01db      	lsls	r3, r3, #7
 800c4e8:	440b      	add	r3, r1
 800c4ea:	3384      	adds	r3, #132	; 0x84
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c502:	4413      	add	r3, r2
 800c504:	041b      	lsls	r3, r3, #16
 800c506:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	461a      	mov	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	01db      	lsls	r3, r3, #7
 800c512:	4413      	add	r3, r2
 800c514:	3384      	adds	r3, #132	; 0x84
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	6812      	ldr	r2, [r2, #0]
 800c51c:	4611      	mov	r1, r2
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	01d2      	lsls	r2, r2, #7
 800c522:	440a      	add	r2, r1
 800c524:	3284      	adds	r2, #132	; 0x84
 800c526:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c52a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	689a      	ldr	r2, [r3, #8]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c53a:	4413      	add	r3, r2
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4619      	mov	r1, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	01db      	lsls	r3, r3, #7
 800c548:	440b      	add	r3, r1
 800c54a:	3384      	adds	r3, #132	; 0x84
 800c54c:	4619      	mov	r1, r3
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	4313      	orrs	r3, r2
 800c552:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	01db      	lsls	r3, r3, #7
 800c55e:	4413      	add	r3, r2
 800c560:	3384      	adds	r3, #132	; 0x84
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	6812      	ldr	r2, [r2, #0]
 800c568:	4611      	mov	r1, r2
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	01d2      	lsls	r2, r2, #7
 800c56e:	440a      	add	r2, r1
 800c570:	3284      	adds	r2, #132	; 0x84
 800c572:	f023 0307 	bic.w	r3, r3, #7
 800c576:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	461a      	mov	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	01db      	lsls	r3, r3, #7
 800c582:	4413      	add	r3, r2
 800c584:	3384      	adds	r3, #132	; 0x84
 800c586:	461a      	mov	r2, r3
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c594:	021b      	lsls	r3, r3, #8
 800c596:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c59e:	041b      	lsls	r3, r3, #16
 800c5a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	061b      	lsls	r3, r3, #24
 800c5a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	01db      	lsls	r3, r3, #7
 800c5b4:	4413      	add	r3, r2
 800c5b6:	3384      	adds	r3, #132	; 0x84
 800c5b8:	699b      	ldr	r3, [r3, #24]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	01db      	lsls	r3, r3, #7
 800c5c4:	4413      	add	r3, r2
 800c5c6:	3384      	adds	r3, #132	; 0x84
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	431a      	orrs	r2, r3
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	01db      	lsls	r3, r3, #7
 800c5e8:	440b      	add	r3, r1
 800c5ea:	3384      	adds	r3, #132	; 0x84
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	01db      	lsls	r3, r3, #7
 800c5fe:	4413      	add	r3, r2
 800c600:	3384      	adds	r3, #132	; 0x84
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	6812      	ldr	r2, [r2, #0]
 800c608:	4611      	mov	r1, r2
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	01d2      	lsls	r2, r2, #7
 800c60e:	440a      	add	r2, r1
 800c610:	3284      	adds	r2, #132	; 0x84
 800c612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c616:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	461a      	mov	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	01db      	lsls	r3, r3, #7
 800c622:	4413      	add	r3, r2
 800c624:	3384      	adds	r3, #132	; 0x84
 800c626:	461a      	mov	r2, r3
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	01db      	lsls	r3, r3, #7
 800c638:	4413      	add	r3, r2
 800c63a:	3384      	adds	r3, #132	; 0x84
 800c63c:	69db      	ldr	r3, [r3, #28]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	6812      	ldr	r2, [r2, #0]
 800c642:	4611      	mov	r1, r2
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	01d2      	lsls	r2, r2, #7
 800c648:	440a      	add	r2, r1
 800c64a:	3284      	adds	r2, #132	; 0x84
 800c64c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c650:	f023 0307 	bic.w	r3, r3, #7
 800c654:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	69da      	ldr	r2, [r3, #28]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	6809      	ldr	r1, [r1, #0]
 800c662:	4608      	mov	r0, r1
 800c664:	6879      	ldr	r1, [r7, #4]
 800c666:	01c9      	lsls	r1, r1, #7
 800c668:	4401      	add	r1, r0
 800c66a:	3184      	adds	r1, #132	; 0x84
 800c66c:	4313      	orrs	r3, r2
 800c66e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	461a      	mov	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	01db      	lsls	r3, r3, #7
 800c67a:	4413      	add	r3, r2
 800c67c:	3384      	adds	r3, #132	; 0x84
 800c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	01db      	lsls	r3, r3, #7
 800c68a:	4413      	add	r3, r2
 800c68c:	3384      	adds	r3, #132	; 0x84
 800c68e:	461a      	mov	r2, r3
 800c690:	2300      	movs	r3, #0
 800c692:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	461a      	mov	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	01db      	lsls	r3, r3, #7
 800c69e:	4413      	add	r3, r2
 800c6a0:	3384      	adds	r3, #132	; 0x84
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d102      	bne.n	800c6b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800c6b2:	2304      	movs	r3, #4
 800c6b4:	61fb      	str	r3, [r7, #28]
 800c6b6:	e01b      	b.n	800c6f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d102      	bne.n	800c6c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	61fb      	str	r3, [r7, #28]
 800c6c4:	e014      	b.n	800c6f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	d00b      	beq.n	800c6e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d007      	beq.n	800c6e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d003      	beq.n	800c6e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c6e2:	2b07      	cmp	r3, #7
 800c6e4:	d102      	bne.n	800c6ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	61fb      	str	r3, [r7, #28]
 800c6ea:	e001      	b.n	800c6f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	01db      	lsls	r3, r3, #7
 800c6fa:	4413      	add	r3, r2
 800c6fc:	3384      	adds	r3, #132	; 0x84
 800c6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	6812      	ldr	r2, [r2, #0]
 800c704:	4611      	mov	r1, r2
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	01d2      	lsls	r2, r2, #7
 800c70a:	440a      	add	r2, r1
 800c70c:	3284      	adds	r2, #132	; 0x84
 800c70e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c712:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c718:	69fa      	ldr	r2, [r7, #28]
 800c71a:	fb02 f303 	mul.w	r3, r2, r3
 800c71e:	041a      	lsls	r2, r3, #16
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6859      	ldr	r1, [r3, #4]
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	1acb      	subs	r3, r1, r3
 800c72a:	69f9      	ldr	r1, [r7, #28]
 800c72c:	fb01 f303 	mul.w	r3, r1, r3
 800c730:	3303      	adds	r3, #3
 800c732:	68f9      	ldr	r1, [r7, #12]
 800c734:	6809      	ldr	r1, [r1, #0]
 800c736:	4608      	mov	r0, r1
 800c738:	6879      	ldr	r1, [r7, #4]
 800c73a:	01c9      	lsls	r1, r1, #7
 800c73c:	4401      	add	r1, r0
 800c73e:	3184      	adds	r1, #132	; 0x84
 800c740:	4313      	orrs	r3, r2
 800c742:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	01db      	lsls	r3, r3, #7
 800c74e:	4413      	add	r3, r2
 800c750:	3384      	adds	r3, #132	; 0x84
 800c752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	4611      	mov	r1, r2
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	01d2      	lsls	r2, r2, #7
 800c75e:	440a      	add	r2, r1
 800c760:	3284      	adds	r2, #132	; 0x84
 800c762:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	461a      	mov	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	01db      	lsls	r3, r3, #7
 800c776:	4413      	add	r3, r2
 800c778:	3384      	adds	r3, #132	; 0x84
 800c77a:	461a      	mov	r2, r3
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	01db      	lsls	r3, r3, #7
 800c78c:	4413      	add	r3, r2
 800c78e:	3384      	adds	r3, #132	; 0x84
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	4611      	mov	r1, r2
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	01d2      	lsls	r2, r2, #7
 800c79c:	440a      	add	r2, r1
 800c79e:	3284      	adds	r2, #132	; 0x84
 800c7a0:	f043 0301 	orr.w	r3, r3, #1
 800c7a4:	6013      	str	r3, [r2, #0]
}
 800c7a6:	bf00      	nop
 800c7a8:	3724      	adds	r7, #36	; 0x24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
	...

0800c7b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b086      	sub	sp, #24
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d101      	bne.n	800c7c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e264      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d075      	beq.n	800c8be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c7d2:	4ba3      	ldr	r3, [pc, #652]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	f003 030c 	and.w	r3, r3, #12
 800c7da:	2b04      	cmp	r3, #4
 800c7dc:	d00c      	beq.n	800c7f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7de:	4ba0      	ldr	r3, [pc, #640]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c7e6:	2b08      	cmp	r3, #8
 800c7e8:	d112      	bne.n	800c810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7ea:	4b9d      	ldr	r3, [pc, #628]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7f6:	d10b      	bne.n	800c810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7f8:	4b99      	ldr	r3, [pc, #612]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d05b      	beq.n	800c8bc <HAL_RCC_OscConfig+0x108>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d157      	bne.n	800c8bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	e23f      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c818:	d106      	bne.n	800c828 <HAL_RCC_OscConfig+0x74>
 800c81a:	4b91      	ldr	r3, [pc, #580]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a90      	ldr	r2, [pc, #576]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	e01d      	b.n	800c864 <HAL_RCC_OscConfig+0xb0>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c830:	d10c      	bne.n	800c84c <HAL_RCC_OscConfig+0x98>
 800c832:	4b8b      	ldr	r3, [pc, #556]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a8a      	ldr	r2, [pc, #552]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	4b88      	ldr	r3, [pc, #544]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a87      	ldr	r2, [pc, #540]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c848:	6013      	str	r3, [r2, #0]
 800c84a:	e00b      	b.n	800c864 <HAL_RCC_OscConfig+0xb0>
 800c84c:	4b84      	ldr	r3, [pc, #528]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a83      	ldr	r2, [pc, #524]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	4b81      	ldr	r3, [pc, #516]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a80      	ldr	r2, [pc, #512]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c85e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d013      	beq.n	800c894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c86c:	f7fd fb7a 	bl	8009f64 <HAL_GetTick>
 800c870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c872:	e008      	b.n	800c886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c874:	f7fd fb76 	bl	8009f64 <HAL_GetTick>
 800c878:	4602      	mov	r2, r0
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	2b64      	cmp	r3, #100	; 0x64
 800c880:	d901      	bls.n	800c886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c882:	2303      	movs	r3, #3
 800c884:	e204      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c886:	4b76      	ldr	r3, [pc, #472]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0f0      	beq.n	800c874 <HAL_RCC_OscConfig+0xc0>
 800c892:	e014      	b.n	800c8be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c894:	f7fd fb66 	bl	8009f64 <HAL_GetTick>
 800c898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c89a:	e008      	b.n	800c8ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c89c:	f7fd fb62 	bl	8009f64 <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b64      	cmp	r3, #100	; 0x64
 800c8a8:	d901      	bls.n	800c8ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e1f0      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c8ae:	4b6c      	ldr	r3, [pc, #432]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f0      	bne.n	800c89c <HAL_RCC_OscConfig+0xe8>
 800c8ba:	e000      	b.n	800c8be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 0302 	and.w	r3, r3, #2
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d063      	beq.n	800c992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c8ca:	4b65      	ldr	r3, [pc, #404]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f003 030c 	and.w	r3, r3, #12
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00b      	beq.n	800c8ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c8d6:	4b62      	ldr	r3, [pc, #392]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c8de:	2b08      	cmp	r3, #8
 800c8e0:	d11c      	bne.n	800c91c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c8e2:	4b5f      	ldr	r3, [pc, #380]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d116      	bne.n	800c91c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8ee:	4b5c      	ldr	r3, [pc, #368]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 0302 	and.w	r3, r3, #2
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d005      	beq.n	800c906 <HAL_RCC_OscConfig+0x152>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d001      	beq.n	800c906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e1c4      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c906:	4b56      	ldr	r3, [pc, #344]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	4952      	ldr	r1, [pc, #328]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c916:	4313      	orrs	r3, r2
 800c918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c91a:	e03a      	b.n	800c992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d020      	beq.n	800c966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c924:	4b4f      	ldr	r3, [pc, #316]	; (800ca64 <HAL_RCC_OscConfig+0x2b0>)
 800c926:	2201      	movs	r2, #1
 800c928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c92a:	f7fd fb1b 	bl	8009f64 <HAL_GetTick>
 800c92e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c930:	e008      	b.n	800c944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c932:	f7fd fb17 	bl	8009f64 <HAL_GetTick>
 800c936:	4602      	mov	r2, r0
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d901      	bls.n	800c944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c940:	2303      	movs	r3, #3
 800c942:	e1a5      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c944:	4b46      	ldr	r3, [pc, #280]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 0302 	and.w	r3, r3, #2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d0f0      	beq.n	800c932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c950:	4b43      	ldr	r3, [pc, #268]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	4940      	ldr	r1, [pc, #256]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c960:	4313      	orrs	r3, r2
 800c962:	600b      	str	r3, [r1, #0]
 800c964:	e015      	b.n	800c992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c966:	4b3f      	ldr	r3, [pc, #252]	; (800ca64 <HAL_RCC_OscConfig+0x2b0>)
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c96c:	f7fd fafa 	bl	8009f64 <HAL_GetTick>
 800c970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c972:	e008      	b.n	800c986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c974:	f7fd faf6 	bl	8009f64 <HAL_GetTick>
 800c978:	4602      	mov	r2, r0
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d901      	bls.n	800c986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c982:	2303      	movs	r3, #3
 800c984:	e184      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c986:	4b36      	ldr	r3, [pc, #216]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f003 0302 	and.w	r3, r3, #2
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1f0      	bne.n	800c974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 0308 	and.w	r3, r3, #8
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d030      	beq.n	800ca00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d016      	beq.n	800c9d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c9a6:	4b30      	ldr	r3, [pc, #192]	; (800ca68 <HAL_RCC_OscConfig+0x2b4>)
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9ac:	f7fd fada 	bl	8009f64 <HAL_GetTick>
 800c9b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9b2:	e008      	b.n	800c9c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c9b4:	f7fd fad6 	bl	8009f64 <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e164      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9c6:	4b26      	ldr	r3, [pc, #152]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0f0      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x200>
 800c9d2:	e015      	b.n	800ca00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c9d4:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <HAL_RCC_OscConfig+0x2b4>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9da:	f7fd fac3 	bl	8009f64 <HAL_GetTick>
 800c9de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9e0:	e008      	b.n	800c9f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c9e2:	f7fd fabf 	bl	8009f64 <HAL_GetTick>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d901      	bls.n	800c9f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	e14d      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800c9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1f0      	bne.n	800c9e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f003 0304 	and.w	r3, r3, #4
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 80a0 	beq.w	800cb4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca12:	4b13      	ldr	r3, [pc, #76]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800ca14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10f      	bne.n	800ca3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60bb      	str	r3, [r7, #8]
 800ca22:	4b0f      	ldr	r3, [pc, #60]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	4a0e      	ldr	r2, [pc, #56]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800ca28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca2c:	6413      	str	r3, [r2, #64]	; 0x40
 800ca2e:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <HAL_RCC_OscConfig+0x2ac>)
 800ca30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca36:	60bb      	str	r3, [r7, #8]
 800ca38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca3e:	4b0b      	ldr	r3, [pc, #44]	; (800ca6c <HAL_RCC_OscConfig+0x2b8>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d121      	bne.n	800ca8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca4a:	4b08      	ldr	r3, [pc, #32]	; (800ca6c <HAL_RCC_OscConfig+0x2b8>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a07      	ldr	r2, [pc, #28]	; (800ca6c <HAL_RCC_OscConfig+0x2b8>)
 800ca50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca56:	f7fd fa85 	bl	8009f64 <HAL_GetTick>
 800ca5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca5c:	e011      	b.n	800ca82 <HAL_RCC_OscConfig+0x2ce>
 800ca5e:	bf00      	nop
 800ca60:	40023800 	.word	0x40023800
 800ca64:	42470000 	.word	0x42470000
 800ca68:	42470e80 	.word	0x42470e80
 800ca6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca70:	f7fd fa78 	bl	8009f64 <HAL_GetTick>
 800ca74:	4602      	mov	r2, r0
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d901      	bls.n	800ca82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e106      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca82:	4b85      	ldr	r3, [pc, #532]	; (800cc98 <HAL_RCC_OscConfig+0x4e4>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d0f0      	beq.n	800ca70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d106      	bne.n	800caa4 <HAL_RCC_OscConfig+0x2f0>
 800ca96:	4b81      	ldr	r3, [pc, #516]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	4a80      	ldr	r2, [pc, #512]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800ca9c:	f043 0301 	orr.w	r3, r3, #1
 800caa0:	6713      	str	r3, [r2, #112]	; 0x70
 800caa2:	e01c      	b.n	800cade <HAL_RCC_OscConfig+0x32a>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	2b05      	cmp	r3, #5
 800caaa:	d10c      	bne.n	800cac6 <HAL_RCC_OscConfig+0x312>
 800caac:	4b7b      	ldr	r3, [pc, #492]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800caae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab0:	4a7a      	ldr	r2, [pc, #488]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cab2:	f043 0304 	orr.w	r3, r3, #4
 800cab6:	6713      	str	r3, [r2, #112]	; 0x70
 800cab8:	4b78      	ldr	r3, [pc, #480]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800caba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabc:	4a77      	ldr	r2, [pc, #476]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cabe:	f043 0301 	orr.w	r3, r3, #1
 800cac2:	6713      	str	r3, [r2, #112]	; 0x70
 800cac4:	e00b      	b.n	800cade <HAL_RCC_OscConfig+0x32a>
 800cac6:	4b75      	ldr	r3, [pc, #468]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caca:	4a74      	ldr	r2, [pc, #464]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cacc:	f023 0301 	bic.w	r3, r3, #1
 800cad0:	6713      	str	r3, [r2, #112]	; 0x70
 800cad2:	4b72      	ldr	r3, [pc, #456]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad6:	4a71      	ldr	r2, [pc, #452]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cad8:	f023 0304 	bic.w	r3, r3, #4
 800cadc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d015      	beq.n	800cb12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cae6:	f7fd fa3d 	bl	8009f64 <HAL_GetTick>
 800caea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800caec:	e00a      	b.n	800cb04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800caee:	f7fd fa39 	bl	8009f64 <HAL_GetTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d901      	bls.n	800cb04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800cb00:	2303      	movs	r3, #3
 800cb02:	e0c5      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb04:	4b65      	ldr	r3, [pc, #404]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb08:	f003 0302 	and.w	r3, r3, #2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d0ee      	beq.n	800caee <HAL_RCC_OscConfig+0x33a>
 800cb10:	e014      	b.n	800cb3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb12:	f7fd fa27 	bl	8009f64 <HAL_GetTick>
 800cb16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb18:	e00a      	b.n	800cb30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb1a:	f7fd fa23 	bl	8009f64 <HAL_GetTick>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d901      	bls.n	800cb30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e0af      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb30:	4b5a      	ldr	r3, [pc, #360]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb34:	f003 0302 	and.w	r3, r3, #2
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1ee      	bne.n	800cb1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d105      	bne.n	800cb4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb42:	4b56      	ldr	r3, [pc, #344]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb46:	4a55      	ldr	r2, [pc, #340]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cb48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 809b 	beq.w	800cc8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cb58:	4b50      	ldr	r3, [pc, #320]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	f003 030c 	and.w	r3, r3, #12
 800cb60:	2b08      	cmp	r3, #8
 800cb62:	d05c      	beq.n	800cc1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d141      	bne.n	800cbf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb6c:	4b4c      	ldr	r3, [pc, #304]	; (800cca0 <HAL_RCC_OscConfig+0x4ec>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb72:	f7fd f9f7 	bl	8009f64 <HAL_GetTick>
 800cb76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb78:	e008      	b.n	800cb8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb7a:	f7fd f9f3 	bl	8009f64 <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d901      	bls.n	800cb8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e081      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb8c:	4b43      	ldr	r3, [pc, #268]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1f0      	bne.n	800cb7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	69da      	ldr	r2, [r3, #28]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	431a      	orrs	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba6:	019b      	lsls	r3, r3, #6
 800cba8:	431a      	orrs	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbae:	085b      	lsrs	r3, r3, #1
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	041b      	lsls	r3, r3, #16
 800cbb4:	431a      	orrs	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbba:	061b      	lsls	r3, r3, #24
 800cbbc:	4937      	ldr	r1, [pc, #220]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cbc2:	4b37      	ldr	r3, [pc, #220]	; (800cca0 <HAL_RCC_OscConfig+0x4ec>)
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbc8:	f7fd f9cc 	bl	8009f64 <HAL_GetTick>
 800cbcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbce:	e008      	b.n	800cbe2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbd0:	f7fd f9c8 	bl	8009f64 <HAL_GetTick>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d901      	bls.n	800cbe2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	e056      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbe2:	4b2e      	ldr	r3, [pc, #184]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d0f0      	beq.n	800cbd0 <HAL_RCC_OscConfig+0x41c>
 800cbee:	e04e      	b.n	800cc8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbf0:	4b2b      	ldr	r3, [pc, #172]	; (800cca0 <HAL_RCC_OscConfig+0x4ec>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbf6:	f7fd f9b5 	bl	8009f64 <HAL_GetTick>
 800cbfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbfc:	e008      	b.n	800cc10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbfe:	f7fd f9b1 	bl	8009f64 <HAL_GetTick>
 800cc02:	4602      	mov	r2, r0
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d901      	bls.n	800cc10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e03f      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc10:	4b22      	ldr	r3, [pc, #136]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1f0      	bne.n	800cbfe <HAL_RCC_OscConfig+0x44a>
 800cc1c:	e037      	b.n	800cc8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	699b      	ldr	r3, [r3, #24]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d101      	bne.n	800cc2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e032      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cc2a:	4b1c      	ldr	r3, [pc, #112]	; (800cc9c <HAL_RCC_OscConfig+0x4e8>)
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d028      	beq.n	800cc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d121      	bne.n	800cc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d11a      	bne.n	800cc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cc60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d111      	bne.n	800cc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc70:	085b      	lsrs	r3, r3, #1
 800cc72:	3b01      	subs	r3, #1
 800cc74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d107      	bne.n	800cc8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d001      	beq.n	800cc8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	40007000 	.word	0x40007000
 800cc9c:	40023800 	.word	0x40023800
 800cca0:	42470060 	.word	0x42470060

0800cca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e0cc      	b.n	800ce52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ccb8:	4b68      	ldr	r3, [pc, #416]	; (800ce5c <HAL_RCC_ClockConfig+0x1b8>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 030f 	and.w	r3, r3, #15
 800ccc0:	683a      	ldr	r2, [r7, #0]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d90c      	bls.n	800cce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccc6:	4b65      	ldr	r3, [pc, #404]	; (800ce5c <HAL_RCC_ClockConfig+0x1b8>)
 800ccc8:	683a      	ldr	r2, [r7, #0]
 800ccca:	b2d2      	uxtb	r2, r2
 800cccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ccce:	4b63      	ldr	r3, [pc, #396]	; (800ce5c <HAL_RCC_ClockConfig+0x1b8>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 030f 	and.w	r3, r3, #15
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d001      	beq.n	800cce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e0b8      	b.n	800ce52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d020      	beq.n	800cd2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f003 0304 	and.w	r3, r3, #4
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ccf8:	4b59      	ldr	r3, [pc, #356]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	4a58      	ldr	r2, [pc, #352]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800ccfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cd02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0308 	and.w	r3, r3, #8
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d005      	beq.n	800cd1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cd10:	4b53      	ldr	r3, [pc, #332]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	4a52      	ldr	r2, [pc, #328]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cd1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd1c:	4b50      	ldr	r3, [pc, #320]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	494d      	ldr	r1, [pc, #308]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d044      	beq.n	800cdc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d107      	bne.n	800cd52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd42:	4b47      	ldr	r3, [pc, #284]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d119      	bne.n	800cd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e07f      	b.n	800ce52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d003      	beq.n	800cd62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cd5e:	2b03      	cmp	r3, #3
 800cd60:	d107      	bne.n	800cd72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd62:	4b3f      	ldr	r3, [pc, #252]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d109      	bne.n	800cd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e06f      	b.n	800ce52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd72:	4b3b      	ldr	r3, [pc, #236]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 0302 	and.w	r3, r3, #2
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e067      	b.n	800ce52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cd82:	4b37      	ldr	r3, [pc, #220]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	f023 0203 	bic.w	r2, r3, #3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	4934      	ldr	r1, [pc, #208]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cd90:	4313      	orrs	r3, r2
 800cd92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cd94:	f7fd f8e6 	bl	8009f64 <HAL_GetTick>
 800cd98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd9a:	e00a      	b.n	800cdb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd9c:	f7fd f8e2 	bl	8009f64 <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d901      	bls.n	800cdb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e04f      	b.n	800ce52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cdb2:	4b2b      	ldr	r3, [pc, #172]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f003 020c 	and.w	r2, r3, #12
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d1eb      	bne.n	800cd9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cdc4:	4b25      	ldr	r3, [pc, #148]	; (800ce5c <HAL_RCC_ClockConfig+0x1b8>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 030f 	and.w	r3, r3, #15
 800cdcc:	683a      	ldr	r2, [r7, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d20c      	bcs.n	800cdec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdd2:	4b22      	ldr	r3, [pc, #136]	; (800ce5c <HAL_RCC_ClockConfig+0x1b8>)
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	b2d2      	uxtb	r2, r2
 800cdd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdda:	4b20      	ldr	r3, [pc, #128]	; (800ce5c <HAL_RCC_ClockConfig+0x1b8>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 030f 	and.w	r3, r3, #15
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d001      	beq.n	800cdec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e032      	b.n	800ce52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 0304 	and.w	r3, r3, #4
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d008      	beq.n	800ce0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cdf8:	4b19      	ldr	r3, [pc, #100]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	4916      	ldr	r1, [pc, #88]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800ce06:	4313      	orrs	r3, r2
 800ce08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0308 	and.w	r3, r3, #8
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d009      	beq.n	800ce2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ce16:	4b12      	ldr	r3, [pc, #72]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	490e      	ldr	r1, [pc, #56]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ce2a:	f000 f821 	bl	800ce70 <HAL_RCC_GetSysClockFreq>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <HAL_RCC_ClockConfig+0x1bc>)
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	091b      	lsrs	r3, r3, #4
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	490a      	ldr	r1, [pc, #40]	; (800ce64 <HAL_RCC_ClockConfig+0x1c0>)
 800ce3c:	5ccb      	ldrb	r3, [r1, r3]
 800ce3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce42:	4a09      	ldr	r2, [pc, #36]	; (800ce68 <HAL_RCC_ClockConfig+0x1c4>)
 800ce44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ce46:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <HAL_RCC_ClockConfig+0x1c8>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fa fbec 	bl	8007628 <HAL_InitTick>

  return HAL_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	40023c00 	.word	0x40023c00
 800ce60:	40023800 	.word	0x40023800
 800ce64:	08017284 	.word	0x08017284
 800ce68:	20000000 	.word	0x20000000
 800ce6c:	2000008c 	.word	0x2000008c

0800ce70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	607b      	str	r3, [r7, #4]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]
 800ce80:	2300      	movs	r3, #0
 800ce82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ce88:	4b67      	ldr	r3, [pc, #412]	; (800d028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	f003 030c 	and.w	r3, r3, #12
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d00d      	beq.n	800ceb0 <HAL_RCC_GetSysClockFreq+0x40>
 800ce94:	2b08      	cmp	r3, #8
 800ce96:	f200 80bd 	bhi.w	800d014 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <HAL_RCC_GetSysClockFreq+0x34>
 800ce9e:	2b04      	cmp	r3, #4
 800cea0:	d003      	beq.n	800ceaa <HAL_RCC_GetSysClockFreq+0x3a>
 800cea2:	e0b7      	b.n	800d014 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cea4:	4b61      	ldr	r3, [pc, #388]	; (800d02c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800cea6:	60bb      	str	r3, [r7, #8]
       break;
 800cea8:	e0b7      	b.n	800d01a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ceaa:	4b61      	ldr	r3, [pc, #388]	; (800d030 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800ceac:	60bb      	str	r3, [r7, #8]
      break;
 800ceae:	e0b4      	b.n	800d01a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ceb0:	4b5d      	ldr	r3, [pc, #372]	; (800d028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ceb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ceba:	4b5b      	ldr	r3, [pc, #364]	; (800d028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d04d      	beq.n	800cf62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cec6:	4b58      	ldr	r3, [pc, #352]	; (800d028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	099b      	lsrs	r3, r3, #6
 800cecc:	461a      	mov	r2, r3
 800cece:	f04f 0300 	mov.w	r3, #0
 800ced2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ced6:	f04f 0100 	mov.w	r1, #0
 800ceda:	ea02 0800 	and.w	r8, r2, r0
 800cede:	ea03 0901 	and.w	r9, r3, r1
 800cee2:	4640      	mov	r0, r8
 800cee4:	4649      	mov	r1, r9
 800cee6:	f04f 0200 	mov.w	r2, #0
 800ceea:	f04f 0300 	mov.w	r3, #0
 800ceee:	014b      	lsls	r3, r1, #5
 800cef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800cef4:	0142      	lsls	r2, r0, #5
 800cef6:	4610      	mov	r0, r2
 800cef8:	4619      	mov	r1, r3
 800cefa:	ebb0 0008 	subs.w	r0, r0, r8
 800cefe:	eb61 0109 	sbc.w	r1, r1, r9
 800cf02:	f04f 0200 	mov.w	r2, #0
 800cf06:	f04f 0300 	mov.w	r3, #0
 800cf0a:	018b      	lsls	r3, r1, #6
 800cf0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800cf10:	0182      	lsls	r2, r0, #6
 800cf12:	1a12      	subs	r2, r2, r0
 800cf14:	eb63 0301 	sbc.w	r3, r3, r1
 800cf18:	f04f 0000 	mov.w	r0, #0
 800cf1c:	f04f 0100 	mov.w	r1, #0
 800cf20:	00d9      	lsls	r1, r3, #3
 800cf22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cf26:	00d0      	lsls	r0, r2, #3
 800cf28:	4602      	mov	r2, r0
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	eb12 0208 	adds.w	r2, r2, r8
 800cf30:	eb43 0309 	adc.w	r3, r3, r9
 800cf34:	f04f 0000 	mov.w	r0, #0
 800cf38:	f04f 0100 	mov.w	r1, #0
 800cf3c:	0259      	lsls	r1, r3, #9
 800cf3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800cf42:	0250      	lsls	r0, r2, #9
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4610      	mov	r0, r2
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	f04f 0300 	mov.w	r3, #0
 800cf54:	f7f9 f808 	bl	8005f68 <__aeabi_uldivmod>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]
 800cf60:	e04a      	b.n	800cff8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cf62:	4b31      	ldr	r3, [pc, #196]	; (800d028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	099b      	lsrs	r3, r3, #6
 800cf68:	461a      	mov	r2, r3
 800cf6a:	f04f 0300 	mov.w	r3, #0
 800cf6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cf72:	f04f 0100 	mov.w	r1, #0
 800cf76:	ea02 0400 	and.w	r4, r2, r0
 800cf7a:	ea03 0501 	and.w	r5, r3, r1
 800cf7e:	4620      	mov	r0, r4
 800cf80:	4629      	mov	r1, r5
 800cf82:	f04f 0200 	mov.w	r2, #0
 800cf86:	f04f 0300 	mov.w	r3, #0
 800cf8a:	014b      	lsls	r3, r1, #5
 800cf8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800cf90:	0142      	lsls	r2, r0, #5
 800cf92:	4610      	mov	r0, r2
 800cf94:	4619      	mov	r1, r3
 800cf96:	1b00      	subs	r0, r0, r4
 800cf98:	eb61 0105 	sbc.w	r1, r1, r5
 800cf9c:	f04f 0200 	mov.w	r2, #0
 800cfa0:	f04f 0300 	mov.w	r3, #0
 800cfa4:	018b      	lsls	r3, r1, #6
 800cfa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800cfaa:	0182      	lsls	r2, r0, #6
 800cfac:	1a12      	subs	r2, r2, r0
 800cfae:	eb63 0301 	sbc.w	r3, r3, r1
 800cfb2:	f04f 0000 	mov.w	r0, #0
 800cfb6:	f04f 0100 	mov.w	r1, #0
 800cfba:	00d9      	lsls	r1, r3, #3
 800cfbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cfc0:	00d0      	lsls	r0, r2, #3
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	1912      	adds	r2, r2, r4
 800cfc8:	eb45 0303 	adc.w	r3, r5, r3
 800cfcc:	f04f 0000 	mov.w	r0, #0
 800cfd0:	f04f 0100 	mov.w	r1, #0
 800cfd4:	0299      	lsls	r1, r3, #10
 800cfd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800cfda:	0290      	lsls	r0, r2, #10
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f04f 0300 	mov.w	r3, #0
 800cfec:	f7f8 ffbc 	bl	8005f68 <__aeabi_uldivmod>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	4613      	mov	r3, r2
 800cff6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cff8:	4b0b      	ldr	r3, [pc, #44]	; (800d028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	0c1b      	lsrs	r3, r3, #16
 800cffe:	f003 0303 	and.w	r3, r3, #3
 800d002:	3301      	adds	r3, #1
 800d004:	005b      	lsls	r3, r3, #1
 800d006:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d010:	60bb      	str	r3, [r7, #8]
      break;
 800d012:	e002      	b.n	800d01a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d014:	4b05      	ldr	r3, [pc, #20]	; (800d02c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800d016:	60bb      	str	r3, [r7, #8]
      break;
 800d018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d01a:	68bb      	ldr	r3, [r7, #8]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d026:	bf00      	nop
 800d028:	40023800 	.word	0x40023800
 800d02c:	00f42400 	.word	0x00f42400
 800d030:	007a1200 	.word	0x007a1200

0800d034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d034:	b480      	push	{r7}
 800d036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d038:	4b03      	ldr	r3, [pc, #12]	; (800d048 <HAL_RCC_GetHCLKFreq+0x14>)
 800d03a:	681b      	ldr	r3, [r3, #0]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	20000000 	.word	0x20000000

0800d04c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d050:	f7ff fff0 	bl	800d034 <HAL_RCC_GetHCLKFreq>
 800d054:	4602      	mov	r2, r0
 800d056:	4b05      	ldr	r3, [pc, #20]	; (800d06c <HAL_RCC_GetPCLK1Freq+0x20>)
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	0a9b      	lsrs	r3, r3, #10
 800d05c:	f003 0307 	and.w	r3, r3, #7
 800d060:	4903      	ldr	r1, [pc, #12]	; (800d070 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d062:	5ccb      	ldrb	r3, [r1, r3]
 800d064:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d068:	4618      	mov	r0, r3
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	40023800 	.word	0x40023800
 800d070:	08017294 	.word	0x08017294

0800d074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d078:	f7ff ffdc 	bl	800d034 <HAL_RCC_GetHCLKFreq>
 800d07c:	4602      	mov	r2, r0
 800d07e:	4b05      	ldr	r3, [pc, #20]	; (800d094 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	0b5b      	lsrs	r3, r3, #13
 800d084:	f003 0307 	and.w	r3, r3, #7
 800d088:	4903      	ldr	r1, [pc, #12]	; (800d098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d08a:	5ccb      	ldrb	r3, [r1, r3]
 800d08c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d090:	4618      	mov	r0, r3
 800d092:	bd80      	pop	{r7, pc}
 800d094:	40023800 	.word	0x40023800
 800d098:	08017294 	.word	0x08017294

0800d09c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	220f      	movs	r2, #15
 800d0aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d0ac:	4b12      	ldr	r3, [pc, #72]	; (800d0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	f003 0203 	and.w	r2, r3, #3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d0b8:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d0d0:	4b09      	ldr	r3, [pc, #36]	; (800d0f8 <HAL_RCC_GetClockConfig+0x5c>)
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	08db      	lsrs	r3, r3, #3
 800d0d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d0de:	4b07      	ldr	r3, [pc, #28]	; (800d0fc <HAL_RCC_GetClockConfig+0x60>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 020f 	and.w	r2, r3, #15
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	601a      	str	r2, [r3, #0]
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	40023800 	.word	0x40023800
 800d0fc:	40023c00 	.word	0x40023c00

0800d100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10b      	bne.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800d124:	2b00      	cmp	r3, #0
 800d126:	d105      	bne.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800d130:	2b00      	cmp	r3, #0
 800d132:	d075      	beq.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d134:	4bad      	ldr	r3, [pc, #692]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800d136:	2200      	movs	r2, #0
 800d138:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d13a:	f7fc ff13 	bl	8009f64 <HAL_GetTick>
 800d13e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d140:	e008      	b.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d142:	f7fc ff0f 	bl	8009f64 <HAL_GetTick>
 800d146:	4602      	mov	r2, r0
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d901      	bls.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e18b      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d154:	4ba6      	ldr	r3, [pc, #664]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f0      	bne.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 0301 	and.w	r3, r3, #1
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d009      	beq.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	019a      	lsls	r2, r3, #6
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	071b      	lsls	r3, r3, #28
 800d178:	499d      	ldr	r1, [pc, #628]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d17a:	4313      	orrs	r3, r2
 800d17c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 0302 	and.w	r3, r3, #2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01f      	beq.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d18c:	4b98      	ldr	r3, [pc, #608]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d192:	0f1b      	lsrs	r3, r3, #28
 800d194:	f003 0307 	and.w	r3, r3, #7
 800d198:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	019a      	lsls	r2, r3, #6
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	061b      	lsls	r3, r3, #24
 800d1a6:	431a      	orrs	r2, r3
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	071b      	lsls	r3, r3, #28
 800d1ac:	4990      	ldr	r1, [pc, #576]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d1b4:	4b8e      	ldr	r3, [pc, #568]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ba:	f023 021f 	bic.w	r2, r3, #31
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	498a      	ldr	r1, [pc, #552]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00d      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	019a      	lsls	r2, r3, #6
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	061b      	lsls	r3, r3, #24
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	071b      	lsls	r3, r3, #28
 800d1ec:	4980      	ldr	r1, [pc, #512]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d1f4:	4b7d      	ldr	r3, [pc, #500]	; (800d3ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d1fa:	f7fc feb3 	bl	8009f64 <HAL_GetTick>
 800d1fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d200:	e008      	b.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800d202:	f7fc feaf 	bl	8009f64 <HAL_GetTick>
 800d206:	4602      	mov	r2, r0
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d901      	bls.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	e12b      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d214:	4b76      	ldr	r3, [pc, #472]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d0f0      	beq.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 0304 	and.w	r3, r3, #4
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d105      	bne.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800d234:	2b00      	cmp	r3, #0
 800d236:	d079      	beq.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d238:	4b6e      	ldr	r3, [pc, #440]	; (800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d23e:	f7fc fe91 	bl	8009f64 <HAL_GetTick>
 800d242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d244:	e008      	b.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d246:	f7fc fe8d 	bl	8009f64 <HAL_GetTick>
 800d24a:	4602      	mov	r2, r0
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	1ad3      	subs	r3, r2, r3
 800d250:	2b02      	cmp	r3, #2
 800d252:	d901      	bls.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d254:	2303      	movs	r3, #3
 800d256:	e109      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d258:	4b65      	ldr	r3, [pc, #404]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d264:	d0ef      	beq.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f003 0304 	and.w	r3, r3, #4
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d020      	beq.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d272:	4b5f      	ldr	r3, [pc, #380]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d278:	0f1b      	lsrs	r3, r3, #28
 800d27a:	f003 0307 	and.w	r3, r3, #7
 800d27e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	019a      	lsls	r2, r3, #6
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	061b      	lsls	r3, r3, #24
 800d28c:	431a      	orrs	r2, r3
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	071b      	lsls	r3, r3, #28
 800d292:	4957      	ldr	r1, [pc, #348]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d294:	4313      	orrs	r3, r2
 800d296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d29a:	4b55      	ldr	r3, [pc, #340]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a1b      	ldr	r3, [r3, #32]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	021b      	lsls	r3, r3, #8
 800d2ac:	4950      	ldr	r1, [pc, #320]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 0308 	and.w	r3, r3, #8
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01e      	beq.n	800d2fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d2c0:	4b4b      	ldr	r3, [pc, #300]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c6:	0e1b      	lsrs	r3, r3, #24
 800d2c8:	f003 030f 	and.w	r3, r3, #15
 800d2cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	019a      	lsls	r2, r3, #6
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	061b      	lsls	r3, r3, #24
 800d2d8:	431a      	orrs	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	071b      	lsls	r3, r3, #28
 800d2e0:	4943      	ldr	r1, [pc, #268]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d2e8:	4b41      	ldr	r3, [pc, #260]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f6:	493e      	ldr	r1, [pc, #248]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d2fe:	4b3d      	ldr	r3, [pc, #244]	; (800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d300:	2201      	movs	r2, #1
 800d302:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800d304:	f7fc fe2e 	bl	8009f64 <HAL_GetTick>
 800d308:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d30a:	e008      	b.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800d30c:	f7fc fe2a 	bl	8009f64 <HAL_GetTick>
 800d310:	4602      	mov	r2, r0
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	2b02      	cmp	r3, #2
 800d318:	d901      	bls.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d31a:	2303      	movs	r3, #3
 800d31c:	e0a6      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d31e:	4b34      	ldr	r3, [pc, #208]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d32a:	d1ef      	bne.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0320 	and.w	r3, r3, #32
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 808d 	beq.w	800d454 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d33a:	2300      	movs	r3, #0
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	4b2c      	ldr	r3, [pc, #176]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d342:	4a2b      	ldr	r2, [pc, #172]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d348:	6413      	str	r3, [r2, #64]	; 0x40
 800d34a:	4b29      	ldr	r3, [pc, #164]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800d356:	4b28      	ldr	r3, [pc, #160]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a27      	ldr	r2, [pc, #156]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800d35c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d360:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d362:	f7fc fdff 	bl	8009f64 <HAL_GetTick>
 800d366:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d368:	e008      	b.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d36a:	f7fc fdfb 	bl	8009f64 <HAL_GetTick>
 800d36e:	4602      	mov	r2, r0
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	2b02      	cmp	r3, #2
 800d376:	d901      	bls.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800d378:	2303      	movs	r3, #3
 800d37a:	e077      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800d37c:	4b1e      	ldr	r3, [pc, #120]	; (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d384:	2b00      	cmp	r3, #0
 800d386:	d0f0      	beq.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d388:	4b19      	ldr	r3, [pc, #100]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d38c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d390:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d039      	beq.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d39c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d032      	beq.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d3a6:	4b12      	ldr	r3, [pc, #72]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d3b0:	4b12      	ldr	r3, [pc, #72]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d3b6:	4b11      	ldr	r3, [pc, #68]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800d3bc:	4a0c      	ldr	r2, [pc, #48]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d3c2:	4b0b      	ldr	r3, [pc, #44]	; (800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800d3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d11e      	bne.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800d3ce:	f7fc fdc9 	bl	8009f64 <HAL_GetTick>
 800d3d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3d4:	e014      	b.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d3d6:	f7fc fdc5 	bl	8009f64 <HAL_GetTick>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d90b      	bls.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	e03f      	b.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800d3ec:	42470068 	.word	0x42470068
 800d3f0:	40023800 	.word	0x40023800
 800d3f4:	42470070 	.word	0x42470070
 800d3f8:	40007000 	.word	0x40007000
 800d3fc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d400:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d404:	f003 0302 	and.w	r3, r3, #2
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0e4      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d418:	d10d      	bne.n	800d436 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800d41a:	4b16      	ldr	r3, [pc, #88]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d426:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d42a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d42e:	4911      	ldr	r1, [pc, #68]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d430:	4313      	orrs	r3, r2
 800d432:	608b      	str	r3, [r1, #8]
 800d434:	e005      	b.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d436:	4b0f      	ldr	r3, [pc, #60]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	4a0e      	ldr	r2, [pc, #56]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d43c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d440:	6093      	str	r3, [r2, #8]
 800d442:	4b0c      	ldr	r3, [pc, #48]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d44e:	4909      	ldr	r1, [pc, #36]	; (800d474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800d450:	4313      	orrs	r3, r2
 800d452:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f003 0310 	and.w	r3, r3, #16
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d466:	4b04      	ldr	r3, [pc, #16]	; (800d478 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800d468:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	40023800 	.word	0x40023800
 800d478:	424711e0 	.word	0x424711e0

0800d47c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	e025      	b.n	800d4dc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d106      	bne.n	800d4aa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7f9 f87d 	bl	80065a4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4610      	mov	r0, r2
 800d4be:	f001 fdd3 	bl	800f068 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	6839      	ldr	r1, [r7, #0]
 800d4ce:	f001 fe3e 	bl	800f14e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d101      	bne.n	800d500 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	e018      	b.n	800d532 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	4618      	mov	r0, r3
 800d512:	f001 fe9b 	bl	800f24c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d104      	bne.n	800d528 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2205      	movs	r2, #5
 800d522:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d526:	e003      	b.n	800d530 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b082      	sub	sp, #8
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d101      	bne.n	800d554 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d550:	2302      	movs	r3, #2
 800d552:	e00e      	b.n	800d572 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2202      	movs	r2, #2
 800d558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	4618      	mov	r0, r3
 800d564:	f001 feae 	bl	800f2c4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e07b      	b.n	800d684 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	2b00      	cmp	r3, #0
 800d592:	d108      	bne.n	800d5a6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d59c:	d009      	beq.n	800d5b2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	61da      	str	r2, [r3, #28]
 800d5a4:	e005      	b.n	800d5b2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7f9 ff9d 	bl	800750c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d604:	431a      	orrs	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	f003 0302 	and.w	r3, r3, #2
 800d60e:	431a      	orrs	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	f003 0301 	and.w	r3, r3, #1
 800d618:	431a      	orrs	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d622:	431a      	orrs	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	69db      	ldr	r3, [r3, #28]
 800d628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d62c:	431a      	orrs	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d636:	ea42 0103 	orr.w	r1, r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	430a      	orrs	r2, r1
 800d648:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	0c1b      	lsrs	r3, r3, #16
 800d650:	f003 0104 	and.w	r1, r3, #4
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d658:	f003 0210 	and.w	r2, r3, #16
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	430a      	orrs	r2, r1
 800d662:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	69da      	ldr	r2, [r3, #28]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d672:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d682:	2300      	movs	r3, #0
}
 800d684:	4618      	mov	r0, r3
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e01a      	b.n	800d6d4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2202      	movs	r2, #2
 800d6a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f9 ff70 	bl	800759c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d101      	bne.n	800d6fe <HAL_SPI_Transmit+0x22>
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e126      	b.n	800d94c <HAL_SPI_Transmit+0x270>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d706:	f7fc fc2d 	bl	8009f64 <HAL_GetTick>
 800d70a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d70c:	88fb      	ldrh	r3, [r7, #6]
 800d70e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d002      	beq.n	800d722 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d71c:	2302      	movs	r3, #2
 800d71e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d720:	e10b      	b.n	800d93a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <HAL_SPI_Transmit+0x52>
 800d728:	88fb      	ldrh	r3, [r7, #6]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d102      	bne.n	800d734 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d732:	e102      	b.n	800d93a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2203      	movs	r2, #3
 800d738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2200      	movs	r2, #0
 800d740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	88fa      	ldrh	r2, [r7, #6]
 800d74c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	88fa      	ldrh	r2, [r7, #6]
 800d752:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d77a:	d10f      	bne.n	800d79c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d78a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d79a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a6:	2b40      	cmp	r3, #64	; 0x40
 800d7a8:	d007      	beq.n	800d7ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7c2:	d14b      	bne.n	800d85c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <HAL_SPI_Transmit+0xf6>
 800d7cc:	8afb      	ldrh	r3, [r7, #22]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d13e      	bne.n	800d850 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d6:	881a      	ldrh	r2, [r3, #0]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e2:	1c9a      	adds	r2, r3, #2
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d7f6:	e02b      	b.n	800d850 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	f003 0302 	and.w	r3, r3, #2
 800d802:	2b02      	cmp	r3, #2
 800d804:	d112      	bne.n	800d82c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d80a:	881a      	ldrh	r2, [r3, #0]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d816:	1c9a      	adds	r2, r3, #2
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d820:	b29b      	uxth	r3, r3
 800d822:	3b01      	subs	r3, #1
 800d824:	b29a      	uxth	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	86da      	strh	r2, [r3, #54]	; 0x36
 800d82a:	e011      	b.n	800d850 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d82c:	f7fc fb9a 	bl	8009f64 <HAL_GetTick>
 800d830:	4602      	mov	r2, r0
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	1ad3      	subs	r3, r2, r3
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d803      	bhi.n	800d844 <HAL_SPI_Transmit+0x168>
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d102      	bne.n	800d84a <HAL_SPI_Transmit+0x16e>
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d84a:	2303      	movs	r3, #3
 800d84c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d84e:	e074      	b.n	800d93a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d854:	b29b      	uxth	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1ce      	bne.n	800d7f8 <HAL_SPI_Transmit+0x11c>
 800d85a:	e04c      	b.n	800d8f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <HAL_SPI_Transmit+0x18e>
 800d864:	8afb      	ldrh	r3, [r7, #22]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d140      	bne.n	800d8ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	330c      	adds	r3, #12
 800d874:	7812      	ldrb	r2, [r2, #0]
 800d876:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87c:	1c5a      	adds	r2, r3, #1
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d886:	b29b      	uxth	r3, r3
 800d888:	3b01      	subs	r3, #1
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d890:	e02c      	b.n	800d8ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	f003 0302 	and.w	r3, r3, #2
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d113      	bne.n	800d8c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	330c      	adds	r3, #12
 800d8aa:	7812      	ldrb	r2, [r2, #0]
 800d8ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	b29a      	uxth	r2, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	86da      	strh	r2, [r3, #54]	; 0x36
 800d8c6:	e011      	b.n	800d8ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8c8:	f7fc fb4c 	bl	8009f64 <HAL_GetTick>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	683a      	ldr	r2, [r7, #0]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d803      	bhi.n	800d8e0 <HAL_SPI_Transmit+0x204>
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8de:	d102      	bne.n	800d8e6 <HAL_SPI_Transmit+0x20a>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d102      	bne.n	800d8ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d8ea:	e026      	b.n	800d93a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1cd      	bne.n	800d892 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d8f6:	69ba      	ldr	r2, [r7, #24]
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f000 fbda 	bl	800e0b4 <SPI_EndRxTxTransaction>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2220      	movs	r2, #32
 800d90a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10a      	bne.n	800d92a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d914:	2300      	movs	r3, #0
 800d916:	613b      	str	r3, [r7, #16]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	613b      	str	r3, [r7, #16]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	613b      	str	r3, [r7, #16]
 800d928:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d002      	beq.n	800d938 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	77fb      	strb	r3, [r7, #31]
 800d936:	e000      	b.n	800d93a <HAL_SPI_Transmit+0x25e>
  }

error:
 800d938:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d94a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3720      	adds	r7, #32
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af02      	add	r7, sp, #8
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	603b      	str	r3, [r7, #0]
 800d960:	4613      	mov	r3, r2
 800d962:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d970:	d112      	bne.n	800d998 <HAL_SPI_Receive+0x44>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10e      	bne.n	800d998 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2204      	movs	r2, #4
 800d97e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d982:	88fa      	ldrh	r2, [r7, #6]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	4613      	mov	r3, r2
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	68b9      	ldr	r1, [r7, #8]
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f000 f8f1 	bl	800db76 <HAL_SPI_TransmitReceive>
 800d994:	4603      	mov	r3, r0
 800d996:	e0ea      	b.n	800db6e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d101      	bne.n	800d9a6 <HAL_SPI_Receive+0x52>
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	e0e3      	b.n	800db6e <HAL_SPI_Receive+0x21a>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9ae:	f7fc fad9 	bl	8009f64 <HAL_GetTick>
 800d9b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d002      	beq.n	800d9c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9c4:	e0ca      	b.n	800db5c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <HAL_SPI_Receive+0x7e>
 800d9cc:	88fb      	ldrh	r3, [r7, #6]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d102      	bne.n	800d9d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9d6:	e0c1      	b.n	800db5c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2204      	movs	r2, #4
 800d9dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	88fa      	ldrh	r2, [r7, #6]
 800d9f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	88fa      	ldrh	r2, [r7, #6]
 800d9f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2200      	movs	r2, #0
 800da02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2200      	movs	r2, #0
 800da08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da1e:	d10f      	bne.n	800da40 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da4a:	2b40      	cmp	r3, #64	; 0x40
 800da4c:	d007      	beq.n	800da5e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d162      	bne.n	800db2c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800da66:	e02e      	b.n	800dac6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	2b01      	cmp	r3, #1
 800da74:	d115      	bne.n	800daa2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f103 020c 	add.w	r2, r3, #12
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da82:	7812      	ldrb	r2, [r2, #0]
 800da84:	b2d2      	uxtb	r2, r2
 800da86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8c:	1c5a      	adds	r2, r3, #1
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da96:	b29b      	uxth	r3, r3
 800da98:	3b01      	subs	r3, #1
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800daa0:	e011      	b.n	800dac6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800daa2:	f7fc fa5f 	bl	8009f64 <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d803      	bhi.n	800daba <HAL_SPI_Receive+0x166>
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab8:	d102      	bne.n	800dac0 <HAL_SPI_Receive+0x16c>
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d102      	bne.n	800dac6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800dac0:	2303      	movs	r3, #3
 800dac2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dac4:	e04a      	b.n	800db5c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800daca:	b29b      	uxth	r3, r3
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1cb      	bne.n	800da68 <HAL_SPI_Receive+0x114>
 800dad0:	e031      	b.n	800db36 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f003 0301 	and.w	r3, r3, #1
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d113      	bne.n	800db08 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68da      	ldr	r2, [r3, #12]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daea:	b292      	uxth	r2, r2
 800daec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf2:	1c9a      	adds	r2, r3, #2
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	3b01      	subs	r3, #1
 800db00:	b29a      	uxth	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db06:	e011      	b.n	800db2c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db08:	f7fc fa2c 	bl	8009f64 <HAL_GetTick>
 800db0c:	4602      	mov	r2, r0
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	683a      	ldr	r2, [r7, #0]
 800db14:	429a      	cmp	r2, r3
 800db16:	d803      	bhi.n	800db20 <HAL_SPI_Receive+0x1cc>
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1e:	d102      	bne.n	800db26 <HAL_SPI_Receive+0x1d2>
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d102      	bne.n	800db2c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	75fb      	strb	r3, [r7, #23]
          goto error;
 800db2a:	e017      	b.n	800db5c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db30:	b29b      	uxth	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d1cd      	bne.n	800dad2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f000 fa54 	bl	800dfe8 <SPI_EndRxTransaction>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d002      	beq.n	800db4c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2220      	movs	r2, #32
 800db4a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	75fb      	strb	r3, [r7, #23]
 800db58:	e000      	b.n	800db5c <HAL_SPI_Receive+0x208>
  }

error :
 800db5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b08c      	sub	sp, #48	; 0x30
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	60b9      	str	r1, [r7, #8]
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db84:	2301      	movs	r3, #1
 800db86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db94:	2b01      	cmp	r3, #1
 800db96:	d101      	bne.n	800db9c <HAL_SPI_TransmitReceive+0x26>
 800db98:	2302      	movs	r3, #2
 800db9a:	e18a      	b.n	800deb2 <HAL_SPI_TransmitReceive+0x33c>
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dba4:	f7fc f9de 	bl	8009f64 <HAL_GetTick>
 800dba8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dbba:	887b      	ldrh	r3, [r7, #2]
 800dbbc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dbbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d00f      	beq.n	800dbe6 <HAL_SPI_TransmitReceive+0x70>
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbcc:	d107      	bne.n	800dbde <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d103      	bne.n	800dbde <HAL_SPI_TransmitReceive+0x68>
 800dbd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbda:	2b04      	cmp	r3, #4
 800dbdc:	d003      	beq.n	800dbe6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dbde:	2302      	movs	r3, #2
 800dbe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbe4:	e15b      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <HAL_SPI_TransmitReceive+0x82>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d002      	beq.n	800dbf8 <HAL_SPI_TransmitReceive+0x82>
 800dbf2:	887b      	ldrh	r3, [r7, #2]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d103      	bne.n	800dc00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbfe:	e14e      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	2b04      	cmp	r3, #4
 800dc0a:	d003      	beq.n	800dc14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2205      	movs	r2, #5
 800dc10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	887a      	ldrh	r2, [r7, #2]
 800dc24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	887a      	ldrh	r2, [r7, #2]
 800dc2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	887a      	ldrh	r2, [r7, #2]
 800dc36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	887a      	ldrh	r2, [r7, #2]
 800dc3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc54:	2b40      	cmp	r3, #64	; 0x40
 800dc56:	d007      	beq.n	800dc68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc70:	d178      	bne.n	800dd64 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <HAL_SPI_TransmitReceive+0x10a>
 800dc7a:	8b7b      	ldrh	r3, [r7, #26]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d166      	bne.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc84:	881a      	ldrh	r2, [r3, #0]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc90:	1c9a      	adds	r2, r3, #2
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dca4:	e053      	b.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	f003 0302 	and.w	r3, r3, #2
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d11b      	bne.n	800dcec <HAL_SPI_TransmitReceive+0x176>
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d016      	beq.n	800dcec <HAL_SPI_TransmitReceive+0x176>
 800dcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d113      	bne.n	800dcec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc8:	881a      	ldrh	r2, [r3, #0]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd4:	1c9a      	adds	r2, r3, #2
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	3b01      	subs	r3, #1
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dce8:	2300      	movs	r3, #0
 800dcea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d119      	bne.n	800dd2e <HAL_SPI_TransmitReceive+0x1b8>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d014      	beq.n	800dd2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68da      	ldr	r2, [r3, #12]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0e:	b292      	uxth	r2, r2
 800dd10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd16:	1c9a      	adds	r2, r3, #2
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	3b01      	subs	r3, #1
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd2e:	f7fc f919 	bl	8009f64 <HAL_GetTick>
 800dd32:	4602      	mov	r2, r0
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d807      	bhi.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
 800dd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd44:	d003      	beq.n	800dd4e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dd4c:	e0a7      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1a6      	bne.n	800dca6 <HAL_SPI_TransmitReceive+0x130>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1a1      	bne.n	800dca6 <HAL_SPI_TransmitReceive+0x130>
 800dd62:	e07c      	b.n	800de5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <HAL_SPI_TransmitReceive+0x1fc>
 800dd6c:	8b7b      	ldrh	r3, [r7, #26]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d16b      	bne.n	800de4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	330c      	adds	r3, #12
 800dd7c:	7812      	ldrb	r2, [r2, #0]
 800dd7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	3b01      	subs	r3, #1
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd98:	e057      	b.n	800de4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f003 0302 	and.w	r3, r3, #2
 800dda4:	2b02      	cmp	r3, #2
 800dda6:	d11c      	bne.n	800dde2 <HAL_SPI_TransmitReceive+0x26c>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d017      	beq.n	800dde2 <HAL_SPI_TransmitReceive+0x26c>
 800ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d114      	bne.n	800dde2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	330c      	adds	r3, #12
 800ddc2:	7812      	ldrb	r2, [r2, #0]
 800ddc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddde:	2300      	movs	r3, #0
 800dde0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d119      	bne.n	800de24 <HAL_SPI_TransmitReceive+0x2ae>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d014      	beq.n	800de24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68da      	ldr	r2, [r3, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de04:	b2d2      	uxtb	r2, r2
 800de06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de16:	b29b      	uxth	r3, r3
 800de18:	3b01      	subs	r3, #1
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800de20:	2301      	movs	r3, #1
 800de22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800de24:	f7fc f89e 	bl	8009f64 <HAL_GetTick>
 800de28:	4602      	mov	r2, r0
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	1ad3      	subs	r3, r2, r3
 800de2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de30:	429a      	cmp	r2, r3
 800de32:	d803      	bhi.n	800de3c <HAL_SPI_TransmitReceive+0x2c6>
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d102      	bne.n	800de42 <HAL_SPI_TransmitReceive+0x2cc>
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d103      	bne.n	800de4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800de48:	e029      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d1a2      	bne.n	800dd9a <HAL_SPI_TransmitReceive+0x224>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de58:	b29b      	uxth	r3, r3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d19d      	bne.n	800dd9a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 f926 	bl	800e0b4 <SPI_EndRxTxTransaction>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d006      	beq.n	800de7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800de6e:	2301      	movs	r3, #1
 800de70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2220      	movs	r2, #32
 800de78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800de7a:	e010      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10b      	bne.n	800de9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de84:	2300      	movs	r3, #0
 800de86:	617b      	str	r3, [r7, #20]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	617b      	str	r3, [r7, #20]
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	e000      	b.n	800de9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800de9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800deae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3730      	adds	r7, #48	; 0x30
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800deba:	b480      	push	{r7}
 800debc:	b083      	sub	sp, #12
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dec8:	b2db      	uxtb	r3, r3
}
 800deca:	4618      	mov	r0, r3
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
	...

0800ded8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	603b      	str	r3, [r7, #0]
 800dee4:	4613      	mov	r3, r2
 800dee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dee8:	f7fc f83c 	bl	8009f64 <HAL_GetTick>
 800deec:	4602      	mov	r2, r0
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	1a9b      	subs	r3, r3, r2
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	4413      	add	r3, r2
 800def6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800def8:	f7fc f834 	bl	8009f64 <HAL_GetTick>
 800defc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800defe:	4b39      	ldr	r3, [pc, #228]	; (800dfe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	015b      	lsls	r3, r3, #5
 800df04:	0d1b      	lsrs	r3, r3, #20
 800df06:	69fa      	ldr	r2, [r7, #28]
 800df08:	fb02 f303 	mul.w	r3, r2, r3
 800df0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df0e:	e054      	b.n	800dfba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df16:	d050      	beq.n	800dfba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800df18:	f7fc f824 	bl	8009f64 <HAL_GetTick>
 800df1c:	4602      	mov	r2, r0
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	69fa      	ldr	r2, [r7, #28]
 800df24:	429a      	cmp	r2, r3
 800df26:	d902      	bls.n	800df2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d13d      	bne.n	800dfaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800df3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df46:	d111      	bne.n	800df6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df50:	d004      	beq.n	800df5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df5a:	d107      	bne.n	800df6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df74:	d10f      	bne.n	800df96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df84:	601a      	str	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2201      	movs	r2, #1
 800df9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e017      	b.n	800dfda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689a      	ldr	r2, [r3, #8]
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	4013      	ands	r3, r2
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	bf0c      	ite	eq
 800dfca:	2301      	moveq	r3, #1
 800dfcc:	2300      	movne	r3, #0
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	79fb      	ldrb	r3, [r7, #7]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d19b      	bne.n	800df10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3720      	adds	r7, #32
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20000000 	.word	0x20000000

0800dfe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af02      	add	r7, sp, #8
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dffc:	d111      	bne.n	800e022 <SPI_EndRxTransaction+0x3a>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e006:	d004      	beq.n	800e012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e010:	d107      	bne.n	800e022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e020:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e02a:	d12a      	bne.n	800e082 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	689b      	ldr	r3, [r3, #8]
 800e030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e034:	d012      	beq.n	800e05c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	2200      	movs	r2, #0
 800e03e:	2180      	movs	r1, #128	; 0x80
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f7ff ff49 	bl	800ded8 <SPI_WaitFlagStateUntilTimeout>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d02d      	beq.n	800e0a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e050:	f043 0220 	orr.w	r2, r3, #32
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e058:	2303      	movs	r3, #3
 800e05a:	e026      	b.n	800e0aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2200      	movs	r2, #0
 800e064:	2101      	movs	r1, #1
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f7ff ff36 	bl	800ded8 <SPI_WaitFlagStateUntilTimeout>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d01a      	beq.n	800e0a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e076:	f043 0220 	orr.w	r2, r3, #32
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e07e:	2303      	movs	r3, #3
 800e080:	e013      	b.n	800e0aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	2200      	movs	r2, #0
 800e08a:	2101      	movs	r1, #1
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f7ff ff23 	bl	800ded8 <SPI_WaitFlagStateUntilTimeout>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d007      	beq.n	800e0a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e09c:	f043 0220 	orr.w	r2, r3, #32
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e0a4:	2303      	movs	r3, #3
 800e0a6:	e000      	b.n	800e0aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
	...

0800e0b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e0c0:	4b1b      	ldr	r3, [pc, #108]	; (800e130 <SPI_EndRxTxTransaction+0x7c>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a1b      	ldr	r2, [pc, #108]	; (800e134 <SPI_EndRxTxTransaction+0x80>)
 800e0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ca:	0d5b      	lsrs	r3, r3, #21
 800e0cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e0d0:	fb02 f303 	mul.w	r3, r2, r3
 800e0d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0de:	d112      	bne.n	800e106 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	9300      	str	r3, [sp, #0]
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2180      	movs	r1, #128	; 0x80
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f7ff fef4 	bl	800ded8 <SPI_WaitFlagStateUntilTimeout>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d016      	beq.n	800e124 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0fa:	f043 0220 	orr.w	r2, r3, #32
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e102:	2303      	movs	r3, #3
 800e104:	e00f      	b.n	800e126 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00a      	beq.n	800e122 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	3b01      	subs	r3, #1
 800e110:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e11c:	2b80      	cmp	r3, #128	; 0x80
 800e11e:	d0f2      	beq.n	800e106 <SPI_EndRxTxTransaction+0x52>
 800e120:	e000      	b.n	800e124 <SPI_EndRxTxTransaction+0x70>
        break;
 800e122:	bf00      	nop
  }

  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	20000000 	.word	0x20000000
 800e134:	165e9f81 	.word	0x165e9f81

0800e138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d101      	bne.n	800e14a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	e041      	b.n	800e1ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7f9 fbfe 	bl	8007960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2202      	movs	r2, #2
 800e168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3304      	adds	r3, #4
 800e174:	4619      	mov	r1, r3
 800e176:	4610      	mov	r0, r2
 800e178:	f000 fa96 	bl	800e6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
	...

0800e1d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d001      	beq.n	800e1f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e04e      	b.n	800e28e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	68da      	ldr	r2, [r3, #12]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f042 0201 	orr.w	r2, r2, #1
 800e206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a23      	ldr	r2, [pc, #140]	; (800e29c <HAL_TIM_Base_Start_IT+0xc4>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d022      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e21a:	d01d      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a1f      	ldr	r2, [pc, #124]	; (800e2a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d018      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a1e      	ldr	r2, [pc, #120]	; (800e2a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d013      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a1c      	ldr	r2, [pc, #112]	; (800e2a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d00e      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a1b      	ldr	r2, [pc, #108]	; (800e2ac <HAL_TIM_Base_Start_IT+0xd4>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d009      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a19      	ldr	r2, [pc, #100]	; (800e2b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d004      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x80>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a18      	ldr	r2, [pc, #96]	; (800e2b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d111      	bne.n	800e27c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	f003 0307 	and.w	r3, r3, #7
 800e262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b06      	cmp	r3, #6
 800e268:	d010      	beq.n	800e28c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f042 0201 	orr.w	r2, r2, #1
 800e278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e27a:	e007      	b.n	800e28c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f042 0201 	orr.w	r2, r2, #1
 800e28a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	40010000 	.word	0x40010000
 800e2a0:	40000400 	.word	0x40000400
 800e2a4:	40000800 	.word	0x40000800
 800e2a8:	40000c00 	.word	0x40000c00
 800e2ac:	40010400 	.word	0x40010400
 800e2b0:	40014000 	.word	0x40014000
 800e2b4:	40001800 	.word	0x40001800

0800e2b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	f003 0302 	and.w	r3, r3, #2
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d122      	bne.n	800e314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	f003 0302 	and.w	r3, r3, #2
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d11b      	bne.n	800e314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f06f 0202 	mvn.w	r2, #2
 800e2e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	f003 0303 	and.w	r3, r3, #3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f9b5 	bl	800e66a <HAL_TIM_IC_CaptureCallback>
 800e300:	e005      	b.n	800e30e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f9a7 	bl	800e656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f9b8 	bl	800e67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	f003 0304 	and.w	r3, r3, #4
 800e31e:	2b04      	cmp	r3, #4
 800e320:	d122      	bne.n	800e368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	f003 0304 	and.w	r3, r3, #4
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d11b      	bne.n	800e368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f06f 0204 	mvn.w	r2, #4
 800e338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2202      	movs	r2, #2
 800e33e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d003      	beq.n	800e356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f98b 	bl	800e66a <HAL_TIM_IC_CaptureCallback>
 800e354:	e005      	b.n	800e362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f97d 	bl	800e656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 f98e 	bl	800e67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	f003 0308 	and.w	r3, r3, #8
 800e372:	2b08      	cmp	r3, #8
 800e374:	d122      	bne.n	800e3bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	f003 0308 	and.w	r3, r3, #8
 800e380:	2b08      	cmp	r3, #8
 800e382:	d11b      	bne.n	800e3bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f06f 0208 	mvn.w	r2, #8
 800e38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2204      	movs	r2, #4
 800e392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	69db      	ldr	r3, [r3, #28]
 800e39a:	f003 0303 	and.w	r3, r3, #3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d003      	beq.n	800e3aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f961 	bl	800e66a <HAL_TIM_IC_CaptureCallback>
 800e3a8:	e005      	b.n	800e3b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 f953 	bl	800e656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f964 	bl	800e67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	f003 0310 	and.w	r3, r3, #16
 800e3c6:	2b10      	cmp	r3, #16
 800e3c8:	d122      	bne.n	800e410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	f003 0310 	and.w	r3, r3, #16
 800e3d4:	2b10      	cmp	r3, #16
 800e3d6:	d11b      	bne.n	800e410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f06f 0210 	mvn.w	r2, #16
 800e3e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2208      	movs	r2, #8
 800e3e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	69db      	ldr	r3, [r3, #28]
 800e3ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d003      	beq.n	800e3fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 f937 	bl	800e66a <HAL_TIM_IC_CaptureCallback>
 800e3fc:	e005      	b.n	800e40a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 f929 	bl	800e656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f93a 	bl	800e67e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	f003 0301 	and.w	r3, r3, #1
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d10e      	bne.n	800e43c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	f003 0301 	and.w	r3, r3, #1
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d107      	bne.n	800e43c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f06f 0201 	mvn.w	r2, #1
 800e434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7f9 f81a 	bl	8007470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	691b      	ldr	r3, [r3, #16]
 800e442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e446:	2b80      	cmp	r3, #128	; 0x80
 800e448:	d10e      	bne.n	800e468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e454:	2b80      	cmp	r3, #128	; 0x80
 800e456:	d107      	bne.n	800e468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fae0 	bl	800ea28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e472:	2b40      	cmp	r3, #64	; 0x40
 800e474:	d10e      	bne.n	800e494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e480:	2b40      	cmp	r3, #64	; 0x40
 800e482:	d107      	bne.n	800e494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e48c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f8ff 	bl	800e692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	f003 0320 	and.w	r3, r3, #32
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	d10e      	bne.n	800e4c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	f003 0320 	and.w	r3, r3, #32
 800e4ac:	2b20      	cmp	r3, #32
 800e4ae:	d107      	bne.n	800e4c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f06f 0220 	mvn.w	r2, #32
 800e4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 faaa 	bl	800ea14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d101      	bne.n	800e4e4 <HAL_TIM_ConfigClockSource+0x1c>
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	e0b4      	b.n	800e64e <HAL_TIM_ConfigClockSource+0x186>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e50a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	68ba      	ldr	r2, [r7, #8]
 800e512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e51c:	d03e      	beq.n	800e59c <HAL_TIM_ConfigClockSource+0xd4>
 800e51e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e522:	f200 8087 	bhi.w	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e52a:	f000 8086 	beq.w	800e63a <HAL_TIM_ConfigClockSource+0x172>
 800e52e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e532:	d87f      	bhi.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e534:	2b70      	cmp	r3, #112	; 0x70
 800e536:	d01a      	beq.n	800e56e <HAL_TIM_ConfigClockSource+0xa6>
 800e538:	2b70      	cmp	r3, #112	; 0x70
 800e53a:	d87b      	bhi.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e53c:	2b60      	cmp	r3, #96	; 0x60
 800e53e:	d050      	beq.n	800e5e2 <HAL_TIM_ConfigClockSource+0x11a>
 800e540:	2b60      	cmp	r3, #96	; 0x60
 800e542:	d877      	bhi.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e544:	2b50      	cmp	r3, #80	; 0x50
 800e546:	d03c      	beq.n	800e5c2 <HAL_TIM_ConfigClockSource+0xfa>
 800e548:	2b50      	cmp	r3, #80	; 0x50
 800e54a:	d873      	bhi.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e54c:	2b40      	cmp	r3, #64	; 0x40
 800e54e:	d058      	beq.n	800e602 <HAL_TIM_ConfigClockSource+0x13a>
 800e550:	2b40      	cmp	r3, #64	; 0x40
 800e552:	d86f      	bhi.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e554:	2b30      	cmp	r3, #48	; 0x30
 800e556:	d064      	beq.n	800e622 <HAL_TIM_ConfigClockSource+0x15a>
 800e558:	2b30      	cmp	r3, #48	; 0x30
 800e55a:	d86b      	bhi.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e55c:	2b20      	cmp	r3, #32
 800e55e:	d060      	beq.n	800e622 <HAL_TIM_ConfigClockSource+0x15a>
 800e560:	2b20      	cmp	r3, #32
 800e562:	d867      	bhi.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
 800e564:	2b00      	cmp	r3, #0
 800e566:	d05c      	beq.n	800e622 <HAL_TIM_ConfigClockSource+0x15a>
 800e568:	2b10      	cmp	r3, #16
 800e56a:	d05a      	beq.n	800e622 <HAL_TIM_ConfigClockSource+0x15a>
 800e56c:	e062      	b.n	800e634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6818      	ldr	r0, [r3, #0]
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	6899      	ldr	r1, [r3, #8]
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	f000 f9ad 	bl	800e8dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	609a      	str	r2, [r3, #8]
      break;
 800e59a:	e04f      	b.n	800e63c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6818      	ldr	r0, [r3, #0]
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	6899      	ldr	r1, [r3, #8]
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	685a      	ldr	r2, [r3, #4]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	f000 f996 	bl	800e8dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	689a      	ldr	r2, [r3, #8]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e5be:	609a      	str	r2, [r3, #8]
      break;
 800e5c0:	e03c      	b.n	800e63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	6859      	ldr	r1, [r3, #4]
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f000 f90a 	bl	800e7e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2150      	movs	r1, #80	; 0x50
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f000 f963 	bl	800e8a6 <TIM_ITRx_SetConfig>
      break;
 800e5e0:	e02c      	b.n	800e63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6818      	ldr	r0, [r3, #0]
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	6859      	ldr	r1, [r3, #4]
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	f000 f929 	bl	800e846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2160      	movs	r1, #96	; 0x60
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 f953 	bl	800e8a6 <TIM_ITRx_SetConfig>
      break;
 800e600:	e01c      	b.n	800e63c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6818      	ldr	r0, [r3, #0]
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	6859      	ldr	r1, [r3, #4]
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	461a      	mov	r2, r3
 800e610:	f000 f8ea 	bl	800e7e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2140      	movs	r1, #64	; 0x40
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 f943 	bl	800e8a6 <TIM_ITRx_SetConfig>
      break;
 800e620:	e00c      	b.n	800e63c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4619      	mov	r1, r3
 800e62c:	4610      	mov	r0, r2
 800e62e:	f000 f93a 	bl	800e8a6 <TIM_ITRx_SetConfig>
      break;
 800e632:	e003      	b.n	800e63c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	73fb      	strb	r3, [r7, #15]
      break;
 800e638:	e000      	b.n	800e63c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e63a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e656:	b480      	push	{r7}
 800e658:	b083      	sub	sp, #12
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e65e:	bf00      	nop
 800e660:	370c      	adds	r7, #12
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e672:	bf00      	nop
 800e674:	370c      	adds	r7, #12
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e67e:	b480      	push	{r7}
 800e680:	b083      	sub	sp, #12
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e686:	bf00      	nop
 800e688:	370c      	adds	r7, #12
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e692:	b480      	push	{r7}
 800e694:	b083      	sub	sp, #12
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e69a:	bf00      	nop
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
	...

0800e6a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a40      	ldr	r2, [pc, #256]	; (800e7bc <TIM_Base_SetConfig+0x114>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d013      	beq.n	800e6e8 <TIM_Base_SetConfig+0x40>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6c6:	d00f      	beq.n	800e6e8 <TIM_Base_SetConfig+0x40>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a3d      	ldr	r2, [pc, #244]	; (800e7c0 <TIM_Base_SetConfig+0x118>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d00b      	beq.n	800e6e8 <TIM_Base_SetConfig+0x40>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4a3c      	ldr	r2, [pc, #240]	; (800e7c4 <TIM_Base_SetConfig+0x11c>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d007      	beq.n	800e6e8 <TIM_Base_SetConfig+0x40>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a3b      	ldr	r2, [pc, #236]	; (800e7c8 <TIM_Base_SetConfig+0x120>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d003      	beq.n	800e6e8 <TIM_Base_SetConfig+0x40>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a3a      	ldr	r2, [pc, #232]	; (800e7cc <TIM_Base_SetConfig+0x124>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d108      	bne.n	800e6fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4a2f      	ldr	r2, [pc, #188]	; (800e7bc <TIM_Base_SetConfig+0x114>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d02b      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e708:	d027      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4a2c      	ldr	r2, [pc, #176]	; (800e7c0 <TIM_Base_SetConfig+0x118>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d023      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	4a2b      	ldr	r2, [pc, #172]	; (800e7c4 <TIM_Base_SetConfig+0x11c>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d01f      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4a2a      	ldr	r2, [pc, #168]	; (800e7c8 <TIM_Base_SetConfig+0x120>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d01b      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4a29      	ldr	r2, [pc, #164]	; (800e7cc <TIM_Base_SetConfig+0x124>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d017      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4a28      	ldr	r2, [pc, #160]	; (800e7d0 <TIM_Base_SetConfig+0x128>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d013      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4a27      	ldr	r2, [pc, #156]	; (800e7d4 <TIM_Base_SetConfig+0x12c>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d00f      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4a26      	ldr	r2, [pc, #152]	; (800e7d8 <TIM_Base_SetConfig+0x130>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d00b      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4a25      	ldr	r2, [pc, #148]	; (800e7dc <TIM_Base_SetConfig+0x134>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d007      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4a24      	ldr	r2, [pc, #144]	; (800e7e0 <TIM_Base_SetConfig+0x138>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d003      	beq.n	800e75a <TIM_Base_SetConfig+0xb2>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4a23      	ldr	r2, [pc, #140]	; (800e7e4 <TIM_Base_SetConfig+0x13c>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d108      	bne.n	800e76c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	4313      	orrs	r3, r2
 800e76a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	695b      	ldr	r3, [r3, #20]
 800e776:	4313      	orrs	r3, r2
 800e778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	689a      	ldr	r2, [r3, #8]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4a0a      	ldr	r2, [pc, #40]	; (800e7bc <TIM_Base_SetConfig+0x114>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d003      	beq.n	800e7a0 <TIM_Base_SetConfig+0xf8>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4a0c      	ldr	r2, [pc, #48]	; (800e7cc <TIM_Base_SetConfig+0x124>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d103      	bne.n	800e7a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	691a      	ldr	r2, [r3, #16]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	615a      	str	r2, [r3, #20]
}
 800e7ae:	bf00      	nop
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	40010000 	.word	0x40010000
 800e7c0:	40000400 	.word	0x40000400
 800e7c4:	40000800 	.word	0x40000800
 800e7c8:	40000c00 	.word	0x40000c00
 800e7cc:	40010400 	.word	0x40010400
 800e7d0:	40014000 	.word	0x40014000
 800e7d4:	40014400 	.word	0x40014400
 800e7d8:	40014800 	.word	0x40014800
 800e7dc:	40001800 	.word	0x40001800
 800e7e0:	40001c00 	.word	0x40001c00
 800e7e4:	40002000 	.word	0x40002000

0800e7e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6a1b      	ldr	r3, [r3, #32]
 800e7f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6a1b      	ldr	r3, [r3, #32]
 800e7fe:	f023 0201 	bic.w	r2, r3, #1
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f023 030a 	bic.w	r3, r3, #10
 800e824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	621a      	str	r2, [r3, #32]
}
 800e83a:	bf00      	nop
 800e83c:	371c      	adds	r7, #28
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e846:	b480      	push	{r7}
 800e848:	b087      	sub	sp, #28
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	60f8      	str	r0, [r7, #12]
 800e84e:	60b9      	str	r1, [r7, #8]
 800e850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	f023 0210 	bic.w	r2, r3, #16
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6a1b      	ldr	r3, [r3, #32]
 800e868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	031b      	lsls	r3, r3, #12
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	4313      	orrs	r3, r2
 800e87a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	011b      	lsls	r3, r3, #4
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	621a      	str	r2, [r3, #32]
}
 800e89a:	bf00      	nop
 800e89c:	371c      	adds	r7, #28
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b085      	sub	sp, #20
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	f043 0307 	orr.w	r3, r3, #7
 800e8c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	609a      	str	r2, [r3, #8]
}
 800e8d0:	bf00      	nop
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b087      	sub	sp, #28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	021a      	lsls	r2, r3, #8
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	431a      	orrs	r2, r3
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	4313      	orrs	r3, r2
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	4313      	orrs	r3, r2
 800e908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	697a      	ldr	r2, [r7, #20]
 800e90e:	609a      	str	r2, [r3, #8]
}
 800e910:	bf00      	nop
 800e912:	371c      	adds	r7, #28
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d101      	bne.n	800e934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e930:	2302      	movs	r3, #2
 800e932:	e05a      	b.n	800e9ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2202      	movs	r2, #2
 800e940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e95a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a21      	ldr	r2, [pc, #132]	; (800e9f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d022      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e980:	d01d      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a1d      	ldr	r2, [pc, #116]	; (800e9fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d018      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a1b      	ldr	r2, [pc, #108]	; (800ea00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d013      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a1a      	ldr	r2, [pc, #104]	; (800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d00e      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a18      	ldr	r2, [pc, #96]	; (800ea08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d009      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a17      	ldr	r2, [pc, #92]	; (800ea0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d004      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a15      	ldr	r2, [pc, #84]	; (800ea10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d10c      	bne.n	800e9d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3714      	adds	r7, #20
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop
 800e9f8:	40010000 	.word	0x40010000
 800e9fc:	40000400 	.word	0x40000400
 800ea00:	40000800 	.word	0x40000800
 800ea04:	40000c00 	.word	0x40000c00
 800ea08:	40010400 	.word	0x40010400
 800ea0c:	40014000 	.word	0x40014000
 800ea10:	40001800 	.word	0x40001800

0800ea14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea30:	bf00      	nop
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d101      	bne.n	800ea4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e03f      	b.n	800eace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d106      	bne.n	800ea68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7f8 ffc8 	bl	80079f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2224      	movs	r2, #36	; 0x24
 800ea6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68da      	ldr	r2, [r3, #12]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 f929 	bl	800ecd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	691a      	ldr	r2, [r3, #16]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	695a      	ldr	r2, [r3, #20]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eaa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68da      	ldr	r2, [r3, #12]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2200      	movs	r2, #0
 800eaba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2220      	movs	r2, #32
 800eac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2220      	movs	r2, #32
 800eac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800eacc:	2300      	movs	r3, #0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b08a      	sub	sp, #40	; 0x28
 800eada:	af02      	add	r7, sp, #8
 800eadc:	60f8      	str	r0, [r7, #12]
 800eade:	60b9      	str	r1, [r7, #8]
 800eae0:	603b      	str	r3, [r7, #0]
 800eae2:	4613      	mov	r3, r2
 800eae4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800eae6:	2300      	movs	r3, #0
 800eae8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b20      	cmp	r3, #32
 800eaf4:	d17c      	bne.n	800ebf0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <HAL_UART_Transmit+0x2c>
 800eafc:	88fb      	ldrh	r3, [r7, #6]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	e075      	b.n	800ebf2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d101      	bne.n	800eb14 <HAL_UART_Transmit+0x3e>
 800eb10:	2302      	movs	r3, #2
 800eb12:	e06e      	b.n	800ebf2 <HAL_UART_Transmit+0x11c>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2221      	movs	r2, #33	; 0x21
 800eb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb2a:	f7fb fa1b 	bl	8009f64 <HAL_GetTick>
 800eb2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	88fa      	ldrh	r2, [r7, #6]
 800eb34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	88fa      	ldrh	r2, [r7, #6]
 800eb3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	689b      	ldr	r3, [r3, #8]
 800eb40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb44:	d108      	bne.n	800eb58 <HAL_UART_Transmit+0x82>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d104      	bne.n	800eb58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	61bb      	str	r3, [r7, #24]
 800eb56:	e003      	b.n	800eb60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800eb68:	e02a      	b.n	800ebc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	2200      	movs	r2, #0
 800eb72:	2180      	movs	r1, #128	; 0x80
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f000 f840 	bl	800ebfa <UART_WaitOnFlagUntilTimeout>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e036      	b.n	800ebf2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d10b      	bne.n	800eba2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	881b      	ldrh	r3, [r3, #0]
 800eb8e:	461a      	mov	r2, r3
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	3302      	adds	r3, #2
 800eb9e:	61bb      	str	r3, [r7, #24]
 800eba0:	e007      	b.n	800ebb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	781a      	ldrb	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	3b01      	subs	r3, #1
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1cf      	bne.n	800eb6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	2140      	movs	r1, #64	; 0x40
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f000 f810 	bl	800ebfa <UART_WaitOnFlagUntilTimeout>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ebe0:	2303      	movs	r3, #3
 800ebe2:	e006      	b.n	800ebf2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2220      	movs	r2, #32
 800ebe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	e000      	b.n	800ebf2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ebf0:	2302      	movs	r3, #2
  }
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3720      	adds	r7, #32
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b090      	sub	sp, #64	; 0x40
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	60f8      	str	r0, [r7, #12]
 800ec02:	60b9      	str	r1, [r7, #8]
 800ec04:	603b      	str	r3, [r7, #0]
 800ec06:	4613      	mov	r3, r2
 800ec08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec0a:	e050      	b.n	800ecae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec12:	d04c      	beq.n	800ecae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ec14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d007      	beq.n	800ec2a <UART_WaitOnFlagUntilTimeout+0x30>
 800ec1a:	f7fb f9a3 	bl	8009f64 <HAL_GetTick>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d241      	bcs.n	800ecae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	330c      	adds	r3, #12
 800ec30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	e853 3f00 	ldrex	r3, [r3]
 800ec38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	330c      	adds	r3, #12
 800ec48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec4a:	637a      	str	r2, [r7, #52]	; 0x34
 800ec4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec52:	e841 2300 	strex	r3, r2, [r1]
 800ec56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1e5      	bne.n	800ec2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	3314      	adds	r3, #20
 800ec64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	e853 3f00 	ldrex	r3, [r3]
 800ec6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	f023 0301 	bic.w	r3, r3, #1
 800ec74:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	3314      	adds	r3, #20
 800ec7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec7e:	623a      	str	r2, [r7, #32]
 800ec80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec82:	69f9      	ldr	r1, [r7, #28]
 800ec84:	6a3a      	ldr	r2, [r7, #32]
 800ec86:	e841 2300 	strex	r3, r2, [r1]
 800ec8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1e5      	bne.n	800ec5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2220      	movs	r2, #32
 800ec96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2220      	movs	r2, #32
 800ec9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	e00f      	b.n	800ecce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	4013      	ands	r3, r2
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	bf0c      	ite	eq
 800ecbe:	2301      	moveq	r3, #1
 800ecc0:	2300      	movne	r3, #0
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d09f      	beq.n	800ec0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3740      	adds	r7, #64	; 0x40
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
	...

0800ecd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecdc:	b09f      	sub	sp, #124	; 0x7c
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ece2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ecec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecee:	68d9      	ldr	r1, [r3, #12]
 800ecf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	ea40 0301 	orr.w	r3, r0, r1
 800ecf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ecfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecfc:	689a      	ldr	r2, [r3, #8]
 800ecfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	431a      	orrs	r2, r3
 800ed04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	431a      	orrs	r2, r3
 800ed0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed0c:	69db      	ldr	r3, [r3, #28]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ed12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ed1c:	f021 010c 	bic.w	r1, r1, #12
 800ed20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed26:	430b      	orrs	r3, r1
 800ed28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ed2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	695b      	ldr	r3, [r3, #20]
 800ed30:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ed34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed36:	6999      	ldr	r1, [r3, #24]
 800ed38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	ea40 0301 	orr.w	r3, r0, r1
 800ed40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ed42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	4bc5      	ldr	r3, [pc, #788]	; (800f05c <UART_SetConfig+0x384>)
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d004      	beq.n	800ed56 <UART_SetConfig+0x7e>
 800ed4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	4bc3      	ldr	r3, [pc, #780]	; (800f060 <UART_SetConfig+0x388>)
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d103      	bne.n	800ed5e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ed56:	f7fe f98d 	bl	800d074 <HAL_RCC_GetPCLK2Freq>
 800ed5a:	6778      	str	r0, [r7, #116]	; 0x74
 800ed5c:	e002      	b.n	800ed64 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ed5e:	f7fe f975 	bl	800d04c <HAL_RCC_GetPCLK1Freq>
 800ed62:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed66:	69db      	ldr	r3, [r3, #28]
 800ed68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed6c:	f040 80b6 	bne.w	800eedc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ed70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed72:	461c      	mov	r4, r3
 800ed74:	f04f 0500 	mov.w	r5, #0
 800ed78:	4622      	mov	r2, r4
 800ed7a:	462b      	mov	r3, r5
 800ed7c:	1891      	adds	r1, r2, r2
 800ed7e:	6439      	str	r1, [r7, #64]	; 0x40
 800ed80:	415b      	adcs	r3, r3
 800ed82:	647b      	str	r3, [r7, #68]	; 0x44
 800ed84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ed88:	1912      	adds	r2, r2, r4
 800ed8a:	eb45 0303 	adc.w	r3, r5, r3
 800ed8e:	f04f 0000 	mov.w	r0, #0
 800ed92:	f04f 0100 	mov.w	r1, #0
 800ed96:	00d9      	lsls	r1, r3, #3
 800ed98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ed9c:	00d0      	lsls	r0, r2, #3
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	1911      	adds	r1, r2, r4
 800eda4:	6639      	str	r1, [r7, #96]	; 0x60
 800eda6:	416b      	adcs	r3, r5
 800eda8:	667b      	str	r3, [r7, #100]	; 0x64
 800edaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	461a      	mov	r2, r3
 800edb0:	f04f 0300 	mov.w	r3, #0
 800edb4:	1891      	adds	r1, r2, r2
 800edb6:	63b9      	str	r1, [r7, #56]	; 0x38
 800edb8:	415b      	adcs	r3, r3
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800edc0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800edc4:	f7f7 f8d0 	bl	8005f68 <__aeabi_uldivmod>
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	4ba5      	ldr	r3, [pc, #660]	; (800f064 <UART_SetConfig+0x38c>)
 800edce:	fba3 2302 	umull	r2, r3, r3, r2
 800edd2:	095b      	lsrs	r3, r3, #5
 800edd4:	011e      	lsls	r6, r3, #4
 800edd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edd8:	461c      	mov	r4, r3
 800edda:	f04f 0500 	mov.w	r5, #0
 800edde:	4622      	mov	r2, r4
 800ede0:	462b      	mov	r3, r5
 800ede2:	1891      	adds	r1, r2, r2
 800ede4:	6339      	str	r1, [r7, #48]	; 0x30
 800ede6:	415b      	adcs	r3, r3
 800ede8:	637b      	str	r3, [r7, #52]	; 0x34
 800edea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800edee:	1912      	adds	r2, r2, r4
 800edf0:	eb45 0303 	adc.w	r3, r5, r3
 800edf4:	f04f 0000 	mov.w	r0, #0
 800edf8:	f04f 0100 	mov.w	r1, #0
 800edfc:	00d9      	lsls	r1, r3, #3
 800edfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ee02:	00d0      	lsls	r0, r2, #3
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	1911      	adds	r1, r2, r4
 800ee0a:	65b9      	str	r1, [r7, #88]	; 0x58
 800ee0c:	416b      	adcs	r3, r5
 800ee0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	461a      	mov	r2, r3
 800ee16:	f04f 0300 	mov.w	r3, #0
 800ee1a:	1891      	adds	r1, r2, r2
 800ee1c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ee1e:	415b      	adcs	r3, r3
 800ee20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ee26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ee2a:	f7f7 f89d 	bl	8005f68 <__aeabi_uldivmod>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	4b8c      	ldr	r3, [pc, #560]	; (800f064 <UART_SetConfig+0x38c>)
 800ee34:	fba3 1302 	umull	r1, r3, r3, r2
 800ee38:	095b      	lsrs	r3, r3, #5
 800ee3a:	2164      	movs	r1, #100	; 0x64
 800ee3c:	fb01 f303 	mul.w	r3, r1, r3
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	00db      	lsls	r3, r3, #3
 800ee44:	3332      	adds	r3, #50	; 0x32
 800ee46:	4a87      	ldr	r2, [pc, #540]	; (800f064 <UART_SetConfig+0x38c>)
 800ee48:	fba2 2303 	umull	r2, r3, r2, r3
 800ee4c:	095b      	lsrs	r3, r3, #5
 800ee4e:	005b      	lsls	r3, r3, #1
 800ee50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee54:	441e      	add	r6, r3
 800ee56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f04f 0100 	mov.w	r1, #0
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	1894      	adds	r4, r2, r2
 800ee64:	623c      	str	r4, [r7, #32]
 800ee66:	415b      	adcs	r3, r3
 800ee68:	627b      	str	r3, [r7, #36]	; 0x24
 800ee6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ee6e:	1812      	adds	r2, r2, r0
 800ee70:	eb41 0303 	adc.w	r3, r1, r3
 800ee74:	f04f 0400 	mov.w	r4, #0
 800ee78:	f04f 0500 	mov.w	r5, #0
 800ee7c:	00dd      	lsls	r5, r3, #3
 800ee7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ee82:	00d4      	lsls	r4, r2, #3
 800ee84:	4622      	mov	r2, r4
 800ee86:	462b      	mov	r3, r5
 800ee88:	1814      	adds	r4, r2, r0
 800ee8a:	653c      	str	r4, [r7, #80]	; 0x50
 800ee8c:	414b      	adcs	r3, r1
 800ee8e:	657b      	str	r3, [r7, #84]	; 0x54
 800ee90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	461a      	mov	r2, r3
 800ee96:	f04f 0300 	mov.w	r3, #0
 800ee9a:	1891      	adds	r1, r2, r2
 800ee9c:	61b9      	str	r1, [r7, #24]
 800ee9e:	415b      	adcs	r3, r3
 800eea0:	61fb      	str	r3, [r7, #28]
 800eea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eea6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800eeaa:	f7f7 f85d 	bl	8005f68 <__aeabi_uldivmod>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	4b6c      	ldr	r3, [pc, #432]	; (800f064 <UART_SetConfig+0x38c>)
 800eeb4:	fba3 1302 	umull	r1, r3, r3, r2
 800eeb8:	095b      	lsrs	r3, r3, #5
 800eeba:	2164      	movs	r1, #100	; 0x64
 800eebc:	fb01 f303 	mul.w	r3, r1, r3
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	3332      	adds	r3, #50	; 0x32
 800eec6:	4a67      	ldr	r2, [pc, #412]	; (800f064 <UART_SetConfig+0x38c>)
 800eec8:	fba2 2303 	umull	r2, r3, r2, r3
 800eecc:	095b      	lsrs	r3, r3, #5
 800eece:	f003 0207 	and.w	r2, r3, #7
 800eed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4432      	add	r2, r6
 800eed8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800eeda:	e0b9      	b.n	800f050 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eedc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eede:	461c      	mov	r4, r3
 800eee0:	f04f 0500 	mov.w	r5, #0
 800eee4:	4622      	mov	r2, r4
 800eee6:	462b      	mov	r3, r5
 800eee8:	1891      	adds	r1, r2, r2
 800eeea:	6139      	str	r1, [r7, #16]
 800eeec:	415b      	adcs	r3, r3
 800eeee:	617b      	str	r3, [r7, #20]
 800eef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eef4:	1912      	adds	r2, r2, r4
 800eef6:	eb45 0303 	adc.w	r3, r5, r3
 800eefa:	f04f 0000 	mov.w	r0, #0
 800eefe:	f04f 0100 	mov.w	r1, #0
 800ef02:	00d9      	lsls	r1, r3, #3
 800ef04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ef08:	00d0      	lsls	r0, r2, #3
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	eb12 0804 	adds.w	r8, r2, r4
 800ef12:	eb43 0905 	adc.w	r9, r3, r5
 800ef16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f04f 0100 	mov.w	r1, #0
 800ef20:	f04f 0200 	mov.w	r2, #0
 800ef24:	f04f 0300 	mov.w	r3, #0
 800ef28:	008b      	lsls	r3, r1, #2
 800ef2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ef2e:	0082      	lsls	r2, r0, #2
 800ef30:	4640      	mov	r0, r8
 800ef32:	4649      	mov	r1, r9
 800ef34:	f7f7 f818 	bl	8005f68 <__aeabi_uldivmod>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	4b49      	ldr	r3, [pc, #292]	; (800f064 <UART_SetConfig+0x38c>)
 800ef3e:	fba3 2302 	umull	r2, r3, r3, r2
 800ef42:	095b      	lsrs	r3, r3, #5
 800ef44:	011e      	lsls	r6, r3, #4
 800ef46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f04f 0100 	mov.w	r1, #0
 800ef4e:	4602      	mov	r2, r0
 800ef50:	460b      	mov	r3, r1
 800ef52:	1894      	adds	r4, r2, r2
 800ef54:	60bc      	str	r4, [r7, #8]
 800ef56:	415b      	adcs	r3, r3
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ef5e:	1812      	adds	r2, r2, r0
 800ef60:	eb41 0303 	adc.w	r3, r1, r3
 800ef64:	f04f 0400 	mov.w	r4, #0
 800ef68:	f04f 0500 	mov.w	r5, #0
 800ef6c:	00dd      	lsls	r5, r3, #3
 800ef6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ef72:	00d4      	lsls	r4, r2, #3
 800ef74:	4622      	mov	r2, r4
 800ef76:	462b      	mov	r3, r5
 800ef78:	1814      	adds	r4, r2, r0
 800ef7a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ef7c:	414b      	adcs	r3, r1
 800ef7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f04f 0100 	mov.w	r1, #0
 800ef8a:	f04f 0200 	mov.w	r2, #0
 800ef8e:	f04f 0300 	mov.w	r3, #0
 800ef92:	008b      	lsls	r3, r1, #2
 800ef94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ef98:	0082      	lsls	r2, r0, #2
 800ef9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ef9e:	f7f6 ffe3 	bl	8005f68 <__aeabi_uldivmod>
 800efa2:	4602      	mov	r2, r0
 800efa4:	460b      	mov	r3, r1
 800efa6:	4b2f      	ldr	r3, [pc, #188]	; (800f064 <UART_SetConfig+0x38c>)
 800efa8:	fba3 1302 	umull	r1, r3, r3, r2
 800efac:	095b      	lsrs	r3, r3, #5
 800efae:	2164      	movs	r1, #100	; 0x64
 800efb0:	fb01 f303 	mul.w	r3, r1, r3
 800efb4:	1ad3      	subs	r3, r2, r3
 800efb6:	011b      	lsls	r3, r3, #4
 800efb8:	3332      	adds	r3, #50	; 0x32
 800efba:	4a2a      	ldr	r2, [pc, #168]	; (800f064 <UART_SetConfig+0x38c>)
 800efbc:	fba2 2303 	umull	r2, r3, r2, r3
 800efc0:	095b      	lsrs	r3, r3, #5
 800efc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800efc6:	441e      	add	r6, r3
 800efc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efca:	4618      	mov	r0, r3
 800efcc:	f04f 0100 	mov.w	r1, #0
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	1894      	adds	r4, r2, r2
 800efd6:	603c      	str	r4, [r7, #0]
 800efd8:	415b      	adcs	r3, r3
 800efda:	607b      	str	r3, [r7, #4]
 800efdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efe0:	1812      	adds	r2, r2, r0
 800efe2:	eb41 0303 	adc.w	r3, r1, r3
 800efe6:	f04f 0400 	mov.w	r4, #0
 800efea:	f04f 0500 	mov.w	r5, #0
 800efee:	00dd      	lsls	r5, r3, #3
 800eff0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eff4:	00d4      	lsls	r4, r2, #3
 800eff6:	4622      	mov	r2, r4
 800eff8:	462b      	mov	r3, r5
 800effa:	eb12 0a00 	adds.w	sl, r2, r0
 800effe:	eb43 0b01 	adc.w	fp, r3, r1
 800f002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	4618      	mov	r0, r3
 800f008:	f04f 0100 	mov.w	r1, #0
 800f00c:	f04f 0200 	mov.w	r2, #0
 800f010:	f04f 0300 	mov.w	r3, #0
 800f014:	008b      	lsls	r3, r1, #2
 800f016:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f01a:	0082      	lsls	r2, r0, #2
 800f01c:	4650      	mov	r0, sl
 800f01e:	4659      	mov	r1, fp
 800f020:	f7f6 ffa2 	bl	8005f68 <__aeabi_uldivmod>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	4b0e      	ldr	r3, [pc, #56]	; (800f064 <UART_SetConfig+0x38c>)
 800f02a:	fba3 1302 	umull	r1, r3, r3, r2
 800f02e:	095b      	lsrs	r3, r3, #5
 800f030:	2164      	movs	r1, #100	; 0x64
 800f032:	fb01 f303 	mul.w	r3, r1, r3
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	011b      	lsls	r3, r3, #4
 800f03a:	3332      	adds	r3, #50	; 0x32
 800f03c:	4a09      	ldr	r2, [pc, #36]	; (800f064 <UART_SetConfig+0x38c>)
 800f03e:	fba2 2303 	umull	r2, r3, r2, r3
 800f042:	095b      	lsrs	r3, r3, #5
 800f044:	f003 020f 	and.w	r2, r3, #15
 800f048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4432      	add	r2, r6
 800f04e:	609a      	str	r2, [r3, #8]
}
 800f050:	bf00      	nop
 800f052:	377c      	adds	r7, #124	; 0x7c
 800f054:	46bd      	mov	sp, r7
 800f056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f05a:	bf00      	nop
 800f05c:	40011000 	.word	0x40011000
 800f060:	40011400 	.word	0x40011400
 800f064:	51eb851f 	.word	0x51eb851f

0800f068 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800f072:	2300      	movs	r3, #0
 800f074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800f076:	2300      	movs	r3, #0
 800f078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d029      	beq.n	800f0d6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800f08e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f092:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f09c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800f0a2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800f0a8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800f0ae:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800f0b4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800f0ba:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800f0c0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800f0c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	e034      	b.n	800f140 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f0e2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f0ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f0f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800f106:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f10a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f114:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800f11a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800f120:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800f126:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800f12c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	4313      	orrs	r3, r2
 800f132:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3714      	adds	r7, #20
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f14e:	b480      	push	{r7}
 800f150:	b087      	sub	sp, #28
 800f152:	af00      	add	r7, sp, #0
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	60b9      	str	r1, [r7, #8]
 800f158:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800f15a:	2300      	movs	r3, #0
 800f15c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800f15e:	2300      	movs	r3, #0
 800f160:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d02e      	beq.n	800f1c6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f174:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	3b01      	subs	r3, #1
 800f182:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800f184:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	689b      	ldr	r3, [r3, #8]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800f18e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	3b01      	subs	r3, #1
 800f196:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800f198:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	691b      	ldr	r3, [r3, #16]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800f1a2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800f1ac:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	699b      	ldr	r3, [r3, #24]
 800f1b2:	3b01      	subs	r3, #1
 800f1b4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	697a      	ldr	r2, [r7, #20]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	697a      	ldr	r2, [r7, #20]
 800f1c2:	609a      	str	r2, [r3, #8]
 800f1c4:	e03b      	b.n	800f23e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f1d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f1d6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	695b      	ldr	r3, [r3, #20]
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f1fc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	3b01      	subs	r3, #1
 800f20a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800f20c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	3b01      	subs	r3, #1
 800f214:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800f216:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800f220:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	699b      	ldr	r3, [r3, #24]
 800f226:	3b01      	subs	r3, #1
 800f228:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800f22a:	4313      	orrs	r3, r2
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	4313      	orrs	r3, r2
 800f230:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	371c      	adds	r7, #28
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b086      	sub	sp, #24
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800f258:	2300      	movs	r3, #0
 800f25a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800f25c:	2300      	movs	r3, #0
 800f25e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f268:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	3b01      	subs	r3, #1
 800f270:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800f272:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f27a:	4313      	orrs	r3, r2
 800f27c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800f27e:	693a      	ldr	r2, [r7, #16]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800f284:	f7fa fe6e 	bl	8009f64 <HAL_GetTick>
 800f288:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800f28a:	e010      	b.n	800f2ae <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f292:	d00c      	beq.n	800f2ae <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d007      	beq.n	800f2aa <FMC_SDRAM_SendCommand+0x5e>
 800f29a:	f7fa fe63 	bl	8009f64 <HAL_GetTick>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d201      	bcs.n	800f2ae <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	e006      	b.n	800f2bc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	f003 0320 	and.w	r3, r3, #32
 800f2b6:	2b20      	cmp	r3, #32
 800f2b8:	d0e8      	beq.n	800f28c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3718      	adds	r7, #24
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	695a      	ldr	r2, [r3, #20]
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	431a      	orrs	r2, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	370c      	adds	r7, #12
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
	...

0800f2ec <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b090      	sub	sp, #64	; 0x40
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 800f2f4:	4b2f      	ldr	r3, [pc, #188]	; (800f3b4 <aiInit+0xc8>)
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	823b      	strh	r3, [r7, #16]
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	827b      	strh	r3, [r7, #18]
 800f300:	2301      	movs	r3, #1
 800f302:	82bb      	strh	r3, [r7, #20]
 800f304:	4b2c      	ldr	r3, [pc, #176]	; (800f3b8 <aiInit+0xcc>)
 800f306:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800f308:	f000 f9f8 	bl	800f6fc <ai_network_data_weights_get>
 800f30c:	4603      	mov	r3, r0
    const ai_network_params params = {
 800f30e:	61fb      	str	r3, [r7, #28]
 800f310:	2300      	movs	r3, #0
 800f312:	623b      	str	r3, [r7, #32]
 800f314:	4b29      	ldr	r3, [pc, #164]	; (800f3bc <aiInit+0xd0>)
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
 800f318:	2301      	movs	r3, #1
 800f31a:	853b      	strh	r3, [r7, #40]	; 0x28
 800f31c:	2301      	movs	r3, #1
 800f31e:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f320:	2301      	movs	r3, #1
 800f322:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f324:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f328:	633b      	str	r3, [r7, #48]	; 0x30
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	637b      	str	r3, [r7, #52]	; 0x34
 800f32e:	2300      	movs	r3, #0
 800f330:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800f332:	2100      	movs	r1, #0
 800f334:	4822      	ldr	r0, [pc, #136]	; (800f3c0 <aiInit+0xd4>)
 800f336:	f000 f97b 	bl	800f630 <ai_network_create>
 800f33a:	4603      	mov	r3, r0
 800f33c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 800f33e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f342:	2b00      	cmp	r3, #0
 800f344:	d002      	beq.n	800f34c <aiInit+0x60>
	    return -1;
 800f346:	f04f 33ff 	mov.w	r3, #4294967295
 800f34a:	e02e      	b.n	800f3aa <aiInit+0xbe>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 800f34c:	4b1c      	ldr	r3, [pc, #112]	; (800f3c0 <aiInit+0xd4>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f107 020c 	add.w	r2, r7, #12
 800f354:	4611      	mov	r1, r2
 800f356:	4618      	mov	r0, r3
 800f358:	f000 f98c 	bl	800f674 <ai_network_init>
 800f35c:	4603      	mov	r3, r0
 800f35e:	f083 0301 	eor.w	r3, r3, #1
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b00      	cmp	r3, #0
 800f366:	d01f      	beq.n	800f3a8 <aiInit+0xbc>
        err = ai_network_get_error(network);
 800f368:	4b15      	ldr	r3, [pc, #84]	; (800f3c0 <aiInit+0xd4>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f000 f953 	bl	800f618 <ai_network_get_error>
 800f372:	4603      	mov	r3, r0
 800f374:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(err.type !=AI_ERROR_NONE){
 800f376:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d009      	beq.n	800f392 <aiInit+0xa6>
                	printf("ERROR : type=%d code=%d\r\n",err.type,err.code);
 800f37e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f382:	4619      	mov	r1, r3
 800f384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f386:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800f38a:	461a      	mov	r2, r3
 800f38c:	480d      	ldr	r0, [pc, #52]	; (800f3c4 <aiInit+0xd8>)
 800f38e:	f001 f88d 	bl	80104ac <iprintf>
                }
        ai_network_destroy(network);
 800f392:	4b0b      	ldr	r3, [pc, #44]	; (800f3c0 <aiInit+0xd4>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4618      	mov	r0, r3
 800f398:	f000 f960 	bl	800f65c <ai_network_destroy>
        network = AI_HANDLE_NULL;
 800f39c:	4b08      	ldr	r3, [pc, #32]	; (800f3c0 <aiInit+0xd4>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	601a      	str	r2, [r3, #0]
	    return -2;
 800f3a2:	f06f 0301 	mvn.w	r3, #1
 800f3a6:	e000      	b.n	800f3aa <aiInit+0xbe>
    }

    return 0;
 800f3a8:	2300      	movs	r3, #0
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3740      	adds	r7, #64	; 0x40
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	40040440 	.word	0x40040440
 800f3b8:	000e5a28 	.word	0x000e5a28
 800f3bc:	00040440 	.word	0x00040440
 800f3c0:	20000b28 	.word	0x20000b28
 800f3c4:	080171b0 	.word	0x080171b0

0800f3c8 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
    ai_error err;



    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 800f3d2:	4b14      	ldr	r3, [pc, #80]	; (800f424 <aiRun+0x5c>)
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800f3d8:	4a12      	ldr	r2, [pc, #72]	; (800f424 <aiRun+0x5c>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 800f3de:	4b12      	ldr	r3, [pc, #72]	; (800f428 <aiRun+0x60>)
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800f3e4:	4a10      	ldr	r2, [pc, #64]	; (800f428 <aiRun+0x60>)
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
     ai_network_run(network, &ai_input[0], &ai_output[0]);
 800f3ea:	4b10      	ldr	r3, [pc, #64]	; (800f42c <aiRun+0x64>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4a0e      	ldr	r2, [pc, #56]	; (800f428 <aiRun+0x60>)
 800f3f0:	490c      	ldr	r1, [pc, #48]	; (800f424 <aiRun+0x5c>)
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f000 f971 	bl	800f6da <ai_network_run>
     err = ai_network_get_error(network);
 800f3f8:	4b0c      	ldr	r3, [pc, #48]	; (800f42c <aiRun+0x64>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f000 f90b 	bl	800f618 <ai_network_get_error>
 800f402:	4603      	mov	r3, r0
 800f404:	60fb      	str	r3, [r7, #12]
    printf("ERROR : type=%d code=%d",err.type,err.code);
 800f406:	7b3b      	ldrb	r3, [r7, #12]
 800f408:	4619      	mov	r1, r3
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800f410:	461a      	mov	r2, r3
 800f412:	4807      	ldr	r0, [pc, #28]	; (800f430 <aiRun+0x68>)
 800f414:	f001 f84a 	bl	80104ac <iprintf>

}
 800f418:	bf00      	nop
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	20000094 	.word	0x20000094
 800f428:	200000ac 	.word	0x200000ac
 800f42c:	20000b28 	.word	0x20000b28
 800f430:	080171cc 	.word	0x080171cc

0800f434 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800f438:	4802      	ldr	r0, [pc, #8]	; (800f444 <MX_X_CUBE_AI_Init+0x10>)
 800f43a:	f7ff ff57 	bl	800f2ec <aiInit>
    /* USER CODE END 0 */
}
 800f43e:	bf00      	nop
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	20000b2c 	.word	0x20000b2c

0800f448 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(ai_float * nn_input_data, ai_float *nn_output_data)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
      aiRun(nn_input_data, nn_output_data);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7ff ffb7 	bl	800f3c8 <aiRun>

}
 800f45a:	bf00      	nop
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
	...

0800f464 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	3303      	adds	r3, #3
 800f474:	f023 0303 	bic.w	r3, r3, #3
 800f478:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800f47a:	4b1c      	ldr	r3, [pc, #112]	; (800f4ec <network_configure_activations+0x88>)
 800f47c:	2200      	movs	r2, #0
 800f47e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800f480:	4b1a      	ldr	r3, [pc, #104]	; (800f4ec <network_configure_activations+0x88>)
 800f482:	2200      	movs	r2, #0
 800f484:	60da      	str	r2, [r3, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 800f486:	4a1a      	ldr	r2, [pc, #104]	; (800f4f0 <network_configure_activations+0x8c>)
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 800f48c:	4a18      	ldr	r2, [pc, #96]	; (800f4f0 <network_configure_activations+0x8c>)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations + 0);
 800f492:	4a18      	ldr	r2, [pc, #96]	; (800f4f4 <network_configure_activations+0x90>)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations + 0);
 800f498:	4a16      	ldr	r2, [pc, #88]	; (800f4f4 <network_configure_activations+0x90>)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 1024);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f4a4:	4a14      	ldr	r2, [pc, #80]	; (800f4f8 <network_configure_activations+0x94>)
 800f4a6:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 1024);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f4ae:	4a12      	ldr	r2, [pc, #72]	; (800f4f8 <network_configure_activations+0x94>)
 800f4b0:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 1024);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f4b8:	4a10      	ldr	r2, [pc, #64]	; (800f4fc <network_configure_activations+0x98>)
 800f4ba:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 1024);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f4c2:	4a0e      	ldr	r2, [pc, #56]	; (800f4fc <network_configure_activations+0x98>)
 800f4c4:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 0);
 800f4c6:	4a0e      	ldr	r2, [pc, #56]	; (800f500 <network_configure_activations+0x9c>)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 0);
 800f4cc:	4a0c      	ldr	r2, [pc, #48]	; (800f500 <network_configure_activations+0x9c>)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 800f4d2:	4b0c      	ldr	r3, [pc, #48]	; (800f504 <network_configure_activations+0xa0>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 800f4d8:	4b0a      	ldr	r3, [pc, #40]	; (800f504 <network_configure_activations+0xa0>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800f4de:	2301      	movs	r3, #1
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3714      	adds	r7, #20
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	2000017c 	.word	0x2000017c
 800f4f0:	2000018c 	.word	0x2000018c
 800f4f4:	2000019c 	.word	0x2000019c
 800f4f8:	200001ac 	.word	0x200001ac
 800f4fc:	200001bc 	.word	0x200001bc
 800f500:	200001cc 	.word	0x200001cc
 800f504:	200001dc 	.word	0x200001dc

0800f508 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	691b      	ldr	r3, [r3, #16]
 800f516:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800f518:	4b39      	ldr	r3, [pc, #228]	; (800f600 <network_configure_weights+0xf8>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f520:	4a37      	ldr	r2, [pc, #220]	; (800f600 <network_configure_weights+0xf8>)
 800f522:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 940544);
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f503 2365 	add.w	r3, r3, #937984	; 0xe5000
 800f52a:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800f52e:	4a34      	ldr	r2, [pc, #208]	; (800f600 <network_configure_weights+0xf8>)
 800f530:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 940544);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f503 2365 	add.w	r3, r3, #937984	; 0xe5000
 800f538:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800f53c:	4a30      	ldr	r2, [pc, #192]	; (800f600 <network_configure_weights+0xf8>)
 800f53e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800f540:	4b30      	ldr	r3, [pc, #192]	; (800f604 <network_configure_weights+0xfc>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f548:	4a2e      	ldr	r2, [pc, #184]	; (800f604 <network_configure_weights+0xfc>)
 800f54a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 935424);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 800f552:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800f556:	4a2b      	ldr	r2, [pc, #172]	; (800f604 <network_configure_weights+0xfc>)
 800f558:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 935424);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 800f560:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800f564:	4a27      	ldr	r2, [pc, #156]	; (800f604 <network_configure_weights+0xfc>)
 800f566:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800f568:	4b27      	ldr	r3, [pc, #156]	; (800f608 <network_configure_weights+0x100>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f570:	4a25      	ldr	r2, [pc, #148]	; (800f608 <network_configure_weights+0x100>)
 800f572:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 934912);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 800f57a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f57e:	4a22      	ldr	r2, [pc, #136]	; (800f608 <network_configure_weights+0x100>)
 800f580:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 934912);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 800f588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f58c:	4a1e      	ldr	r2, [pc, #120]	; (800f608 <network_configure_weights+0x100>)
 800f58e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800f590:	4b1e      	ldr	r3, [pc, #120]	; (800f60c <network_configure_weights+0x104>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f598:	4a1c      	ldr	r2, [pc, #112]	; (800f60c <network_configure_weights+0x104>)
 800f59a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 803840);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 800f5a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f5a6:	4a19      	ldr	r2, [pc, #100]	; (800f60c <network_configure_weights+0x104>)
 800f5a8:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 803840);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 800f5b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f5b4:	4a15      	ldr	r2, [pc, #84]	; (800f60c <network_configure_weights+0x104>)
 800f5b6:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f5b8:	4b15      	ldr	r3, [pc, #84]	; (800f610 <network_configure_weights+0x108>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5c0:	4a13      	ldr	r2, [pc, #76]	; (800f610 <network_configure_weights+0x108>)
 800f5c2:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 802816);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 800f5ca:	4a11      	ldr	r2, [pc, #68]	; (800f610 <network_configure_weights+0x108>)
 800f5cc:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 802816);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 800f5d4:	4a0e      	ldr	r2, [pc, #56]	; (800f610 <network_configure_weights+0x108>)
 800f5d6:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f5d8:	4b0e      	ldr	r3, [pc, #56]	; (800f614 <network_configure_weights+0x10c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5e0:	4a0c      	ldr	r2, [pc, #48]	; (800f614 <network_configure_weights+0x10c>)
 800f5e2:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 0);
 800f5e4:	4a0b      	ldr	r2, [pc, #44]	; (800f614 <network_configure_weights+0x10c>)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 0);
 800f5ea:	4a0a      	ldr	r2, [pc, #40]	; (800f614 <network_configure_weights+0x10c>)
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800f5f0:	2301      	movs	r3, #1
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3714      	adds	r7, #20
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	2000011c 	.word	0x2000011c
 800f604:	2000012c 	.word	0x2000012c
 800f608:	2000013c 	.word	0x2000013c
 800f60c:	2000014c 	.word	0x2000014c
 800f610:	2000015c 	.word	0x2000015c
 800f614:	2000016c 	.word	0x2000016c

0800f618 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7f0 fee0 	bl	80003e6 <ai_platform_network_get_error>
 800f626:	4603      	mov	r3, r0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af02      	add	r7, sp, #8
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f63a:	2300      	movs	r3, #0
 800f63c:	9301      	str	r3, [sp, #4]
 800f63e:	2303      	movs	r3, #3
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	2301      	movs	r3, #1
 800f644:	4a04      	ldr	r2, [pc, #16]	; (800f658 <ai_network_create+0x28>)
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7f0 ffb7 	bl	80005bc <ai_platform_network_create>
 800f64e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	200000c4 	.word	0x200000c4

0800f65c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f7f0 ffee 	bl	8000646 <ai_platform_network_destroy>
 800f66a:	4603      	mov	r3, r0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7f1 f803 	bl	800068c <ai_platform_network_init>
 800f686:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <ai_network_init+0x1e>
 800f68e:	2300      	movs	r3, #0
 800f690:	e01f      	b.n	800f6d2 <ai_network_init+0x5e>

  ai_bool ok = true;
 800f692:	2301      	movs	r3, #1
 800f694:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	4619      	mov	r1, r3
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f7ff ff34 	bl	800f508 <network_configure_weights>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	7afb      	ldrb	r3, [r7, #11]
 800f6a6:	4013      	ands	r3, r2
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	bf14      	ite	ne
 800f6ac:	2301      	movne	r3, #1
 800f6ae:	2300      	moveq	r3, #0
 800f6b0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	3318      	adds	r3, #24
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f7ff fed3 	bl	800f464 <network_configure_activations>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	7afb      	ldrb	r3, [r7, #11]
 800f6c4:	4013      	ands	r3, r2
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	bf14      	ite	ne
 800f6ca:	2301      	movne	r3, #1
 800f6cc:	2300      	moveq	r3, #0
 800f6ce:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f6d0:	7afb      	ldrb	r3, [r7, #11]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b084      	sub	sp, #16
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	60f8      	str	r0, [r7, #12]
 800f6e2:	60b9      	str	r1, [r7, #8]
 800f6e4:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	68b9      	ldr	r1, [r7, #8]
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f7f1 f82a 	bl	8000744 <ai_platform_network_process>
 800f6f0:	4603      	mov	r3, r0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
	...

0800f6fc <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	af00      	add	r7, sp, #0
    0x3c, 0x37, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x85, 0x06,
    0xa8, 0xbc, 0x00, 0x00, 0x00, 0x00, 0xcb, 0x66, 0xf8,
    0xbc, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x9e, 0x0d, 0xbc
  };

  return AI_HANDLE_PTR(s_network_weights);
 800f700:	4b02      	ldr	r3, [pc, #8]	; (800f70c <ai_network_data_weights_get+0x10>)

}
 800f702:	4618      	mov	r0, r3
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	0801a844 	.word	0x0801a844

0800f710 <__aeabi_memclr>:
 800f710:	2200      	movs	r2, #0
 800f712:	f7f5 be7d 	b.w	8005410 <__aeabi_memset>

0800f716 <__aeabi_memcpy>:
 800f716:	f000 b839 	b.w	800f78c <memcpy>
	...

0800f71c <__errno>:
 800f71c:	4b01      	ldr	r3, [pc, #4]	; (800f724 <__errno+0x8>)
 800f71e:	6818      	ldr	r0, [r3, #0]
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop
 800f724:	20000770 	.word	0x20000770

0800f728 <__libc_init_array>:
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	4d0d      	ldr	r5, [pc, #52]	; (800f760 <__libc_init_array+0x38>)
 800f72c:	4c0d      	ldr	r4, [pc, #52]	; (800f764 <__libc_init_array+0x3c>)
 800f72e:	1b64      	subs	r4, r4, r5
 800f730:	10a4      	asrs	r4, r4, #2
 800f732:	2600      	movs	r6, #0
 800f734:	42a6      	cmp	r6, r4
 800f736:	d109      	bne.n	800f74c <__libc_init_array+0x24>
 800f738:	4d0b      	ldr	r5, [pc, #44]	; (800f768 <__libc_init_array+0x40>)
 800f73a:	4c0c      	ldr	r4, [pc, #48]	; (800f76c <__libc_init_array+0x44>)
 800f73c:	f007 fcee 	bl	801711c <_init>
 800f740:	1b64      	subs	r4, r4, r5
 800f742:	10a4      	asrs	r4, r4, #2
 800f744:	2600      	movs	r6, #0
 800f746:	42a6      	cmp	r6, r4
 800f748:	d105      	bne.n	800f756 <__libc_init_array+0x2e>
 800f74a:	bd70      	pop	{r4, r5, r6, pc}
 800f74c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f750:	4798      	blx	r3
 800f752:	3601      	adds	r6, #1
 800f754:	e7ee      	b.n	800f734 <__libc_init_array+0xc>
 800f756:	f855 3b04 	ldr.w	r3, [r5], #4
 800f75a:	4798      	blx	r3
 800f75c:	3601      	adds	r6, #1
 800f75e:	e7f2      	b.n	800f746 <__libc_init_array+0x1e>
 800f760:	08100b5c 	.word	0x08100b5c
 800f764:	08100b5c 	.word	0x08100b5c
 800f768:	08100b5c 	.word	0x08100b5c
 800f76c:	08100b60 	.word	0x08100b60

0800f770 <memcmp>:
 800f770:	b530      	push	{r4, r5, lr}
 800f772:	3901      	subs	r1, #1
 800f774:	2400      	movs	r4, #0
 800f776:	42a2      	cmp	r2, r4
 800f778:	d101      	bne.n	800f77e <memcmp+0xe>
 800f77a:	2000      	movs	r0, #0
 800f77c:	e005      	b.n	800f78a <memcmp+0x1a>
 800f77e:	5d03      	ldrb	r3, [r0, r4]
 800f780:	3401      	adds	r4, #1
 800f782:	5d0d      	ldrb	r5, [r1, r4]
 800f784:	42ab      	cmp	r3, r5
 800f786:	d0f6      	beq.n	800f776 <memcmp+0x6>
 800f788:	1b58      	subs	r0, r3, r5
 800f78a:	bd30      	pop	{r4, r5, pc}

0800f78c <memcpy>:
 800f78c:	440a      	add	r2, r1
 800f78e:	4291      	cmp	r1, r2
 800f790:	f100 33ff 	add.w	r3, r0, #4294967295
 800f794:	d100      	bne.n	800f798 <memcpy+0xc>
 800f796:	4770      	bx	lr
 800f798:	b510      	push	{r4, lr}
 800f79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f79e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7a2:	4291      	cmp	r1, r2
 800f7a4:	d1f9      	bne.n	800f79a <memcpy+0xe>
 800f7a6:	bd10      	pop	{r4, pc}

0800f7a8 <memset>:
 800f7a8:	4402      	add	r2, r0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d100      	bne.n	800f7b2 <memset+0xa>
 800f7b0:	4770      	bx	lr
 800f7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800f7b6:	e7f9      	b.n	800f7ac <memset+0x4>

0800f7b8 <__cvt>:
 800f7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7bc:	ec55 4b10 	vmov	r4, r5, d0
 800f7c0:	2d00      	cmp	r5, #0
 800f7c2:	460e      	mov	r6, r1
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	462b      	mov	r3, r5
 800f7c8:	bfbb      	ittet	lt
 800f7ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f7ce:	461d      	movlt	r5, r3
 800f7d0:	2300      	movge	r3, #0
 800f7d2:	232d      	movlt	r3, #45	; 0x2d
 800f7d4:	700b      	strb	r3, [r1, #0]
 800f7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f7dc:	4691      	mov	r9, r2
 800f7de:	f023 0820 	bic.w	r8, r3, #32
 800f7e2:	bfbc      	itt	lt
 800f7e4:	4622      	movlt	r2, r4
 800f7e6:	4614      	movlt	r4, r2
 800f7e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f7ec:	d005      	beq.n	800f7fa <__cvt+0x42>
 800f7ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f7f2:	d100      	bne.n	800f7f6 <__cvt+0x3e>
 800f7f4:	3601      	adds	r6, #1
 800f7f6:	2102      	movs	r1, #2
 800f7f8:	e000      	b.n	800f7fc <__cvt+0x44>
 800f7fa:	2103      	movs	r1, #3
 800f7fc:	ab03      	add	r3, sp, #12
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	ab02      	add	r3, sp, #8
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	ec45 4b10 	vmov	d0, r4, r5
 800f808:	4653      	mov	r3, sl
 800f80a:	4632      	mov	r2, r6
 800f80c:	f001 ff04 	bl	8011618 <_dtoa_r>
 800f810:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f814:	4607      	mov	r7, r0
 800f816:	d102      	bne.n	800f81e <__cvt+0x66>
 800f818:	f019 0f01 	tst.w	r9, #1
 800f81c:	d022      	beq.n	800f864 <__cvt+0xac>
 800f81e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f822:	eb07 0906 	add.w	r9, r7, r6
 800f826:	d110      	bne.n	800f84a <__cvt+0x92>
 800f828:	783b      	ldrb	r3, [r7, #0]
 800f82a:	2b30      	cmp	r3, #48	; 0x30
 800f82c:	d10a      	bne.n	800f844 <__cvt+0x8c>
 800f82e:	2200      	movs	r2, #0
 800f830:	2300      	movs	r3, #0
 800f832:	4620      	mov	r0, r4
 800f834:	4629      	mov	r1, r5
 800f836:	f7f6 fab7 	bl	8005da8 <__aeabi_dcmpeq>
 800f83a:	b918      	cbnz	r0, 800f844 <__cvt+0x8c>
 800f83c:	f1c6 0601 	rsb	r6, r6, #1
 800f840:	f8ca 6000 	str.w	r6, [sl]
 800f844:	f8da 3000 	ldr.w	r3, [sl]
 800f848:	4499      	add	r9, r3
 800f84a:	2200      	movs	r2, #0
 800f84c:	2300      	movs	r3, #0
 800f84e:	4620      	mov	r0, r4
 800f850:	4629      	mov	r1, r5
 800f852:	f7f6 faa9 	bl	8005da8 <__aeabi_dcmpeq>
 800f856:	b108      	cbz	r0, 800f85c <__cvt+0xa4>
 800f858:	f8cd 900c 	str.w	r9, [sp, #12]
 800f85c:	2230      	movs	r2, #48	; 0x30
 800f85e:	9b03      	ldr	r3, [sp, #12]
 800f860:	454b      	cmp	r3, r9
 800f862:	d307      	bcc.n	800f874 <__cvt+0xbc>
 800f864:	9b03      	ldr	r3, [sp, #12]
 800f866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f868:	1bdb      	subs	r3, r3, r7
 800f86a:	4638      	mov	r0, r7
 800f86c:	6013      	str	r3, [r2, #0]
 800f86e:	b004      	add	sp, #16
 800f870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f874:	1c59      	adds	r1, r3, #1
 800f876:	9103      	str	r1, [sp, #12]
 800f878:	701a      	strb	r2, [r3, #0]
 800f87a:	e7f0      	b.n	800f85e <__cvt+0xa6>

0800f87c <__exponent>:
 800f87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f87e:	4603      	mov	r3, r0
 800f880:	2900      	cmp	r1, #0
 800f882:	bfb8      	it	lt
 800f884:	4249      	neglt	r1, r1
 800f886:	f803 2b02 	strb.w	r2, [r3], #2
 800f88a:	bfb4      	ite	lt
 800f88c:	222d      	movlt	r2, #45	; 0x2d
 800f88e:	222b      	movge	r2, #43	; 0x2b
 800f890:	2909      	cmp	r1, #9
 800f892:	7042      	strb	r2, [r0, #1]
 800f894:	dd2a      	ble.n	800f8ec <__exponent+0x70>
 800f896:	f10d 0407 	add.w	r4, sp, #7
 800f89a:	46a4      	mov	ip, r4
 800f89c:	270a      	movs	r7, #10
 800f89e:	46a6      	mov	lr, r4
 800f8a0:	460a      	mov	r2, r1
 800f8a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800f8a6:	fb07 1516 	mls	r5, r7, r6, r1
 800f8aa:	3530      	adds	r5, #48	; 0x30
 800f8ac:	2a63      	cmp	r2, #99	; 0x63
 800f8ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800f8b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	dcf1      	bgt.n	800f89e <__exponent+0x22>
 800f8ba:	3130      	adds	r1, #48	; 0x30
 800f8bc:	f1ae 0502 	sub.w	r5, lr, #2
 800f8c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f8c4:	1c44      	adds	r4, r0, #1
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	4561      	cmp	r1, ip
 800f8ca:	d30a      	bcc.n	800f8e2 <__exponent+0x66>
 800f8cc:	f10d 0209 	add.w	r2, sp, #9
 800f8d0:	eba2 020e 	sub.w	r2, r2, lr
 800f8d4:	4565      	cmp	r5, ip
 800f8d6:	bf88      	it	hi
 800f8d8:	2200      	movhi	r2, #0
 800f8da:	4413      	add	r3, r2
 800f8dc:	1a18      	subs	r0, r3, r0
 800f8de:	b003      	add	sp, #12
 800f8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f8ea:	e7ed      	b.n	800f8c8 <__exponent+0x4c>
 800f8ec:	2330      	movs	r3, #48	; 0x30
 800f8ee:	3130      	adds	r1, #48	; 0x30
 800f8f0:	7083      	strb	r3, [r0, #2]
 800f8f2:	70c1      	strb	r1, [r0, #3]
 800f8f4:	1d03      	adds	r3, r0, #4
 800f8f6:	e7f1      	b.n	800f8dc <__exponent+0x60>

0800f8f8 <_printf_float>:
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	ed2d 8b02 	vpush	{d8}
 800f900:	b08d      	sub	sp, #52	; 0x34
 800f902:	460c      	mov	r4, r1
 800f904:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f908:	4616      	mov	r6, r2
 800f90a:	461f      	mov	r7, r3
 800f90c:	4605      	mov	r5, r0
 800f90e:	f003 f995 	bl	8012c3c <_localeconv_r>
 800f912:	f8d0 a000 	ldr.w	sl, [r0]
 800f916:	4650      	mov	r0, sl
 800f918:	f7f5 fdc7 	bl	80054aa <strlen>
 800f91c:	2300      	movs	r3, #0
 800f91e:	930a      	str	r3, [sp, #40]	; 0x28
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	9305      	str	r3, [sp, #20]
 800f924:	f8d8 3000 	ldr.w	r3, [r8]
 800f928:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f92c:	3307      	adds	r3, #7
 800f92e:	f023 0307 	bic.w	r3, r3, #7
 800f932:	f103 0208 	add.w	r2, r3, #8
 800f936:	f8c8 2000 	str.w	r2, [r8]
 800f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f942:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f946:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f94a:	9307      	str	r3, [sp, #28]
 800f94c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f950:	ee08 0a10 	vmov	s16, r0
 800f954:	4b9f      	ldr	r3, [pc, #636]	; (800fbd4 <_printf_float+0x2dc>)
 800f956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f95a:	f04f 32ff 	mov.w	r2, #4294967295
 800f95e:	f7f6 fa55 	bl	8005e0c <__aeabi_dcmpun>
 800f962:	bb88      	cbnz	r0, 800f9c8 <_printf_float+0xd0>
 800f964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f968:	4b9a      	ldr	r3, [pc, #616]	; (800fbd4 <_printf_float+0x2dc>)
 800f96a:	f04f 32ff 	mov.w	r2, #4294967295
 800f96e:	f7f6 fa2f 	bl	8005dd0 <__aeabi_dcmple>
 800f972:	bb48      	cbnz	r0, 800f9c8 <_printf_float+0xd0>
 800f974:	2200      	movs	r2, #0
 800f976:	2300      	movs	r3, #0
 800f978:	4640      	mov	r0, r8
 800f97a:	4649      	mov	r1, r9
 800f97c:	f7f6 fa1e 	bl	8005dbc <__aeabi_dcmplt>
 800f980:	b110      	cbz	r0, 800f988 <_printf_float+0x90>
 800f982:	232d      	movs	r3, #45	; 0x2d
 800f984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f988:	4b93      	ldr	r3, [pc, #588]	; (800fbd8 <_printf_float+0x2e0>)
 800f98a:	4894      	ldr	r0, [pc, #592]	; (800fbdc <_printf_float+0x2e4>)
 800f98c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f990:	bf94      	ite	ls
 800f992:	4698      	movls	r8, r3
 800f994:	4680      	movhi	r8, r0
 800f996:	2303      	movs	r3, #3
 800f998:	6123      	str	r3, [r4, #16]
 800f99a:	9b05      	ldr	r3, [sp, #20]
 800f99c:	f023 0204 	bic.w	r2, r3, #4
 800f9a0:	6022      	str	r2, [r4, #0]
 800f9a2:	f04f 0900 	mov.w	r9, #0
 800f9a6:	9700      	str	r7, [sp, #0]
 800f9a8:	4633      	mov	r3, r6
 800f9aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800f9ac:	4621      	mov	r1, r4
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f000 f9d8 	bl	800fd64 <_printf_common>
 800f9b4:	3001      	adds	r0, #1
 800f9b6:	f040 8090 	bne.w	800fada <_printf_float+0x1e2>
 800f9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f9be:	b00d      	add	sp, #52	; 0x34
 800f9c0:	ecbd 8b02 	vpop	{d8}
 800f9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c8:	4642      	mov	r2, r8
 800f9ca:	464b      	mov	r3, r9
 800f9cc:	4640      	mov	r0, r8
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	f7f6 fa1c 	bl	8005e0c <__aeabi_dcmpun>
 800f9d4:	b140      	cbz	r0, 800f9e8 <_printf_float+0xf0>
 800f9d6:	464b      	mov	r3, r9
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	bfbc      	itt	lt
 800f9dc:	232d      	movlt	r3, #45	; 0x2d
 800f9de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f9e2:	487f      	ldr	r0, [pc, #508]	; (800fbe0 <_printf_float+0x2e8>)
 800f9e4:	4b7f      	ldr	r3, [pc, #508]	; (800fbe4 <_printf_float+0x2ec>)
 800f9e6:	e7d1      	b.n	800f98c <_printf_float+0x94>
 800f9e8:	6863      	ldr	r3, [r4, #4]
 800f9ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f9ee:	9206      	str	r2, [sp, #24]
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	d13f      	bne.n	800fa74 <_printf_float+0x17c>
 800f9f4:	2306      	movs	r3, #6
 800f9f6:	6063      	str	r3, [r4, #4]
 800f9f8:	9b05      	ldr	r3, [sp, #20]
 800f9fa:	6861      	ldr	r1, [r4, #4]
 800f9fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fa00:	2300      	movs	r3, #0
 800fa02:	9303      	str	r3, [sp, #12]
 800fa04:	ab0a      	add	r3, sp, #40	; 0x28
 800fa06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fa0a:	ab09      	add	r3, sp, #36	; 0x24
 800fa0c:	ec49 8b10 	vmov	d0, r8, r9
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	6022      	str	r2, [r4, #0]
 800fa14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f7ff fecd 	bl	800f7b8 <__cvt>
 800fa1e:	9b06      	ldr	r3, [sp, #24]
 800fa20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa22:	2b47      	cmp	r3, #71	; 0x47
 800fa24:	4680      	mov	r8, r0
 800fa26:	d108      	bne.n	800fa3a <_printf_float+0x142>
 800fa28:	1cc8      	adds	r0, r1, #3
 800fa2a:	db02      	blt.n	800fa32 <_printf_float+0x13a>
 800fa2c:	6863      	ldr	r3, [r4, #4]
 800fa2e:	4299      	cmp	r1, r3
 800fa30:	dd41      	ble.n	800fab6 <_printf_float+0x1be>
 800fa32:	f1ab 0b02 	sub.w	fp, fp, #2
 800fa36:	fa5f fb8b 	uxtb.w	fp, fp
 800fa3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fa3e:	d820      	bhi.n	800fa82 <_printf_float+0x18a>
 800fa40:	3901      	subs	r1, #1
 800fa42:	465a      	mov	r2, fp
 800fa44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fa48:	9109      	str	r1, [sp, #36]	; 0x24
 800fa4a:	f7ff ff17 	bl	800f87c <__exponent>
 800fa4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa50:	1813      	adds	r3, r2, r0
 800fa52:	2a01      	cmp	r2, #1
 800fa54:	4681      	mov	r9, r0
 800fa56:	6123      	str	r3, [r4, #16]
 800fa58:	dc02      	bgt.n	800fa60 <_printf_float+0x168>
 800fa5a:	6822      	ldr	r2, [r4, #0]
 800fa5c:	07d2      	lsls	r2, r2, #31
 800fa5e:	d501      	bpl.n	800fa64 <_printf_float+0x16c>
 800fa60:	3301      	adds	r3, #1
 800fa62:	6123      	str	r3, [r4, #16]
 800fa64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d09c      	beq.n	800f9a6 <_printf_float+0xae>
 800fa6c:	232d      	movs	r3, #45	; 0x2d
 800fa6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa72:	e798      	b.n	800f9a6 <_printf_float+0xae>
 800fa74:	9a06      	ldr	r2, [sp, #24]
 800fa76:	2a47      	cmp	r2, #71	; 0x47
 800fa78:	d1be      	bne.n	800f9f8 <_printf_float+0x100>
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1bc      	bne.n	800f9f8 <_printf_float+0x100>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e7b9      	b.n	800f9f6 <_printf_float+0xfe>
 800fa82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fa86:	d118      	bne.n	800faba <_printf_float+0x1c2>
 800fa88:	2900      	cmp	r1, #0
 800fa8a:	6863      	ldr	r3, [r4, #4]
 800fa8c:	dd0b      	ble.n	800faa6 <_printf_float+0x1ae>
 800fa8e:	6121      	str	r1, [r4, #16]
 800fa90:	b913      	cbnz	r3, 800fa98 <_printf_float+0x1a0>
 800fa92:	6822      	ldr	r2, [r4, #0]
 800fa94:	07d0      	lsls	r0, r2, #31
 800fa96:	d502      	bpl.n	800fa9e <_printf_float+0x1a6>
 800fa98:	3301      	adds	r3, #1
 800fa9a:	440b      	add	r3, r1
 800fa9c:	6123      	str	r3, [r4, #16]
 800fa9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800faa0:	f04f 0900 	mov.w	r9, #0
 800faa4:	e7de      	b.n	800fa64 <_printf_float+0x16c>
 800faa6:	b913      	cbnz	r3, 800faae <_printf_float+0x1b6>
 800faa8:	6822      	ldr	r2, [r4, #0]
 800faaa:	07d2      	lsls	r2, r2, #31
 800faac:	d501      	bpl.n	800fab2 <_printf_float+0x1ba>
 800faae:	3302      	adds	r3, #2
 800fab0:	e7f4      	b.n	800fa9c <_printf_float+0x1a4>
 800fab2:	2301      	movs	r3, #1
 800fab4:	e7f2      	b.n	800fa9c <_printf_float+0x1a4>
 800fab6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800faba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fabc:	4299      	cmp	r1, r3
 800fabe:	db05      	blt.n	800facc <_printf_float+0x1d4>
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	6121      	str	r1, [r4, #16]
 800fac4:	07d8      	lsls	r0, r3, #31
 800fac6:	d5ea      	bpl.n	800fa9e <_printf_float+0x1a6>
 800fac8:	1c4b      	adds	r3, r1, #1
 800faca:	e7e7      	b.n	800fa9c <_printf_float+0x1a4>
 800facc:	2900      	cmp	r1, #0
 800face:	bfd4      	ite	le
 800fad0:	f1c1 0202 	rsble	r2, r1, #2
 800fad4:	2201      	movgt	r2, #1
 800fad6:	4413      	add	r3, r2
 800fad8:	e7e0      	b.n	800fa9c <_printf_float+0x1a4>
 800fada:	6823      	ldr	r3, [r4, #0]
 800fadc:	055a      	lsls	r2, r3, #21
 800fade:	d407      	bmi.n	800faf0 <_printf_float+0x1f8>
 800fae0:	6923      	ldr	r3, [r4, #16]
 800fae2:	4642      	mov	r2, r8
 800fae4:	4631      	mov	r1, r6
 800fae6:	4628      	mov	r0, r5
 800fae8:	47b8      	blx	r7
 800faea:	3001      	adds	r0, #1
 800faec:	d12c      	bne.n	800fb48 <_printf_float+0x250>
 800faee:	e764      	b.n	800f9ba <_printf_float+0xc2>
 800faf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800faf4:	f240 80e0 	bls.w	800fcb8 <_printf_float+0x3c0>
 800faf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fafc:	2200      	movs	r2, #0
 800fafe:	2300      	movs	r3, #0
 800fb00:	f7f6 f952 	bl	8005da8 <__aeabi_dcmpeq>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d034      	beq.n	800fb72 <_printf_float+0x27a>
 800fb08:	4a37      	ldr	r2, [pc, #220]	; (800fbe8 <_printf_float+0x2f0>)
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4628      	mov	r0, r5
 800fb10:	47b8      	blx	r7
 800fb12:	3001      	adds	r0, #1
 800fb14:	f43f af51 	beq.w	800f9ba <_printf_float+0xc2>
 800fb18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	db02      	blt.n	800fb26 <_printf_float+0x22e>
 800fb20:	6823      	ldr	r3, [r4, #0]
 800fb22:	07d8      	lsls	r0, r3, #31
 800fb24:	d510      	bpl.n	800fb48 <_printf_float+0x250>
 800fb26:	ee18 3a10 	vmov	r3, s16
 800fb2a:	4652      	mov	r2, sl
 800fb2c:	4631      	mov	r1, r6
 800fb2e:	4628      	mov	r0, r5
 800fb30:	47b8      	blx	r7
 800fb32:	3001      	adds	r0, #1
 800fb34:	f43f af41 	beq.w	800f9ba <_printf_float+0xc2>
 800fb38:	f04f 0800 	mov.w	r8, #0
 800fb3c:	f104 091a 	add.w	r9, r4, #26
 800fb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb42:	3b01      	subs	r3, #1
 800fb44:	4543      	cmp	r3, r8
 800fb46:	dc09      	bgt.n	800fb5c <_printf_float+0x264>
 800fb48:	6823      	ldr	r3, [r4, #0]
 800fb4a:	079b      	lsls	r3, r3, #30
 800fb4c:	f100 8105 	bmi.w	800fd5a <_printf_float+0x462>
 800fb50:	68e0      	ldr	r0, [r4, #12]
 800fb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb54:	4298      	cmp	r0, r3
 800fb56:	bfb8      	it	lt
 800fb58:	4618      	movlt	r0, r3
 800fb5a:	e730      	b.n	800f9be <_printf_float+0xc6>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	464a      	mov	r2, r9
 800fb60:	4631      	mov	r1, r6
 800fb62:	4628      	mov	r0, r5
 800fb64:	47b8      	blx	r7
 800fb66:	3001      	adds	r0, #1
 800fb68:	f43f af27 	beq.w	800f9ba <_printf_float+0xc2>
 800fb6c:	f108 0801 	add.w	r8, r8, #1
 800fb70:	e7e6      	b.n	800fb40 <_printf_float+0x248>
 800fb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	dc39      	bgt.n	800fbec <_printf_float+0x2f4>
 800fb78:	4a1b      	ldr	r2, [pc, #108]	; (800fbe8 <_printf_float+0x2f0>)
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	4631      	mov	r1, r6
 800fb7e:	4628      	mov	r0, r5
 800fb80:	47b8      	blx	r7
 800fb82:	3001      	adds	r0, #1
 800fb84:	f43f af19 	beq.w	800f9ba <_printf_float+0xc2>
 800fb88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	d102      	bne.n	800fb96 <_printf_float+0x29e>
 800fb90:	6823      	ldr	r3, [r4, #0]
 800fb92:	07d9      	lsls	r1, r3, #31
 800fb94:	d5d8      	bpl.n	800fb48 <_printf_float+0x250>
 800fb96:	ee18 3a10 	vmov	r3, s16
 800fb9a:	4652      	mov	r2, sl
 800fb9c:	4631      	mov	r1, r6
 800fb9e:	4628      	mov	r0, r5
 800fba0:	47b8      	blx	r7
 800fba2:	3001      	adds	r0, #1
 800fba4:	f43f af09 	beq.w	800f9ba <_printf_float+0xc2>
 800fba8:	f04f 0900 	mov.w	r9, #0
 800fbac:	f104 0a1a 	add.w	sl, r4, #26
 800fbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb2:	425b      	negs	r3, r3
 800fbb4:	454b      	cmp	r3, r9
 800fbb6:	dc01      	bgt.n	800fbbc <_printf_float+0x2c4>
 800fbb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbba:	e792      	b.n	800fae2 <_printf_float+0x1ea>
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	4652      	mov	r2, sl
 800fbc0:	4631      	mov	r1, r6
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	47b8      	blx	r7
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	f43f aef7 	beq.w	800f9ba <_printf_float+0xc2>
 800fbcc:	f109 0901 	add.w	r9, r9, #1
 800fbd0:	e7ee      	b.n	800fbb0 <_printf_float+0x2b8>
 800fbd2:	bf00      	nop
 800fbd4:	7fefffff 	.word	0x7fefffff
 800fbd8:	08100270 	.word	0x08100270
 800fbdc:	08100274 	.word	0x08100274
 800fbe0:	0810027c 	.word	0x0810027c
 800fbe4:	08100278 	.word	0x08100278
 800fbe8:	08100280 	.word	0x08100280
 800fbec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	bfa8      	it	ge
 800fbf4:	461a      	movge	r2, r3
 800fbf6:	2a00      	cmp	r2, #0
 800fbf8:	4691      	mov	r9, r2
 800fbfa:	dc37      	bgt.n	800fc6c <_printf_float+0x374>
 800fbfc:	f04f 0b00 	mov.w	fp, #0
 800fc00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc04:	f104 021a 	add.w	r2, r4, #26
 800fc08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc0a:	9305      	str	r3, [sp, #20]
 800fc0c:	eba3 0309 	sub.w	r3, r3, r9
 800fc10:	455b      	cmp	r3, fp
 800fc12:	dc33      	bgt.n	800fc7c <_printf_float+0x384>
 800fc14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	db3b      	blt.n	800fc94 <_printf_float+0x39c>
 800fc1c:	6823      	ldr	r3, [r4, #0]
 800fc1e:	07da      	lsls	r2, r3, #31
 800fc20:	d438      	bmi.n	800fc94 <_printf_float+0x39c>
 800fc22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc24:	9b05      	ldr	r3, [sp, #20]
 800fc26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	eba2 0901 	sub.w	r9, r2, r1
 800fc2e:	4599      	cmp	r9, r3
 800fc30:	bfa8      	it	ge
 800fc32:	4699      	movge	r9, r3
 800fc34:	f1b9 0f00 	cmp.w	r9, #0
 800fc38:	dc35      	bgt.n	800fca6 <_printf_float+0x3ae>
 800fc3a:	f04f 0800 	mov.w	r8, #0
 800fc3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc42:	f104 0a1a 	add.w	sl, r4, #26
 800fc46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc4a:	1a9b      	subs	r3, r3, r2
 800fc4c:	eba3 0309 	sub.w	r3, r3, r9
 800fc50:	4543      	cmp	r3, r8
 800fc52:	f77f af79 	ble.w	800fb48 <_printf_float+0x250>
 800fc56:	2301      	movs	r3, #1
 800fc58:	4652      	mov	r2, sl
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	47b8      	blx	r7
 800fc60:	3001      	adds	r0, #1
 800fc62:	f43f aeaa 	beq.w	800f9ba <_printf_float+0xc2>
 800fc66:	f108 0801 	add.w	r8, r8, #1
 800fc6a:	e7ec      	b.n	800fc46 <_printf_float+0x34e>
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	4631      	mov	r1, r6
 800fc70:	4642      	mov	r2, r8
 800fc72:	4628      	mov	r0, r5
 800fc74:	47b8      	blx	r7
 800fc76:	3001      	adds	r0, #1
 800fc78:	d1c0      	bne.n	800fbfc <_printf_float+0x304>
 800fc7a:	e69e      	b.n	800f9ba <_printf_float+0xc2>
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	4631      	mov	r1, r6
 800fc80:	4628      	mov	r0, r5
 800fc82:	9205      	str	r2, [sp, #20]
 800fc84:	47b8      	blx	r7
 800fc86:	3001      	adds	r0, #1
 800fc88:	f43f ae97 	beq.w	800f9ba <_printf_float+0xc2>
 800fc8c:	9a05      	ldr	r2, [sp, #20]
 800fc8e:	f10b 0b01 	add.w	fp, fp, #1
 800fc92:	e7b9      	b.n	800fc08 <_printf_float+0x310>
 800fc94:	ee18 3a10 	vmov	r3, s16
 800fc98:	4652      	mov	r2, sl
 800fc9a:	4631      	mov	r1, r6
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	47b8      	blx	r7
 800fca0:	3001      	adds	r0, #1
 800fca2:	d1be      	bne.n	800fc22 <_printf_float+0x32a>
 800fca4:	e689      	b.n	800f9ba <_printf_float+0xc2>
 800fca6:	9a05      	ldr	r2, [sp, #20]
 800fca8:	464b      	mov	r3, r9
 800fcaa:	4442      	add	r2, r8
 800fcac:	4631      	mov	r1, r6
 800fcae:	4628      	mov	r0, r5
 800fcb0:	47b8      	blx	r7
 800fcb2:	3001      	adds	r0, #1
 800fcb4:	d1c1      	bne.n	800fc3a <_printf_float+0x342>
 800fcb6:	e680      	b.n	800f9ba <_printf_float+0xc2>
 800fcb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fcba:	2a01      	cmp	r2, #1
 800fcbc:	dc01      	bgt.n	800fcc2 <_printf_float+0x3ca>
 800fcbe:	07db      	lsls	r3, r3, #31
 800fcc0:	d538      	bpl.n	800fd34 <_printf_float+0x43c>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	4642      	mov	r2, r8
 800fcc6:	4631      	mov	r1, r6
 800fcc8:	4628      	mov	r0, r5
 800fcca:	47b8      	blx	r7
 800fccc:	3001      	adds	r0, #1
 800fcce:	f43f ae74 	beq.w	800f9ba <_printf_float+0xc2>
 800fcd2:	ee18 3a10 	vmov	r3, s16
 800fcd6:	4652      	mov	r2, sl
 800fcd8:	4631      	mov	r1, r6
 800fcda:	4628      	mov	r0, r5
 800fcdc:	47b8      	blx	r7
 800fcde:	3001      	adds	r0, #1
 800fce0:	f43f ae6b 	beq.w	800f9ba <_printf_float+0xc2>
 800fce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fce8:	2200      	movs	r2, #0
 800fcea:	2300      	movs	r3, #0
 800fcec:	f7f6 f85c 	bl	8005da8 <__aeabi_dcmpeq>
 800fcf0:	b9d8      	cbnz	r0, 800fd2a <_printf_float+0x432>
 800fcf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcf4:	f108 0201 	add.w	r2, r8, #1
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	d10e      	bne.n	800fd22 <_printf_float+0x42a>
 800fd04:	e659      	b.n	800f9ba <_printf_float+0xc2>
 800fd06:	2301      	movs	r3, #1
 800fd08:	4652      	mov	r2, sl
 800fd0a:	4631      	mov	r1, r6
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	47b8      	blx	r7
 800fd10:	3001      	adds	r0, #1
 800fd12:	f43f ae52 	beq.w	800f9ba <_printf_float+0xc2>
 800fd16:	f108 0801 	add.w	r8, r8, #1
 800fd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	4543      	cmp	r3, r8
 800fd20:	dcf1      	bgt.n	800fd06 <_printf_float+0x40e>
 800fd22:	464b      	mov	r3, r9
 800fd24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fd28:	e6dc      	b.n	800fae4 <_printf_float+0x1ec>
 800fd2a:	f04f 0800 	mov.w	r8, #0
 800fd2e:	f104 0a1a 	add.w	sl, r4, #26
 800fd32:	e7f2      	b.n	800fd1a <_printf_float+0x422>
 800fd34:	2301      	movs	r3, #1
 800fd36:	4642      	mov	r2, r8
 800fd38:	e7df      	b.n	800fcfa <_printf_float+0x402>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	464a      	mov	r2, r9
 800fd3e:	4631      	mov	r1, r6
 800fd40:	4628      	mov	r0, r5
 800fd42:	47b8      	blx	r7
 800fd44:	3001      	adds	r0, #1
 800fd46:	f43f ae38 	beq.w	800f9ba <_printf_float+0xc2>
 800fd4a:	f108 0801 	add.w	r8, r8, #1
 800fd4e:	68e3      	ldr	r3, [r4, #12]
 800fd50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd52:	1a5b      	subs	r3, r3, r1
 800fd54:	4543      	cmp	r3, r8
 800fd56:	dcf0      	bgt.n	800fd3a <_printf_float+0x442>
 800fd58:	e6fa      	b.n	800fb50 <_printf_float+0x258>
 800fd5a:	f04f 0800 	mov.w	r8, #0
 800fd5e:	f104 0919 	add.w	r9, r4, #25
 800fd62:	e7f4      	b.n	800fd4e <_printf_float+0x456>

0800fd64 <_printf_common>:
 800fd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd68:	4616      	mov	r6, r2
 800fd6a:	4699      	mov	r9, r3
 800fd6c:	688a      	ldr	r2, [r1, #8]
 800fd6e:	690b      	ldr	r3, [r1, #16]
 800fd70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fd74:	4293      	cmp	r3, r2
 800fd76:	bfb8      	it	lt
 800fd78:	4613      	movlt	r3, r2
 800fd7a:	6033      	str	r3, [r6, #0]
 800fd7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd80:	4607      	mov	r7, r0
 800fd82:	460c      	mov	r4, r1
 800fd84:	b10a      	cbz	r2, 800fd8a <_printf_common+0x26>
 800fd86:	3301      	adds	r3, #1
 800fd88:	6033      	str	r3, [r6, #0]
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	0699      	lsls	r1, r3, #26
 800fd8e:	bf42      	ittt	mi
 800fd90:	6833      	ldrmi	r3, [r6, #0]
 800fd92:	3302      	addmi	r3, #2
 800fd94:	6033      	strmi	r3, [r6, #0]
 800fd96:	6825      	ldr	r5, [r4, #0]
 800fd98:	f015 0506 	ands.w	r5, r5, #6
 800fd9c:	d106      	bne.n	800fdac <_printf_common+0x48>
 800fd9e:	f104 0a19 	add.w	sl, r4, #25
 800fda2:	68e3      	ldr	r3, [r4, #12]
 800fda4:	6832      	ldr	r2, [r6, #0]
 800fda6:	1a9b      	subs	r3, r3, r2
 800fda8:	42ab      	cmp	r3, r5
 800fdaa:	dc26      	bgt.n	800fdfa <_printf_common+0x96>
 800fdac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fdb0:	1e13      	subs	r3, r2, #0
 800fdb2:	6822      	ldr	r2, [r4, #0]
 800fdb4:	bf18      	it	ne
 800fdb6:	2301      	movne	r3, #1
 800fdb8:	0692      	lsls	r2, r2, #26
 800fdba:	d42b      	bmi.n	800fe14 <_printf_common+0xb0>
 800fdbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdc0:	4649      	mov	r1, r9
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	47c0      	blx	r8
 800fdc6:	3001      	adds	r0, #1
 800fdc8:	d01e      	beq.n	800fe08 <_printf_common+0xa4>
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	68e5      	ldr	r5, [r4, #12]
 800fdce:	6832      	ldr	r2, [r6, #0]
 800fdd0:	f003 0306 	and.w	r3, r3, #6
 800fdd4:	2b04      	cmp	r3, #4
 800fdd6:	bf08      	it	eq
 800fdd8:	1aad      	subeq	r5, r5, r2
 800fdda:	68a3      	ldr	r3, [r4, #8]
 800fddc:	6922      	ldr	r2, [r4, #16]
 800fdde:	bf0c      	ite	eq
 800fde0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fde4:	2500      	movne	r5, #0
 800fde6:	4293      	cmp	r3, r2
 800fde8:	bfc4      	itt	gt
 800fdea:	1a9b      	subgt	r3, r3, r2
 800fdec:	18ed      	addgt	r5, r5, r3
 800fdee:	2600      	movs	r6, #0
 800fdf0:	341a      	adds	r4, #26
 800fdf2:	42b5      	cmp	r5, r6
 800fdf4:	d11a      	bne.n	800fe2c <_printf_common+0xc8>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	e008      	b.n	800fe0c <_printf_common+0xa8>
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	4652      	mov	r2, sl
 800fdfe:	4649      	mov	r1, r9
 800fe00:	4638      	mov	r0, r7
 800fe02:	47c0      	blx	r8
 800fe04:	3001      	adds	r0, #1
 800fe06:	d103      	bne.n	800fe10 <_printf_common+0xac>
 800fe08:	f04f 30ff 	mov.w	r0, #4294967295
 800fe0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe10:	3501      	adds	r5, #1
 800fe12:	e7c6      	b.n	800fda2 <_printf_common+0x3e>
 800fe14:	18e1      	adds	r1, r4, r3
 800fe16:	1c5a      	adds	r2, r3, #1
 800fe18:	2030      	movs	r0, #48	; 0x30
 800fe1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe1e:	4422      	add	r2, r4
 800fe20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe28:	3302      	adds	r3, #2
 800fe2a:	e7c7      	b.n	800fdbc <_printf_common+0x58>
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	4622      	mov	r2, r4
 800fe30:	4649      	mov	r1, r9
 800fe32:	4638      	mov	r0, r7
 800fe34:	47c0      	blx	r8
 800fe36:	3001      	adds	r0, #1
 800fe38:	d0e6      	beq.n	800fe08 <_printf_common+0xa4>
 800fe3a:	3601      	adds	r6, #1
 800fe3c:	e7d9      	b.n	800fdf2 <_printf_common+0x8e>
	...

0800fe40 <_printf_i>:
 800fe40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe44:	460c      	mov	r4, r1
 800fe46:	4691      	mov	r9, r2
 800fe48:	7e27      	ldrb	r7, [r4, #24]
 800fe4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe4c:	2f78      	cmp	r7, #120	; 0x78
 800fe4e:	4680      	mov	r8, r0
 800fe50:	469a      	mov	sl, r3
 800fe52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe56:	d807      	bhi.n	800fe68 <_printf_i+0x28>
 800fe58:	2f62      	cmp	r7, #98	; 0x62
 800fe5a:	d80a      	bhi.n	800fe72 <_printf_i+0x32>
 800fe5c:	2f00      	cmp	r7, #0
 800fe5e:	f000 80d8 	beq.w	8010012 <_printf_i+0x1d2>
 800fe62:	2f58      	cmp	r7, #88	; 0x58
 800fe64:	f000 80a3 	beq.w	800ffae <_printf_i+0x16e>
 800fe68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fe70:	e03a      	b.n	800fee8 <_printf_i+0xa8>
 800fe72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fe76:	2b15      	cmp	r3, #21
 800fe78:	d8f6      	bhi.n	800fe68 <_printf_i+0x28>
 800fe7a:	a001      	add	r0, pc, #4	; (adr r0, 800fe80 <_printf_i+0x40>)
 800fe7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fe80:	0800fed9 	.word	0x0800fed9
 800fe84:	0800feed 	.word	0x0800feed
 800fe88:	0800fe69 	.word	0x0800fe69
 800fe8c:	0800fe69 	.word	0x0800fe69
 800fe90:	0800fe69 	.word	0x0800fe69
 800fe94:	0800fe69 	.word	0x0800fe69
 800fe98:	0800feed 	.word	0x0800feed
 800fe9c:	0800fe69 	.word	0x0800fe69
 800fea0:	0800fe69 	.word	0x0800fe69
 800fea4:	0800fe69 	.word	0x0800fe69
 800fea8:	0800fe69 	.word	0x0800fe69
 800feac:	0800fff9 	.word	0x0800fff9
 800feb0:	0800ff1d 	.word	0x0800ff1d
 800feb4:	0800ffdb 	.word	0x0800ffdb
 800feb8:	0800fe69 	.word	0x0800fe69
 800febc:	0800fe69 	.word	0x0800fe69
 800fec0:	0801001b 	.word	0x0801001b
 800fec4:	0800fe69 	.word	0x0800fe69
 800fec8:	0800ff1d 	.word	0x0800ff1d
 800fecc:	0800fe69 	.word	0x0800fe69
 800fed0:	0800fe69 	.word	0x0800fe69
 800fed4:	0800ffe3 	.word	0x0800ffe3
 800fed8:	680b      	ldr	r3, [r1, #0]
 800feda:	1d1a      	adds	r2, r3, #4
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	600a      	str	r2, [r1, #0]
 800fee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fee8:	2301      	movs	r3, #1
 800feea:	e0a3      	b.n	8010034 <_printf_i+0x1f4>
 800feec:	6825      	ldr	r5, [r4, #0]
 800feee:	6808      	ldr	r0, [r1, #0]
 800fef0:	062e      	lsls	r6, r5, #24
 800fef2:	f100 0304 	add.w	r3, r0, #4
 800fef6:	d50a      	bpl.n	800ff0e <_printf_i+0xce>
 800fef8:	6805      	ldr	r5, [r0, #0]
 800fefa:	600b      	str	r3, [r1, #0]
 800fefc:	2d00      	cmp	r5, #0
 800fefe:	da03      	bge.n	800ff08 <_printf_i+0xc8>
 800ff00:	232d      	movs	r3, #45	; 0x2d
 800ff02:	426d      	negs	r5, r5
 800ff04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff08:	485e      	ldr	r0, [pc, #376]	; (8010084 <_printf_i+0x244>)
 800ff0a:	230a      	movs	r3, #10
 800ff0c:	e019      	b.n	800ff42 <_printf_i+0x102>
 800ff0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ff12:	6805      	ldr	r5, [r0, #0]
 800ff14:	600b      	str	r3, [r1, #0]
 800ff16:	bf18      	it	ne
 800ff18:	b22d      	sxthne	r5, r5
 800ff1a:	e7ef      	b.n	800fefc <_printf_i+0xbc>
 800ff1c:	680b      	ldr	r3, [r1, #0]
 800ff1e:	6825      	ldr	r5, [r4, #0]
 800ff20:	1d18      	adds	r0, r3, #4
 800ff22:	6008      	str	r0, [r1, #0]
 800ff24:	0628      	lsls	r0, r5, #24
 800ff26:	d501      	bpl.n	800ff2c <_printf_i+0xec>
 800ff28:	681d      	ldr	r5, [r3, #0]
 800ff2a:	e002      	b.n	800ff32 <_printf_i+0xf2>
 800ff2c:	0669      	lsls	r1, r5, #25
 800ff2e:	d5fb      	bpl.n	800ff28 <_printf_i+0xe8>
 800ff30:	881d      	ldrh	r5, [r3, #0]
 800ff32:	4854      	ldr	r0, [pc, #336]	; (8010084 <_printf_i+0x244>)
 800ff34:	2f6f      	cmp	r7, #111	; 0x6f
 800ff36:	bf0c      	ite	eq
 800ff38:	2308      	moveq	r3, #8
 800ff3a:	230a      	movne	r3, #10
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff42:	6866      	ldr	r6, [r4, #4]
 800ff44:	60a6      	str	r6, [r4, #8]
 800ff46:	2e00      	cmp	r6, #0
 800ff48:	bfa2      	ittt	ge
 800ff4a:	6821      	ldrge	r1, [r4, #0]
 800ff4c:	f021 0104 	bicge.w	r1, r1, #4
 800ff50:	6021      	strge	r1, [r4, #0]
 800ff52:	b90d      	cbnz	r5, 800ff58 <_printf_i+0x118>
 800ff54:	2e00      	cmp	r6, #0
 800ff56:	d04d      	beq.n	800fff4 <_printf_i+0x1b4>
 800ff58:	4616      	mov	r6, r2
 800ff5a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff5e:	fb03 5711 	mls	r7, r3, r1, r5
 800ff62:	5dc7      	ldrb	r7, [r0, r7]
 800ff64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff68:	462f      	mov	r7, r5
 800ff6a:	42bb      	cmp	r3, r7
 800ff6c:	460d      	mov	r5, r1
 800ff6e:	d9f4      	bls.n	800ff5a <_printf_i+0x11a>
 800ff70:	2b08      	cmp	r3, #8
 800ff72:	d10b      	bne.n	800ff8c <_printf_i+0x14c>
 800ff74:	6823      	ldr	r3, [r4, #0]
 800ff76:	07df      	lsls	r7, r3, #31
 800ff78:	d508      	bpl.n	800ff8c <_printf_i+0x14c>
 800ff7a:	6923      	ldr	r3, [r4, #16]
 800ff7c:	6861      	ldr	r1, [r4, #4]
 800ff7e:	4299      	cmp	r1, r3
 800ff80:	bfde      	ittt	le
 800ff82:	2330      	movle	r3, #48	; 0x30
 800ff84:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff88:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff8c:	1b92      	subs	r2, r2, r6
 800ff8e:	6122      	str	r2, [r4, #16]
 800ff90:	f8cd a000 	str.w	sl, [sp]
 800ff94:	464b      	mov	r3, r9
 800ff96:	aa03      	add	r2, sp, #12
 800ff98:	4621      	mov	r1, r4
 800ff9a:	4640      	mov	r0, r8
 800ff9c:	f7ff fee2 	bl	800fd64 <_printf_common>
 800ffa0:	3001      	adds	r0, #1
 800ffa2:	d14c      	bne.n	801003e <_printf_i+0x1fe>
 800ffa4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa8:	b004      	add	sp, #16
 800ffaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffae:	4835      	ldr	r0, [pc, #212]	; (8010084 <_printf_i+0x244>)
 800ffb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ffb4:	6823      	ldr	r3, [r4, #0]
 800ffb6:	680e      	ldr	r6, [r1, #0]
 800ffb8:	061f      	lsls	r7, r3, #24
 800ffba:	f856 5b04 	ldr.w	r5, [r6], #4
 800ffbe:	600e      	str	r6, [r1, #0]
 800ffc0:	d514      	bpl.n	800ffec <_printf_i+0x1ac>
 800ffc2:	07d9      	lsls	r1, r3, #31
 800ffc4:	bf44      	itt	mi
 800ffc6:	f043 0320 	orrmi.w	r3, r3, #32
 800ffca:	6023      	strmi	r3, [r4, #0]
 800ffcc:	b91d      	cbnz	r5, 800ffd6 <_printf_i+0x196>
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	f023 0320 	bic.w	r3, r3, #32
 800ffd4:	6023      	str	r3, [r4, #0]
 800ffd6:	2310      	movs	r3, #16
 800ffd8:	e7b0      	b.n	800ff3c <_printf_i+0xfc>
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	f043 0320 	orr.w	r3, r3, #32
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	2378      	movs	r3, #120	; 0x78
 800ffe4:	4828      	ldr	r0, [pc, #160]	; (8010088 <_printf_i+0x248>)
 800ffe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ffea:	e7e3      	b.n	800ffb4 <_printf_i+0x174>
 800ffec:	065e      	lsls	r6, r3, #25
 800ffee:	bf48      	it	mi
 800fff0:	b2ad      	uxthmi	r5, r5
 800fff2:	e7e6      	b.n	800ffc2 <_printf_i+0x182>
 800fff4:	4616      	mov	r6, r2
 800fff6:	e7bb      	b.n	800ff70 <_printf_i+0x130>
 800fff8:	680b      	ldr	r3, [r1, #0]
 800fffa:	6826      	ldr	r6, [r4, #0]
 800fffc:	6960      	ldr	r0, [r4, #20]
 800fffe:	1d1d      	adds	r5, r3, #4
 8010000:	600d      	str	r5, [r1, #0]
 8010002:	0635      	lsls	r5, r6, #24
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	d501      	bpl.n	801000c <_printf_i+0x1cc>
 8010008:	6018      	str	r0, [r3, #0]
 801000a:	e002      	b.n	8010012 <_printf_i+0x1d2>
 801000c:	0671      	lsls	r1, r6, #25
 801000e:	d5fb      	bpl.n	8010008 <_printf_i+0x1c8>
 8010010:	8018      	strh	r0, [r3, #0]
 8010012:	2300      	movs	r3, #0
 8010014:	6123      	str	r3, [r4, #16]
 8010016:	4616      	mov	r6, r2
 8010018:	e7ba      	b.n	800ff90 <_printf_i+0x150>
 801001a:	680b      	ldr	r3, [r1, #0]
 801001c:	1d1a      	adds	r2, r3, #4
 801001e:	600a      	str	r2, [r1, #0]
 8010020:	681e      	ldr	r6, [r3, #0]
 8010022:	6862      	ldr	r2, [r4, #4]
 8010024:	2100      	movs	r1, #0
 8010026:	4630      	mov	r0, r6
 8010028:	f7f5 fa4a 	bl	80054c0 <memchr>
 801002c:	b108      	cbz	r0, 8010032 <_printf_i+0x1f2>
 801002e:	1b80      	subs	r0, r0, r6
 8010030:	6060      	str	r0, [r4, #4]
 8010032:	6863      	ldr	r3, [r4, #4]
 8010034:	6123      	str	r3, [r4, #16]
 8010036:	2300      	movs	r3, #0
 8010038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801003c:	e7a8      	b.n	800ff90 <_printf_i+0x150>
 801003e:	6923      	ldr	r3, [r4, #16]
 8010040:	4632      	mov	r2, r6
 8010042:	4649      	mov	r1, r9
 8010044:	4640      	mov	r0, r8
 8010046:	47d0      	blx	sl
 8010048:	3001      	adds	r0, #1
 801004a:	d0ab      	beq.n	800ffa4 <_printf_i+0x164>
 801004c:	6823      	ldr	r3, [r4, #0]
 801004e:	079b      	lsls	r3, r3, #30
 8010050:	d413      	bmi.n	801007a <_printf_i+0x23a>
 8010052:	68e0      	ldr	r0, [r4, #12]
 8010054:	9b03      	ldr	r3, [sp, #12]
 8010056:	4298      	cmp	r0, r3
 8010058:	bfb8      	it	lt
 801005a:	4618      	movlt	r0, r3
 801005c:	e7a4      	b.n	800ffa8 <_printf_i+0x168>
 801005e:	2301      	movs	r3, #1
 8010060:	4632      	mov	r2, r6
 8010062:	4649      	mov	r1, r9
 8010064:	4640      	mov	r0, r8
 8010066:	47d0      	blx	sl
 8010068:	3001      	adds	r0, #1
 801006a:	d09b      	beq.n	800ffa4 <_printf_i+0x164>
 801006c:	3501      	adds	r5, #1
 801006e:	68e3      	ldr	r3, [r4, #12]
 8010070:	9903      	ldr	r1, [sp, #12]
 8010072:	1a5b      	subs	r3, r3, r1
 8010074:	42ab      	cmp	r3, r5
 8010076:	dcf2      	bgt.n	801005e <_printf_i+0x21e>
 8010078:	e7eb      	b.n	8010052 <_printf_i+0x212>
 801007a:	2500      	movs	r5, #0
 801007c:	f104 0619 	add.w	r6, r4, #25
 8010080:	e7f5      	b.n	801006e <_printf_i+0x22e>
 8010082:	bf00      	nop
 8010084:	08100282 	.word	0x08100282
 8010088:	08100293 	.word	0x08100293

0801008c <_scanf_float>:
 801008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	b087      	sub	sp, #28
 8010092:	4617      	mov	r7, r2
 8010094:	9303      	str	r3, [sp, #12]
 8010096:	688b      	ldr	r3, [r1, #8]
 8010098:	1e5a      	subs	r2, r3, #1
 801009a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801009e:	bf83      	ittte	hi
 80100a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80100a4:	195b      	addhi	r3, r3, r5
 80100a6:	9302      	strhi	r3, [sp, #8]
 80100a8:	2300      	movls	r3, #0
 80100aa:	bf86      	itte	hi
 80100ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80100b0:	608b      	strhi	r3, [r1, #8]
 80100b2:	9302      	strls	r3, [sp, #8]
 80100b4:	680b      	ldr	r3, [r1, #0]
 80100b6:	468b      	mov	fp, r1
 80100b8:	2500      	movs	r5, #0
 80100ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80100be:	f84b 3b1c 	str.w	r3, [fp], #28
 80100c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80100c6:	4680      	mov	r8, r0
 80100c8:	460c      	mov	r4, r1
 80100ca:	465e      	mov	r6, fp
 80100cc:	46aa      	mov	sl, r5
 80100ce:	46a9      	mov	r9, r5
 80100d0:	9501      	str	r5, [sp, #4]
 80100d2:	68a2      	ldr	r2, [r4, #8]
 80100d4:	b152      	cbz	r2, 80100ec <_scanf_float+0x60>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b4e      	cmp	r3, #78	; 0x4e
 80100dc:	d864      	bhi.n	80101a8 <_scanf_float+0x11c>
 80100de:	2b40      	cmp	r3, #64	; 0x40
 80100e0:	d83c      	bhi.n	801015c <_scanf_float+0xd0>
 80100e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80100e6:	b2c8      	uxtb	r0, r1
 80100e8:	280e      	cmp	r0, #14
 80100ea:	d93a      	bls.n	8010162 <_scanf_float+0xd6>
 80100ec:	f1b9 0f00 	cmp.w	r9, #0
 80100f0:	d003      	beq.n	80100fa <_scanf_float+0x6e>
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100f8:	6023      	str	r3, [r4, #0]
 80100fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100fe:	f1ba 0f01 	cmp.w	sl, #1
 8010102:	f200 8113 	bhi.w	801032c <_scanf_float+0x2a0>
 8010106:	455e      	cmp	r6, fp
 8010108:	f200 8105 	bhi.w	8010316 <_scanf_float+0x28a>
 801010c:	2501      	movs	r5, #1
 801010e:	4628      	mov	r0, r5
 8010110:	b007      	add	sp, #28
 8010112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010116:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801011a:	2a0d      	cmp	r2, #13
 801011c:	d8e6      	bhi.n	80100ec <_scanf_float+0x60>
 801011e:	a101      	add	r1, pc, #4	; (adr r1, 8010124 <_scanf_float+0x98>)
 8010120:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010124:	08010263 	.word	0x08010263
 8010128:	080100ed 	.word	0x080100ed
 801012c:	080100ed 	.word	0x080100ed
 8010130:	080100ed 	.word	0x080100ed
 8010134:	080102c3 	.word	0x080102c3
 8010138:	0801029b 	.word	0x0801029b
 801013c:	080100ed 	.word	0x080100ed
 8010140:	080100ed 	.word	0x080100ed
 8010144:	08010271 	.word	0x08010271
 8010148:	080100ed 	.word	0x080100ed
 801014c:	080100ed 	.word	0x080100ed
 8010150:	080100ed 	.word	0x080100ed
 8010154:	080100ed 	.word	0x080100ed
 8010158:	08010229 	.word	0x08010229
 801015c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010160:	e7db      	b.n	801011a <_scanf_float+0x8e>
 8010162:	290e      	cmp	r1, #14
 8010164:	d8c2      	bhi.n	80100ec <_scanf_float+0x60>
 8010166:	a001      	add	r0, pc, #4	; (adr r0, 801016c <_scanf_float+0xe0>)
 8010168:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801016c:	0801021b 	.word	0x0801021b
 8010170:	080100ed 	.word	0x080100ed
 8010174:	0801021b 	.word	0x0801021b
 8010178:	080102af 	.word	0x080102af
 801017c:	080100ed 	.word	0x080100ed
 8010180:	080101c9 	.word	0x080101c9
 8010184:	08010205 	.word	0x08010205
 8010188:	08010205 	.word	0x08010205
 801018c:	08010205 	.word	0x08010205
 8010190:	08010205 	.word	0x08010205
 8010194:	08010205 	.word	0x08010205
 8010198:	08010205 	.word	0x08010205
 801019c:	08010205 	.word	0x08010205
 80101a0:	08010205 	.word	0x08010205
 80101a4:	08010205 	.word	0x08010205
 80101a8:	2b6e      	cmp	r3, #110	; 0x6e
 80101aa:	d809      	bhi.n	80101c0 <_scanf_float+0x134>
 80101ac:	2b60      	cmp	r3, #96	; 0x60
 80101ae:	d8b2      	bhi.n	8010116 <_scanf_float+0x8a>
 80101b0:	2b54      	cmp	r3, #84	; 0x54
 80101b2:	d077      	beq.n	80102a4 <_scanf_float+0x218>
 80101b4:	2b59      	cmp	r3, #89	; 0x59
 80101b6:	d199      	bne.n	80100ec <_scanf_float+0x60>
 80101b8:	2d07      	cmp	r5, #7
 80101ba:	d197      	bne.n	80100ec <_scanf_float+0x60>
 80101bc:	2508      	movs	r5, #8
 80101be:	e029      	b.n	8010214 <_scanf_float+0x188>
 80101c0:	2b74      	cmp	r3, #116	; 0x74
 80101c2:	d06f      	beq.n	80102a4 <_scanf_float+0x218>
 80101c4:	2b79      	cmp	r3, #121	; 0x79
 80101c6:	e7f6      	b.n	80101b6 <_scanf_float+0x12a>
 80101c8:	6821      	ldr	r1, [r4, #0]
 80101ca:	05c8      	lsls	r0, r1, #23
 80101cc:	d51a      	bpl.n	8010204 <_scanf_float+0x178>
 80101ce:	9b02      	ldr	r3, [sp, #8]
 80101d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80101d4:	6021      	str	r1, [r4, #0]
 80101d6:	f109 0901 	add.w	r9, r9, #1
 80101da:	b11b      	cbz	r3, 80101e4 <_scanf_float+0x158>
 80101dc:	3b01      	subs	r3, #1
 80101de:	3201      	adds	r2, #1
 80101e0:	9302      	str	r3, [sp, #8]
 80101e2:	60a2      	str	r2, [r4, #8]
 80101e4:	68a3      	ldr	r3, [r4, #8]
 80101e6:	3b01      	subs	r3, #1
 80101e8:	60a3      	str	r3, [r4, #8]
 80101ea:	6923      	ldr	r3, [r4, #16]
 80101ec:	3301      	adds	r3, #1
 80101ee:	6123      	str	r3, [r4, #16]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3b01      	subs	r3, #1
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	607b      	str	r3, [r7, #4]
 80101f8:	f340 8084 	ble.w	8010304 <_scanf_float+0x278>
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	3301      	adds	r3, #1
 8010200:	603b      	str	r3, [r7, #0]
 8010202:	e766      	b.n	80100d2 <_scanf_float+0x46>
 8010204:	eb1a 0f05 	cmn.w	sl, r5
 8010208:	f47f af70 	bne.w	80100ec <_scanf_float+0x60>
 801020c:	6822      	ldr	r2, [r4, #0]
 801020e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010212:	6022      	str	r2, [r4, #0]
 8010214:	f806 3b01 	strb.w	r3, [r6], #1
 8010218:	e7e4      	b.n	80101e4 <_scanf_float+0x158>
 801021a:	6822      	ldr	r2, [r4, #0]
 801021c:	0610      	lsls	r0, r2, #24
 801021e:	f57f af65 	bpl.w	80100ec <_scanf_float+0x60>
 8010222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010226:	e7f4      	b.n	8010212 <_scanf_float+0x186>
 8010228:	f1ba 0f00 	cmp.w	sl, #0
 801022c:	d10e      	bne.n	801024c <_scanf_float+0x1c0>
 801022e:	f1b9 0f00 	cmp.w	r9, #0
 8010232:	d10e      	bne.n	8010252 <_scanf_float+0x1c6>
 8010234:	6822      	ldr	r2, [r4, #0]
 8010236:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801023a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801023e:	d108      	bne.n	8010252 <_scanf_float+0x1c6>
 8010240:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010244:	6022      	str	r2, [r4, #0]
 8010246:	f04f 0a01 	mov.w	sl, #1
 801024a:	e7e3      	b.n	8010214 <_scanf_float+0x188>
 801024c:	f1ba 0f02 	cmp.w	sl, #2
 8010250:	d055      	beq.n	80102fe <_scanf_float+0x272>
 8010252:	2d01      	cmp	r5, #1
 8010254:	d002      	beq.n	801025c <_scanf_float+0x1d0>
 8010256:	2d04      	cmp	r5, #4
 8010258:	f47f af48 	bne.w	80100ec <_scanf_float+0x60>
 801025c:	3501      	adds	r5, #1
 801025e:	b2ed      	uxtb	r5, r5
 8010260:	e7d8      	b.n	8010214 <_scanf_float+0x188>
 8010262:	f1ba 0f01 	cmp.w	sl, #1
 8010266:	f47f af41 	bne.w	80100ec <_scanf_float+0x60>
 801026a:	f04f 0a02 	mov.w	sl, #2
 801026e:	e7d1      	b.n	8010214 <_scanf_float+0x188>
 8010270:	b97d      	cbnz	r5, 8010292 <_scanf_float+0x206>
 8010272:	f1b9 0f00 	cmp.w	r9, #0
 8010276:	f47f af3c 	bne.w	80100f2 <_scanf_float+0x66>
 801027a:	6822      	ldr	r2, [r4, #0]
 801027c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010280:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010284:	f47f af39 	bne.w	80100fa <_scanf_float+0x6e>
 8010288:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801028c:	6022      	str	r2, [r4, #0]
 801028e:	2501      	movs	r5, #1
 8010290:	e7c0      	b.n	8010214 <_scanf_float+0x188>
 8010292:	2d03      	cmp	r5, #3
 8010294:	d0e2      	beq.n	801025c <_scanf_float+0x1d0>
 8010296:	2d05      	cmp	r5, #5
 8010298:	e7de      	b.n	8010258 <_scanf_float+0x1cc>
 801029a:	2d02      	cmp	r5, #2
 801029c:	f47f af26 	bne.w	80100ec <_scanf_float+0x60>
 80102a0:	2503      	movs	r5, #3
 80102a2:	e7b7      	b.n	8010214 <_scanf_float+0x188>
 80102a4:	2d06      	cmp	r5, #6
 80102a6:	f47f af21 	bne.w	80100ec <_scanf_float+0x60>
 80102aa:	2507      	movs	r5, #7
 80102ac:	e7b2      	b.n	8010214 <_scanf_float+0x188>
 80102ae:	6822      	ldr	r2, [r4, #0]
 80102b0:	0591      	lsls	r1, r2, #22
 80102b2:	f57f af1b 	bpl.w	80100ec <_scanf_float+0x60>
 80102b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80102ba:	6022      	str	r2, [r4, #0]
 80102bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80102c0:	e7a8      	b.n	8010214 <_scanf_float+0x188>
 80102c2:	6822      	ldr	r2, [r4, #0]
 80102c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80102c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80102cc:	d006      	beq.n	80102dc <_scanf_float+0x250>
 80102ce:	0550      	lsls	r0, r2, #21
 80102d0:	f57f af0c 	bpl.w	80100ec <_scanf_float+0x60>
 80102d4:	f1b9 0f00 	cmp.w	r9, #0
 80102d8:	f43f af0f 	beq.w	80100fa <_scanf_float+0x6e>
 80102dc:	0591      	lsls	r1, r2, #22
 80102de:	bf58      	it	pl
 80102e0:	9901      	ldrpl	r1, [sp, #4]
 80102e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80102e6:	bf58      	it	pl
 80102e8:	eba9 0101 	subpl.w	r1, r9, r1
 80102ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80102f0:	bf58      	it	pl
 80102f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80102f6:	6022      	str	r2, [r4, #0]
 80102f8:	f04f 0900 	mov.w	r9, #0
 80102fc:	e78a      	b.n	8010214 <_scanf_float+0x188>
 80102fe:	f04f 0a03 	mov.w	sl, #3
 8010302:	e787      	b.n	8010214 <_scanf_float+0x188>
 8010304:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010308:	4639      	mov	r1, r7
 801030a:	4640      	mov	r0, r8
 801030c:	4798      	blx	r3
 801030e:	2800      	cmp	r0, #0
 8010310:	f43f aedf 	beq.w	80100d2 <_scanf_float+0x46>
 8010314:	e6ea      	b.n	80100ec <_scanf_float+0x60>
 8010316:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801031a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801031e:	463a      	mov	r2, r7
 8010320:	4640      	mov	r0, r8
 8010322:	4798      	blx	r3
 8010324:	6923      	ldr	r3, [r4, #16]
 8010326:	3b01      	subs	r3, #1
 8010328:	6123      	str	r3, [r4, #16]
 801032a:	e6ec      	b.n	8010106 <_scanf_float+0x7a>
 801032c:	1e6b      	subs	r3, r5, #1
 801032e:	2b06      	cmp	r3, #6
 8010330:	d825      	bhi.n	801037e <_scanf_float+0x2f2>
 8010332:	2d02      	cmp	r5, #2
 8010334:	d836      	bhi.n	80103a4 <_scanf_float+0x318>
 8010336:	455e      	cmp	r6, fp
 8010338:	f67f aee8 	bls.w	801010c <_scanf_float+0x80>
 801033c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010340:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010344:	463a      	mov	r2, r7
 8010346:	4640      	mov	r0, r8
 8010348:	4798      	blx	r3
 801034a:	6923      	ldr	r3, [r4, #16]
 801034c:	3b01      	subs	r3, #1
 801034e:	6123      	str	r3, [r4, #16]
 8010350:	e7f1      	b.n	8010336 <_scanf_float+0x2aa>
 8010352:	9802      	ldr	r0, [sp, #8]
 8010354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010358:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801035c:	9002      	str	r0, [sp, #8]
 801035e:	463a      	mov	r2, r7
 8010360:	4640      	mov	r0, r8
 8010362:	4798      	blx	r3
 8010364:	6923      	ldr	r3, [r4, #16]
 8010366:	3b01      	subs	r3, #1
 8010368:	6123      	str	r3, [r4, #16]
 801036a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801036e:	fa5f fa8a 	uxtb.w	sl, sl
 8010372:	f1ba 0f02 	cmp.w	sl, #2
 8010376:	d1ec      	bne.n	8010352 <_scanf_float+0x2c6>
 8010378:	3d03      	subs	r5, #3
 801037a:	b2ed      	uxtb	r5, r5
 801037c:	1b76      	subs	r6, r6, r5
 801037e:	6823      	ldr	r3, [r4, #0]
 8010380:	05da      	lsls	r2, r3, #23
 8010382:	d52f      	bpl.n	80103e4 <_scanf_float+0x358>
 8010384:	055b      	lsls	r3, r3, #21
 8010386:	d510      	bpl.n	80103aa <_scanf_float+0x31e>
 8010388:	455e      	cmp	r6, fp
 801038a:	f67f aebf 	bls.w	801010c <_scanf_float+0x80>
 801038e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010396:	463a      	mov	r2, r7
 8010398:	4640      	mov	r0, r8
 801039a:	4798      	blx	r3
 801039c:	6923      	ldr	r3, [r4, #16]
 801039e:	3b01      	subs	r3, #1
 80103a0:	6123      	str	r3, [r4, #16]
 80103a2:	e7f1      	b.n	8010388 <_scanf_float+0x2fc>
 80103a4:	46aa      	mov	sl, r5
 80103a6:	9602      	str	r6, [sp, #8]
 80103a8:	e7df      	b.n	801036a <_scanf_float+0x2de>
 80103aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80103ae:	6923      	ldr	r3, [r4, #16]
 80103b0:	2965      	cmp	r1, #101	; 0x65
 80103b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80103b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80103ba:	6123      	str	r3, [r4, #16]
 80103bc:	d00c      	beq.n	80103d8 <_scanf_float+0x34c>
 80103be:	2945      	cmp	r1, #69	; 0x45
 80103c0:	d00a      	beq.n	80103d8 <_scanf_float+0x34c>
 80103c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80103c6:	463a      	mov	r2, r7
 80103c8:	4640      	mov	r0, r8
 80103ca:	4798      	blx	r3
 80103cc:	6923      	ldr	r3, [r4, #16]
 80103ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80103d2:	3b01      	subs	r3, #1
 80103d4:	1eb5      	subs	r5, r6, #2
 80103d6:	6123      	str	r3, [r4, #16]
 80103d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80103dc:	463a      	mov	r2, r7
 80103de:	4640      	mov	r0, r8
 80103e0:	4798      	blx	r3
 80103e2:	462e      	mov	r6, r5
 80103e4:	6825      	ldr	r5, [r4, #0]
 80103e6:	f015 0510 	ands.w	r5, r5, #16
 80103ea:	d158      	bne.n	801049e <_scanf_float+0x412>
 80103ec:	7035      	strb	r5, [r6, #0]
 80103ee:	6823      	ldr	r3, [r4, #0]
 80103f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80103f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103f8:	d11c      	bne.n	8010434 <_scanf_float+0x3a8>
 80103fa:	9b01      	ldr	r3, [sp, #4]
 80103fc:	454b      	cmp	r3, r9
 80103fe:	eba3 0209 	sub.w	r2, r3, r9
 8010402:	d124      	bne.n	801044e <_scanf_float+0x3c2>
 8010404:	2200      	movs	r2, #0
 8010406:	4659      	mov	r1, fp
 8010408:	4640      	mov	r0, r8
 801040a:	f000 ff2b 	bl	8011264 <_strtod_r>
 801040e:	9b03      	ldr	r3, [sp, #12]
 8010410:	6821      	ldr	r1, [r4, #0]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f011 0f02 	tst.w	r1, #2
 8010418:	ec57 6b10 	vmov	r6, r7, d0
 801041c:	f103 0204 	add.w	r2, r3, #4
 8010420:	d020      	beq.n	8010464 <_scanf_float+0x3d8>
 8010422:	9903      	ldr	r1, [sp, #12]
 8010424:	600a      	str	r2, [r1, #0]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	e9c3 6700 	strd	r6, r7, [r3]
 801042c:	68e3      	ldr	r3, [r4, #12]
 801042e:	3301      	adds	r3, #1
 8010430:	60e3      	str	r3, [r4, #12]
 8010432:	e66c      	b.n	801010e <_scanf_float+0x82>
 8010434:	9b04      	ldr	r3, [sp, #16]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d0e4      	beq.n	8010404 <_scanf_float+0x378>
 801043a:	9905      	ldr	r1, [sp, #20]
 801043c:	230a      	movs	r3, #10
 801043e:	462a      	mov	r2, r5
 8010440:	3101      	adds	r1, #1
 8010442:	4640      	mov	r0, r8
 8010444:	f000 ff98 	bl	8011378 <_strtol_r>
 8010448:	9b04      	ldr	r3, [sp, #16]
 801044a:	9e05      	ldr	r6, [sp, #20]
 801044c:	1ac2      	subs	r2, r0, r3
 801044e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010452:	429e      	cmp	r6, r3
 8010454:	bf28      	it	cs
 8010456:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801045a:	4912      	ldr	r1, [pc, #72]	; (80104a4 <_scanf_float+0x418>)
 801045c:	4630      	mov	r0, r6
 801045e:	f000 f8b9 	bl	80105d4 <siprintf>
 8010462:	e7cf      	b.n	8010404 <_scanf_float+0x378>
 8010464:	f011 0f04 	tst.w	r1, #4
 8010468:	9903      	ldr	r1, [sp, #12]
 801046a:	600a      	str	r2, [r1, #0]
 801046c:	d1db      	bne.n	8010426 <_scanf_float+0x39a>
 801046e:	f8d3 8000 	ldr.w	r8, [r3]
 8010472:	ee10 2a10 	vmov	r2, s0
 8010476:	ee10 0a10 	vmov	r0, s0
 801047a:	463b      	mov	r3, r7
 801047c:	4639      	mov	r1, r7
 801047e:	f7f5 fcc5 	bl	8005e0c <__aeabi_dcmpun>
 8010482:	b128      	cbz	r0, 8010490 <_scanf_float+0x404>
 8010484:	4808      	ldr	r0, [pc, #32]	; (80104a8 <_scanf_float+0x41c>)
 8010486:	f000 f89f 	bl	80105c8 <nanf>
 801048a:	ed88 0a00 	vstr	s0, [r8]
 801048e:	e7cd      	b.n	801042c <_scanf_float+0x3a0>
 8010490:	4630      	mov	r0, r6
 8010492:	4639      	mov	r1, r7
 8010494:	f7f5 fd18 	bl	8005ec8 <__aeabi_d2f>
 8010498:	f8c8 0000 	str.w	r0, [r8]
 801049c:	e7c6      	b.n	801042c <_scanf_float+0x3a0>
 801049e:	2500      	movs	r5, #0
 80104a0:	e635      	b.n	801010e <_scanf_float+0x82>
 80104a2:	bf00      	nop
 80104a4:	081002a4 	.word	0x081002a4
 80104a8:	08100720 	.word	0x08100720

080104ac <iprintf>:
 80104ac:	b40f      	push	{r0, r1, r2, r3}
 80104ae:	4b0a      	ldr	r3, [pc, #40]	; (80104d8 <iprintf+0x2c>)
 80104b0:	b513      	push	{r0, r1, r4, lr}
 80104b2:	681c      	ldr	r4, [r3, #0]
 80104b4:	b124      	cbz	r4, 80104c0 <iprintf+0x14>
 80104b6:	69a3      	ldr	r3, [r4, #24]
 80104b8:	b913      	cbnz	r3, 80104c0 <iprintf+0x14>
 80104ba:	4620      	mov	r0, r4
 80104bc:	f001 ffb2 	bl	8012424 <__sinit>
 80104c0:	ab05      	add	r3, sp, #20
 80104c2:	9a04      	ldr	r2, [sp, #16]
 80104c4:	68a1      	ldr	r1, [r4, #8]
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	4620      	mov	r0, r4
 80104ca:	f003 fb37 	bl	8013b3c <_vfiprintf_r>
 80104ce:	b002      	add	sp, #8
 80104d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104d4:	b004      	add	sp, #16
 80104d6:	4770      	bx	lr
 80104d8:	20000770 	.word	0x20000770

080104dc <_puts_r>:
 80104dc:	b570      	push	{r4, r5, r6, lr}
 80104de:	460e      	mov	r6, r1
 80104e0:	4605      	mov	r5, r0
 80104e2:	b118      	cbz	r0, 80104ec <_puts_r+0x10>
 80104e4:	6983      	ldr	r3, [r0, #24]
 80104e6:	b90b      	cbnz	r3, 80104ec <_puts_r+0x10>
 80104e8:	f001 ff9c 	bl	8012424 <__sinit>
 80104ec:	69ab      	ldr	r3, [r5, #24]
 80104ee:	68ac      	ldr	r4, [r5, #8]
 80104f0:	b913      	cbnz	r3, 80104f8 <_puts_r+0x1c>
 80104f2:	4628      	mov	r0, r5
 80104f4:	f001 ff96 	bl	8012424 <__sinit>
 80104f8:	4b2c      	ldr	r3, [pc, #176]	; (80105ac <_puts_r+0xd0>)
 80104fa:	429c      	cmp	r4, r3
 80104fc:	d120      	bne.n	8010540 <_puts_r+0x64>
 80104fe:	686c      	ldr	r4, [r5, #4]
 8010500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010502:	07db      	lsls	r3, r3, #31
 8010504:	d405      	bmi.n	8010512 <_puts_r+0x36>
 8010506:	89a3      	ldrh	r3, [r4, #12]
 8010508:	0598      	lsls	r0, r3, #22
 801050a:	d402      	bmi.n	8010512 <_puts_r+0x36>
 801050c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801050e:	f002 fb9a 	bl	8012c46 <__retarget_lock_acquire_recursive>
 8010512:	89a3      	ldrh	r3, [r4, #12]
 8010514:	0719      	lsls	r1, r3, #28
 8010516:	d51d      	bpl.n	8010554 <_puts_r+0x78>
 8010518:	6923      	ldr	r3, [r4, #16]
 801051a:	b1db      	cbz	r3, 8010554 <_puts_r+0x78>
 801051c:	3e01      	subs	r6, #1
 801051e:	68a3      	ldr	r3, [r4, #8]
 8010520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010524:	3b01      	subs	r3, #1
 8010526:	60a3      	str	r3, [r4, #8]
 8010528:	bb39      	cbnz	r1, 801057a <_puts_r+0x9e>
 801052a:	2b00      	cmp	r3, #0
 801052c:	da38      	bge.n	80105a0 <_puts_r+0xc4>
 801052e:	4622      	mov	r2, r4
 8010530:	210a      	movs	r1, #10
 8010532:	4628      	mov	r0, r5
 8010534:	f000 ff22 	bl	801137c <__swbuf_r>
 8010538:	3001      	adds	r0, #1
 801053a:	d011      	beq.n	8010560 <_puts_r+0x84>
 801053c:	250a      	movs	r5, #10
 801053e:	e011      	b.n	8010564 <_puts_r+0x88>
 8010540:	4b1b      	ldr	r3, [pc, #108]	; (80105b0 <_puts_r+0xd4>)
 8010542:	429c      	cmp	r4, r3
 8010544:	d101      	bne.n	801054a <_puts_r+0x6e>
 8010546:	68ac      	ldr	r4, [r5, #8]
 8010548:	e7da      	b.n	8010500 <_puts_r+0x24>
 801054a:	4b1a      	ldr	r3, [pc, #104]	; (80105b4 <_puts_r+0xd8>)
 801054c:	429c      	cmp	r4, r3
 801054e:	bf08      	it	eq
 8010550:	68ec      	ldreq	r4, [r5, #12]
 8010552:	e7d5      	b.n	8010500 <_puts_r+0x24>
 8010554:	4621      	mov	r1, r4
 8010556:	4628      	mov	r0, r5
 8010558:	f000 ff62 	bl	8011420 <__swsetup_r>
 801055c:	2800      	cmp	r0, #0
 801055e:	d0dd      	beq.n	801051c <_puts_r+0x40>
 8010560:	f04f 35ff 	mov.w	r5, #4294967295
 8010564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010566:	07da      	lsls	r2, r3, #31
 8010568:	d405      	bmi.n	8010576 <_puts_r+0x9a>
 801056a:	89a3      	ldrh	r3, [r4, #12]
 801056c:	059b      	lsls	r3, r3, #22
 801056e:	d402      	bmi.n	8010576 <_puts_r+0x9a>
 8010570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010572:	f002 fb69 	bl	8012c48 <__retarget_lock_release_recursive>
 8010576:	4628      	mov	r0, r5
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	2b00      	cmp	r3, #0
 801057c:	da04      	bge.n	8010588 <_puts_r+0xac>
 801057e:	69a2      	ldr	r2, [r4, #24]
 8010580:	429a      	cmp	r2, r3
 8010582:	dc06      	bgt.n	8010592 <_puts_r+0xb6>
 8010584:	290a      	cmp	r1, #10
 8010586:	d004      	beq.n	8010592 <_puts_r+0xb6>
 8010588:	6823      	ldr	r3, [r4, #0]
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	6022      	str	r2, [r4, #0]
 801058e:	7019      	strb	r1, [r3, #0]
 8010590:	e7c5      	b.n	801051e <_puts_r+0x42>
 8010592:	4622      	mov	r2, r4
 8010594:	4628      	mov	r0, r5
 8010596:	f000 fef1 	bl	801137c <__swbuf_r>
 801059a:	3001      	adds	r0, #1
 801059c:	d1bf      	bne.n	801051e <_puts_r+0x42>
 801059e:	e7df      	b.n	8010560 <_puts_r+0x84>
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	250a      	movs	r5, #10
 80105a4:	1c5a      	adds	r2, r3, #1
 80105a6:	6022      	str	r2, [r4, #0]
 80105a8:	701d      	strb	r5, [r3, #0]
 80105aa:	e7db      	b.n	8010564 <_puts_r+0x88>
 80105ac:	081004b8 	.word	0x081004b8
 80105b0:	081004d8 	.word	0x081004d8
 80105b4:	08100498 	.word	0x08100498

080105b8 <puts>:
 80105b8:	4b02      	ldr	r3, [pc, #8]	; (80105c4 <puts+0xc>)
 80105ba:	4601      	mov	r1, r0
 80105bc:	6818      	ldr	r0, [r3, #0]
 80105be:	f7ff bf8d 	b.w	80104dc <_puts_r>
 80105c2:	bf00      	nop
 80105c4:	20000770 	.word	0x20000770

080105c8 <nanf>:
 80105c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80105d0 <nanf+0x8>
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop
 80105d0:	7fc00000 	.word	0x7fc00000

080105d4 <siprintf>:
 80105d4:	b40e      	push	{r1, r2, r3}
 80105d6:	b500      	push	{lr}
 80105d8:	b09c      	sub	sp, #112	; 0x70
 80105da:	ab1d      	add	r3, sp, #116	; 0x74
 80105dc:	9002      	str	r0, [sp, #8]
 80105de:	9006      	str	r0, [sp, #24]
 80105e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105e4:	4809      	ldr	r0, [pc, #36]	; (801060c <siprintf+0x38>)
 80105e6:	9107      	str	r1, [sp, #28]
 80105e8:	9104      	str	r1, [sp, #16]
 80105ea:	4909      	ldr	r1, [pc, #36]	; (8010610 <siprintf+0x3c>)
 80105ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80105f0:	9105      	str	r1, [sp, #20]
 80105f2:	6800      	ldr	r0, [r0, #0]
 80105f4:	9301      	str	r3, [sp, #4]
 80105f6:	a902      	add	r1, sp, #8
 80105f8:	f003 f976 	bl	80138e8 <_svfiprintf_r>
 80105fc:	9b02      	ldr	r3, [sp, #8]
 80105fe:	2200      	movs	r2, #0
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	b01c      	add	sp, #112	; 0x70
 8010604:	f85d eb04 	ldr.w	lr, [sp], #4
 8010608:	b003      	add	sp, #12
 801060a:	4770      	bx	lr
 801060c:	20000770 	.word	0x20000770
 8010610:	ffff0208 	.word	0xffff0208

08010614 <sulp>:
 8010614:	b570      	push	{r4, r5, r6, lr}
 8010616:	4604      	mov	r4, r0
 8010618:	460d      	mov	r5, r1
 801061a:	ec45 4b10 	vmov	d0, r4, r5
 801061e:	4616      	mov	r6, r2
 8010620:	f002 fefe 	bl	8013420 <__ulp>
 8010624:	ec51 0b10 	vmov	r0, r1, d0
 8010628:	b17e      	cbz	r6, 801064a <sulp+0x36>
 801062a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801062e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010632:	2b00      	cmp	r3, #0
 8010634:	dd09      	ble.n	801064a <sulp+0x36>
 8010636:	051b      	lsls	r3, r3, #20
 8010638:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801063c:	2400      	movs	r4, #0
 801063e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010642:	4622      	mov	r2, r4
 8010644:	462b      	mov	r3, r5
 8010646:	f7f5 f947 	bl	80058d8 <__aeabi_dmul>
 801064a:	bd70      	pop	{r4, r5, r6, pc}
 801064c:	0000      	movs	r0, r0
	...

08010650 <_strtod_l>:
 8010650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010654:	b0a3      	sub	sp, #140	; 0x8c
 8010656:	461f      	mov	r7, r3
 8010658:	2300      	movs	r3, #0
 801065a:	931e      	str	r3, [sp, #120]	; 0x78
 801065c:	4ba4      	ldr	r3, [pc, #656]	; (80108f0 <_strtod_l+0x2a0>)
 801065e:	9219      	str	r2, [sp, #100]	; 0x64
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	9307      	str	r3, [sp, #28]
 8010664:	4604      	mov	r4, r0
 8010666:	4618      	mov	r0, r3
 8010668:	4688      	mov	r8, r1
 801066a:	f7f4 ff1e 	bl	80054aa <strlen>
 801066e:	f04f 0a00 	mov.w	sl, #0
 8010672:	4605      	mov	r5, r0
 8010674:	f04f 0b00 	mov.w	fp, #0
 8010678:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801067c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801067e:	781a      	ldrb	r2, [r3, #0]
 8010680:	2a2b      	cmp	r2, #43	; 0x2b
 8010682:	d04c      	beq.n	801071e <_strtod_l+0xce>
 8010684:	d839      	bhi.n	80106fa <_strtod_l+0xaa>
 8010686:	2a0d      	cmp	r2, #13
 8010688:	d832      	bhi.n	80106f0 <_strtod_l+0xa0>
 801068a:	2a08      	cmp	r2, #8
 801068c:	d832      	bhi.n	80106f4 <_strtod_l+0xa4>
 801068e:	2a00      	cmp	r2, #0
 8010690:	d03c      	beq.n	801070c <_strtod_l+0xbc>
 8010692:	2300      	movs	r3, #0
 8010694:	930e      	str	r3, [sp, #56]	; 0x38
 8010696:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010698:	7833      	ldrb	r3, [r6, #0]
 801069a:	2b30      	cmp	r3, #48	; 0x30
 801069c:	f040 80b4 	bne.w	8010808 <_strtod_l+0x1b8>
 80106a0:	7873      	ldrb	r3, [r6, #1]
 80106a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80106a6:	2b58      	cmp	r3, #88	; 0x58
 80106a8:	d16c      	bne.n	8010784 <_strtod_l+0x134>
 80106aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106ac:	9301      	str	r3, [sp, #4]
 80106ae:	ab1e      	add	r3, sp, #120	; 0x78
 80106b0:	9702      	str	r7, [sp, #8]
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	4a8f      	ldr	r2, [pc, #572]	; (80108f4 <_strtod_l+0x2a4>)
 80106b6:	ab1f      	add	r3, sp, #124	; 0x7c
 80106b8:	a91d      	add	r1, sp, #116	; 0x74
 80106ba:	4620      	mov	r0, r4
 80106bc:	f001 ffb6 	bl	801262c <__gethex>
 80106c0:	f010 0707 	ands.w	r7, r0, #7
 80106c4:	4605      	mov	r5, r0
 80106c6:	d005      	beq.n	80106d4 <_strtod_l+0x84>
 80106c8:	2f06      	cmp	r7, #6
 80106ca:	d12a      	bne.n	8010722 <_strtod_l+0xd2>
 80106cc:	3601      	adds	r6, #1
 80106ce:	2300      	movs	r3, #0
 80106d0:	961d      	str	r6, [sp, #116]	; 0x74
 80106d2:	930e      	str	r3, [sp, #56]	; 0x38
 80106d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f040 8596 	bne.w	8011208 <_strtod_l+0xbb8>
 80106dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106de:	b1db      	cbz	r3, 8010718 <_strtod_l+0xc8>
 80106e0:	4652      	mov	r2, sl
 80106e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80106e6:	ec43 2b10 	vmov	d0, r2, r3
 80106ea:	b023      	add	sp, #140	; 0x8c
 80106ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f0:	2a20      	cmp	r2, #32
 80106f2:	d1ce      	bne.n	8010692 <_strtod_l+0x42>
 80106f4:	3301      	adds	r3, #1
 80106f6:	931d      	str	r3, [sp, #116]	; 0x74
 80106f8:	e7c0      	b.n	801067c <_strtod_l+0x2c>
 80106fa:	2a2d      	cmp	r2, #45	; 0x2d
 80106fc:	d1c9      	bne.n	8010692 <_strtod_l+0x42>
 80106fe:	2201      	movs	r2, #1
 8010700:	920e      	str	r2, [sp, #56]	; 0x38
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	921d      	str	r2, [sp, #116]	; 0x74
 8010706:	785b      	ldrb	r3, [r3, #1]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d1c4      	bne.n	8010696 <_strtod_l+0x46>
 801070c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801070e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010712:	2b00      	cmp	r3, #0
 8010714:	f040 8576 	bne.w	8011204 <_strtod_l+0xbb4>
 8010718:	4652      	mov	r2, sl
 801071a:	465b      	mov	r3, fp
 801071c:	e7e3      	b.n	80106e6 <_strtod_l+0x96>
 801071e:	2200      	movs	r2, #0
 8010720:	e7ee      	b.n	8010700 <_strtod_l+0xb0>
 8010722:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010724:	b13a      	cbz	r2, 8010736 <_strtod_l+0xe6>
 8010726:	2135      	movs	r1, #53	; 0x35
 8010728:	a820      	add	r0, sp, #128	; 0x80
 801072a:	f002 ff84 	bl	8013636 <__copybits>
 801072e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010730:	4620      	mov	r0, r4
 8010732:	f002 fb49 	bl	8012dc8 <_Bfree>
 8010736:	3f01      	subs	r7, #1
 8010738:	2f05      	cmp	r7, #5
 801073a:	d807      	bhi.n	801074c <_strtod_l+0xfc>
 801073c:	e8df f007 	tbb	[pc, r7]
 8010740:	1d180b0e 	.word	0x1d180b0e
 8010744:	030e      	.short	0x030e
 8010746:	f04f 0b00 	mov.w	fp, #0
 801074a:	46da      	mov	sl, fp
 801074c:	0728      	lsls	r0, r5, #28
 801074e:	d5c1      	bpl.n	80106d4 <_strtod_l+0x84>
 8010750:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010754:	e7be      	b.n	80106d4 <_strtod_l+0x84>
 8010756:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801075a:	e7f7      	b.n	801074c <_strtod_l+0xfc>
 801075c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010760:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010766:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801076a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801076e:	e7ed      	b.n	801074c <_strtod_l+0xfc>
 8010770:	f8df b184 	ldr.w	fp, [pc, #388]	; 80108f8 <_strtod_l+0x2a8>
 8010774:	f04f 0a00 	mov.w	sl, #0
 8010778:	e7e8      	b.n	801074c <_strtod_l+0xfc>
 801077a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801077e:	f04f 3aff 	mov.w	sl, #4294967295
 8010782:	e7e3      	b.n	801074c <_strtod_l+0xfc>
 8010784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	921d      	str	r2, [sp, #116]	; 0x74
 801078a:	785b      	ldrb	r3, [r3, #1]
 801078c:	2b30      	cmp	r3, #48	; 0x30
 801078e:	d0f9      	beq.n	8010784 <_strtod_l+0x134>
 8010790:	2b00      	cmp	r3, #0
 8010792:	d09f      	beq.n	80106d4 <_strtod_l+0x84>
 8010794:	2301      	movs	r3, #1
 8010796:	f04f 0900 	mov.w	r9, #0
 801079a:	9304      	str	r3, [sp, #16]
 801079c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801079e:	930a      	str	r3, [sp, #40]	; 0x28
 80107a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80107a4:	464f      	mov	r7, r9
 80107a6:	220a      	movs	r2, #10
 80107a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80107aa:	7806      	ldrb	r6, [r0, #0]
 80107ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80107b0:	b2d9      	uxtb	r1, r3
 80107b2:	2909      	cmp	r1, #9
 80107b4:	d92a      	bls.n	801080c <_strtod_l+0x1bc>
 80107b6:	9907      	ldr	r1, [sp, #28]
 80107b8:	462a      	mov	r2, r5
 80107ba:	f003 fb4c 	bl	8013e56 <strncmp>
 80107be:	b398      	cbz	r0, 8010828 <_strtod_l+0x1d8>
 80107c0:	2000      	movs	r0, #0
 80107c2:	4633      	mov	r3, r6
 80107c4:	463d      	mov	r5, r7
 80107c6:	9007      	str	r0, [sp, #28]
 80107c8:	4602      	mov	r2, r0
 80107ca:	2b65      	cmp	r3, #101	; 0x65
 80107cc:	d001      	beq.n	80107d2 <_strtod_l+0x182>
 80107ce:	2b45      	cmp	r3, #69	; 0x45
 80107d0:	d118      	bne.n	8010804 <_strtod_l+0x1b4>
 80107d2:	b91d      	cbnz	r5, 80107dc <_strtod_l+0x18c>
 80107d4:	9b04      	ldr	r3, [sp, #16]
 80107d6:	4303      	orrs	r3, r0
 80107d8:	d098      	beq.n	801070c <_strtod_l+0xbc>
 80107da:	2500      	movs	r5, #0
 80107dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80107e0:	f108 0301 	add.w	r3, r8, #1
 80107e4:	931d      	str	r3, [sp, #116]	; 0x74
 80107e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80107ea:	2b2b      	cmp	r3, #43	; 0x2b
 80107ec:	d075      	beq.n	80108da <_strtod_l+0x28a>
 80107ee:	2b2d      	cmp	r3, #45	; 0x2d
 80107f0:	d07b      	beq.n	80108ea <_strtod_l+0x29a>
 80107f2:	f04f 0c00 	mov.w	ip, #0
 80107f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80107fa:	2909      	cmp	r1, #9
 80107fc:	f240 8082 	bls.w	8010904 <_strtod_l+0x2b4>
 8010800:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010804:	2600      	movs	r6, #0
 8010806:	e09d      	b.n	8010944 <_strtod_l+0x2f4>
 8010808:	2300      	movs	r3, #0
 801080a:	e7c4      	b.n	8010796 <_strtod_l+0x146>
 801080c:	2f08      	cmp	r7, #8
 801080e:	bfd8      	it	le
 8010810:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010812:	f100 0001 	add.w	r0, r0, #1
 8010816:	bfda      	itte	le
 8010818:	fb02 3301 	mlale	r3, r2, r1, r3
 801081c:	9309      	strle	r3, [sp, #36]	; 0x24
 801081e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010822:	3701      	adds	r7, #1
 8010824:	901d      	str	r0, [sp, #116]	; 0x74
 8010826:	e7bf      	b.n	80107a8 <_strtod_l+0x158>
 8010828:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801082a:	195a      	adds	r2, r3, r5
 801082c:	921d      	str	r2, [sp, #116]	; 0x74
 801082e:	5d5b      	ldrb	r3, [r3, r5]
 8010830:	2f00      	cmp	r7, #0
 8010832:	d037      	beq.n	80108a4 <_strtod_l+0x254>
 8010834:	9007      	str	r0, [sp, #28]
 8010836:	463d      	mov	r5, r7
 8010838:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801083c:	2a09      	cmp	r2, #9
 801083e:	d912      	bls.n	8010866 <_strtod_l+0x216>
 8010840:	2201      	movs	r2, #1
 8010842:	e7c2      	b.n	80107ca <_strtod_l+0x17a>
 8010844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	921d      	str	r2, [sp, #116]	; 0x74
 801084a:	785b      	ldrb	r3, [r3, #1]
 801084c:	3001      	adds	r0, #1
 801084e:	2b30      	cmp	r3, #48	; 0x30
 8010850:	d0f8      	beq.n	8010844 <_strtod_l+0x1f4>
 8010852:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010856:	2a08      	cmp	r2, #8
 8010858:	f200 84db 	bhi.w	8011212 <_strtod_l+0xbc2>
 801085c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801085e:	9007      	str	r0, [sp, #28]
 8010860:	2000      	movs	r0, #0
 8010862:	920a      	str	r2, [sp, #40]	; 0x28
 8010864:	4605      	mov	r5, r0
 8010866:	3b30      	subs	r3, #48	; 0x30
 8010868:	f100 0201 	add.w	r2, r0, #1
 801086c:	d014      	beq.n	8010898 <_strtod_l+0x248>
 801086e:	9907      	ldr	r1, [sp, #28]
 8010870:	4411      	add	r1, r2
 8010872:	9107      	str	r1, [sp, #28]
 8010874:	462a      	mov	r2, r5
 8010876:	eb00 0e05 	add.w	lr, r0, r5
 801087a:	210a      	movs	r1, #10
 801087c:	4572      	cmp	r2, lr
 801087e:	d113      	bne.n	80108a8 <_strtod_l+0x258>
 8010880:	182a      	adds	r2, r5, r0
 8010882:	2a08      	cmp	r2, #8
 8010884:	f105 0501 	add.w	r5, r5, #1
 8010888:	4405      	add	r5, r0
 801088a:	dc1c      	bgt.n	80108c6 <_strtod_l+0x276>
 801088c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801088e:	220a      	movs	r2, #10
 8010890:	fb02 3301 	mla	r3, r2, r1, r3
 8010894:	9309      	str	r3, [sp, #36]	; 0x24
 8010896:	2200      	movs	r2, #0
 8010898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801089a:	1c59      	adds	r1, r3, #1
 801089c:	911d      	str	r1, [sp, #116]	; 0x74
 801089e:	785b      	ldrb	r3, [r3, #1]
 80108a0:	4610      	mov	r0, r2
 80108a2:	e7c9      	b.n	8010838 <_strtod_l+0x1e8>
 80108a4:	4638      	mov	r0, r7
 80108a6:	e7d2      	b.n	801084e <_strtod_l+0x1fe>
 80108a8:	2a08      	cmp	r2, #8
 80108aa:	dc04      	bgt.n	80108b6 <_strtod_l+0x266>
 80108ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80108ae:	434e      	muls	r6, r1
 80108b0:	9609      	str	r6, [sp, #36]	; 0x24
 80108b2:	3201      	adds	r2, #1
 80108b4:	e7e2      	b.n	801087c <_strtod_l+0x22c>
 80108b6:	f102 0c01 	add.w	ip, r2, #1
 80108ba:	f1bc 0f10 	cmp.w	ip, #16
 80108be:	bfd8      	it	le
 80108c0:	fb01 f909 	mulle.w	r9, r1, r9
 80108c4:	e7f5      	b.n	80108b2 <_strtod_l+0x262>
 80108c6:	2d10      	cmp	r5, #16
 80108c8:	bfdc      	itt	le
 80108ca:	220a      	movle	r2, #10
 80108cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80108d0:	e7e1      	b.n	8010896 <_strtod_l+0x246>
 80108d2:	2300      	movs	r3, #0
 80108d4:	9307      	str	r3, [sp, #28]
 80108d6:	2201      	movs	r2, #1
 80108d8:	e77c      	b.n	80107d4 <_strtod_l+0x184>
 80108da:	f04f 0c00 	mov.w	ip, #0
 80108de:	f108 0302 	add.w	r3, r8, #2
 80108e2:	931d      	str	r3, [sp, #116]	; 0x74
 80108e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80108e8:	e785      	b.n	80107f6 <_strtod_l+0x1a6>
 80108ea:	f04f 0c01 	mov.w	ip, #1
 80108ee:	e7f6      	b.n	80108de <_strtod_l+0x28e>
 80108f0:	08100564 	.word	0x08100564
 80108f4:	081002ac 	.word	0x081002ac
 80108f8:	7ff00000 	.word	0x7ff00000
 80108fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80108fe:	1c59      	adds	r1, r3, #1
 8010900:	911d      	str	r1, [sp, #116]	; 0x74
 8010902:	785b      	ldrb	r3, [r3, #1]
 8010904:	2b30      	cmp	r3, #48	; 0x30
 8010906:	d0f9      	beq.n	80108fc <_strtod_l+0x2ac>
 8010908:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801090c:	2908      	cmp	r1, #8
 801090e:	f63f af79 	bhi.w	8010804 <_strtod_l+0x1b4>
 8010912:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010916:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010918:	9308      	str	r3, [sp, #32]
 801091a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801091c:	1c59      	adds	r1, r3, #1
 801091e:	911d      	str	r1, [sp, #116]	; 0x74
 8010920:	785b      	ldrb	r3, [r3, #1]
 8010922:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010926:	2e09      	cmp	r6, #9
 8010928:	d937      	bls.n	801099a <_strtod_l+0x34a>
 801092a:	9e08      	ldr	r6, [sp, #32]
 801092c:	1b89      	subs	r1, r1, r6
 801092e:	2908      	cmp	r1, #8
 8010930:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010934:	dc02      	bgt.n	801093c <_strtod_l+0x2ec>
 8010936:	4576      	cmp	r6, lr
 8010938:	bfa8      	it	ge
 801093a:	4676      	movge	r6, lr
 801093c:	f1bc 0f00 	cmp.w	ip, #0
 8010940:	d000      	beq.n	8010944 <_strtod_l+0x2f4>
 8010942:	4276      	negs	r6, r6
 8010944:	2d00      	cmp	r5, #0
 8010946:	d14f      	bne.n	80109e8 <_strtod_l+0x398>
 8010948:	9904      	ldr	r1, [sp, #16]
 801094a:	4301      	orrs	r1, r0
 801094c:	f47f aec2 	bne.w	80106d4 <_strtod_l+0x84>
 8010950:	2a00      	cmp	r2, #0
 8010952:	f47f aedb 	bne.w	801070c <_strtod_l+0xbc>
 8010956:	2b69      	cmp	r3, #105	; 0x69
 8010958:	d027      	beq.n	80109aa <_strtod_l+0x35a>
 801095a:	dc24      	bgt.n	80109a6 <_strtod_l+0x356>
 801095c:	2b49      	cmp	r3, #73	; 0x49
 801095e:	d024      	beq.n	80109aa <_strtod_l+0x35a>
 8010960:	2b4e      	cmp	r3, #78	; 0x4e
 8010962:	f47f aed3 	bne.w	801070c <_strtod_l+0xbc>
 8010966:	499e      	ldr	r1, [pc, #632]	; (8010be0 <_strtod_l+0x590>)
 8010968:	a81d      	add	r0, sp, #116	; 0x74
 801096a:	f002 f8b7 	bl	8012adc <__match>
 801096e:	2800      	cmp	r0, #0
 8010970:	f43f aecc 	beq.w	801070c <_strtod_l+0xbc>
 8010974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	2b28      	cmp	r3, #40	; 0x28
 801097a:	d12d      	bne.n	80109d8 <_strtod_l+0x388>
 801097c:	4999      	ldr	r1, [pc, #612]	; (8010be4 <_strtod_l+0x594>)
 801097e:	aa20      	add	r2, sp, #128	; 0x80
 8010980:	a81d      	add	r0, sp, #116	; 0x74
 8010982:	f002 f8bf 	bl	8012b04 <__hexnan>
 8010986:	2805      	cmp	r0, #5
 8010988:	d126      	bne.n	80109d8 <_strtod_l+0x388>
 801098a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801098c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010990:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010994:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010998:	e69c      	b.n	80106d4 <_strtod_l+0x84>
 801099a:	210a      	movs	r1, #10
 801099c:	fb01 3e0e 	mla	lr, r1, lr, r3
 80109a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80109a4:	e7b9      	b.n	801091a <_strtod_l+0x2ca>
 80109a6:	2b6e      	cmp	r3, #110	; 0x6e
 80109a8:	e7db      	b.n	8010962 <_strtod_l+0x312>
 80109aa:	498f      	ldr	r1, [pc, #572]	; (8010be8 <_strtod_l+0x598>)
 80109ac:	a81d      	add	r0, sp, #116	; 0x74
 80109ae:	f002 f895 	bl	8012adc <__match>
 80109b2:	2800      	cmp	r0, #0
 80109b4:	f43f aeaa 	beq.w	801070c <_strtod_l+0xbc>
 80109b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109ba:	498c      	ldr	r1, [pc, #560]	; (8010bec <_strtod_l+0x59c>)
 80109bc:	3b01      	subs	r3, #1
 80109be:	a81d      	add	r0, sp, #116	; 0x74
 80109c0:	931d      	str	r3, [sp, #116]	; 0x74
 80109c2:	f002 f88b 	bl	8012adc <__match>
 80109c6:	b910      	cbnz	r0, 80109ce <_strtod_l+0x37e>
 80109c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109ca:	3301      	adds	r3, #1
 80109cc:	931d      	str	r3, [sp, #116]	; 0x74
 80109ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010bfc <_strtod_l+0x5ac>
 80109d2:	f04f 0a00 	mov.w	sl, #0
 80109d6:	e67d      	b.n	80106d4 <_strtod_l+0x84>
 80109d8:	4885      	ldr	r0, [pc, #532]	; (8010bf0 <_strtod_l+0x5a0>)
 80109da:	f003 f9e1 	bl	8013da0 <nan>
 80109de:	ed8d 0b04 	vstr	d0, [sp, #16]
 80109e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80109e6:	e675      	b.n	80106d4 <_strtod_l+0x84>
 80109e8:	9b07      	ldr	r3, [sp, #28]
 80109ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109ec:	1af3      	subs	r3, r6, r3
 80109ee:	2f00      	cmp	r7, #0
 80109f0:	bf08      	it	eq
 80109f2:	462f      	moveq	r7, r5
 80109f4:	2d10      	cmp	r5, #16
 80109f6:	9308      	str	r3, [sp, #32]
 80109f8:	46a8      	mov	r8, r5
 80109fa:	bfa8      	it	ge
 80109fc:	f04f 0810 	movge.w	r8, #16
 8010a00:	f7f4 fef0 	bl	80057e4 <__aeabi_ui2d>
 8010a04:	2d09      	cmp	r5, #9
 8010a06:	4682      	mov	sl, r0
 8010a08:	468b      	mov	fp, r1
 8010a0a:	dd13      	ble.n	8010a34 <_strtod_l+0x3e4>
 8010a0c:	4b79      	ldr	r3, [pc, #484]	; (8010bf4 <_strtod_l+0x5a4>)
 8010a0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010a12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010a16:	f7f4 ff5f 	bl	80058d8 <__aeabi_dmul>
 8010a1a:	4682      	mov	sl, r0
 8010a1c:	4648      	mov	r0, r9
 8010a1e:	468b      	mov	fp, r1
 8010a20:	f7f4 fee0 	bl	80057e4 <__aeabi_ui2d>
 8010a24:	4602      	mov	r2, r0
 8010a26:	460b      	mov	r3, r1
 8010a28:	4650      	mov	r0, sl
 8010a2a:	4659      	mov	r1, fp
 8010a2c:	f7f4 fd9e 	bl	800556c <__adddf3>
 8010a30:	4682      	mov	sl, r0
 8010a32:	468b      	mov	fp, r1
 8010a34:	2d0f      	cmp	r5, #15
 8010a36:	dc38      	bgt.n	8010aaa <_strtod_l+0x45a>
 8010a38:	9b08      	ldr	r3, [sp, #32]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	f43f ae4a 	beq.w	80106d4 <_strtod_l+0x84>
 8010a40:	dd24      	ble.n	8010a8c <_strtod_l+0x43c>
 8010a42:	2b16      	cmp	r3, #22
 8010a44:	dc0b      	bgt.n	8010a5e <_strtod_l+0x40e>
 8010a46:	4d6b      	ldr	r5, [pc, #428]	; (8010bf4 <_strtod_l+0x5a4>)
 8010a48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010a4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010a50:	4652      	mov	r2, sl
 8010a52:	465b      	mov	r3, fp
 8010a54:	f7f4 ff40 	bl	80058d8 <__aeabi_dmul>
 8010a58:	4682      	mov	sl, r0
 8010a5a:	468b      	mov	fp, r1
 8010a5c:	e63a      	b.n	80106d4 <_strtod_l+0x84>
 8010a5e:	9a08      	ldr	r2, [sp, #32]
 8010a60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010a64:	4293      	cmp	r3, r2
 8010a66:	db20      	blt.n	8010aaa <_strtod_l+0x45a>
 8010a68:	4c62      	ldr	r4, [pc, #392]	; (8010bf4 <_strtod_l+0x5a4>)
 8010a6a:	f1c5 050f 	rsb	r5, r5, #15
 8010a6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010a72:	4652      	mov	r2, sl
 8010a74:	465b      	mov	r3, fp
 8010a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a7a:	f7f4 ff2d 	bl	80058d8 <__aeabi_dmul>
 8010a7e:	9b08      	ldr	r3, [sp, #32]
 8010a80:	1b5d      	subs	r5, r3, r5
 8010a82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010a86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010a8a:	e7e3      	b.n	8010a54 <_strtod_l+0x404>
 8010a8c:	9b08      	ldr	r3, [sp, #32]
 8010a8e:	3316      	adds	r3, #22
 8010a90:	db0b      	blt.n	8010aaa <_strtod_l+0x45a>
 8010a92:	9b07      	ldr	r3, [sp, #28]
 8010a94:	4a57      	ldr	r2, [pc, #348]	; (8010bf4 <_strtod_l+0x5a4>)
 8010a96:	1b9e      	subs	r6, r3, r6
 8010a98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010a9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010aa0:	4650      	mov	r0, sl
 8010aa2:	4659      	mov	r1, fp
 8010aa4:	f7f5 f842 	bl	8005b2c <__aeabi_ddiv>
 8010aa8:	e7d6      	b.n	8010a58 <_strtod_l+0x408>
 8010aaa:	9b08      	ldr	r3, [sp, #32]
 8010aac:	eba5 0808 	sub.w	r8, r5, r8
 8010ab0:	4498      	add	r8, r3
 8010ab2:	f1b8 0f00 	cmp.w	r8, #0
 8010ab6:	dd71      	ble.n	8010b9c <_strtod_l+0x54c>
 8010ab8:	f018 030f 	ands.w	r3, r8, #15
 8010abc:	d00a      	beq.n	8010ad4 <_strtod_l+0x484>
 8010abe:	494d      	ldr	r1, [pc, #308]	; (8010bf4 <_strtod_l+0x5a4>)
 8010ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ac4:	4652      	mov	r2, sl
 8010ac6:	465b      	mov	r3, fp
 8010ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010acc:	f7f4 ff04 	bl	80058d8 <__aeabi_dmul>
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	468b      	mov	fp, r1
 8010ad4:	f038 080f 	bics.w	r8, r8, #15
 8010ad8:	d04d      	beq.n	8010b76 <_strtod_l+0x526>
 8010ada:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010ade:	dd22      	ble.n	8010b26 <_strtod_l+0x4d6>
 8010ae0:	2500      	movs	r5, #0
 8010ae2:	462e      	mov	r6, r5
 8010ae4:	9509      	str	r5, [sp, #36]	; 0x24
 8010ae6:	9507      	str	r5, [sp, #28]
 8010ae8:	2322      	movs	r3, #34	; 0x22
 8010aea:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010bfc <_strtod_l+0x5ac>
 8010aee:	6023      	str	r3, [r4, #0]
 8010af0:	f04f 0a00 	mov.w	sl, #0
 8010af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f43f adec 	beq.w	80106d4 <_strtod_l+0x84>
 8010afc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010afe:	4620      	mov	r0, r4
 8010b00:	f002 f962 	bl	8012dc8 <_Bfree>
 8010b04:	9907      	ldr	r1, [sp, #28]
 8010b06:	4620      	mov	r0, r4
 8010b08:	f002 f95e 	bl	8012dc8 <_Bfree>
 8010b0c:	4631      	mov	r1, r6
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f002 f95a 	bl	8012dc8 <_Bfree>
 8010b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b16:	4620      	mov	r0, r4
 8010b18:	f002 f956 	bl	8012dc8 <_Bfree>
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f002 f952 	bl	8012dc8 <_Bfree>
 8010b24:	e5d6      	b.n	80106d4 <_strtod_l+0x84>
 8010b26:	2300      	movs	r3, #0
 8010b28:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010b2c:	4650      	mov	r0, sl
 8010b2e:	4659      	mov	r1, fp
 8010b30:	4699      	mov	r9, r3
 8010b32:	f1b8 0f01 	cmp.w	r8, #1
 8010b36:	dc21      	bgt.n	8010b7c <_strtod_l+0x52c>
 8010b38:	b10b      	cbz	r3, 8010b3e <_strtod_l+0x4ee>
 8010b3a:	4682      	mov	sl, r0
 8010b3c:	468b      	mov	fp, r1
 8010b3e:	4b2e      	ldr	r3, [pc, #184]	; (8010bf8 <_strtod_l+0x5a8>)
 8010b40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010b44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010b48:	4652      	mov	r2, sl
 8010b4a:	465b      	mov	r3, fp
 8010b4c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010b50:	f7f4 fec2 	bl	80058d8 <__aeabi_dmul>
 8010b54:	4b29      	ldr	r3, [pc, #164]	; (8010bfc <_strtod_l+0x5ac>)
 8010b56:	460a      	mov	r2, r1
 8010b58:	400b      	ands	r3, r1
 8010b5a:	4929      	ldr	r1, [pc, #164]	; (8010c00 <_strtod_l+0x5b0>)
 8010b5c:	428b      	cmp	r3, r1
 8010b5e:	4682      	mov	sl, r0
 8010b60:	d8be      	bhi.n	8010ae0 <_strtod_l+0x490>
 8010b62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010b66:	428b      	cmp	r3, r1
 8010b68:	bf86      	itte	hi
 8010b6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010c04 <_strtod_l+0x5b4>
 8010b6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010b72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010b76:	2300      	movs	r3, #0
 8010b78:	9304      	str	r3, [sp, #16]
 8010b7a:	e081      	b.n	8010c80 <_strtod_l+0x630>
 8010b7c:	f018 0f01 	tst.w	r8, #1
 8010b80:	d007      	beq.n	8010b92 <_strtod_l+0x542>
 8010b82:	4b1d      	ldr	r3, [pc, #116]	; (8010bf8 <_strtod_l+0x5a8>)
 8010b84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	f7f4 fea4 	bl	80058d8 <__aeabi_dmul>
 8010b90:	2301      	movs	r3, #1
 8010b92:	f109 0901 	add.w	r9, r9, #1
 8010b96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010b9a:	e7ca      	b.n	8010b32 <_strtod_l+0x4e2>
 8010b9c:	d0eb      	beq.n	8010b76 <_strtod_l+0x526>
 8010b9e:	f1c8 0800 	rsb	r8, r8, #0
 8010ba2:	f018 020f 	ands.w	r2, r8, #15
 8010ba6:	d00a      	beq.n	8010bbe <_strtod_l+0x56e>
 8010ba8:	4b12      	ldr	r3, [pc, #72]	; (8010bf4 <_strtod_l+0x5a4>)
 8010baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bae:	4650      	mov	r0, sl
 8010bb0:	4659      	mov	r1, fp
 8010bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb6:	f7f4 ffb9 	bl	8005b2c <__aeabi_ddiv>
 8010bba:	4682      	mov	sl, r0
 8010bbc:	468b      	mov	fp, r1
 8010bbe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010bc2:	d0d8      	beq.n	8010b76 <_strtod_l+0x526>
 8010bc4:	f1b8 0f1f 	cmp.w	r8, #31
 8010bc8:	dd1e      	ble.n	8010c08 <_strtod_l+0x5b8>
 8010bca:	2500      	movs	r5, #0
 8010bcc:	462e      	mov	r6, r5
 8010bce:	9509      	str	r5, [sp, #36]	; 0x24
 8010bd0:	9507      	str	r5, [sp, #28]
 8010bd2:	2322      	movs	r3, #34	; 0x22
 8010bd4:	f04f 0a00 	mov.w	sl, #0
 8010bd8:	f04f 0b00 	mov.w	fp, #0
 8010bdc:	6023      	str	r3, [r4, #0]
 8010bde:	e789      	b.n	8010af4 <_strtod_l+0x4a4>
 8010be0:	0810027d 	.word	0x0810027d
 8010be4:	081002c0 	.word	0x081002c0
 8010be8:	08100275 	.word	0x08100275
 8010bec:	08100404 	.word	0x08100404
 8010bf0:	08100720 	.word	0x08100720
 8010bf4:	08100600 	.word	0x08100600
 8010bf8:	081005d8 	.word	0x081005d8
 8010bfc:	7ff00000 	.word	0x7ff00000
 8010c00:	7ca00000 	.word	0x7ca00000
 8010c04:	7fefffff 	.word	0x7fefffff
 8010c08:	f018 0310 	ands.w	r3, r8, #16
 8010c0c:	bf18      	it	ne
 8010c0e:	236a      	movne	r3, #106	; 0x6a
 8010c10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010fc8 <_strtod_l+0x978>
 8010c14:	9304      	str	r3, [sp, #16]
 8010c16:	4650      	mov	r0, sl
 8010c18:	4659      	mov	r1, fp
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f018 0f01 	tst.w	r8, #1
 8010c20:	d004      	beq.n	8010c2c <_strtod_l+0x5dc>
 8010c22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010c26:	f7f4 fe57 	bl	80058d8 <__aeabi_dmul>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010c30:	f109 0908 	add.w	r9, r9, #8
 8010c34:	d1f2      	bne.n	8010c1c <_strtod_l+0x5cc>
 8010c36:	b10b      	cbz	r3, 8010c3c <_strtod_l+0x5ec>
 8010c38:	4682      	mov	sl, r0
 8010c3a:	468b      	mov	fp, r1
 8010c3c:	9b04      	ldr	r3, [sp, #16]
 8010c3e:	b1bb      	cbz	r3, 8010c70 <_strtod_l+0x620>
 8010c40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010c44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	4659      	mov	r1, fp
 8010c4c:	dd10      	ble.n	8010c70 <_strtod_l+0x620>
 8010c4e:	2b1f      	cmp	r3, #31
 8010c50:	f340 8128 	ble.w	8010ea4 <_strtod_l+0x854>
 8010c54:	2b34      	cmp	r3, #52	; 0x34
 8010c56:	bfde      	ittt	le
 8010c58:	3b20      	suble	r3, #32
 8010c5a:	f04f 32ff 	movle.w	r2, #4294967295
 8010c5e:	fa02 f303 	lslle.w	r3, r2, r3
 8010c62:	f04f 0a00 	mov.w	sl, #0
 8010c66:	bfcc      	ite	gt
 8010c68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010c6c:	ea03 0b01 	andle.w	fp, r3, r1
 8010c70:	2200      	movs	r2, #0
 8010c72:	2300      	movs	r3, #0
 8010c74:	4650      	mov	r0, sl
 8010c76:	4659      	mov	r1, fp
 8010c78:	f7f5 f896 	bl	8005da8 <__aeabi_dcmpeq>
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	d1a4      	bne.n	8010bca <_strtod_l+0x57a>
 8010c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010c86:	462b      	mov	r3, r5
 8010c88:	463a      	mov	r2, r7
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f002 f908 	bl	8012ea0 <__s2b>
 8010c90:	9009      	str	r0, [sp, #36]	; 0x24
 8010c92:	2800      	cmp	r0, #0
 8010c94:	f43f af24 	beq.w	8010ae0 <_strtod_l+0x490>
 8010c98:	9b07      	ldr	r3, [sp, #28]
 8010c9a:	1b9e      	subs	r6, r3, r6
 8010c9c:	9b08      	ldr	r3, [sp, #32]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	bfb4      	ite	lt
 8010ca2:	4633      	movlt	r3, r6
 8010ca4:	2300      	movge	r3, #0
 8010ca6:	9310      	str	r3, [sp, #64]	; 0x40
 8010ca8:	9b08      	ldr	r3, [sp, #32]
 8010caa:	2500      	movs	r5, #0
 8010cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010cb0:	9318      	str	r3, [sp, #96]	; 0x60
 8010cb2:	462e      	mov	r6, r5
 8010cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	6859      	ldr	r1, [r3, #4]
 8010cba:	f002 f845 	bl	8012d48 <_Balloc>
 8010cbe:	9007      	str	r0, [sp, #28]
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	f43f af11 	beq.w	8010ae8 <_strtod_l+0x498>
 8010cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cc8:	691a      	ldr	r2, [r3, #16]
 8010cca:	3202      	adds	r2, #2
 8010ccc:	f103 010c 	add.w	r1, r3, #12
 8010cd0:	0092      	lsls	r2, r2, #2
 8010cd2:	300c      	adds	r0, #12
 8010cd4:	f7fe fd5a 	bl	800f78c <memcpy>
 8010cd8:	ec4b ab10 	vmov	d0, sl, fp
 8010cdc:	aa20      	add	r2, sp, #128	; 0x80
 8010cde:	a91f      	add	r1, sp, #124	; 0x7c
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010ce6:	f002 fc17 	bl	8013518 <__d2b>
 8010cea:	901e      	str	r0, [sp, #120]	; 0x78
 8010cec:	2800      	cmp	r0, #0
 8010cee:	f43f aefb 	beq.w	8010ae8 <_strtod_l+0x498>
 8010cf2:	2101      	movs	r1, #1
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f002 f96d 	bl	8012fd4 <__i2b>
 8010cfa:	4606      	mov	r6, r0
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	f43f aef3 	beq.w	8010ae8 <_strtod_l+0x498>
 8010d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d04:	9904      	ldr	r1, [sp, #16]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	bfab      	itete	ge
 8010d0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010d0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010d0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010d10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010d14:	bfac      	ite	ge
 8010d16:	eb03 0902 	addge.w	r9, r3, r2
 8010d1a:	1ad7      	sublt	r7, r2, r3
 8010d1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010d1e:	eba3 0801 	sub.w	r8, r3, r1
 8010d22:	4490      	add	r8, r2
 8010d24:	4ba3      	ldr	r3, [pc, #652]	; (8010fb4 <_strtod_l+0x964>)
 8010d26:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d2a:	4598      	cmp	r8, r3
 8010d2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010d30:	f280 80cc 	bge.w	8010ecc <_strtod_l+0x87c>
 8010d34:	eba3 0308 	sub.w	r3, r3, r8
 8010d38:	2b1f      	cmp	r3, #31
 8010d3a:	eba2 0203 	sub.w	r2, r2, r3
 8010d3e:	f04f 0101 	mov.w	r1, #1
 8010d42:	f300 80b6 	bgt.w	8010eb2 <_strtod_l+0x862>
 8010d46:	fa01 f303 	lsl.w	r3, r1, r3
 8010d4a:	9311      	str	r3, [sp, #68]	; 0x44
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8010d50:	eb09 0802 	add.w	r8, r9, r2
 8010d54:	9b04      	ldr	r3, [sp, #16]
 8010d56:	45c1      	cmp	r9, r8
 8010d58:	4417      	add	r7, r2
 8010d5a:	441f      	add	r7, r3
 8010d5c:	464b      	mov	r3, r9
 8010d5e:	bfa8      	it	ge
 8010d60:	4643      	movge	r3, r8
 8010d62:	42bb      	cmp	r3, r7
 8010d64:	bfa8      	it	ge
 8010d66:	463b      	movge	r3, r7
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	bfc2      	ittt	gt
 8010d6c:	eba8 0803 	subgt.w	r8, r8, r3
 8010d70:	1aff      	subgt	r7, r7, r3
 8010d72:	eba9 0903 	subgt.w	r9, r9, r3
 8010d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	dd17      	ble.n	8010dac <_strtod_l+0x75c>
 8010d7c:	4631      	mov	r1, r6
 8010d7e:	461a      	mov	r2, r3
 8010d80:	4620      	mov	r0, r4
 8010d82:	f002 f9e3 	bl	801314c <__pow5mult>
 8010d86:	4606      	mov	r6, r0
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	f43f aead 	beq.w	8010ae8 <_strtod_l+0x498>
 8010d8e:	4601      	mov	r1, r0
 8010d90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010d92:	4620      	mov	r0, r4
 8010d94:	f002 f934 	bl	8013000 <__multiply>
 8010d98:	900f      	str	r0, [sp, #60]	; 0x3c
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f43f aea4 	beq.w	8010ae8 <_strtod_l+0x498>
 8010da0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010da2:	4620      	mov	r0, r4
 8010da4:	f002 f810 	bl	8012dc8 <_Bfree>
 8010da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010daa:	931e      	str	r3, [sp, #120]	; 0x78
 8010dac:	f1b8 0f00 	cmp.w	r8, #0
 8010db0:	f300 8091 	bgt.w	8010ed6 <_strtod_l+0x886>
 8010db4:	9b08      	ldr	r3, [sp, #32]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	dd08      	ble.n	8010dcc <_strtod_l+0x77c>
 8010dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010dbc:	9907      	ldr	r1, [sp, #28]
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f002 f9c4 	bl	801314c <__pow5mult>
 8010dc4:	9007      	str	r0, [sp, #28]
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f43f ae8e 	beq.w	8010ae8 <_strtod_l+0x498>
 8010dcc:	2f00      	cmp	r7, #0
 8010dce:	dd08      	ble.n	8010de2 <_strtod_l+0x792>
 8010dd0:	9907      	ldr	r1, [sp, #28]
 8010dd2:	463a      	mov	r2, r7
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f002 fa13 	bl	8013200 <__lshift>
 8010dda:	9007      	str	r0, [sp, #28]
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	f43f ae83 	beq.w	8010ae8 <_strtod_l+0x498>
 8010de2:	f1b9 0f00 	cmp.w	r9, #0
 8010de6:	dd08      	ble.n	8010dfa <_strtod_l+0x7aa>
 8010de8:	4631      	mov	r1, r6
 8010dea:	464a      	mov	r2, r9
 8010dec:	4620      	mov	r0, r4
 8010dee:	f002 fa07 	bl	8013200 <__lshift>
 8010df2:	4606      	mov	r6, r0
 8010df4:	2800      	cmp	r0, #0
 8010df6:	f43f ae77 	beq.w	8010ae8 <_strtod_l+0x498>
 8010dfa:	9a07      	ldr	r2, [sp, #28]
 8010dfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f002 fa86 	bl	8013310 <__mdiff>
 8010e04:	4605      	mov	r5, r0
 8010e06:	2800      	cmp	r0, #0
 8010e08:	f43f ae6e 	beq.w	8010ae8 <_strtod_l+0x498>
 8010e0c:	68c3      	ldr	r3, [r0, #12]
 8010e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e10:	2300      	movs	r3, #0
 8010e12:	60c3      	str	r3, [r0, #12]
 8010e14:	4631      	mov	r1, r6
 8010e16:	f002 fa5f 	bl	80132d8 <__mcmp>
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	da65      	bge.n	8010eea <_strtod_l+0x89a>
 8010e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e20:	ea53 030a 	orrs.w	r3, r3, sl
 8010e24:	f040 8087 	bne.w	8010f36 <_strtod_l+0x8e6>
 8010e28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f040 8082 	bne.w	8010f36 <_strtod_l+0x8e6>
 8010e32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010e36:	0d1b      	lsrs	r3, r3, #20
 8010e38:	051b      	lsls	r3, r3, #20
 8010e3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010e3e:	d97a      	bls.n	8010f36 <_strtod_l+0x8e6>
 8010e40:	696b      	ldr	r3, [r5, #20]
 8010e42:	b913      	cbnz	r3, 8010e4a <_strtod_l+0x7fa>
 8010e44:	692b      	ldr	r3, [r5, #16]
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	dd75      	ble.n	8010f36 <_strtod_l+0x8e6>
 8010e4a:	4629      	mov	r1, r5
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f002 f9d6 	bl	8013200 <__lshift>
 8010e54:	4631      	mov	r1, r6
 8010e56:	4605      	mov	r5, r0
 8010e58:	f002 fa3e 	bl	80132d8 <__mcmp>
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	dd6a      	ble.n	8010f36 <_strtod_l+0x8e6>
 8010e60:	9904      	ldr	r1, [sp, #16]
 8010e62:	4a55      	ldr	r2, [pc, #340]	; (8010fb8 <_strtod_l+0x968>)
 8010e64:	465b      	mov	r3, fp
 8010e66:	2900      	cmp	r1, #0
 8010e68:	f000 8085 	beq.w	8010f76 <_strtod_l+0x926>
 8010e6c:	ea02 010b 	and.w	r1, r2, fp
 8010e70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010e74:	dc7f      	bgt.n	8010f76 <_strtod_l+0x926>
 8010e76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010e7a:	f77f aeaa 	ble.w	8010bd2 <_strtod_l+0x582>
 8010e7e:	4a4f      	ldr	r2, [pc, #316]	; (8010fbc <_strtod_l+0x96c>)
 8010e80:	2300      	movs	r3, #0
 8010e82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010e86:	4650      	mov	r0, sl
 8010e88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010e8c:	4659      	mov	r1, fp
 8010e8e:	f7f4 fd23 	bl	80058d8 <__aeabi_dmul>
 8010e92:	460b      	mov	r3, r1
 8010e94:	4303      	orrs	r3, r0
 8010e96:	bf08      	it	eq
 8010e98:	2322      	moveq	r3, #34	; 0x22
 8010e9a:	4682      	mov	sl, r0
 8010e9c:	468b      	mov	fp, r1
 8010e9e:	bf08      	it	eq
 8010ea0:	6023      	streq	r3, [r4, #0]
 8010ea2:	e62b      	b.n	8010afc <_strtod_l+0x4ac>
 8010ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8010eac:	ea03 0a0a 	and.w	sl, r3, sl
 8010eb0:	e6de      	b.n	8010c70 <_strtod_l+0x620>
 8010eb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010eb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010eba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010ebe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010ec2:	fa01 f308 	lsl.w	r3, r1, r8
 8010ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8010ec8:	9111      	str	r1, [sp, #68]	; 0x44
 8010eca:	e741      	b.n	8010d50 <_strtod_l+0x700>
 8010ecc:	2300      	movs	r3, #0
 8010ece:	930c      	str	r3, [sp, #48]	; 0x30
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	9311      	str	r3, [sp, #68]	; 0x44
 8010ed4:	e73c      	b.n	8010d50 <_strtod_l+0x700>
 8010ed6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ed8:	4642      	mov	r2, r8
 8010eda:	4620      	mov	r0, r4
 8010edc:	f002 f990 	bl	8013200 <__lshift>
 8010ee0:	901e      	str	r0, [sp, #120]	; 0x78
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	f47f af66 	bne.w	8010db4 <_strtod_l+0x764>
 8010ee8:	e5fe      	b.n	8010ae8 <_strtod_l+0x498>
 8010eea:	465f      	mov	r7, fp
 8010eec:	d16e      	bne.n	8010fcc <_strtod_l+0x97c>
 8010eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ef4:	b342      	cbz	r2, 8010f48 <_strtod_l+0x8f8>
 8010ef6:	4a32      	ldr	r2, [pc, #200]	; (8010fc0 <_strtod_l+0x970>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d128      	bne.n	8010f4e <_strtod_l+0x8fe>
 8010efc:	9b04      	ldr	r3, [sp, #16]
 8010efe:	4650      	mov	r0, sl
 8010f00:	b1eb      	cbz	r3, 8010f3e <_strtod_l+0x8ee>
 8010f02:	4a2d      	ldr	r2, [pc, #180]	; (8010fb8 <_strtod_l+0x968>)
 8010f04:	403a      	ands	r2, r7
 8010f06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8010f0e:	d819      	bhi.n	8010f44 <_strtod_l+0x8f4>
 8010f10:	0d12      	lsrs	r2, r2, #20
 8010f12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010f16:	fa01 f303 	lsl.w	r3, r1, r3
 8010f1a:	4298      	cmp	r0, r3
 8010f1c:	d117      	bne.n	8010f4e <_strtod_l+0x8fe>
 8010f1e:	4b29      	ldr	r3, [pc, #164]	; (8010fc4 <_strtod_l+0x974>)
 8010f20:	429f      	cmp	r7, r3
 8010f22:	d102      	bne.n	8010f2a <_strtod_l+0x8da>
 8010f24:	3001      	adds	r0, #1
 8010f26:	f43f addf 	beq.w	8010ae8 <_strtod_l+0x498>
 8010f2a:	4b23      	ldr	r3, [pc, #140]	; (8010fb8 <_strtod_l+0x968>)
 8010f2c:	403b      	ands	r3, r7
 8010f2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010f32:	f04f 0a00 	mov.w	sl, #0
 8010f36:	9b04      	ldr	r3, [sp, #16]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1a0      	bne.n	8010e7e <_strtod_l+0x82e>
 8010f3c:	e5de      	b.n	8010afc <_strtod_l+0x4ac>
 8010f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f42:	e7ea      	b.n	8010f1a <_strtod_l+0x8ca>
 8010f44:	460b      	mov	r3, r1
 8010f46:	e7e8      	b.n	8010f1a <_strtod_l+0x8ca>
 8010f48:	ea53 030a 	orrs.w	r3, r3, sl
 8010f4c:	d088      	beq.n	8010e60 <_strtod_l+0x810>
 8010f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f50:	b1db      	cbz	r3, 8010f8a <_strtod_l+0x93a>
 8010f52:	423b      	tst	r3, r7
 8010f54:	d0ef      	beq.n	8010f36 <_strtod_l+0x8e6>
 8010f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f58:	9a04      	ldr	r2, [sp, #16]
 8010f5a:	4650      	mov	r0, sl
 8010f5c:	4659      	mov	r1, fp
 8010f5e:	b1c3      	cbz	r3, 8010f92 <_strtod_l+0x942>
 8010f60:	f7ff fb58 	bl	8010614 <sulp>
 8010f64:	4602      	mov	r2, r0
 8010f66:	460b      	mov	r3, r1
 8010f68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010f6c:	f7f4 fafe 	bl	800556c <__adddf3>
 8010f70:	4682      	mov	sl, r0
 8010f72:	468b      	mov	fp, r1
 8010f74:	e7df      	b.n	8010f36 <_strtod_l+0x8e6>
 8010f76:	4013      	ands	r3, r2
 8010f78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010f7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010f80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010f84:	f04f 3aff 	mov.w	sl, #4294967295
 8010f88:	e7d5      	b.n	8010f36 <_strtod_l+0x8e6>
 8010f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f8c:	ea13 0f0a 	tst.w	r3, sl
 8010f90:	e7e0      	b.n	8010f54 <_strtod_l+0x904>
 8010f92:	f7ff fb3f 	bl	8010614 <sulp>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010f9e:	f7f4 fae3 	bl	8005568 <__aeabi_dsub>
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	4682      	mov	sl, r0
 8010fa8:	468b      	mov	fp, r1
 8010faa:	f7f4 fefd 	bl	8005da8 <__aeabi_dcmpeq>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d0c1      	beq.n	8010f36 <_strtod_l+0x8e6>
 8010fb2:	e60e      	b.n	8010bd2 <_strtod_l+0x582>
 8010fb4:	fffffc02 	.word	0xfffffc02
 8010fb8:	7ff00000 	.word	0x7ff00000
 8010fbc:	39500000 	.word	0x39500000
 8010fc0:	000fffff 	.word	0x000fffff
 8010fc4:	7fefffff 	.word	0x7fefffff
 8010fc8:	081002d8 	.word	0x081002d8
 8010fcc:	4631      	mov	r1, r6
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f002 fafe 	bl	80135d0 <__ratio>
 8010fd4:	ec59 8b10 	vmov	r8, r9, d0
 8010fd8:	ee10 0a10 	vmov	r0, s0
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010fe2:	4649      	mov	r1, r9
 8010fe4:	f7f4 fef4 	bl	8005dd0 <__aeabi_dcmple>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d07c      	beq.n	80110e6 <_strtod_l+0xa96>
 8010fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d04c      	beq.n	801108c <_strtod_l+0xa3c>
 8010ff2:	4b95      	ldr	r3, [pc, #596]	; (8011248 <_strtod_l+0xbf8>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010ffa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011248 <_strtod_l+0xbf8>
 8010ffe:	f04f 0800 	mov.w	r8, #0
 8011002:	4b92      	ldr	r3, [pc, #584]	; (801124c <_strtod_l+0xbfc>)
 8011004:	403b      	ands	r3, r7
 8011006:	9311      	str	r3, [sp, #68]	; 0x44
 8011008:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801100a:	4b91      	ldr	r3, [pc, #580]	; (8011250 <_strtod_l+0xc00>)
 801100c:	429a      	cmp	r2, r3
 801100e:	f040 80b2 	bne.w	8011176 <_strtod_l+0xb26>
 8011012:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801101a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801101e:	ec4b ab10 	vmov	d0, sl, fp
 8011022:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011026:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801102a:	f002 f9f9 	bl	8013420 <__ulp>
 801102e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011032:	ec53 2b10 	vmov	r2, r3, d0
 8011036:	f7f4 fc4f 	bl	80058d8 <__aeabi_dmul>
 801103a:	4652      	mov	r2, sl
 801103c:	465b      	mov	r3, fp
 801103e:	f7f4 fa95 	bl	800556c <__adddf3>
 8011042:	460b      	mov	r3, r1
 8011044:	4981      	ldr	r1, [pc, #516]	; (801124c <_strtod_l+0xbfc>)
 8011046:	4a83      	ldr	r2, [pc, #524]	; (8011254 <_strtod_l+0xc04>)
 8011048:	4019      	ands	r1, r3
 801104a:	4291      	cmp	r1, r2
 801104c:	4682      	mov	sl, r0
 801104e:	d95e      	bls.n	801110e <_strtod_l+0xabe>
 8011050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011052:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011056:	4293      	cmp	r3, r2
 8011058:	d103      	bne.n	8011062 <_strtod_l+0xa12>
 801105a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801105c:	3301      	adds	r3, #1
 801105e:	f43f ad43 	beq.w	8010ae8 <_strtod_l+0x498>
 8011062:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011260 <_strtod_l+0xc10>
 8011066:	f04f 3aff 	mov.w	sl, #4294967295
 801106a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801106c:	4620      	mov	r0, r4
 801106e:	f001 feab 	bl	8012dc8 <_Bfree>
 8011072:	9907      	ldr	r1, [sp, #28]
 8011074:	4620      	mov	r0, r4
 8011076:	f001 fea7 	bl	8012dc8 <_Bfree>
 801107a:	4631      	mov	r1, r6
 801107c:	4620      	mov	r0, r4
 801107e:	f001 fea3 	bl	8012dc8 <_Bfree>
 8011082:	4629      	mov	r1, r5
 8011084:	4620      	mov	r0, r4
 8011086:	f001 fe9f 	bl	8012dc8 <_Bfree>
 801108a:	e613      	b.n	8010cb4 <_strtod_l+0x664>
 801108c:	f1ba 0f00 	cmp.w	sl, #0
 8011090:	d11b      	bne.n	80110ca <_strtod_l+0xa7a>
 8011092:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011096:	b9f3      	cbnz	r3, 80110d6 <_strtod_l+0xa86>
 8011098:	4b6b      	ldr	r3, [pc, #428]	; (8011248 <_strtod_l+0xbf8>)
 801109a:	2200      	movs	r2, #0
 801109c:	4640      	mov	r0, r8
 801109e:	4649      	mov	r1, r9
 80110a0:	f7f4 fe8c 	bl	8005dbc <__aeabi_dcmplt>
 80110a4:	b9d0      	cbnz	r0, 80110dc <_strtod_l+0xa8c>
 80110a6:	4640      	mov	r0, r8
 80110a8:	4649      	mov	r1, r9
 80110aa:	4b6b      	ldr	r3, [pc, #428]	; (8011258 <_strtod_l+0xc08>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	f7f4 fc13 	bl	80058d8 <__aeabi_dmul>
 80110b2:	4680      	mov	r8, r0
 80110b4:	4689      	mov	r9, r1
 80110b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80110ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80110be:	931b      	str	r3, [sp, #108]	; 0x6c
 80110c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80110c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80110c8:	e79b      	b.n	8011002 <_strtod_l+0x9b2>
 80110ca:	f1ba 0f01 	cmp.w	sl, #1
 80110ce:	d102      	bne.n	80110d6 <_strtod_l+0xa86>
 80110d0:	2f00      	cmp	r7, #0
 80110d2:	f43f ad7e 	beq.w	8010bd2 <_strtod_l+0x582>
 80110d6:	4b61      	ldr	r3, [pc, #388]	; (801125c <_strtod_l+0xc0c>)
 80110d8:	2200      	movs	r2, #0
 80110da:	e78c      	b.n	8010ff6 <_strtod_l+0x9a6>
 80110dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011258 <_strtod_l+0xc08>
 80110e0:	f04f 0800 	mov.w	r8, #0
 80110e4:	e7e7      	b.n	80110b6 <_strtod_l+0xa66>
 80110e6:	4b5c      	ldr	r3, [pc, #368]	; (8011258 <_strtod_l+0xc08>)
 80110e8:	4640      	mov	r0, r8
 80110ea:	4649      	mov	r1, r9
 80110ec:	2200      	movs	r2, #0
 80110ee:	f7f4 fbf3 	bl	80058d8 <__aeabi_dmul>
 80110f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110f4:	4680      	mov	r8, r0
 80110f6:	4689      	mov	r9, r1
 80110f8:	b933      	cbnz	r3, 8011108 <_strtod_l+0xab8>
 80110fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110fe:	9012      	str	r0, [sp, #72]	; 0x48
 8011100:	9313      	str	r3, [sp, #76]	; 0x4c
 8011102:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011106:	e7dd      	b.n	80110c4 <_strtod_l+0xa74>
 8011108:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801110c:	e7f9      	b.n	8011102 <_strtod_l+0xab2>
 801110e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011112:	9b04      	ldr	r3, [sp, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1a8      	bne.n	801106a <_strtod_l+0xa1a>
 8011118:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801111c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801111e:	0d1b      	lsrs	r3, r3, #20
 8011120:	051b      	lsls	r3, r3, #20
 8011122:	429a      	cmp	r2, r3
 8011124:	d1a1      	bne.n	801106a <_strtod_l+0xa1a>
 8011126:	4640      	mov	r0, r8
 8011128:	4649      	mov	r1, r9
 801112a:	f7f4 ff35 	bl	8005f98 <__aeabi_d2lz>
 801112e:	f7f4 fba5 	bl	800587c <__aeabi_l2d>
 8011132:	4602      	mov	r2, r0
 8011134:	460b      	mov	r3, r1
 8011136:	4640      	mov	r0, r8
 8011138:	4649      	mov	r1, r9
 801113a:	f7f4 fa15 	bl	8005568 <__aeabi_dsub>
 801113e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011140:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011144:	ea43 030a 	orr.w	r3, r3, sl
 8011148:	4313      	orrs	r3, r2
 801114a:	4680      	mov	r8, r0
 801114c:	4689      	mov	r9, r1
 801114e:	d053      	beq.n	80111f8 <_strtod_l+0xba8>
 8011150:	a335      	add	r3, pc, #212	; (adr r3, 8011228 <_strtod_l+0xbd8>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	f7f4 fe31 	bl	8005dbc <__aeabi_dcmplt>
 801115a:	2800      	cmp	r0, #0
 801115c:	f47f acce 	bne.w	8010afc <_strtod_l+0x4ac>
 8011160:	a333      	add	r3, pc, #204	; (adr r3, 8011230 <_strtod_l+0xbe0>)
 8011162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011166:	4640      	mov	r0, r8
 8011168:	4649      	mov	r1, r9
 801116a:	f7f4 fe45 	bl	8005df8 <__aeabi_dcmpgt>
 801116e:	2800      	cmp	r0, #0
 8011170:	f43f af7b 	beq.w	801106a <_strtod_l+0xa1a>
 8011174:	e4c2      	b.n	8010afc <_strtod_l+0x4ac>
 8011176:	9b04      	ldr	r3, [sp, #16]
 8011178:	b333      	cbz	r3, 80111c8 <_strtod_l+0xb78>
 801117a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801117c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011180:	d822      	bhi.n	80111c8 <_strtod_l+0xb78>
 8011182:	a32d      	add	r3, pc, #180	; (adr r3, 8011238 <_strtod_l+0xbe8>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	4640      	mov	r0, r8
 801118a:	4649      	mov	r1, r9
 801118c:	f7f4 fe20 	bl	8005dd0 <__aeabi_dcmple>
 8011190:	b1a0      	cbz	r0, 80111bc <_strtod_l+0xb6c>
 8011192:	4649      	mov	r1, r9
 8011194:	4640      	mov	r0, r8
 8011196:	f7f4 fe77 	bl	8005e88 <__aeabi_d2uiz>
 801119a:	2801      	cmp	r0, #1
 801119c:	bf38      	it	cc
 801119e:	2001      	movcc	r0, #1
 80111a0:	f7f4 fb20 	bl	80057e4 <__aeabi_ui2d>
 80111a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111a6:	4680      	mov	r8, r0
 80111a8:	4689      	mov	r9, r1
 80111aa:	bb13      	cbnz	r3, 80111f2 <_strtod_l+0xba2>
 80111ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111b0:	9014      	str	r0, [sp, #80]	; 0x50
 80111b2:	9315      	str	r3, [sp, #84]	; 0x54
 80111b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80111b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80111bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80111c4:	1a9b      	subs	r3, r3, r2
 80111c6:	930d      	str	r3, [sp, #52]	; 0x34
 80111c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80111cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80111d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80111d4:	f002 f924 	bl	8013420 <__ulp>
 80111d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80111dc:	ec53 2b10 	vmov	r2, r3, d0
 80111e0:	f7f4 fb7a 	bl	80058d8 <__aeabi_dmul>
 80111e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80111e8:	f7f4 f9c0 	bl	800556c <__adddf3>
 80111ec:	4682      	mov	sl, r0
 80111ee:	468b      	mov	fp, r1
 80111f0:	e78f      	b.n	8011112 <_strtod_l+0xac2>
 80111f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80111f6:	e7dd      	b.n	80111b4 <_strtod_l+0xb64>
 80111f8:	a311      	add	r3, pc, #68	; (adr r3, 8011240 <_strtod_l+0xbf0>)
 80111fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fe:	f7f4 fddd 	bl	8005dbc <__aeabi_dcmplt>
 8011202:	e7b4      	b.n	801116e <_strtod_l+0xb1e>
 8011204:	2300      	movs	r3, #0
 8011206:	930e      	str	r3, [sp, #56]	; 0x38
 8011208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801120a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801120c:	6013      	str	r3, [r2, #0]
 801120e:	f7ff ba65 	b.w	80106dc <_strtod_l+0x8c>
 8011212:	2b65      	cmp	r3, #101	; 0x65
 8011214:	f43f ab5d 	beq.w	80108d2 <_strtod_l+0x282>
 8011218:	2b45      	cmp	r3, #69	; 0x45
 801121a:	f43f ab5a 	beq.w	80108d2 <_strtod_l+0x282>
 801121e:	2201      	movs	r2, #1
 8011220:	f7ff bb92 	b.w	8010948 <_strtod_l+0x2f8>
 8011224:	f3af 8000 	nop.w
 8011228:	94a03595 	.word	0x94a03595
 801122c:	3fdfffff 	.word	0x3fdfffff
 8011230:	35afe535 	.word	0x35afe535
 8011234:	3fe00000 	.word	0x3fe00000
 8011238:	ffc00000 	.word	0xffc00000
 801123c:	41dfffff 	.word	0x41dfffff
 8011240:	94a03595 	.word	0x94a03595
 8011244:	3fcfffff 	.word	0x3fcfffff
 8011248:	3ff00000 	.word	0x3ff00000
 801124c:	7ff00000 	.word	0x7ff00000
 8011250:	7fe00000 	.word	0x7fe00000
 8011254:	7c9fffff 	.word	0x7c9fffff
 8011258:	3fe00000 	.word	0x3fe00000
 801125c:	bff00000 	.word	0xbff00000
 8011260:	7fefffff 	.word	0x7fefffff

08011264 <_strtod_r>:
 8011264:	4b01      	ldr	r3, [pc, #4]	; (801126c <_strtod_r+0x8>)
 8011266:	f7ff b9f3 	b.w	8010650 <_strtod_l>
 801126a:	bf00      	nop
 801126c:	200007d8 	.word	0x200007d8

08011270 <_strtol_l.isra.0>:
 8011270:	2b01      	cmp	r3, #1
 8011272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011276:	d001      	beq.n	801127c <_strtol_l.isra.0+0xc>
 8011278:	2b24      	cmp	r3, #36	; 0x24
 801127a:	d906      	bls.n	801128a <_strtol_l.isra.0+0x1a>
 801127c:	f7fe fa4e 	bl	800f71c <__errno>
 8011280:	2316      	movs	r3, #22
 8011282:	6003      	str	r3, [r0, #0]
 8011284:	2000      	movs	r0, #0
 8011286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801128a:	4f3a      	ldr	r7, [pc, #232]	; (8011374 <_strtol_l.isra.0+0x104>)
 801128c:	468e      	mov	lr, r1
 801128e:	4676      	mov	r6, lr
 8011290:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011294:	5de5      	ldrb	r5, [r4, r7]
 8011296:	f015 0508 	ands.w	r5, r5, #8
 801129a:	d1f8      	bne.n	801128e <_strtol_l.isra.0+0x1e>
 801129c:	2c2d      	cmp	r4, #45	; 0x2d
 801129e:	d134      	bne.n	801130a <_strtol_l.isra.0+0x9a>
 80112a0:	f89e 4000 	ldrb.w	r4, [lr]
 80112a4:	f04f 0801 	mov.w	r8, #1
 80112a8:	f106 0e02 	add.w	lr, r6, #2
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d05c      	beq.n	801136a <_strtol_l.isra.0+0xfa>
 80112b0:	2b10      	cmp	r3, #16
 80112b2:	d10c      	bne.n	80112ce <_strtol_l.isra.0+0x5e>
 80112b4:	2c30      	cmp	r4, #48	; 0x30
 80112b6:	d10a      	bne.n	80112ce <_strtol_l.isra.0+0x5e>
 80112b8:	f89e 4000 	ldrb.w	r4, [lr]
 80112bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80112c0:	2c58      	cmp	r4, #88	; 0x58
 80112c2:	d14d      	bne.n	8011360 <_strtol_l.isra.0+0xf0>
 80112c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80112c8:	2310      	movs	r3, #16
 80112ca:	f10e 0e02 	add.w	lr, lr, #2
 80112ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80112d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80112d6:	2600      	movs	r6, #0
 80112d8:	fbbc f9f3 	udiv	r9, ip, r3
 80112dc:	4635      	mov	r5, r6
 80112de:	fb03 ca19 	mls	sl, r3, r9, ip
 80112e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80112e6:	2f09      	cmp	r7, #9
 80112e8:	d818      	bhi.n	801131c <_strtol_l.isra.0+0xac>
 80112ea:	463c      	mov	r4, r7
 80112ec:	42a3      	cmp	r3, r4
 80112ee:	dd24      	ble.n	801133a <_strtol_l.isra.0+0xca>
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	db1f      	blt.n	8011334 <_strtol_l.isra.0+0xc4>
 80112f4:	45a9      	cmp	r9, r5
 80112f6:	d31d      	bcc.n	8011334 <_strtol_l.isra.0+0xc4>
 80112f8:	d101      	bne.n	80112fe <_strtol_l.isra.0+0x8e>
 80112fa:	45a2      	cmp	sl, r4
 80112fc:	db1a      	blt.n	8011334 <_strtol_l.isra.0+0xc4>
 80112fe:	fb05 4503 	mla	r5, r5, r3, r4
 8011302:	2601      	movs	r6, #1
 8011304:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011308:	e7eb      	b.n	80112e2 <_strtol_l.isra.0+0x72>
 801130a:	2c2b      	cmp	r4, #43	; 0x2b
 801130c:	bf08      	it	eq
 801130e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011312:	46a8      	mov	r8, r5
 8011314:	bf08      	it	eq
 8011316:	f106 0e02 	addeq.w	lr, r6, #2
 801131a:	e7c7      	b.n	80112ac <_strtol_l.isra.0+0x3c>
 801131c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011320:	2f19      	cmp	r7, #25
 8011322:	d801      	bhi.n	8011328 <_strtol_l.isra.0+0xb8>
 8011324:	3c37      	subs	r4, #55	; 0x37
 8011326:	e7e1      	b.n	80112ec <_strtol_l.isra.0+0x7c>
 8011328:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801132c:	2f19      	cmp	r7, #25
 801132e:	d804      	bhi.n	801133a <_strtol_l.isra.0+0xca>
 8011330:	3c57      	subs	r4, #87	; 0x57
 8011332:	e7db      	b.n	80112ec <_strtol_l.isra.0+0x7c>
 8011334:	f04f 36ff 	mov.w	r6, #4294967295
 8011338:	e7e4      	b.n	8011304 <_strtol_l.isra.0+0x94>
 801133a:	2e00      	cmp	r6, #0
 801133c:	da05      	bge.n	801134a <_strtol_l.isra.0+0xda>
 801133e:	2322      	movs	r3, #34	; 0x22
 8011340:	6003      	str	r3, [r0, #0]
 8011342:	4665      	mov	r5, ip
 8011344:	b942      	cbnz	r2, 8011358 <_strtol_l.isra.0+0xe8>
 8011346:	4628      	mov	r0, r5
 8011348:	e79d      	b.n	8011286 <_strtol_l.isra.0+0x16>
 801134a:	f1b8 0f00 	cmp.w	r8, #0
 801134e:	d000      	beq.n	8011352 <_strtol_l.isra.0+0xe2>
 8011350:	426d      	negs	r5, r5
 8011352:	2a00      	cmp	r2, #0
 8011354:	d0f7      	beq.n	8011346 <_strtol_l.isra.0+0xd6>
 8011356:	b10e      	cbz	r6, 801135c <_strtol_l.isra.0+0xec>
 8011358:	f10e 31ff 	add.w	r1, lr, #4294967295
 801135c:	6011      	str	r1, [r2, #0]
 801135e:	e7f2      	b.n	8011346 <_strtol_l.isra.0+0xd6>
 8011360:	2430      	movs	r4, #48	; 0x30
 8011362:	2b00      	cmp	r3, #0
 8011364:	d1b3      	bne.n	80112ce <_strtol_l.isra.0+0x5e>
 8011366:	2308      	movs	r3, #8
 8011368:	e7b1      	b.n	80112ce <_strtol_l.isra.0+0x5e>
 801136a:	2c30      	cmp	r4, #48	; 0x30
 801136c:	d0a4      	beq.n	80112b8 <_strtol_l.isra.0+0x48>
 801136e:	230a      	movs	r3, #10
 8011370:	e7ad      	b.n	80112ce <_strtol_l.isra.0+0x5e>
 8011372:	bf00      	nop
 8011374:	08100301 	.word	0x08100301

08011378 <_strtol_r>:
 8011378:	f7ff bf7a 	b.w	8011270 <_strtol_l.isra.0>

0801137c <__swbuf_r>:
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	460e      	mov	r6, r1
 8011380:	4614      	mov	r4, r2
 8011382:	4605      	mov	r5, r0
 8011384:	b118      	cbz	r0, 801138e <__swbuf_r+0x12>
 8011386:	6983      	ldr	r3, [r0, #24]
 8011388:	b90b      	cbnz	r3, 801138e <__swbuf_r+0x12>
 801138a:	f001 f84b 	bl	8012424 <__sinit>
 801138e:	4b21      	ldr	r3, [pc, #132]	; (8011414 <__swbuf_r+0x98>)
 8011390:	429c      	cmp	r4, r3
 8011392:	d12b      	bne.n	80113ec <__swbuf_r+0x70>
 8011394:	686c      	ldr	r4, [r5, #4]
 8011396:	69a3      	ldr	r3, [r4, #24]
 8011398:	60a3      	str	r3, [r4, #8]
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	071a      	lsls	r2, r3, #28
 801139e:	d52f      	bpl.n	8011400 <__swbuf_r+0x84>
 80113a0:	6923      	ldr	r3, [r4, #16]
 80113a2:	b36b      	cbz	r3, 8011400 <__swbuf_r+0x84>
 80113a4:	6923      	ldr	r3, [r4, #16]
 80113a6:	6820      	ldr	r0, [r4, #0]
 80113a8:	1ac0      	subs	r0, r0, r3
 80113aa:	6963      	ldr	r3, [r4, #20]
 80113ac:	b2f6      	uxtb	r6, r6
 80113ae:	4283      	cmp	r3, r0
 80113b0:	4637      	mov	r7, r6
 80113b2:	dc04      	bgt.n	80113be <__swbuf_r+0x42>
 80113b4:	4621      	mov	r1, r4
 80113b6:	4628      	mov	r0, r5
 80113b8:	f000 ffa0 	bl	80122fc <_fflush_r>
 80113bc:	bb30      	cbnz	r0, 801140c <__swbuf_r+0x90>
 80113be:	68a3      	ldr	r3, [r4, #8]
 80113c0:	3b01      	subs	r3, #1
 80113c2:	60a3      	str	r3, [r4, #8]
 80113c4:	6823      	ldr	r3, [r4, #0]
 80113c6:	1c5a      	adds	r2, r3, #1
 80113c8:	6022      	str	r2, [r4, #0]
 80113ca:	701e      	strb	r6, [r3, #0]
 80113cc:	6963      	ldr	r3, [r4, #20]
 80113ce:	3001      	adds	r0, #1
 80113d0:	4283      	cmp	r3, r0
 80113d2:	d004      	beq.n	80113de <__swbuf_r+0x62>
 80113d4:	89a3      	ldrh	r3, [r4, #12]
 80113d6:	07db      	lsls	r3, r3, #31
 80113d8:	d506      	bpl.n	80113e8 <__swbuf_r+0x6c>
 80113da:	2e0a      	cmp	r6, #10
 80113dc:	d104      	bne.n	80113e8 <__swbuf_r+0x6c>
 80113de:	4621      	mov	r1, r4
 80113e0:	4628      	mov	r0, r5
 80113e2:	f000 ff8b 	bl	80122fc <_fflush_r>
 80113e6:	b988      	cbnz	r0, 801140c <__swbuf_r+0x90>
 80113e8:	4638      	mov	r0, r7
 80113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ec:	4b0a      	ldr	r3, [pc, #40]	; (8011418 <__swbuf_r+0x9c>)
 80113ee:	429c      	cmp	r4, r3
 80113f0:	d101      	bne.n	80113f6 <__swbuf_r+0x7a>
 80113f2:	68ac      	ldr	r4, [r5, #8]
 80113f4:	e7cf      	b.n	8011396 <__swbuf_r+0x1a>
 80113f6:	4b09      	ldr	r3, [pc, #36]	; (801141c <__swbuf_r+0xa0>)
 80113f8:	429c      	cmp	r4, r3
 80113fa:	bf08      	it	eq
 80113fc:	68ec      	ldreq	r4, [r5, #12]
 80113fe:	e7ca      	b.n	8011396 <__swbuf_r+0x1a>
 8011400:	4621      	mov	r1, r4
 8011402:	4628      	mov	r0, r5
 8011404:	f000 f80c 	bl	8011420 <__swsetup_r>
 8011408:	2800      	cmp	r0, #0
 801140a:	d0cb      	beq.n	80113a4 <__swbuf_r+0x28>
 801140c:	f04f 37ff 	mov.w	r7, #4294967295
 8011410:	e7ea      	b.n	80113e8 <__swbuf_r+0x6c>
 8011412:	bf00      	nop
 8011414:	081004b8 	.word	0x081004b8
 8011418:	081004d8 	.word	0x081004d8
 801141c:	08100498 	.word	0x08100498

08011420 <__swsetup_r>:
 8011420:	4b32      	ldr	r3, [pc, #200]	; (80114ec <__swsetup_r+0xcc>)
 8011422:	b570      	push	{r4, r5, r6, lr}
 8011424:	681d      	ldr	r5, [r3, #0]
 8011426:	4606      	mov	r6, r0
 8011428:	460c      	mov	r4, r1
 801142a:	b125      	cbz	r5, 8011436 <__swsetup_r+0x16>
 801142c:	69ab      	ldr	r3, [r5, #24]
 801142e:	b913      	cbnz	r3, 8011436 <__swsetup_r+0x16>
 8011430:	4628      	mov	r0, r5
 8011432:	f000 fff7 	bl	8012424 <__sinit>
 8011436:	4b2e      	ldr	r3, [pc, #184]	; (80114f0 <__swsetup_r+0xd0>)
 8011438:	429c      	cmp	r4, r3
 801143a:	d10f      	bne.n	801145c <__swsetup_r+0x3c>
 801143c:	686c      	ldr	r4, [r5, #4]
 801143e:	89a3      	ldrh	r3, [r4, #12]
 8011440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011444:	0719      	lsls	r1, r3, #28
 8011446:	d42c      	bmi.n	80114a2 <__swsetup_r+0x82>
 8011448:	06dd      	lsls	r5, r3, #27
 801144a:	d411      	bmi.n	8011470 <__swsetup_r+0x50>
 801144c:	2309      	movs	r3, #9
 801144e:	6033      	str	r3, [r6, #0]
 8011450:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011454:	81a3      	strh	r3, [r4, #12]
 8011456:	f04f 30ff 	mov.w	r0, #4294967295
 801145a:	e03e      	b.n	80114da <__swsetup_r+0xba>
 801145c:	4b25      	ldr	r3, [pc, #148]	; (80114f4 <__swsetup_r+0xd4>)
 801145e:	429c      	cmp	r4, r3
 8011460:	d101      	bne.n	8011466 <__swsetup_r+0x46>
 8011462:	68ac      	ldr	r4, [r5, #8]
 8011464:	e7eb      	b.n	801143e <__swsetup_r+0x1e>
 8011466:	4b24      	ldr	r3, [pc, #144]	; (80114f8 <__swsetup_r+0xd8>)
 8011468:	429c      	cmp	r4, r3
 801146a:	bf08      	it	eq
 801146c:	68ec      	ldreq	r4, [r5, #12]
 801146e:	e7e6      	b.n	801143e <__swsetup_r+0x1e>
 8011470:	0758      	lsls	r0, r3, #29
 8011472:	d512      	bpl.n	801149a <__swsetup_r+0x7a>
 8011474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011476:	b141      	cbz	r1, 801148a <__swsetup_r+0x6a>
 8011478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801147c:	4299      	cmp	r1, r3
 801147e:	d002      	beq.n	8011486 <__swsetup_r+0x66>
 8011480:	4630      	mov	r0, r6
 8011482:	f002 f92b 	bl	80136dc <_free_r>
 8011486:	2300      	movs	r3, #0
 8011488:	6363      	str	r3, [r4, #52]	; 0x34
 801148a:	89a3      	ldrh	r3, [r4, #12]
 801148c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011490:	81a3      	strh	r3, [r4, #12]
 8011492:	2300      	movs	r3, #0
 8011494:	6063      	str	r3, [r4, #4]
 8011496:	6923      	ldr	r3, [r4, #16]
 8011498:	6023      	str	r3, [r4, #0]
 801149a:	89a3      	ldrh	r3, [r4, #12]
 801149c:	f043 0308 	orr.w	r3, r3, #8
 80114a0:	81a3      	strh	r3, [r4, #12]
 80114a2:	6923      	ldr	r3, [r4, #16]
 80114a4:	b94b      	cbnz	r3, 80114ba <__swsetup_r+0x9a>
 80114a6:	89a3      	ldrh	r3, [r4, #12]
 80114a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80114ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114b0:	d003      	beq.n	80114ba <__swsetup_r+0x9a>
 80114b2:	4621      	mov	r1, r4
 80114b4:	4630      	mov	r0, r6
 80114b6:	f001 fbed 	bl	8012c94 <__smakebuf_r>
 80114ba:	89a0      	ldrh	r0, [r4, #12]
 80114bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114c0:	f010 0301 	ands.w	r3, r0, #1
 80114c4:	d00a      	beq.n	80114dc <__swsetup_r+0xbc>
 80114c6:	2300      	movs	r3, #0
 80114c8:	60a3      	str	r3, [r4, #8]
 80114ca:	6963      	ldr	r3, [r4, #20]
 80114cc:	425b      	negs	r3, r3
 80114ce:	61a3      	str	r3, [r4, #24]
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	b943      	cbnz	r3, 80114e6 <__swsetup_r+0xc6>
 80114d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80114d8:	d1ba      	bne.n	8011450 <__swsetup_r+0x30>
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	0781      	lsls	r1, r0, #30
 80114de:	bf58      	it	pl
 80114e0:	6963      	ldrpl	r3, [r4, #20]
 80114e2:	60a3      	str	r3, [r4, #8]
 80114e4:	e7f4      	b.n	80114d0 <__swsetup_r+0xb0>
 80114e6:	2000      	movs	r0, #0
 80114e8:	e7f7      	b.n	80114da <__swsetup_r+0xba>
 80114ea:	bf00      	nop
 80114ec:	20000770 	.word	0x20000770
 80114f0:	081004b8 	.word	0x081004b8
 80114f4:	081004d8 	.word	0x081004d8
 80114f8:	08100498 	.word	0x08100498

080114fc <quorem>:
 80114fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011500:	6903      	ldr	r3, [r0, #16]
 8011502:	690c      	ldr	r4, [r1, #16]
 8011504:	42a3      	cmp	r3, r4
 8011506:	4607      	mov	r7, r0
 8011508:	f2c0 8081 	blt.w	801160e <quorem+0x112>
 801150c:	3c01      	subs	r4, #1
 801150e:	f101 0814 	add.w	r8, r1, #20
 8011512:	f100 0514 	add.w	r5, r0, #20
 8011516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801151a:	9301      	str	r3, [sp, #4]
 801151c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011520:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011524:	3301      	adds	r3, #1
 8011526:	429a      	cmp	r2, r3
 8011528:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801152c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011530:	fbb2 f6f3 	udiv	r6, r2, r3
 8011534:	d331      	bcc.n	801159a <quorem+0x9e>
 8011536:	f04f 0e00 	mov.w	lr, #0
 801153a:	4640      	mov	r0, r8
 801153c:	46ac      	mov	ip, r5
 801153e:	46f2      	mov	sl, lr
 8011540:	f850 2b04 	ldr.w	r2, [r0], #4
 8011544:	b293      	uxth	r3, r2
 8011546:	fb06 e303 	mla	r3, r6, r3, lr
 801154a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801154e:	b29b      	uxth	r3, r3
 8011550:	ebaa 0303 	sub.w	r3, sl, r3
 8011554:	0c12      	lsrs	r2, r2, #16
 8011556:	f8dc a000 	ldr.w	sl, [ip]
 801155a:	fb06 e202 	mla	r2, r6, r2, lr
 801155e:	fa13 f38a 	uxtah	r3, r3, sl
 8011562:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011566:	fa1f fa82 	uxth.w	sl, r2
 801156a:	f8dc 2000 	ldr.w	r2, [ip]
 801156e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011572:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011576:	b29b      	uxth	r3, r3
 8011578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801157c:	4581      	cmp	r9, r0
 801157e:	f84c 3b04 	str.w	r3, [ip], #4
 8011582:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011586:	d2db      	bcs.n	8011540 <quorem+0x44>
 8011588:	f855 300b 	ldr.w	r3, [r5, fp]
 801158c:	b92b      	cbnz	r3, 801159a <quorem+0x9e>
 801158e:	9b01      	ldr	r3, [sp, #4]
 8011590:	3b04      	subs	r3, #4
 8011592:	429d      	cmp	r5, r3
 8011594:	461a      	mov	r2, r3
 8011596:	d32e      	bcc.n	80115f6 <quorem+0xfa>
 8011598:	613c      	str	r4, [r7, #16]
 801159a:	4638      	mov	r0, r7
 801159c:	f001 fe9c 	bl	80132d8 <__mcmp>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	db24      	blt.n	80115ee <quorem+0xf2>
 80115a4:	3601      	adds	r6, #1
 80115a6:	4628      	mov	r0, r5
 80115a8:	f04f 0c00 	mov.w	ip, #0
 80115ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80115b0:	f8d0 e000 	ldr.w	lr, [r0]
 80115b4:	b293      	uxth	r3, r2
 80115b6:	ebac 0303 	sub.w	r3, ip, r3
 80115ba:	0c12      	lsrs	r2, r2, #16
 80115bc:	fa13 f38e 	uxtah	r3, r3, lr
 80115c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80115c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115ce:	45c1      	cmp	r9, r8
 80115d0:	f840 3b04 	str.w	r3, [r0], #4
 80115d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80115d8:	d2e8      	bcs.n	80115ac <quorem+0xb0>
 80115da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115e2:	b922      	cbnz	r2, 80115ee <quorem+0xf2>
 80115e4:	3b04      	subs	r3, #4
 80115e6:	429d      	cmp	r5, r3
 80115e8:	461a      	mov	r2, r3
 80115ea:	d30a      	bcc.n	8011602 <quorem+0x106>
 80115ec:	613c      	str	r4, [r7, #16]
 80115ee:	4630      	mov	r0, r6
 80115f0:	b003      	add	sp, #12
 80115f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f6:	6812      	ldr	r2, [r2, #0]
 80115f8:	3b04      	subs	r3, #4
 80115fa:	2a00      	cmp	r2, #0
 80115fc:	d1cc      	bne.n	8011598 <quorem+0x9c>
 80115fe:	3c01      	subs	r4, #1
 8011600:	e7c7      	b.n	8011592 <quorem+0x96>
 8011602:	6812      	ldr	r2, [r2, #0]
 8011604:	3b04      	subs	r3, #4
 8011606:	2a00      	cmp	r2, #0
 8011608:	d1f0      	bne.n	80115ec <quorem+0xf0>
 801160a:	3c01      	subs	r4, #1
 801160c:	e7eb      	b.n	80115e6 <quorem+0xea>
 801160e:	2000      	movs	r0, #0
 8011610:	e7ee      	b.n	80115f0 <quorem+0xf4>
 8011612:	0000      	movs	r0, r0
 8011614:	0000      	movs	r0, r0
	...

08011618 <_dtoa_r>:
 8011618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	ed2d 8b02 	vpush	{d8}
 8011620:	ec57 6b10 	vmov	r6, r7, d0
 8011624:	b095      	sub	sp, #84	; 0x54
 8011626:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011628:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801162c:	9105      	str	r1, [sp, #20]
 801162e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011632:	4604      	mov	r4, r0
 8011634:	9209      	str	r2, [sp, #36]	; 0x24
 8011636:	930f      	str	r3, [sp, #60]	; 0x3c
 8011638:	b975      	cbnz	r5, 8011658 <_dtoa_r+0x40>
 801163a:	2010      	movs	r0, #16
 801163c:	f001 fb6a 	bl	8012d14 <malloc>
 8011640:	4602      	mov	r2, r0
 8011642:	6260      	str	r0, [r4, #36]	; 0x24
 8011644:	b920      	cbnz	r0, 8011650 <_dtoa_r+0x38>
 8011646:	4bb2      	ldr	r3, [pc, #712]	; (8011910 <_dtoa_r+0x2f8>)
 8011648:	21ea      	movs	r1, #234	; 0xea
 801164a:	48b2      	ldr	r0, [pc, #712]	; (8011914 <_dtoa_r+0x2fc>)
 801164c:	f002 fc34 	bl	8013eb8 <__assert_func>
 8011650:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011654:	6005      	str	r5, [r0, #0]
 8011656:	60c5      	str	r5, [r0, #12]
 8011658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801165a:	6819      	ldr	r1, [r3, #0]
 801165c:	b151      	cbz	r1, 8011674 <_dtoa_r+0x5c>
 801165e:	685a      	ldr	r2, [r3, #4]
 8011660:	604a      	str	r2, [r1, #4]
 8011662:	2301      	movs	r3, #1
 8011664:	4093      	lsls	r3, r2
 8011666:	608b      	str	r3, [r1, #8]
 8011668:	4620      	mov	r0, r4
 801166a:	f001 fbad 	bl	8012dc8 <_Bfree>
 801166e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011670:	2200      	movs	r2, #0
 8011672:	601a      	str	r2, [r3, #0]
 8011674:	1e3b      	subs	r3, r7, #0
 8011676:	bfb9      	ittee	lt
 8011678:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801167c:	9303      	strlt	r3, [sp, #12]
 801167e:	2300      	movge	r3, #0
 8011680:	f8c8 3000 	strge.w	r3, [r8]
 8011684:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011688:	4ba3      	ldr	r3, [pc, #652]	; (8011918 <_dtoa_r+0x300>)
 801168a:	bfbc      	itt	lt
 801168c:	2201      	movlt	r2, #1
 801168e:	f8c8 2000 	strlt.w	r2, [r8]
 8011692:	ea33 0309 	bics.w	r3, r3, r9
 8011696:	d11b      	bne.n	80116d0 <_dtoa_r+0xb8>
 8011698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801169a:	f242 730f 	movw	r3, #9999	; 0x270f
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116a4:	4333      	orrs	r3, r6
 80116a6:	f000 857a 	beq.w	801219e <_dtoa_r+0xb86>
 80116aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116ac:	b963      	cbnz	r3, 80116c8 <_dtoa_r+0xb0>
 80116ae:	4b9b      	ldr	r3, [pc, #620]	; (801191c <_dtoa_r+0x304>)
 80116b0:	e024      	b.n	80116fc <_dtoa_r+0xe4>
 80116b2:	4b9b      	ldr	r3, [pc, #620]	; (8011920 <_dtoa_r+0x308>)
 80116b4:	9300      	str	r3, [sp, #0]
 80116b6:	3308      	adds	r3, #8
 80116b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80116ba:	6013      	str	r3, [r2, #0]
 80116bc:	9800      	ldr	r0, [sp, #0]
 80116be:	b015      	add	sp, #84	; 0x54
 80116c0:	ecbd 8b02 	vpop	{d8}
 80116c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c8:	4b94      	ldr	r3, [pc, #592]	; (801191c <_dtoa_r+0x304>)
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	3303      	adds	r3, #3
 80116ce:	e7f3      	b.n	80116b8 <_dtoa_r+0xa0>
 80116d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116d4:	2200      	movs	r2, #0
 80116d6:	ec51 0b17 	vmov	r0, r1, d7
 80116da:	2300      	movs	r3, #0
 80116dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80116e0:	f7f4 fb62 	bl	8005da8 <__aeabi_dcmpeq>
 80116e4:	4680      	mov	r8, r0
 80116e6:	b158      	cbz	r0, 8011700 <_dtoa_r+0xe8>
 80116e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116ea:	2301      	movs	r3, #1
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	f000 8551 	beq.w	8012198 <_dtoa_r+0xb80>
 80116f6:	488b      	ldr	r0, [pc, #556]	; (8011924 <_dtoa_r+0x30c>)
 80116f8:	6018      	str	r0, [r3, #0]
 80116fa:	1e43      	subs	r3, r0, #1
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	e7dd      	b.n	80116bc <_dtoa_r+0xa4>
 8011700:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011704:	aa12      	add	r2, sp, #72	; 0x48
 8011706:	a913      	add	r1, sp, #76	; 0x4c
 8011708:	4620      	mov	r0, r4
 801170a:	f001 ff05 	bl	8013518 <__d2b>
 801170e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011712:	4683      	mov	fp, r0
 8011714:	2d00      	cmp	r5, #0
 8011716:	d07c      	beq.n	8011812 <_dtoa_r+0x1fa>
 8011718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801171a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801171e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011722:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011726:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801172a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801172e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011732:	4b7d      	ldr	r3, [pc, #500]	; (8011928 <_dtoa_r+0x310>)
 8011734:	2200      	movs	r2, #0
 8011736:	4630      	mov	r0, r6
 8011738:	4639      	mov	r1, r7
 801173a:	f7f3 ff15 	bl	8005568 <__aeabi_dsub>
 801173e:	a36e      	add	r3, pc, #440	; (adr r3, 80118f8 <_dtoa_r+0x2e0>)
 8011740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011744:	f7f4 f8c8 	bl	80058d8 <__aeabi_dmul>
 8011748:	a36d      	add	r3, pc, #436	; (adr r3, 8011900 <_dtoa_r+0x2e8>)
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	f7f3 ff0d 	bl	800556c <__adddf3>
 8011752:	4606      	mov	r6, r0
 8011754:	4628      	mov	r0, r5
 8011756:	460f      	mov	r7, r1
 8011758:	f7f4 f854 	bl	8005804 <__aeabi_i2d>
 801175c:	a36a      	add	r3, pc, #424	; (adr r3, 8011908 <_dtoa_r+0x2f0>)
 801175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011762:	f7f4 f8b9 	bl	80058d8 <__aeabi_dmul>
 8011766:	4602      	mov	r2, r0
 8011768:	460b      	mov	r3, r1
 801176a:	4630      	mov	r0, r6
 801176c:	4639      	mov	r1, r7
 801176e:	f7f3 fefd 	bl	800556c <__adddf3>
 8011772:	4606      	mov	r6, r0
 8011774:	460f      	mov	r7, r1
 8011776:	f7f4 fb5f 	bl	8005e38 <__aeabi_d2iz>
 801177a:	2200      	movs	r2, #0
 801177c:	4682      	mov	sl, r0
 801177e:	2300      	movs	r3, #0
 8011780:	4630      	mov	r0, r6
 8011782:	4639      	mov	r1, r7
 8011784:	f7f4 fb1a 	bl	8005dbc <__aeabi_dcmplt>
 8011788:	b148      	cbz	r0, 801179e <_dtoa_r+0x186>
 801178a:	4650      	mov	r0, sl
 801178c:	f7f4 f83a 	bl	8005804 <__aeabi_i2d>
 8011790:	4632      	mov	r2, r6
 8011792:	463b      	mov	r3, r7
 8011794:	f7f4 fb08 	bl	8005da8 <__aeabi_dcmpeq>
 8011798:	b908      	cbnz	r0, 801179e <_dtoa_r+0x186>
 801179a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801179e:	f1ba 0f16 	cmp.w	sl, #22
 80117a2:	d854      	bhi.n	801184e <_dtoa_r+0x236>
 80117a4:	4b61      	ldr	r3, [pc, #388]	; (801192c <_dtoa_r+0x314>)
 80117a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80117aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80117b2:	f7f4 fb03 	bl	8005dbc <__aeabi_dcmplt>
 80117b6:	2800      	cmp	r0, #0
 80117b8:	d04b      	beq.n	8011852 <_dtoa_r+0x23a>
 80117ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117be:	2300      	movs	r3, #0
 80117c0:	930e      	str	r3, [sp, #56]	; 0x38
 80117c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80117c4:	1b5d      	subs	r5, r3, r5
 80117c6:	1e6b      	subs	r3, r5, #1
 80117c8:	9304      	str	r3, [sp, #16]
 80117ca:	bf43      	ittte	mi
 80117cc:	2300      	movmi	r3, #0
 80117ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80117d2:	9304      	strmi	r3, [sp, #16]
 80117d4:	f04f 0800 	movpl.w	r8, #0
 80117d8:	f1ba 0f00 	cmp.w	sl, #0
 80117dc:	db3b      	blt.n	8011856 <_dtoa_r+0x23e>
 80117de:	9b04      	ldr	r3, [sp, #16]
 80117e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80117e4:	4453      	add	r3, sl
 80117e6:	9304      	str	r3, [sp, #16]
 80117e8:	2300      	movs	r3, #0
 80117ea:	9306      	str	r3, [sp, #24]
 80117ec:	9b05      	ldr	r3, [sp, #20]
 80117ee:	2b09      	cmp	r3, #9
 80117f0:	d869      	bhi.n	80118c6 <_dtoa_r+0x2ae>
 80117f2:	2b05      	cmp	r3, #5
 80117f4:	bfc4      	itt	gt
 80117f6:	3b04      	subgt	r3, #4
 80117f8:	9305      	strgt	r3, [sp, #20]
 80117fa:	9b05      	ldr	r3, [sp, #20]
 80117fc:	f1a3 0302 	sub.w	r3, r3, #2
 8011800:	bfcc      	ite	gt
 8011802:	2500      	movgt	r5, #0
 8011804:	2501      	movle	r5, #1
 8011806:	2b03      	cmp	r3, #3
 8011808:	d869      	bhi.n	80118de <_dtoa_r+0x2c6>
 801180a:	e8df f003 	tbb	[pc, r3]
 801180e:	4e2c      	.short	0x4e2c
 8011810:	5a4c      	.short	0x5a4c
 8011812:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011816:	441d      	add	r5, r3
 8011818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801181c:	2b20      	cmp	r3, #32
 801181e:	bfc1      	itttt	gt
 8011820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011824:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011828:	fa09 f303 	lslgt.w	r3, r9, r3
 801182c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011830:	bfda      	itte	le
 8011832:	f1c3 0320 	rsble	r3, r3, #32
 8011836:	fa06 f003 	lslle.w	r0, r6, r3
 801183a:	4318      	orrgt	r0, r3
 801183c:	f7f3 ffd2 	bl	80057e4 <__aeabi_ui2d>
 8011840:	2301      	movs	r3, #1
 8011842:	4606      	mov	r6, r0
 8011844:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011848:	3d01      	subs	r5, #1
 801184a:	9310      	str	r3, [sp, #64]	; 0x40
 801184c:	e771      	b.n	8011732 <_dtoa_r+0x11a>
 801184e:	2301      	movs	r3, #1
 8011850:	e7b6      	b.n	80117c0 <_dtoa_r+0x1a8>
 8011852:	900e      	str	r0, [sp, #56]	; 0x38
 8011854:	e7b5      	b.n	80117c2 <_dtoa_r+0x1aa>
 8011856:	f1ca 0300 	rsb	r3, sl, #0
 801185a:	9306      	str	r3, [sp, #24]
 801185c:	2300      	movs	r3, #0
 801185e:	eba8 080a 	sub.w	r8, r8, sl
 8011862:	930d      	str	r3, [sp, #52]	; 0x34
 8011864:	e7c2      	b.n	80117ec <_dtoa_r+0x1d4>
 8011866:	2300      	movs	r3, #0
 8011868:	9308      	str	r3, [sp, #32]
 801186a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801186c:	2b00      	cmp	r3, #0
 801186e:	dc39      	bgt.n	80118e4 <_dtoa_r+0x2cc>
 8011870:	f04f 0901 	mov.w	r9, #1
 8011874:	f8cd 9004 	str.w	r9, [sp, #4]
 8011878:	464b      	mov	r3, r9
 801187a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801187e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011880:	2200      	movs	r2, #0
 8011882:	6042      	str	r2, [r0, #4]
 8011884:	2204      	movs	r2, #4
 8011886:	f102 0614 	add.w	r6, r2, #20
 801188a:	429e      	cmp	r6, r3
 801188c:	6841      	ldr	r1, [r0, #4]
 801188e:	d92f      	bls.n	80118f0 <_dtoa_r+0x2d8>
 8011890:	4620      	mov	r0, r4
 8011892:	f001 fa59 	bl	8012d48 <_Balloc>
 8011896:	9000      	str	r0, [sp, #0]
 8011898:	2800      	cmp	r0, #0
 801189a:	d14b      	bne.n	8011934 <_dtoa_r+0x31c>
 801189c:	4b24      	ldr	r3, [pc, #144]	; (8011930 <_dtoa_r+0x318>)
 801189e:	4602      	mov	r2, r0
 80118a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80118a4:	e6d1      	b.n	801164a <_dtoa_r+0x32>
 80118a6:	2301      	movs	r3, #1
 80118a8:	e7de      	b.n	8011868 <_dtoa_r+0x250>
 80118aa:	2300      	movs	r3, #0
 80118ac:	9308      	str	r3, [sp, #32]
 80118ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b0:	eb0a 0903 	add.w	r9, sl, r3
 80118b4:	f109 0301 	add.w	r3, r9, #1
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	9301      	str	r3, [sp, #4]
 80118bc:	bfb8      	it	lt
 80118be:	2301      	movlt	r3, #1
 80118c0:	e7dd      	b.n	801187e <_dtoa_r+0x266>
 80118c2:	2301      	movs	r3, #1
 80118c4:	e7f2      	b.n	80118ac <_dtoa_r+0x294>
 80118c6:	2501      	movs	r5, #1
 80118c8:	2300      	movs	r3, #0
 80118ca:	9305      	str	r3, [sp, #20]
 80118cc:	9508      	str	r5, [sp, #32]
 80118ce:	f04f 39ff 	mov.w	r9, #4294967295
 80118d2:	2200      	movs	r2, #0
 80118d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80118d8:	2312      	movs	r3, #18
 80118da:	9209      	str	r2, [sp, #36]	; 0x24
 80118dc:	e7cf      	b.n	801187e <_dtoa_r+0x266>
 80118de:	2301      	movs	r3, #1
 80118e0:	9308      	str	r3, [sp, #32]
 80118e2:	e7f4      	b.n	80118ce <_dtoa_r+0x2b6>
 80118e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80118e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80118ec:	464b      	mov	r3, r9
 80118ee:	e7c6      	b.n	801187e <_dtoa_r+0x266>
 80118f0:	3101      	adds	r1, #1
 80118f2:	6041      	str	r1, [r0, #4]
 80118f4:	0052      	lsls	r2, r2, #1
 80118f6:	e7c6      	b.n	8011886 <_dtoa_r+0x26e>
 80118f8:	636f4361 	.word	0x636f4361
 80118fc:	3fd287a7 	.word	0x3fd287a7
 8011900:	8b60c8b3 	.word	0x8b60c8b3
 8011904:	3fc68a28 	.word	0x3fc68a28
 8011908:	509f79fb 	.word	0x509f79fb
 801190c:	3fd34413 	.word	0x3fd34413
 8011910:	0810040e 	.word	0x0810040e
 8011914:	08100425 	.word	0x08100425
 8011918:	7ff00000 	.word	0x7ff00000
 801191c:	0810040a 	.word	0x0810040a
 8011920:	08100401 	.word	0x08100401
 8011924:	08100281 	.word	0x08100281
 8011928:	3ff80000 	.word	0x3ff80000
 801192c:	08100600 	.word	0x08100600
 8011930:	08100484 	.word	0x08100484
 8011934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011936:	9a00      	ldr	r2, [sp, #0]
 8011938:	601a      	str	r2, [r3, #0]
 801193a:	9b01      	ldr	r3, [sp, #4]
 801193c:	2b0e      	cmp	r3, #14
 801193e:	f200 80ad 	bhi.w	8011a9c <_dtoa_r+0x484>
 8011942:	2d00      	cmp	r5, #0
 8011944:	f000 80aa 	beq.w	8011a9c <_dtoa_r+0x484>
 8011948:	f1ba 0f00 	cmp.w	sl, #0
 801194c:	dd36      	ble.n	80119bc <_dtoa_r+0x3a4>
 801194e:	4ac3      	ldr	r2, [pc, #780]	; (8011c5c <_dtoa_r+0x644>)
 8011950:	f00a 030f 	and.w	r3, sl, #15
 8011954:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011958:	ed93 7b00 	vldr	d7, [r3]
 801195c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011960:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011964:	eeb0 8a47 	vmov.f32	s16, s14
 8011968:	eef0 8a67 	vmov.f32	s17, s15
 801196c:	d016      	beq.n	801199c <_dtoa_r+0x384>
 801196e:	4bbc      	ldr	r3, [pc, #752]	; (8011c60 <_dtoa_r+0x648>)
 8011970:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011974:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011978:	f7f4 f8d8 	bl	8005b2c <__aeabi_ddiv>
 801197c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011980:	f007 070f 	and.w	r7, r7, #15
 8011984:	2503      	movs	r5, #3
 8011986:	4eb6      	ldr	r6, [pc, #728]	; (8011c60 <_dtoa_r+0x648>)
 8011988:	b957      	cbnz	r7, 80119a0 <_dtoa_r+0x388>
 801198a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801198e:	ec53 2b18 	vmov	r2, r3, d8
 8011992:	f7f4 f8cb 	bl	8005b2c <__aeabi_ddiv>
 8011996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801199a:	e029      	b.n	80119f0 <_dtoa_r+0x3d8>
 801199c:	2502      	movs	r5, #2
 801199e:	e7f2      	b.n	8011986 <_dtoa_r+0x36e>
 80119a0:	07f9      	lsls	r1, r7, #31
 80119a2:	d508      	bpl.n	80119b6 <_dtoa_r+0x39e>
 80119a4:	ec51 0b18 	vmov	r0, r1, d8
 80119a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80119ac:	f7f3 ff94 	bl	80058d8 <__aeabi_dmul>
 80119b0:	ec41 0b18 	vmov	d8, r0, r1
 80119b4:	3501      	adds	r5, #1
 80119b6:	107f      	asrs	r7, r7, #1
 80119b8:	3608      	adds	r6, #8
 80119ba:	e7e5      	b.n	8011988 <_dtoa_r+0x370>
 80119bc:	f000 80a6 	beq.w	8011b0c <_dtoa_r+0x4f4>
 80119c0:	f1ca 0600 	rsb	r6, sl, #0
 80119c4:	4ba5      	ldr	r3, [pc, #660]	; (8011c5c <_dtoa_r+0x644>)
 80119c6:	4fa6      	ldr	r7, [pc, #664]	; (8011c60 <_dtoa_r+0x648>)
 80119c8:	f006 020f 	and.w	r2, r6, #15
 80119cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80119d8:	f7f3 ff7e 	bl	80058d8 <__aeabi_dmul>
 80119dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119e0:	1136      	asrs	r6, r6, #4
 80119e2:	2300      	movs	r3, #0
 80119e4:	2502      	movs	r5, #2
 80119e6:	2e00      	cmp	r6, #0
 80119e8:	f040 8085 	bne.w	8011af6 <_dtoa_r+0x4de>
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1d2      	bne.n	8011996 <_dtoa_r+0x37e>
 80119f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	f000 808c 	beq.w	8011b10 <_dtoa_r+0x4f8>
 80119f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80119fc:	4b99      	ldr	r3, [pc, #612]	; (8011c64 <_dtoa_r+0x64c>)
 80119fe:	2200      	movs	r2, #0
 8011a00:	4630      	mov	r0, r6
 8011a02:	4639      	mov	r1, r7
 8011a04:	f7f4 f9da 	bl	8005dbc <__aeabi_dcmplt>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	f000 8081 	beq.w	8011b10 <_dtoa_r+0x4f8>
 8011a0e:	9b01      	ldr	r3, [sp, #4]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d07d      	beq.n	8011b10 <_dtoa_r+0x4f8>
 8011a14:	f1b9 0f00 	cmp.w	r9, #0
 8011a18:	dd3c      	ble.n	8011a94 <_dtoa_r+0x47c>
 8011a1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011a1e:	9307      	str	r3, [sp, #28]
 8011a20:	2200      	movs	r2, #0
 8011a22:	4b91      	ldr	r3, [pc, #580]	; (8011c68 <_dtoa_r+0x650>)
 8011a24:	4630      	mov	r0, r6
 8011a26:	4639      	mov	r1, r7
 8011a28:	f7f3 ff56 	bl	80058d8 <__aeabi_dmul>
 8011a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a30:	3501      	adds	r5, #1
 8011a32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011a36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	f7f3 fee2 	bl	8005804 <__aeabi_i2d>
 8011a40:	4632      	mov	r2, r6
 8011a42:	463b      	mov	r3, r7
 8011a44:	f7f3 ff48 	bl	80058d8 <__aeabi_dmul>
 8011a48:	4b88      	ldr	r3, [pc, #544]	; (8011c6c <_dtoa_r+0x654>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f7f3 fd8e 	bl	800556c <__adddf3>
 8011a50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a58:	9303      	str	r3, [sp, #12]
 8011a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d15c      	bne.n	8011b1a <_dtoa_r+0x502>
 8011a60:	4b83      	ldr	r3, [pc, #524]	; (8011c70 <_dtoa_r+0x658>)
 8011a62:	2200      	movs	r2, #0
 8011a64:	4630      	mov	r0, r6
 8011a66:	4639      	mov	r1, r7
 8011a68:	f7f3 fd7e 	bl	8005568 <__aeabi_dsub>
 8011a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a70:	4606      	mov	r6, r0
 8011a72:	460f      	mov	r7, r1
 8011a74:	f7f4 f9c0 	bl	8005df8 <__aeabi_dcmpgt>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	f040 8296 	bne.w	8011faa <_dtoa_r+0x992>
 8011a7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011a82:	4630      	mov	r0, r6
 8011a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a88:	4639      	mov	r1, r7
 8011a8a:	f7f4 f997 	bl	8005dbc <__aeabi_dcmplt>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	f040 8288 	bne.w	8011fa4 <_dtoa_r+0x98c>
 8011a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f2c0 8158 	blt.w	8011d54 <_dtoa_r+0x73c>
 8011aa4:	f1ba 0f0e 	cmp.w	sl, #14
 8011aa8:	f300 8154 	bgt.w	8011d54 <_dtoa_r+0x73c>
 8011aac:	4b6b      	ldr	r3, [pc, #428]	; (8011c5c <_dtoa_r+0x644>)
 8011aae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011ab2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f280 80e3 	bge.w	8011c84 <_dtoa_r+0x66c>
 8011abe:	9b01      	ldr	r3, [sp, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	f300 80df 	bgt.w	8011c84 <_dtoa_r+0x66c>
 8011ac6:	f040 826d 	bne.w	8011fa4 <_dtoa_r+0x98c>
 8011aca:	4b69      	ldr	r3, [pc, #420]	; (8011c70 <_dtoa_r+0x658>)
 8011acc:	2200      	movs	r2, #0
 8011ace:	4640      	mov	r0, r8
 8011ad0:	4649      	mov	r1, r9
 8011ad2:	f7f3 ff01 	bl	80058d8 <__aeabi_dmul>
 8011ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ada:	f7f4 f983 	bl	8005de4 <__aeabi_dcmpge>
 8011ade:	9e01      	ldr	r6, [sp, #4]
 8011ae0:	4637      	mov	r7, r6
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	f040 8243 	bne.w	8011f6e <_dtoa_r+0x956>
 8011ae8:	9d00      	ldr	r5, [sp, #0]
 8011aea:	2331      	movs	r3, #49	; 0x31
 8011aec:	f805 3b01 	strb.w	r3, [r5], #1
 8011af0:	f10a 0a01 	add.w	sl, sl, #1
 8011af4:	e23f      	b.n	8011f76 <_dtoa_r+0x95e>
 8011af6:	07f2      	lsls	r2, r6, #31
 8011af8:	d505      	bpl.n	8011b06 <_dtoa_r+0x4ee>
 8011afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011afe:	f7f3 feeb 	bl	80058d8 <__aeabi_dmul>
 8011b02:	3501      	adds	r5, #1
 8011b04:	2301      	movs	r3, #1
 8011b06:	1076      	asrs	r6, r6, #1
 8011b08:	3708      	adds	r7, #8
 8011b0a:	e76c      	b.n	80119e6 <_dtoa_r+0x3ce>
 8011b0c:	2502      	movs	r5, #2
 8011b0e:	e76f      	b.n	80119f0 <_dtoa_r+0x3d8>
 8011b10:	9b01      	ldr	r3, [sp, #4]
 8011b12:	f8cd a01c 	str.w	sl, [sp, #28]
 8011b16:	930c      	str	r3, [sp, #48]	; 0x30
 8011b18:	e78d      	b.n	8011a36 <_dtoa_r+0x41e>
 8011b1a:	9900      	ldr	r1, [sp, #0]
 8011b1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b20:	4b4e      	ldr	r3, [pc, #312]	; (8011c5c <_dtoa_r+0x644>)
 8011b22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b26:	4401      	add	r1, r0
 8011b28:	9102      	str	r1, [sp, #8]
 8011b2a:	9908      	ldr	r1, [sp, #32]
 8011b2c:	eeb0 8a47 	vmov.f32	s16, s14
 8011b30:	eef0 8a67 	vmov.f32	s17, s15
 8011b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b3c:	2900      	cmp	r1, #0
 8011b3e:	d045      	beq.n	8011bcc <_dtoa_r+0x5b4>
 8011b40:	494c      	ldr	r1, [pc, #304]	; (8011c74 <_dtoa_r+0x65c>)
 8011b42:	2000      	movs	r0, #0
 8011b44:	f7f3 fff2 	bl	8005b2c <__aeabi_ddiv>
 8011b48:	ec53 2b18 	vmov	r2, r3, d8
 8011b4c:	f7f3 fd0c 	bl	8005568 <__aeabi_dsub>
 8011b50:	9d00      	ldr	r5, [sp, #0]
 8011b52:	ec41 0b18 	vmov	d8, r0, r1
 8011b56:	4639      	mov	r1, r7
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f7f4 f96d 	bl	8005e38 <__aeabi_d2iz>
 8011b5e:	900c      	str	r0, [sp, #48]	; 0x30
 8011b60:	f7f3 fe50 	bl	8005804 <__aeabi_i2d>
 8011b64:	4602      	mov	r2, r0
 8011b66:	460b      	mov	r3, r1
 8011b68:	4630      	mov	r0, r6
 8011b6a:	4639      	mov	r1, r7
 8011b6c:	f7f3 fcfc 	bl	8005568 <__aeabi_dsub>
 8011b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b72:	3330      	adds	r3, #48	; 0x30
 8011b74:	f805 3b01 	strb.w	r3, [r5], #1
 8011b78:	ec53 2b18 	vmov	r2, r3, d8
 8011b7c:	4606      	mov	r6, r0
 8011b7e:	460f      	mov	r7, r1
 8011b80:	f7f4 f91c 	bl	8005dbc <__aeabi_dcmplt>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d165      	bne.n	8011c54 <_dtoa_r+0x63c>
 8011b88:	4632      	mov	r2, r6
 8011b8a:	463b      	mov	r3, r7
 8011b8c:	4935      	ldr	r1, [pc, #212]	; (8011c64 <_dtoa_r+0x64c>)
 8011b8e:	2000      	movs	r0, #0
 8011b90:	f7f3 fcea 	bl	8005568 <__aeabi_dsub>
 8011b94:	ec53 2b18 	vmov	r2, r3, d8
 8011b98:	f7f4 f910 	bl	8005dbc <__aeabi_dcmplt>
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	f040 80b9 	bne.w	8011d14 <_dtoa_r+0x6fc>
 8011ba2:	9b02      	ldr	r3, [sp, #8]
 8011ba4:	429d      	cmp	r5, r3
 8011ba6:	f43f af75 	beq.w	8011a94 <_dtoa_r+0x47c>
 8011baa:	4b2f      	ldr	r3, [pc, #188]	; (8011c68 <_dtoa_r+0x650>)
 8011bac:	ec51 0b18 	vmov	r0, r1, d8
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f7f3 fe91 	bl	80058d8 <__aeabi_dmul>
 8011bb6:	4b2c      	ldr	r3, [pc, #176]	; (8011c68 <_dtoa_r+0x650>)
 8011bb8:	ec41 0b18 	vmov	d8, r0, r1
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	4639      	mov	r1, r7
 8011bc2:	f7f3 fe89 	bl	80058d8 <__aeabi_dmul>
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	460f      	mov	r7, r1
 8011bca:	e7c4      	b.n	8011b56 <_dtoa_r+0x53e>
 8011bcc:	ec51 0b17 	vmov	r0, r1, d7
 8011bd0:	f7f3 fe82 	bl	80058d8 <__aeabi_dmul>
 8011bd4:	9b02      	ldr	r3, [sp, #8]
 8011bd6:	9d00      	ldr	r5, [sp, #0]
 8011bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8011bda:	ec41 0b18 	vmov	d8, r0, r1
 8011bde:	4639      	mov	r1, r7
 8011be0:	4630      	mov	r0, r6
 8011be2:	f7f4 f929 	bl	8005e38 <__aeabi_d2iz>
 8011be6:	9011      	str	r0, [sp, #68]	; 0x44
 8011be8:	f7f3 fe0c 	bl	8005804 <__aeabi_i2d>
 8011bec:	4602      	mov	r2, r0
 8011bee:	460b      	mov	r3, r1
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	4639      	mov	r1, r7
 8011bf4:	f7f3 fcb8 	bl	8005568 <__aeabi_dsub>
 8011bf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011bfa:	3330      	adds	r3, #48	; 0x30
 8011bfc:	f805 3b01 	strb.w	r3, [r5], #1
 8011c00:	9b02      	ldr	r3, [sp, #8]
 8011c02:	429d      	cmp	r5, r3
 8011c04:	4606      	mov	r6, r0
 8011c06:	460f      	mov	r7, r1
 8011c08:	f04f 0200 	mov.w	r2, #0
 8011c0c:	d134      	bne.n	8011c78 <_dtoa_r+0x660>
 8011c0e:	4b19      	ldr	r3, [pc, #100]	; (8011c74 <_dtoa_r+0x65c>)
 8011c10:	ec51 0b18 	vmov	r0, r1, d8
 8011c14:	f7f3 fcaa 	bl	800556c <__adddf3>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	4639      	mov	r1, r7
 8011c20:	f7f4 f8ea 	bl	8005df8 <__aeabi_dcmpgt>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d175      	bne.n	8011d14 <_dtoa_r+0x6fc>
 8011c28:	ec53 2b18 	vmov	r2, r3, d8
 8011c2c:	4911      	ldr	r1, [pc, #68]	; (8011c74 <_dtoa_r+0x65c>)
 8011c2e:	2000      	movs	r0, #0
 8011c30:	f7f3 fc9a 	bl	8005568 <__aeabi_dsub>
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7f4 f8be 	bl	8005dbc <__aeabi_dcmplt>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	f43f af27 	beq.w	8011a94 <_dtoa_r+0x47c>
 8011c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c48:	1e6b      	subs	r3, r5, #1
 8011c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8011c4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c50:	2b30      	cmp	r3, #48	; 0x30
 8011c52:	d0f8      	beq.n	8011c46 <_dtoa_r+0x62e>
 8011c54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011c58:	e04a      	b.n	8011cf0 <_dtoa_r+0x6d8>
 8011c5a:	bf00      	nop
 8011c5c:	08100600 	.word	0x08100600
 8011c60:	081005d8 	.word	0x081005d8
 8011c64:	3ff00000 	.word	0x3ff00000
 8011c68:	40240000 	.word	0x40240000
 8011c6c:	401c0000 	.word	0x401c0000
 8011c70:	40140000 	.word	0x40140000
 8011c74:	3fe00000 	.word	0x3fe00000
 8011c78:	4baf      	ldr	r3, [pc, #700]	; (8011f38 <_dtoa_r+0x920>)
 8011c7a:	f7f3 fe2d 	bl	80058d8 <__aeabi_dmul>
 8011c7e:	4606      	mov	r6, r0
 8011c80:	460f      	mov	r7, r1
 8011c82:	e7ac      	b.n	8011bde <_dtoa_r+0x5c6>
 8011c84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011c88:	9d00      	ldr	r5, [sp, #0]
 8011c8a:	4642      	mov	r2, r8
 8011c8c:	464b      	mov	r3, r9
 8011c8e:	4630      	mov	r0, r6
 8011c90:	4639      	mov	r1, r7
 8011c92:	f7f3 ff4b 	bl	8005b2c <__aeabi_ddiv>
 8011c96:	f7f4 f8cf 	bl	8005e38 <__aeabi_d2iz>
 8011c9a:	9002      	str	r0, [sp, #8]
 8011c9c:	f7f3 fdb2 	bl	8005804 <__aeabi_i2d>
 8011ca0:	4642      	mov	r2, r8
 8011ca2:	464b      	mov	r3, r9
 8011ca4:	f7f3 fe18 	bl	80058d8 <__aeabi_dmul>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	460b      	mov	r3, r1
 8011cac:	4630      	mov	r0, r6
 8011cae:	4639      	mov	r1, r7
 8011cb0:	f7f3 fc5a 	bl	8005568 <__aeabi_dsub>
 8011cb4:	9e02      	ldr	r6, [sp, #8]
 8011cb6:	9f01      	ldr	r7, [sp, #4]
 8011cb8:	3630      	adds	r6, #48	; 0x30
 8011cba:	f805 6b01 	strb.w	r6, [r5], #1
 8011cbe:	9e00      	ldr	r6, [sp, #0]
 8011cc0:	1bae      	subs	r6, r5, r6
 8011cc2:	42b7      	cmp	r7, r6
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	d137      	bne.n	8011d3a <_dtoa_r+0x722>
 8011cca:	f7f3 fc4f 	bl	800556c <__adddf3>
 8011cce:	4642      	mov	r2, r8
 8011cd0:	464b      	mov	r3, r9
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	f7f4 f88f 	bl	8005df8 <__aeabi_dcmpgt>
 8011cda:	b9c8      	cbnz	r0, 8011d10 <_dtoa_r+0x6f8>
 8011cdc:	4642      	mov	r2, r8
 8011cde:	464b      	mov	r3, r9
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7f4 f860 	bl	8005da8 <__aeabi_dcmpeq>
 8011ce8:	b110      	cbz	r0, 8011cf0 <_dtoa_r+0x6d8>
 8011cea:	9b02      	ldr	r3, [sp, #8]
 8011cec:	07d9      	lsls	r1, r3, #31
 8011cee:	d40f      	bmi.n	8011d10 <_dtoa_r+0x6f8>
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	4659      	mov	r1, fp
 8011cf4:	f001 f868 	bl	8012dc8 <_Bfree>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	702b      	strb	r3, [r5, #0]
 8011cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cfe:	f10a 0001 	add.w	r0, sl, #1
 8011d02:	6018      	str	r0, [r3, #0]
 8011d04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f43f acd8 	beq.w	80116bc <_dtoa_r+0xa4>
 8011d0c:	601d      	str	r5, [r3, #0]
 8011d0e:	e4d5      	b.n	80116bc <_dtoa_r+0xa4>
 8011d10:	f8cd a01c 	str.w	sl, [sp, #28]
 8011d14:	462b      	mov	r3, r5
 8011d16:	461d      	mov	r5, r3
 8011d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d1c:	2a39      	cmp	r2, #57	; 0x39
 8011d1e:	d108      	bne.n	8011d32 <_dtoa_r+0x71a>
 8011d20:	9a00      	ldr	r2, [sp, #0]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d1f7      	bne.n	8011d16 <_dtoa_r+0x6fe>
 8011d26:	9a07      	ldr	r2, [sp, #28]
 8011d28:	9900      	ldr	r1, [sp, #0]
 8011d2a:	3201      	adds	r2, #1
 8011d2c:	9207      	str	r2, [sp, #28]
 8011d2e:	2230      	movs	r2, #48	; 0x30
 8011d30:	700a      	strb	r2, [r1, #0]
 8011d32:	781a      	ldrb	r2, [r3, #0]
 8011d34:	3201      	adds	r2, #1
 8011d36:	701a      	strb	r2, [r3, #0]
 8011d38:	e78c      	b.n	8011c54 <_dtoa_r+0x63c>
 8011d3a:	4b7f      	ldr	r3, [pc, #508]	; (8011f38 <_dtoa_r+0x920>)
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f7f3 fdcb 	bl	80058d8 <__aeabi_dmul>
 8011d42:	2200      	movs	r2, #0
 8011d44:	2300      	movs	r3, #0
 8011d46:	4606      	mov	r6, r0
 8011d48:	460f      	mov	r7, r1
 8011d4a:	f7f4 f82d 	bl	8005da8 <__aeabi_dcmpeq>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	d09b      	beq.n	8011c8a <_dtoa_r+0x672>
 8011d52:	e7cd      	b.n	8011cf0 <_dtoa_r+0x6d8>
 8011d54:	9a08      	ldr	r2, [sp, #32]
 8011d56:	2a00      	cmp	r2, #0
 8011d58:	f000 80c4 	beq.w	8011ee4 <_dtoa_r+0x8cc>
 8011d5c:	9a05      	ldr	r2, [sp, #20]
 8011d5e:	2a01      	cmp	r2, #1
 8011d60:	f300 80a8 	bgt.w	8011eb4 <_dtoa_r+0x89c>
 8011d64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d66:	2a00      	cmp	r2, #0
 8011d68:	f000 80a0 	beq.w	8011eac <_dtoa_r+0x894>
 8011d6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011d70:	9e06      	ldr	r6, [sp, #24]
 8011d72:	4645      	mov	r5, r8
 8011d74:	9a04      	ldr	r2, [sp, #16]
 8011d76:	2101      	movs	r1, #1
 8011d78:	441a      	add	r2, r3
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	4498      	add	r8, r3
 8011d7e:	9204      	str	r2, [sp, #16]
 8011d80:	f001 f928 	bl	8012fd4 <__i2b>
 8011d84:	4607      	mov	r7, r0
 8011d86:	2d00      	cmp	r5, #0
 8011d88:	dd0b      	ble.n	8011da2 <_dtoa_r+0x78a>
 8011d8a:	9b04      	ldr	r3, [sp, #16]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	dd08      	ble.n	8011da2 <_dtoa_r+0x78a>
 8011d90:	42ab      	cmp	r3, r5
 8011d92:	9a04      	ldr	r2, [sp, #16]
 8011d94:	bfa8      	it	ge
 8011d96:	462b      	movge	r3, r5
 8011d98:	eba8 0803 	sub.w	r8, r8, r3
 8011d9c:	1aed      	subs	r5, r5, r3
 8011d9e:	1ad3      	subs	r3, r2, r3
 8011da0:	9304      	str	r3, [sp, #16]
 8011da2:	9b06      	ldr	r3, [sp, #24]
 8011da4:	b1fb      	cbz	r3, 8011de6 <_dtoa_r+0x7ce>
 8011da6:	9b08      	ldr	r3, [sp, #32]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	f000 809f 	beq.w	8011eec <_dtoa_r+0x8d4>
 8011dae:	2e00      	cmp	r6, #0
 8011db0:	dd11      	ble.n	8011dd6 <_dtoa_r+0x7be>
 8011db2:	4639      	mov	r1, r7
 8011db4:	4632      	mov	r2, r6
 8011db6:	4620      	mov	r0, r4
 8011db8:	f001 f9c8 	bl	801314c <__pow5mult>
 8011dbc:	465a      	mov	r2, fp
 8011dbe:	4601      	mov	r1, r0
 8011dc0:	4607      	mov	r7, r0
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f001 f91c 	bl	8013000 <__multiply>
 8011dc8:	4659      	mov	r1, fp
 8011dca:	9007      	str	r0, [sp, #28]
 8011dcc:	4620      	mov	r0, r4
 8011dce:	f000 fffb 	bl	8012dc8 <_Bfree>
 8011dd2:	9b07      	ldr	r3, [sp, #28]
 8011dd4:	469b      	mov	fp, r3
 8011dd6:	9b06      	ldr	r3, [sp, #24]
 8011dd8:	1b9a      	subs	r2, r3, r6
 8011dda:	d004      	beq.n	8011de6 <_dtoa_r+0x7ce>
 8011ddc:	4659      	mov	r1, fp
 8011dde:	4620      	mov	r0, r4
 8011de0:	f001 f9b4 	bl	801314c <__pow5mult>
 8011de4:	4683      	mov	fp, r0
 8011de6:	2101      	movs	r1, #1
 8011de8:	4620      	mov	r0, r4
 8011dea:	f001 f8f3 	bl	8012fd4 <__i2b>
 8011dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	4606      	mov	r6, r0
 8011df4:	dd7c      	ble.n	8011ef0 <_dtoa_r+0x8d8>
 8011df6:	461a      	mov	r2, r3
 8011df8:	4601      	mov	r1, r0
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f001 f9a6 	bl	801314c <__pow5mult>
 8011e00:	9b05      	ldr	r3, [sp, #20]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	4606      	mov	r6, r0
 8011e06:	dd76      	ble.n	8011ef6 <_dtoa_r+0x8de>
 8011e08:	2300      	movs	r3, #0
 8011e0a:	9306      	str	r3, [sp, #24]
 8011e0c:	6933      	ldr	r3, [r6, #16]
 8011e0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011e12:	6918      	ldr	r0, [r3, #16]
 8011e14:	f001 f88e 	bl	8012f34 <__hi0bits>
 8011e18:	f1c0 0020 	rsb	r0, r0, #32
 8011e1c:	9b04      	ldr	r3, [sp, #16]
 8011e1e:	4418      	add	r0, r3
 8011e20:	f010 001f 	ands.w	r0, r0, #31
 8011e24:	f000 8086 	beq.w	8011f34 <_dtoa_r+0x91c>
 8011e28:	f1c0 0320 	rsb	r3, r0, #32
 8011e2c:	2b04      	cmp	r3, #4
 8011e2e:	dd7f      	ble.n	8011f30 <_dtoa_r+0x918>
 8011e30:	f1c0 001c 	rsb	r0, r0, #28
 8011e34:	9b04      	ldr	r3, [sp, #16]
 8011e36:	4403      	add	r3, r0
 8011e38:	4480      	add	r8, r0
 8011e3a:	4405      	add	r5, r0
 8011e3c:	9304      	str	r3, [sp, #16]
 8011e3e:	f1b8 0f00 	cmp.w	r8, #0
 8011e42:	dd05      	ble.n	8011e50 <_dtoa_r+0x838>
 8011e44:	4659      	mov	r1, fp
 8011e46:	4642      	mov	r2, r8
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f001 f9d9 	bl	8013200 <__lshift>
 8011e4e:	4683      	mov	fp, r0
 8011e50:	9b04      	ldr	r3, [sp, #16]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dd05      	ble.n	8011e62 <_dtoa_r+0x84a>
 8011e56:	4631      	mov	r1, r6
 8011e58:	461a      	mov	r2, r3
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f001 f9d0 	bl	8013200 <__lshift>
 8011e60:	4606      	mov	r6, r0
 8011e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d069      	beq.n	8011f3c <_dtoa_r+0x924>
 8011e68:	4631      	mov	r1, r6
 8011e6a:	4658      	mov	r0, fp
 8011e6c:	f001 fa34 	bl	80132d8 <__mcmp>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	da63      	bge.n	8011f3c <_dtoa_r+0x924>
 8011e74:	2300      	movs	r3, #0
 8011e76:	4659      	mov	r1, fp
 8011e78:	220a      	movs	r2, #10
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f000 ffc6 	bl	8012e0c <__multadd>
 8011e80:	9b08      	ldr	r3, [sp, #32]
 8011e82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e86:	4683      	mov	fp, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f000 818f 	beq.w	80121ac <_dtoa_r+0xb94>
 8011e8e:	4639      	mov	r1, r7
 8011e90:	2300      	movs	r3, #0
 8011e92:	220a      	movs	r2, #10
 8011e94:	4620      	mov	r0, r4
 8011e96:	f000 ffb9 	bl	8012e0c <__multadd>
 8011e9a:	f1b9 0f00 	cmp.w	r9, #0
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	f300 808e 	bgt.w	8011fc0 <_dtoa_r+0x9a8>
 8011ea4:	9b05      	ldr	r3, [sp, #20]
 8011ea6:	2b02      	cmp	r3, #2
 8011ea8:	dc50      	bgt.n	8011f4c <_dtoa_r+0x934>
 8011eaa:	e089      	b.n	8011fc0 <_dtoa_r+0x9a8>
 8011eac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011eae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011eb2:	e75d      	b.n	8011d70 <_dtoa_r+0x758>
 8011eb4:	9b01      	ldr	r3, [sp, #4]
 8011eb6:	1e5e      	subs	r6, r3, #1
 8011eb8:	9b06      	ldr	r3, [sp, #24]
 8011eba:	42b3      	cmp	r3, r6
 8011ebc:	bfbf      	itttt	lt
 8011ebe:	9b06      	ldrlt	r3, [sp, #24]
 8011ec0:	9606      	strlt	r6, [sp, #24]
 8011ec2:	1af2      	sublt	r2, r6, r3
 8011ec4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011ec6:	bfb6      	itet	lt
 8011ec8:	189b      	addlt	r3, r3, r2
 8011eca:	1b9e      	subge	r6, r3, r6
 8011ecc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011ece:	9b01      	ldr	r3, [sp, #4]
 8011ed0:	bfb8      	it	lt
 8011ed2:	2600      	movlt	r6, #0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	bfb5      	itete	lt
 8011ed8:	eba8 0503 	sublt.w	r5, r8, r3
 8011edc:	9b01      	ldrge	r3, [sp, #4]
 8011ede:	2300      	movlt	r3, #0
 8011ee0:	4645      	movge	r5, r8
 8011ee2:	e747      	b.n	8011d74 <_dtoa_r+0x75c>
 8011ee4:	9e06      	ldr	r6, [sp, #24]
 8011ee6:	9f08      	ldr	r7, [sp, #32]
 8011ee8:	4645      	mov	r5, r8
 8011eea:	e74c      	b.n	8011d86 <_dtoa_r+0x76e>
 8011eec:	9a06      	ldr	r2, [sp, #24]
 8011eee:	e775      	b.n	8011ddc <_dtoa_r+0x7c4>
 8011ef0:	9b05      	ldr	r3, [sp, #20]
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	dc18      	bgt.n	8011f28 <_dtoa_r+0x910>
 8011ef6:	9b02      	ldr	r3, [sp, #8]
 8011ef8:	b9b3      	cbnz	r3, 8011f28 <_dtoa_r+0x910>
 8011efa:	9b03      	ldr	r3, [sp, #12]
 8011efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f00:	b9a3      	cbnz	r3, 8011f2c <_dtoa_r+0x914>
 8011f02:	9b03      	ldr	r3, [sp, #12]
 8011f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f08:	0d1b      	lsrs	r3, r3, #20
 8011f0a:	051b      	lsls	r3, r3, #20
 8011f0c:	b12b      	cbz	r3, 8011f1a <_dtoa_r+0x902>
 8011f0e:	9b04      	ldr	r3, [sp, #16]
 8011f10:	3301      	adds	r3, #1
 8011f12:	9304      	str	r3, [sp, #16]
 8011f14:	f108 0801 	add.w	r8, r8, #1
 8011f18:	2301      	movs	r3, #1
 8011f1a:	9306      	str	r3, [sp, #24]
 8011f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f47f af74 	bne.w	8011e0c <_dtoa_r+0x7f4>
 8011f24:	2001      	movs	r0, #1
 8011f26:	e779      	b.n	8011e1c <_dtoa_r+0x804>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	e7f6      	b.n	8011f1a <_dtoa_r+0x902>
 8011f2c:	9b02      	ldr	r3, [sp, #8]
 8011f2e:	e7f4      	b.n	8011f1a <_dtoa_r+0x902>
 8011f30:	d085      	beq.n	8011e3e <_dtoa_r+0x826>
 8011f32:	4618      	mov	r0, r3
 8011f34:	301c      	adds	r0, #28
 8011f36:	e77d      	b.n	8011e34 <_dtoa_r+0x81c>
 8011f38:	40240000 	.word	0x40240000
 8011f3c:	9b01      	ldr	r3, [sp, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	dc38      	bgt.n	8011fb4 <_dtoa_r+0x99c>
 8011f42:	9b05      	ldr	r3, [sp, #20]
 8011f44:	2b02      	cmp	r3, #2
 8011f46:	dd35      	ble.n	8011fb4 <_dtoa_r+0x99c>
 8011f48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011f4c:	f1b9 0f00 	cmp.w	r9, #0
 8011f50:	d10d      	bne.n	8011f6e <_dtoa_r+0x956>
 8011f52:	4631      	mov	r1, r6
 8011f54:	464b      	mov	r3, r9
 8011f56:	2205      	movs	r2, #5
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f000 ff57 	bl	8012e0c <__multadd>
 8011f5e:	4601      	mov	r1, r0
 8011f60:	4606      	mov	r6, r0
 8011f62:	4658      	mov	r0, fp
 8011f64:	f001 f9b8 	bl	80132d8 <__mcmp>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	f73f adbd 	bgt.w	8011ae8 <_dtoa_r+0x4d0>
 8011f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f70:	9d00      	ldr	r5, [sp, #0]
 8011f72:	ea6f 0a03 	mvn.w	sl, r3
 8011f76:	f04f 0800 	mov.w	r8, #0
 8011f7a:	4631      	mov	r1, r6
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f000 ff23 	bl	8012dc8 <_Bfree>
 8011f82:	2f00      	cmp	r7, #0
 8011f84:	f43f aeb4 	beq.w	8011cf0 <_dtoa_r+0x6d8>
 8011f88:	f1b8 0f00 	cmp.w	r8, #0
 8011f8c:	d005      	beq.n	8011f9a <_dtoa_r+0x982>
 8011f8e:	45b8      	cmp	r8, r7
 8011f90:	d003      	beq.n	8011f9a <_dtoa_r+0x982>
 8011f92:	4641      	mov	r1, r8
 8011f94:	4620      	mov	r0, r4
 8011f96:	f000 ff17 	bl	8012dc8 <_Bfree>
 8011f9a:	4639      	mov	r1, r7
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	f000 ff13 	bl	8012dc8 <_Bfree>
 8011fa2:	e6a5      	b.n	8011cf0 <_dtoa_r+0x6d8>
 8011fa4:	2600      	movs	r6, #0
 8011fa6:	4637      	mov	r7, r6
 8011fa8:	e7e1      	b.n	8011f6e <_dtoa_r+0x956>
 8011faa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011fac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011fb0:	4637      	mov	r7, r6
 8011fb2:	e599      	b.n	8011ae8 <_dtoa_r+0x4d0>
 8011fb4:	9b08      	ldr	r3, [sp, #32]
 8011fb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f000 80fd 	beq.w	80121ba <_dtoa_r+0xba2>
 8011fc0:	2d00      	cmp	r5, #0
 8011fc2:	dd05      	ble.n	8011fd0 <_dtoa_r+0x9b8>
 8011fc4:	4639      	mov	r1, r7
 8011fc6:	462a      	mov	r2, r5
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f001 f919 	bl	8013200 <__lshift>
 8011fce:	4607      	mov	r7, r0
 8011fd0:	9b06      	ldr	r3, [sp, #24]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d05c      	beq.n	8012090 <_dtoa_r+0xa78>
 8011fd6:	6879      	ldr	r1, [r7, #4]
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 feb5 	bl	8012d48 <_Balloc>
 8011fde:	4605      	mov	r5, r0
 8011fe0:	b928      	cbnz	r0, 8011fee <_dtoa_r+0x9d6>
 8011fe2:	4b80      	ldr	r3, [pc, #512]	; (80121e4 <_dtoa_r+0xbcc>)
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011fea:	f7ff bb2e 	b.w	801164a <_dtoa_r+0x32>
 8011fee:	693a      	ldr	r2, [r7, #16]
 8011ff0:	3202      	adds	r2, #2
 8011ff2:	0092      	lsls	r2, r2, #2
 8011ff4:	f107 010c 	add.w	r1, r7, #12
 8011ff8:	300c      	adds	r0, #12
 8011ffa:	f7fd fbc7 	bl	800f78c <memcpy>
 8011ffe:	2201      	movs	r2, #1
 8012000:	4629      	mov	r1, r5
 8012002:	4620      	mov	r0, r4
 8012004:	f001 f8fc 	bl	8013200 <__lshift>
 8012008:	9b00      	ldr	r3, [sp, #0]
 801200a:	3301      	adds	r3, #1
 801200c:	9301      	str	r3, [sp, #4]
 801200e:	9b00      	ldr	r3, [sp, #0]
 8012010:	444b      	add	r3, r9
 8012012:	9307      	str	r3, [sp, #28]
 8012014:	9b02      	ldr	r3, [sp, #8]
 8012016:	f003 0301 	and.w	r3, r3, #1
 801201a:	46b8      	mov	r8, r7
 801201c:	9306      	str	r3, [sp, #24]
 801201e:	4607      	mov	r7, r0
 8012020:	9b01      	ldr	r3, [sp, #4]
 8012022:	4631      	mov	r1, r6
 8012024:	3b01      	subs	r3, #1
 8012026:	4658      	mov	r0, fp
 8012028:	9302      	str	r3, [sp, #8]
 801202a:	f7ff fa67 	bl	80114fc <quorem>
 801202e:	4603      	mov	r3, r0
 8012030:	3330      	adds	r3, #48	; 0x30
 8012032:	9004      	str	r0, [sp, #16]
 8012034:	4641      	mov	r1, r8
 8012036:	4658      	mov	r0, fp
 8012038:	9308      	str	r3, [sp, #32]
 801203a:	f001 f94d 	bl	80132d8 <__mcmp>
 801203e:	463a      	mov	r2, r7
 8012040:	4681      	mov	r9, r0
 8012042:	4631      	mov	r1, r6
 8012044:	4620      	mov	r0, r4
 8012046:	f001 f963 	bl	8013310 <__mdiff>
 801204a:	68c2      	ldr	r2, [r0, #12]
 801204c:	9b08      	ldr	r3, [sp, #32]
 801204e:	4605      	mov	r5, r0
 8012050:	bb02      	cbnz	r2, 8012094 <_dtoa_r+0xa7c>
 8012052:	4601      	mov	r1, r0
 8012054:	4658      	mov	r0, fp
 8012056:	f001 f93f 	bl	80132d8 <__mcmp>
 801205a:	9b08      	ldr	r3, [sp, #32]
 801205c:	4602      	mov	r2, r0
 801205e:	4629      	mov	r1, r5
 8012060:	4620      	mov	r0, r4
 8012062:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012066:	f000 feaf 	bl	8012dc8 <_Bfree>
 801206a:	9b05      	ldr	r3, [sp, #20]
 801206c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801206e:	9d01      	ldr	r5, [sp, #4]
 8012070:	ea43 0102 	orr.w	r1, r3, r2
 8012074:	9b06      	ldr	r3, [sp, #24]
 8012076:	430b      	orrs	r3, r1
 8012078:	9b08      	ldr	r3, [sp, #32]
 801207a:	d10d      	bne.n	8012098 <_dtoa_r+0xa80>
 801207c:	2b39      	cmp	r3, #57	; 0x39
 801207e:	d029      	beq.n	80120d4 <_dtoa_r+0xabc>
 8012080:	f1b9 0f00 	cmp.w	r9, #0
 8012084:	dd01      	ble.n	801208a <_dtoa_r+0xa72>
 8012086:	9b04      	ldr	r3, [sp, #16]
 8012088:	3331      	adds	r3, #49	; 0x31
 801208a:	9a02      	ldr	r2, [sp, #8]
 801208c:	7013      	strb	r3, [r2, #0]
 801208e:	e774      	b.n	8011f7a <_dtoa_r+0x962>
 8012090:	4638      	mov	r0, r7
 8012092:	e7b9      	b.n	8012008 <_dtoa_r+0x9f0>
 8012094:	2201      	movs	r2, #1
 8012096:	e7e2      	b.n	801205e <_dtoa_r+0xa46>
 8012098:	f1b9 0f00 	cmp.w	r9, #0
 801209c:	db06      	blt.n	80120ac <_dtoa_r+0xa94>
 801209e:	9905      	ldr	r1, [sp, #20]
 80120a0:	ea41 0909 	orr.w	r9, r1, r9
 80120a4:	9906      	ldr	r1, [sp, #24]
 80120a6:	ea59 0101 	orrs.w	r1, r9, r1
 80120aa:	d120      	bne.n	80120ee <_dtoa_r+0xad6>
 80120ac:	2a00      	cmp	r2, #0
 80120ae:	ddec      	ble.n	801208a <_dtoa_r+0xa72>
 80120b0:	4659      	mov	r1, fp
 80120b2:	2201      	movs	r2, #1
 80120b4:	4620      	mov	r0, r4
 80120b6:	9301      	str	r3, [sp, #4]
 80120b8:	f001 f8a2 	bl	8013200 <__lshift>
 80120bc:	4631      	mov	r1, r6
 80120be:	4683      	mov	fp, r0
 80120c0:	f001 f90a 	bl	80132d8 <__mcmp>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	9b01      	ldr	r3, [sp, #4]
 80120c8:	dc02      	bgt.n	80120d0 <_dtoa_r+0xab8>
 80120ca:	d1de      	bne.n	801208a <_dtoa_r+0xa72>
 80120cc:	07da      	lsls	r2, r3, #31
 80120ce:	d5dc      	bpl.n	801208a <_dtoa_r+0xa72>
 80120d0:	2b39      	cmp	r3, #57	; 0x39
 80120d2:	d1d8      	bne.n	8012086 <_dtoa_r+0xa6e>
 80120d4:	9a02      	ldr	r2, [sp, #8]
 80120d6:	2339      	movs	r3, #57	; 0x39
 80120d8:	7013      	strb	r3, [r2, #0]
 80120da:	462b      	mov	r3, r5
 80120dc:	461d      	mov	r5, r3
 80120de:	3b01      	subs	r3, #1
 80120e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80120e4:	2a39      	cmp	r2, #57	; 0x39
 80120e6:	d050      	beq.n	801218a <_dtoa_r+0xb72>
 80120e8:	3201      	adds	r2, #1
 80120ea:	701a      	strb	r2, [r3, #0]
 80120ec:	e745      	b.n	8011f7a <_dtoa_r+0x962>
 80120ee:	2a00      	cmp	r2, #0
 80120f0:	dd03      	ble.n	80120fa <_dtoa_r+0xae2>
 80120f2:	2b39      	cmp	r3, #57	; 0x39
 80120f4:	d0ee      	beq.n	80120d4 <_dtoa_r+0xabc>
 80120f6:	3301      	adds	r3, #1
 80120f8:	e7c7      	b.n	801208a <_dtoa_r+0xa72>
 80120fa:	9a01      	ldr	r2, [sp, #4]
 80120fc:	9907      	ldr	r1, [sp, #28]
 80120fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012102:	428a      	cmp	r2, r1
 8012104:	d02a      	beq.n	801215c <_dtoa_r+0xb44>
 8012106:	4659      	mov	r1, fp
 8012108:	2300      	movs	r3, #0
 801210a:	220a      	movs	r2, #10
 801210c:	4620      	mov	r0, r4
 801210e:	f000 fe7d 	bl	8012e0c <__multadd>
 8012112:	45b8      	cmp	r8, r7
 8012114:	4683      	mov	fp, r0
 8012116:	f04f 0300 	mov.w	r3, #0
 801211a:	f04f 020a 	mov.w	r2, #10
 801211e:	4641      	mov	r1, r8
 8012120:	4620      	mov	r0, r4
 8012122:	d107      	bne.n	8012134 <_dtoa_r+0xb1c>
 8012124:	f000 fe72 	bl	8012e0c <__multadd>
 8012128:	4680      	mov	r8, r0
 801212a:	4607      	mov	r7, r0
 801212c:	9b01      	ldr	r3, [sp, #4]
 801212e:	3301      	adds	r3, #1
 8012130:	9301      	str	r3, [sp, #4]
 8012132:	e775      	b.n	8012020 <_dtoa_r+0xa08>
 8012134:	f000 fe6a 	bl	8012e0c <__multadd>
 8012138:	4639      	mov	r1, r7
 801213a:	4680      	mov	r8, r0
 801213c:	2300      	movs	r3, #0
 801213e:	220a      	movs	r2, #10
 8012140:	4620      	mov	r0, r4
 8012142:	f000 fe63 	bl	8012e0c <__multadd>
 8012146:	4607      	mov	r7, r0
 8012148:	e7f0      	b.n	801212c <_dtoa_r+0xb14>
 801214a:	f1b9 0f00 	cmp.w	r9, #0
 801214e:	9a00      	ldr	r2, [sp, #0]
 8012150:	bfcc      	ite	gt
 8012152:	464d      	movgt	r5, r9
 8012154:	2501      	movle	r5, #1
 8012156:	4415      	add	r5, r2
 8012158:	f04f 0800 	mov.w	r8, #0
 801215c:	4659      	mov	r1, fp
 801215e:	2201      	movs	r2, #1
 8012160:	4620      	mov	r0, r4
 8012162:	9301      	str	r3, [sp, #4]
 8012164:	f001 f84c 	bl	8013200 <__lshift>
 8012168:	4631      	mov	r1, r6
 801216a:	4683      	mov	fp, r0
 801216c:	f001 f8b4 	bl	80132d8 <__mcmp>
 8012170:	2800      	cmp	r0, #0
 8012172:	dcb2      	bgt.n	80120da <_dtoa_r+0xac2>
 8012174:	d102      	bne.n	801217c <_dtoa_r+0xb64>
 8012176:	9b01      	ldr	r3, [sp, #4]
 8012178:	07db      	lsls	r3, r3, #31
 801217a:	d4ae      	bmi.n	80120da <_dtoa_r+0xac2>
 801217c:	462b      	mov	r3, r5
 801217e:	461d      	mov	r5, r3
 8012180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012184:	2a30      	cmp	r2, #48	; 0x30
 8012186:	d0fa      	beq.n	801217e <_dtoa_r+0xb66>
 8012188:	e6f7      	b.n	8011f7a <_dtoa_r+0x962>
 801218a:	9a00      	ldr	r2, [sp, #0]
 801218c:	429a      	cmp	r2, r3
 801218e:	d1a5      	bne.n	80120dc <_dtoa_r+0xac4>
 8012190:	f10a 0a01 	add.w	sl, sl, #1
 8012194:	2331      	movs	r3, #49	; 0x31
 8012196:	e779      	b.n	801208c <_dtoa_r+0xa74>
 8012198:	4b13      	ldr	r3, [pc, #76]	; (80121e8 <_dtoa_r+0xbd0>)
 801219a:	f7ff baaf 	b.w	80116fc <_dtoa_r+0xe4>
 801219e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f47f aa86 	bne.w	80116b2 <_dtoa_r+0x9a>
 80121a6:	4b11      	ldr	r3, [pc, #68]	; (80121ec <_dtoa_r+0xbd4>)
 80121a8:	f7ff baa8 	b.w	80116fc <_dtoa_r+0xe4>
 80121ac:	f1b9 0f00 	cmp.w	r9, #0
 80121b0:	dc03      	bgt.n	80121ba <_dtoa_r+0xba2>
 80121b2:	9b05      	ldr	r3, [sp, #20]
 80121b4:	2b02      	cmp	r3, #2
 80121b6:	f73f aec9 	bgt.w	8011f4c <_dtoa_r+0x934>
 80121ba:	9d00      	ldr	r5, [sp, #0]
 80121bc:	4631      	mov	r1, r6
 80121be:	4658      	mov	r0, fp
 80121c0:	f7ff f99c 	bl	80114fc <quorem>
 80121c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80121c8:	f805 3b01 	strb.w	r3, [r5], #1
 80121cc:	9a00      	ldr	r2, [sp, #0]
 80121ce:	1aaa      	subs	r2, r5, r2
 80121d0:	4591      	cmp	r9, r2
 80121d2:	ddba      	ble.n	801214a <_dtoa_r+0xb32>
 80121d4:	4659      	mov	r1, fp
 80121d6:	2300      	movs	r3, #0
 80121d8:	220a      	movs	r2, #10
 80121da:	4620      	mov	r0, r4
 80121dc:	f000 fe16 	bl	8012e0c <__multadd>
 80121e0:	4683      	mov	fp, r0
 80121e2:	e7eb      	b.n	80121bc <_dtoa_r+0xba4>
 80121e4:	08100484 	.word	0x08100484
 80121e8:	08100280 	.word	0x08100280
 80121ec:	08100401 	.word	0x08100401

080121f0 <__sflush_r>:
 80121f0:	898a      	ldrh	r2, [r1, #12]
 80121f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f6:	4605      	mov	r5, r0
 80121f8:	0710      	lsls	r0, r2, #28
 80121fa:	460c      	mov	r4, r1
 80121fc:	d458      	bmi.n	80122b0 <__sflush_r+0xc0>
 80121fe:	684b      	ldr	r3, [r1, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	dc05      	bgt.n	8012210 <__sflush_r+0x20>
 8012204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012206:	2b00      	cmp	r3, #0
 8012208:	dc02      	bgt.n	8012210 <__sflush_r+0x20>
 801220a:	2000      	movs	r0, #0
 801220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012212:	2e00      	cmp	r6, #0
 8012214:	d0f9      	beq.n	801220a <__sflush_r+0x1a>
 8012216:	2300      	movs	r3, #0
 8012218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801221c:	682f      	ldr	r7, [r5, #0]
 801221e:	602b      	str	r3, [r5, #0]
 8012220:	d032      	beq.n	8012288 <__sflush_r+0x98>
 8012222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012224:	89a3      	ldrh	r3, [r4, #12]
 8012226:	075a      	lsls	r2, r3, #29
 8012228:	d505      	bpl.n	8012236 <__sflush_r+0x46>
 801222a:	6863      	ldr	r3, [r4, #4]
 801222c:	1ac0      	subs	r0, r0, r3
 801222e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012230:	b10b      	cbz	r3, 8012236 <__sflush_r+0x46>
 8012232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012234:	1ac0      	subs	r0, r0, r3
 8012236:	2300      	movs	r3, #0
 8012238:	4602      	mov	r2, r0
 801223a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801223c:	6a21      	ldr	r1, [r4, #32]
 801223e:	4628      	mov	r0, r5
 8012240:	47b0      	blx	r6
 8012242:	1c43      	adds	r3, r0, #1
 8012244:	89a3      	ldrh	r3, [r4, #12]
 8012246:	d106      	bne.n	8012256 <__sflush_r+0x66>
 8012248:	6829      	ldr	r1, [r5, #0]
 801224a:	291d      	cmp	r1, #29
 801224c:	d82c      	bhi.n	80122a8 <__sflush_r+0xb8>
 801224e:	4a2a      	ldr	r2, [pc, #168]	; (80122f8 <__sflush_r+0x108>)
 8012250:	40ca      	lsrs	r2, r1
 8012252:	07d6      	lsls	r6, r2, #31
 8012254:	d528      	bpl.n	80122a8 <__sflush_r+0xb8>
 8012256:	2200      	movs	r2, #0
 8012258:	6062      	str	r2, [r4, #4]
 801225a:	04d9      	lsls	r1, r3, #19
 801225c:	6922      	ldr	r2, [r4, #16]
 801225e:	6022      	str	r2, [r4, #0]
 8012260:	d504      	bpl.n	801226c <__sflush_r+0x7c>
 8012262:	1c42      	adds	r2, r0, #1
 8012264:	d101      	bne.n	801226a <__sflush_r+0x7a>
 8012266:	682b      	ldr	r3, [r5, #0]
 8012268:	b903      	cbnz	r3, 801226c <__sflush_r+0x7c>
 801226a:	6560      	str	r0, [r4, #84]	; 0x54
 801226c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801226e:	602f      	str	r7, [r5, #0]
 8012270:	2900      	cmp	r1, #0
 8012272:	d0ca      	beq.n	801220a <__sflush_r+0x1a>
 8012274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012278:	4299      	cmp	r1, r3
 801227a:	d002      	beq.n	8012282 <__sflush_r+0x92>
 801227c:	4628      	mov	r0, r5
 801227e:	f001 fa2d 	bl	80136dc <_free_r>
 8012282:	2000      	movs	r0, #0
 8012284:	6360      	str	r0, [r4, #52]	; 0x34
 8012286:	e7c1      	b.n	801220c <__sflush_r+0x1c>
 8012288:	6a21      	ldr	r1, [r4, #32]
 801228a:	2301      	movs	r3, #1
 801228c:	4628      	mov	r0, r5
 801228e:	47b0      	blx	r6
 8012290:	1c41      	adds	r1, r0, #1
 8012292:	d1c7      	bne.n	8012224 <__sflush_r+0x34>
 8012294:	682b      	ldr	r3, [r5, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d0c4      	beq.n	8012224 <__sflush_r+0x34>
 801229a:	2b1d      	cmp	r3, #29
 801229c:	d001      	beq.n	80122a2 <__sflush_r+0xb2>
 801229e:	2b16      	cmp	r3, #22
 80122a0:	d101      	bne.n	80122a6 <__sflush_r+0xb6>
 80122a2:	602f      	str	r7, [r5, #0]
 80122a4:	e7b1      	b.n	801220a <__sflush_r+0x1a>
 80122a6:	89a3      	ldrh	r3, [r4, #12]
 80122a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122ac:	81a3      	strh	r3, [r4, #12]
 80122ae:	e7ad      	b.n	801220c <__sflush_r+0x1c>
 80122b0:	690f      	ldr	r7, [r1, #16]
 80122b2:	2f00      	cmp	r7, #0
 80122b4:	d0a9      	beq.n	801220a <__sflush_r+0x1a>
 80122b6:	0793      	lsls	r3, r2, #30
 80122b8:	680e      	ldr	r6, [r1, #0]
 80122ba:	bf08      	it	eq
 80122bc:	694b      	ldreq	r3, [r1, #20]
 80122be:	600f      	str	r7, [r1, #0]
 80122c0:	bf18      	it	ne
 80122c2:	2300      	movne	r3, #0
 80122c4:	eba6 0807 	sub.w	r8, r6, r7
 80122c8:	608b      	str	r3, [r1, #8]
 80122ca:	f1b8 0f00 	cmp.w	r8, #0
 80122ce:	dd9c      	ble.n	801220a <__sflush_r+0x1a>
 80122d0:	6a21      	ldr	r1, [r4, #32]
 80122d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80122d4:	4643      	mov	r3, r8
 80122d6:	463a      	mov	r2, r7
 80122d8:	4628      	mov	r0, r5
 80122da:	47b0      	blx	r6
 80122dc:	2800      	cmp	r0, #0
 80122de:	dc06      	bgt.n	80122ee <__sflush_r+0xfe>
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122e6:	81a3      	strh	r3, [r4, #12]
 80122e8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ec:	e78e      	b.n	801220c <__sflush_r+0x1c>
 80122ee:	4407      	add	r7, r0
 80122f0:	eba8 0800 	sub.w	r8, r8, r0
 80122f4:	e7e9      	b.n	80122ca <__sflush_r+0xda>
 80122f6:	bf00      	nop
 80122f8:	20400001 	.word	0x20400001

080122fc <_fflush_r>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	690b      	ldr	r3, [r1, #16]
 8012300:	4605      	mov	r5, r0
 8012302:	460c      	mov	r4, r1
 8012304:	b913      	cbnz	r3, 801230c <_fflush_r+0x10>
 8012306:	2500      	movs	r5, #0
 8012308:	4628      	mov	r0, r5
 801230a:	bd38      	pop	{r3, r4, r5, pc}
 801230c:	b118      	cbz	r0, 8012316 <_fflush_r+0x1a>
 801230e:	6983      	ldr	r3, [r0, #24]
 8012310:	b90b      	cbnz	r3, 8012316 <_fflush_r+0x1a>
 8012312:	f000 f887 	bl	8012424 <__sinit>
 8012316:	4b14      	ldr	r3, [pc, #80]	; (8012368 <_fflush_r+0x6c>)
 8012318:	429c      	cmp	r4, r3
 801231a:	d11b      	bne.n	8012354 <_fflush_r+0x58>
 801231c:	686c      	ldr	r4, [r5, #4]
 801231e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d0ef      	beq.n	8012306 <_fflush_r+0xa>
 8012326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012328:	07d0      	lsls	r0, r2, #31
 801232a:	d404      	bmi.n	8012336 <_fflush_r+0x3a>
 801232c:	0599      	lsls	r1, r3, #22
 801232e:	d402      	bmi.n	8012336 <_fflush_r+0x3a>
 8012330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012332:	f000 fc88 	bl	8012c46 <__retarget_lock_acquire_recursive>
 8012336:	4628      	mov	r0, r5
 8012338:	4621      	mov	r1, r4
 801233a:	f7ff ff59 	bl	80121f0 <__sflush_r>
 801233e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012340:	07da      	lsls	r2, r3, #31
 8012342:	4605      	mov	r5, r0
 8012344:	d4e0      	bmi.n	8012308 <_fflush_r+0xc>
 8012346:	89a3      	ldrh	r3, [r4, #12]
 8012348:	059b      	lsls	r3, r3, #22
 801234a:	d4dd      	bmi.n	8012308 <_fflush_r+0xc>
 801234c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801234e:	f000 fc7b 	bl	8012c48 <__retarget_lock_release_recursive>
 8012352:	e7d9      	b.n	8012308 <_fflush_r+0xc>
 8012354:	4b05      	ldr	r3, [pc, #20]	; (801236c <_fflush_r+0x70>)
 8012356:	429c      	cmp	r4, r3
 8012358:	d101      	bne.n	801235e <_fflush_r+0x62>
 801235a:	68ac      	ldr	r4, [r5, #8]
 801235c:	e7df      	b.n	801231e <_fflush_r+0x22>
 801235e:	4b04      	ldr	r3, [pc, #16]	; (8012370 <_fflush_r+0x74>)
 8012360:	429c      	cmp	r4, r3
 8012362:	bf08      	it	eq
 8012364:	68ec      	ldreq	r4, [r5, #12]
 8012366:	e7da      	b.n	801231e <_fflush_r+0x22>
 8012368:	081004b8 	.word	0x081004b8
 801236c:	081004d8 	.word	0x081004d8
 8012370:	08100498 	.word	0x08100498

08012374 <std>:
 8012374:	2300      	movs	r3, #0
 8012376:	b510      	push	{r4, lr}
 8012378:	4604      	mov	r4, r0
 801237a:	e9c0 3300 	strd	r3, r3, [r0]
 801237e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012382:	6083      	str	r3, [r0, #8]
 8012384:	8181      	strh	r1, [r0, #12]
 8012386:	6643      	str	r3, [r0, #100]	; 0x64
 8012388:	81c2      	strh	r2, [r0, #14]
 801238a:	6183      	str	r3, [r0, #24]
 801238c:	4619      	mov	r1, r3
 801238e:	2208      	movs	r2, #8
 8012390:	305c      	adds	r0, #92	; 0x5c
 8012392:	f7fd fa09 	bl	800f7a8 <memset>
 8012396:	4b05      	ldr	r3, [pc, #20]	; (80123ac <std+0x38>)
 8012398:	6263      	str	r3, [r4, #36]	; 0x24
 801239a:	4b05      	ldr	r3, [pc, #20]	; (80123b0 <std+0x3c>)
 801239c:	62a3      	str	r3, [r4, #40]	; 0x28
 801239e:	4b05      	ldr	r3, [pc, #20]	; (80123b4 <std+0x40>)
 80123a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123a2:	4b05      	ldr	r3, [pc, #20]	; (80123b8 <std+0x44>)
 80123a4:	6224      	str	r4, [r4, #32]
 80123a6:	6323      	str	r3, [r4, #48]	; 0x30
 80123a8:	bd10      	pop	{r4, pc}
 80123aa:	bf00      	nop
 80123ac:	08013dd1 	.word	0x08013dd1
 80123b0:	08013df3 	.word	0x08013df3
 80123b4:	08013e2b 	.word	0x08013e2b
 80123b8:	08013e4f 	.word	0x08013e4f

080123bc <_cleanup_r>:
 80123bc:	4901      	ldr	r1, [pc, #4]	; (80123c4 <_cleanup_r+0x8>)
 80123be:	f000 b8af 	b.w	8012520 <_fwalk_reent>
 80123c2:	bf00      	nop
 80123c4:	080122fd 	.word	0x080122fd

080123c8 <__sfmoreglue>:
 80123c8:	b570      	push	{r4, r5, r6, lr}
 80123ca:	1e4a      	subs	r2, r1, #1
 80123cc:	2568      	movs	r5, #104	; 0x68
 80123ce:	4355      	muls	r5, r2
 80123d0:	460e      	mov	r6, r1
 80123d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80123d6:	f001 f9d1 	bl	801377c <_malloc_r>
 80123da:	4604      	mov	r4, r0
 80123dc:	b140      	cbz	r0, 80123f0 <__sfmoreglue+0x28>
 80123de:	2100      	movs	r1, #0
 80123e0:	e9c0 1600 	strd	r1, r6, [r0]
 80123e4:	300c      	adds	r0, #12
 80123e6:	60a0      	str	r0, [r4, #8]
 80123e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80123ec:	f7fd f9dc 	bl	800f7a8 <memset>
 80123f0:	4620      	mov	r0, r4
 80123f2:	bd70      	pop	{r4, r5, r6, pc}

080123f4 <__sfp_lock_acquire>:
 80123f4:	4801      	ldr	r0, [pc, #4]	; (80123fc <__sfp_lock_acquire+0x8>)
 80123f6:	f000 bc26 	b.w	8012c46 <__retarget_lock_acquire_recursive>
 80123fa:	bf00      	nop
 80123fc:	20001570 	.word	0x20001570

08012400 <__sfp_lock_release>:
 8012400:	4801      	ldr	r0, [pc, #4]	; (8012408 <__sfp_lock_release+0x8>)
 8012402:	f000 bc21 	b.w	8012c48 <__retarget_lock_release_recursive>
 8012406:	bf00      	nop
 8012408:	20001570 	.word	0x20001570

0801240c <__sinit_lock_acquire>:
 801240c:	4801      	ldr	r0, [pc, #4]	; (8012414 <__sinit_lock_acquire+0x8>)
 801240e:	f000 bc1a 	b.w	8012c46 <__retarget_lock_acquire_recursive>
 8012412:	bf00      	nop
 8012414:	2000156b 	.word	0x2000156b

08012418 <__sinit_lock_release>:
 8012418:	4801      	ldr	r0, [pc, #4]	; (8012420 <__sinit_lock_release+0x8>)
 801241a:	f000 bc15 	b.w	8012c48 <__retarget_lock_release_recursive>
 801241e:	bf00      	nop
 8012420:	2000156b 	.word	0x2000156b

08012424 <__sinit>:
 8012424:	b510      	push	{r4, lr}
 8012426:	4604      	mov	r4, r0
 8012428:	f7ff fff0 	bl	801240c <__sinit_lock_acquire>
 801242c:	69a3      	ldr	r3, [r4, #24]
 801242e:	b11b      	cbz	r3, 8012438 <__sinit+0x14>
 8012430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012434:	f7ff bff0 	b.w	8012418 <__sinit_lock_release>
 8012438:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801243c:	6523      	str	r3, [r4, #80]	; 0x50
 801243e:	4b13      	ldr	r3, [pc, #76]	; (801248c <__sinit+0x68>)
 8012440:	4a13      	ldr	r2, [pc, #76]	; (8012490 <__sinit+0x6c>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	62a2      	str	r2, [r4, #40]	; 0x28
 8012446:	42a3      	cmp	r3, r4
 8012448:	bf04      	itt	eq
 801244a:	2301      	moveq	r3, #1
 801244c:	61a3      	streq	r3, [r4, #24]
 801244e:	4620      	mov	r0, r4
 8012450:	f000 f820 	bl	8012494 <__sfp>
 8012454:	6060      	str	r0, [r4, #4]
 8012456:	4620      	mov	r0, r4
 8012458:	f000 f81c 	bl	8012494 <__sfp>
 801245c:	60a0      	str	r0, [r4, #8]
 801245e:	4620      	mov	r0, r4
 8012460:	f000 f818 	bl	8012494 <__sfp>
 8012464:	2200      	movs	r2, #0
 8012466:	60e0      	str	r0, [r4, #12]
 8012468:	2104      	movs	r1, #4
 801246a:	6860      	ldr	r0, [r4, #4]
 801246c:	f7ff ff82 	bl	8012374 <std>
 8012470:	68a0      	ldr	r0, [r4, #8]
 8012472:	2201      	movs	r2, #1
 8012474:	2109      	movs	r1, #9
 8012476:	f7ff ff7d 	bl	8012374 <std>
 801247a:	68e0      	ldr	r0, [r4, #12]
 801247c:	2202      	movs	r2, #2
 801247e:	2112      	movs	r1, #18
 8012480:	f7ff ff78 	bl	8012374 <std>
 8012484:	2301      	movs	r3, #1
 8012486:	61a3      	str	r3, [r4, #24]
 8012488:	e7d2      	b.n	8012430 <__sinit+0xc>
 801248a:	bf00      	nop
 801248c:	0810026c 	.word	0x0810026c
 8012490:	080123bd 	.word	0x080123bd

08012494 <__sfp>:
 8012494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012496:	4607      	mov	r7, r0
 8012498:	f7ff ffac 	bl	80123f4 <__sfp_lock_acquire>
 801249c:	4b1e      	ldr	r3, [pc, #120]	; (8012518 <__sfp+0x84>)
 801249e:	681e      	ldr	r6, [r3, #0]
 80124a0:	69b3      	ldr	r3, [r6, #24]
 80124a2:	b913      	cbnz	r3, 80124aa <__sfp+0x16>
 80124a4:	4630      	mov	r0, r6
 80124a6:	f7ff ffbd 	bl	8012424 <__sinit>
 80124aa:	3648      	adds	r6, #72	; 0x48
 80124ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80124b0:	3b01      	subs	r3, #1
 80124b2:	d503      	bpl.n	80124bc <__sfp+0x28>
 80124b4:	6833      	ldr	r3, [r6, #0]
 80124b6:	b30b      	cbz	r3, 80124fc <__sfp+0x68>
 80124b8:	6836      	ldr	r6, [r6, #0]
 80124ba:	e7f7      	b.n	80124ac <__sfp+0x18>
 80124bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80124c0:	b9d5      	cbnz	r5, 80124f8 <__sfp+0x64>
 80124c2:	4b16      	ldr	r3, [pc, #88]	; (801251c <__sfp+0x88>)
 80124c4:	60e3      	str	r3, [r4, #12]
 80124c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80124ca:	6665      	str	r5, [r4, #100]	; 0x64
 80124cc:	f000 fbba 	bl	8012c44 <__retarget_lock_init_recursive>
 80124d0:	f7ff ff96 	bl	8012400 <__sfp_lock_release>
 80124d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80124d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80124dc:	6025      	str	r5, [r4, #0]
 80124de:	61a5      	str	r5, [r4, #24]
 80124e0:	2208      	movs	r2, #8
 80124e2:	4629      	mov	r1, r5
 80124e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80124e8:	f7fd f95e 	bl	800f7a8 <memset>
 80124ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80124f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80124f4:	4620      	mov	r0, r4
 80124f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124f8:	3468      	adds	r4, #104	; 0x68
 80124fa:	e7d9      	b.n	80124b0 <__sfp+0x1c>
 80124fc:	2104      	movs	r1, #4
 80124fe:	4638      	mov	r0, r7
 8012500:	f7ff ff62 	bl	80123c8 <__sfmoreglue>
 8012504:	4604      	mov	r4, r0
 8012506:	6030      	str	r0, [r6, #0]
 8012508:	2800      	cmp	r0, #0
 801250a:	d1d5      	bne.n	80124b8 <__sfp+0x24>
 801250c:	f7ff ff78 	bl	8012400 <__sfp_lock_release>
 8012510:	230c      	movs	r3, #12
 8012512:	603b      	str	r3, [r7, #0]
 8012514:	e7ee      	b.n	80124f4 <__sfp+0x60>
 8012516:	bf00      	nop
 8012518:	0810026c 	.word	0x0810026c
 801251c:	ffff0001 	.word	0xffff0001

08012520 <_fwalk_reent>:
 8012520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012524:	4606      	mov	r6, r0
 8012526:	4688      	mov	r8, r1
 8012528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801252c:	2700      	movs	r7, #0
 801252e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012532:	f1b9 0901 	subs.w	r9, r9, #1
 8012536:	d505      	bpl.n	8012544 <_fwalk_reent+0x24>
 8012538:	6824      	ldr	r4, [r4, #0]
 801253a:	2c00      	cmp	r4, #0
 801253c:	d1f7      	bne.n	801252e <_fwalk_reent+0xe>
 801253e:	4638      	mov	r0, r7
 8012540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012544:	89ab      	ldrh	r3, [r5, #12]
 8012546:	2b01      	cmp	r3, #1
 8012548:	d907      	bls.n	801255a <_fwalk_reent+0x3a>
 801254a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801254e:	3301      	adds	r3, #1
 8012550:	d003      	beq.n	801255a <_fwalk_reent+0x3a>
 8012552:	4629      	mov	r1, r5
 8012554:	4630      	mov	r0, r6
 8012556:	47c0      	blx	r8
 8012558:	4307      	orrs	r7, r0
 801255a:	3568      	adds	r5, #104	; 0x68
 801255c:	e7e9      	b.n	8012532 <_fwalk_reent+0x12>

0801255e <rshift>:
 801255e:	6903      	ldr	r3, [r0, #16]
 8012560:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012568:	ea4f 1261 	mov.w	r2, r1, asr #5
 801256c:	f100 0414 	add.w	r4, r0, #20
 8012570:	dd45      	ble.n	80125fe <rshift+0xa0>
 8012572:	f011 011f 	ands.w	r1, r1, #31
 8012576:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801257a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801257e:	d10c      	bne.n	801259a <rshift+0x3c>
 8012580:	f100 0710 	add.w	r7, r0, #16
 8012584:	4629      	mov	r1, r5
 8012586:	42b1      	cmp	r1, r6
 8012588:	d334      	bcc.n	80125f4 <rshift+0x96>
 801258a:	1a9b      	subs	r3, r3, r2
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	1eea      	subs	r2, r5, #3
 8012590:	4296      	cmp	r6, r2
 8012592:	bf38      	it	cc
 8012594:	2300      	movcc	r3, #0
 8012596:	4423      	add	r3, r4
 8012598:	e015      	b.n	80125c6 <rshift+0x68>
 801259a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801259e:	f1c1 0820 	rsb	r8, r1, #32
 80125a2:	40cf      	lsrs	r7, r1
 80125a4:	f105 0e04 	add.w	lr, r5, #4
 80125a8:	46a1      	mov	r9, r4
 80125aa:	4576      	cmp	r6, lr
 80125ac:	46f4      	mov	ip, lr
 80125ae:	d815      	bhi.n	80125dc <rshift+0x7e>
 80125b0:	1a9b      	subs	r3, r3, r2
 80125b2:	009a      	lsls	r2, r3, #2
 80125b4:	3a04      	subs	r2, #4
 80125b6:	3501      	adds	r5, #1
 80125b8:	42ae      	cmp	r6, r5
 80125ba:	bf38      	it	cc
 80125bc:	2200      	movcc	r2, #0
 80125be:	18a3      	adds	r3, r4, r2
 80125c0:	50a7      	str	r7, [r4, r2]
 80125c2:	b107      	cbz	r7, 80125c6 <rshift+0x68>
 80125c4:	3304      	adds	r3, #4
 80125c6:	1b1a      	subs	r2, r3, r4
 80125c8:	42a3      	cmp	r3, r4
 80125ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80125ce:	bf08      	it	eq
 80125d0:	2300      	moveq	r3, #0
 80125d2:	6102      	str	r2, [r0, #16]
 80125d4:	bf08      	it	eq
 80125d6:	6143      	streq	r3, [r0, #20]
 80125d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125dc:	f8dc c000 	ldr.w	ip, [ip]
 80125e0:	fa0c fc08 	lsl.w	ip, ip, r8
 80125e4:	ea4c 0707 	orr.w	r7, ip, r7
 80125e8:	f849 7b04 	str.w	r7, [r9], #4
 80125ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80125f0:	40cf      	lsrs	r7, r1
 80125f2:	e7da      	b.n	80125aa <rshift+0x4c>
 80125f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80125f8:	f847 cf04 	str.w	ip, [r7, #4]!
 80125fc:	e7c3      	b.n	8012586 <rshift+0x28>
 80125fe:	4623      	mov	r3, r4
 8012600:	e7e1      	b.n	80125c6 <rshift+0x68>

08012602 <__hexdig_fun>:
 8012602:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012606:	2b09      	cmp	r3, #9
 8012608:	d802      	bhi.n	8012610 <__hexdig_fun+0xe>
 801260a:	3820      	subs	r0, #32
 801260c:	b2c0      	uxtb	r0, r0
 801260e:	4770      	bx	lr
 8012610:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012614:	2b05      	cmp	r3, #5
 8012616:	d801      	bhi.n	801261c <__hexdig_fun+0x1a>
 8012618:	3847      	subs	r0, #71	; 0x47
 801261a:	e7f7      	b.n	801260c <__hexdig_fun+0xa>
 801261c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012620:	2b05      	cmp	r3, #5
 8012622:	d801      	bhi.n	8012628 <__hexdig_fun+0x26>
 8012624:	3827      	subs	r0, #39	; 0x27
 8012626:	e7f1      	b.n	801260c <__hexdig_fun+0xa>
 8012628:	2000      	movs	r0, #0
 801262a:	4770      	bx	lr

0801262c <__gethex>:
 801262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012630:	ed2d 8b02 	vpush	{d8}
 8012634:	b089      	sub	sp, #36	; 0x24
 8012636:	ee08 0a10 	vmov	s16, r0
 801263a:	9304      	str	r3, [sp, #16]
 801263c:	4bbc      	ldr	r3, [pc, #752]	; (8012930 <__gethex+0x304>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	9301      	str	r3, [sp, #4]
 8012642:	4618      	mov	r0, r3
 8012644:	468b      	mov	fp, r1
 8012646:	4690      	mov	r8, r2
 8012648:	f7f2 ff2f 	bl	80054aa <strlen>
 801264c:	9b01      	ldr	r3, [sp, #4]
 801264e:	f8db 2000 	ldr.w	r2, [fp]
 8012652:	4403      	add	r3, r0
 8012654:	4682      	mov	sl, r0
 8012656:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801265a:	9305      	str	r3, [sp, #20]
 801265c:	1c93      	adds	r3, r2, #2
 801265e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012662:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012666:	32fe      	adds	r2, #254	; 0xfe
 8012668:	18d1      	adds	r1, r2, r3
 801266a:	461f      	mov	r7, r3
 801266c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012670:	9100      	str	r1, [sp, #0]
 8012672:	2830      	cmp	r0, #48	; 0x30
 8012674:	d0f8      	beq.n	8012668 <__gethex+0x3c>
 8012676:	f7ff ffc4 	bl	8012602 <__hexdig_fun>
 801267a:	4604      	mov	r4, r0
 801267c:	2800      	cmp	r0, #0
 801267e:	d13a      	bne.n	80126f6 <__gethex+0xca>
 8012680:	9901      	ldr	r1, [sp, #4]
 8012682:	4652      	mov	r2, sl
 8012684:	4638      	mov	r0, r7
 8012686:	f001 fbe6 	bl	8013e56 <strncmp>
 801268a:	4605      	mov	r5, r0
 801268c:	2800      	cmp	r0, #0
 801268e:	d168      	bne.n	8012762 <__gethex+0x136>
 8012690:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012694:	eb07 060a 	add.w	r6, r7, sl
 8012698:	f7ff ffb3 	bl	8012602 <__hexdig_fun>
 801269c:	2800      	cmp	r0, #0
 801269e:	d062      	beq.n	8012766 <__gethex+0x13a>
 80126a0:	4633      	mov	r3, r6
 80126a2:	7818      	ldrb	r0, [r3, #0]
 80126a4:	2830      	cmp	r0, #48	; 0x30
 80126a6:	461f      	mov	r7, r3
 80126a8:	f103 0301 	add.w	r3, r3, #1
 80126ac:	d0f9      	beq.n	80126a2 <__gethex+0x76>
 80126ae:	f7ff ffa8 	bl	8012602 <__hexdig_fun>
 80126b2:	2301      	movs	r3, #1
 80126b4:	fab0 f480 	clz	r4, r0
 80126b8:	0964      	lsrs	r4, r4, #5
 80126ba:	4635      	mov	r5, r6
 80126bc:	9300      	str	r3, [sp, #0]
 80126be:	463a      	mov	r2, r7
 80126c0:	4616      	mov	r6, r2
 80126c2:	3201      	adds	r2, #1
 80126c4:	7830      	ldrb	r0, [r6, #0]
 80126c6:	f7ff ff9c 	bl	8012602 <__hexdig_fun>
 80126ca:	2800      	cmp	r0, #0
 80126cc:	d1f8      	bne.n	80126c0 <__gethex+0x94>
 80126ce:	9901      	ldr	r1, [sp, #4]
 80126d0:	4652      	mov	r2, sl
 80126d2:	4630      	mov	r0, r6
 80126d4:	f001 fbbf 	bl	8013e56 <strncmp>
 80126d8:	b980      	cbnz	r0, 80126fc <__gethex+0xd0>
 80126da:	b94d      	cbnz	r5, 80126f0 <__gethex+0xc4>
 80126dc:	eb06 050a 	add.w	r5, r6, sl
 80126e0:	462a      	mov	r2, r5
 80126e2:	4616      	mov	r6, r2
 80126e4:	3201      	adds	r2, #1
 80126e6:	7830      	ldrb	r0, [r6, #0]
 80126e8:	f7ff ff8b 	bl	8012602 <__hexdig_fun>
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d1f8      	bne.n	80126e2 <__gethex+0xb6>
 80126f0:	1bad      	subs	r5, r5, r6
 80126f2:	00ad      	lsls	r5, r5, #2
 80126f4:	e004      	b.n	8012700 <__gethex+0xd4>
 80126f6:	2400      	movs	r4, #0
 80126f8:	4625      	mov	r5, r4
 80126fa:	e7e0      	b.n	80126be <__gethex+0x92>
 80126fc:	2d00      	cmp	r5, #0
 80126fe:	d1f7      	bne.n	80126f0 <__gethex+0xc4>
 8012700:	7833      	ldrb	r3, [r6, #0]
 8012702:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012706:	2b50      	cmp	r3, #80	; 0x50
 8012708:	d13b      	bne.n	8012782 <__gethex+0x156>
 801270a:	7873      	ldrb	r3, [r6, #1]
 801270c:	2b2b      	cmp	r3, #43	; 0x2b
 801270e:	d02c      	beq.n	801276a <__gethex+0x13e>
 8012710:	2b2d      	cmp	r3, #45	; 0x2d
 8012712:	d02e      	beq.n	8012772 <__gethex+0x146>
 8012714:	1c71      	adds	r1, r6, #1
 8012716:	f04f 0900 	mov.w	r9, #0
 801271a:	7808      	ldrb	r0, [r1, #0]
 801271c:	f7ff ff71 	bl	8012602 <__hexdig_fun>
 8012720:	1e43      	subs	r3, r0, #1
 8012722:	b2db      	uxtb	r3, r3
 8012724:	2b18      	cmp	r3, #24
 8012726:	d82c      	bhi.n	8012782 <__gethex+0x156>
 8012728:	f1a0 0210 	sub.w	r2, r0, #16
 801272c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012730:	f7ff ff67 	bl	8012602 <__hexdig_fun>
 8012734:	1e43      	subs	r3, r0, #1
 8012736:	b2db      	uxtb	r3, r3
 8012738:	2b18      	cmp	r3, #24
 801273a:	d91d      	bls.n	8012778 <__gethex+0x14c>
 801273c:	f1b9 0f00 	cmp.w	r9, #0
 8012740:	d000      	beq.n	8012744 <__gethex+0x118>
 8012742:	4252      	negs	r2, r2
 8012744:	4415      	add	r5, r2
 8012746:	f8cb 1000 	str.w	r1, [fp]
 801274a:	b1e4      	cbz	r4, 8012786 <__gethex+0x15a>
 801274c:	9b00      	ldr	r3, [sp, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	bf14      	ite	ne
 8012752:	2700      	movne	r7, #0
 8012754:	2706      	moveq	r7, #6
 8012756:	4638      	mov	r0, r7
 8012758:	b009      	add	sp, #36	; 0x24
 801275a:	ecbd 8b02 	vpop	{d8}
 801275e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012762:	463e      	mov	r6, r7
 8012764:	4625      	mov	r5, r4
 8012766:	2401      	movs	r4, #1
 8012768:	e7ca      	b.n	8012700 <__gethex+0xd4>
 801276a:	f04f 0900 	mov.w	r9, #0
 801276e:	1cb1      	adds	r1, r6, #2
 8012770:	e7d3      	b.n	801271a <__gethex+0xee>
 8012772:	f04f 0901 	mov.w	r9, #1
 8012776:	e7fa      	b.n	801276e <__gethex+0x142>
 8012778:	230a      	movs	r3, #10
 801277a:	fb03 0202 	mla	r2, r3, r2, r0
 801277e:	3a10      	subs	r2, #16
 8012780:	e7d4      	b.n	801272c <__gethex+0x100>
 8012782:	4631      	mov	r1, r6
 8012784:	e7df      	b.n	8012746 <__gethex+0x11a>
 8012786:	1bf3      	subs	r3, r6, r7
 8012788:	3b01      	subs	r3, #1
 801278a:	4621      	mov	r1, r4
 801278c:	2b07      	cmp	r3, #7
 801278e:	dc0b      	bgt.n	80127a8 <__gethex+0x17c>
 8012790:	ee18 0a10 	vmov	r0, s16
 8012794:	f000 fad8 	bl	8012d48 <_Balloc>
 8012798:	4604      	mov	r4, r0
 801279a:	b940      	cbnz	r0, 80127ae <__gethex+0x182>
 801279c:	4b65      	ldr	r3, [pc, #404]	; (8012934 <__gethex+0x308>)
 801279e:	4602      	mov	r2, r0
 80127a0:	21de      	movs	r1, #222	; 0xde
 80127a2:	4865      	ldr	r0, [pc, #404]	; (8012938 <__gethex+0x30c>)
 80127a4:	f001 fb88 	bl	8013eb8 <__assert_func>
 80127a8:	3101      	adds	r1, #1
 80127aa:	105b      	asrs	r3, r3, #1
 80127ac:	e7ee      	b.n	801278c <__gethex+0x160>
 80127ae:	f100 0914 	add.w	r9, r0, #20
 80127b2:	f04f 0b00 	mov.w	fp, #0
 80127b6:	f1ca 0301 	rsb	r3, sl, #1
 80127ba:	f8cd 9008 	str.w	r9, [sp, #8]
 80127be:	f8cd b000 	str.w	fp, [sp]
 80127c2:	9306      	str	r3, [sp, #24]
 80127c4:	42b7      	cmp	r7, r6
 80127c6:	d340      	bcc.n	801284a <__gethex+0x21e>
 80127c8:	9802      	ldr	r0, [sp, #8]
 80127ca:	9b00      	ldr	r3, [sp, #0]
 80127cc:	f840 3b04 	str.w	r3, [r0], #4
 80127d0:	eba0 0009 	sub.w	r0, r0, r9
 80127d4:	1080      	asrs	r0, r0, #2
 80127d6:	0146      	lsls	r6, r0, #5
 80127d8:	6120      	str	r0, [r4, #16]
 80127da:	4618      	mov	r0, r3
 80127dc:	f000 fbaa 	bl	8012f34 <__hi0bits>
 80127e0:	1a30      	subs	r0, r6, r0
 80127e2:	f8d8 6000 	ldr.w	r6, [r8]
 80127e6:	42b0      	cmp	r0, r6
 80127e8:	dd63      	ble.n	80128b2 <__gethex+0x286>
 80127ea:	1b87      	subs	r7, r0, r6
 80127ec:	4639      	mov	r1, r7
 80127ee:	4620      	mov	r0, r4
 80127f0:	f000 ff44 	bl	801367c <__any_on>
 80127f4:	4682      	mov	sl, r0
 80127f6:	b1a8      	cbz	r0, 8012824 <__gethex+0x1f8>
 80127f8:	1e7b      	subs	r3, r7, #1
 80127fa:	1159      	asrs	r1, r3, #5
 80127fc:	f003 021f 	and.w	r2, r3, #31
 8012800:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012804:	f04f 0a01 	mov.w	sl, #1
 8012808:	fa0a f202 	lsl.w	r2, sl, r2
 801280c:	420a      	tst	r2, r1
 801280e:	d009      	beq.n	8012824 <__gethex+0x1f8>
 8012810:	4553      	cmp	r3, sl
 8012812:	dd05      	ble.n	8012820 <__gethex+0x1f4>
 8012814:	1eb9      	subs	r1, r7, #2
 8012816:	4620      	mov	r0, r4
 8012818:	f000 ff30 	bl	801367c <__any_on>
 801281c:	2800      	cmp	r0, #0
 801281e:	d145      	bne.n	80128ac <__gethex+0x280>
 8012820:	f04f 0a02 	mov.w	sl, #2
 8012824:	4639      	mov	r1, r7
 8012826:	4620      	mov	r0, r4
 8012828:	f7ff fe99 	bl	801255e <rshift>
 801282c:	443d      	add	r5, r7
 801282e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012832:	42ab      	cmp	r3, r5
 8012834:	da4c      	bge.n	80128d0 <__gethex+0x2a4>
 8012836:	ee18 0a10 	vmov	r0, s16
 801283a:	4621      	mov	r1, r4
 801283c:	f000 fac4 	bl	8012dc8 <_Bfree>
 8012840:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012842:	2300      	movs	r3, #0
 8012844:	6013      	str	r3, [r2, #0]
 8012846:	27a3      	movs	r7, #163	; 0xa3
 8012848:	e785      	b.n	8012756 <__gethex+0x12a>
 801284a:	1e73      	subs	r3, r6, #1
 801284c:	9a05      	ldr	r2, [sp, #20]
 801284e:	9303      	str	r3, [sp, #12]
 8012850:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012854:	4293      	cmp	r3, r2
 8012856:	d019      	beq.n	801288c <__gethex+0x260>
 8012858:	f1bb 0f20 	cmp.w	fp, #32
 801285c:	d107      	bne.n	801286e <__gethex+0x242>
 801285e:	9b02      	ldr	r3, [sp, #8]
 8012860:	9a00      	ldr	r2, [sp, #0]
 8012862:	f843 2b04 	str.w	r2, [r3], #4
 8012866:	9302      	str	r3, [sp, #8]
 8012868:	2300      	movs	r3, #0
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	469b      	mov	fp, r3
 801286e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012872:	f7ff fec6 	bl	8012602 <__hexdig_fun>
 8012876:	9b00      	ldr	r3, [sp, #0]
 8012878:	f000 000f 	and.w	r0, r0, #15
 801287c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012880:	4303      	orrs	r3, r0
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	f10b 0b04 	add.w	fp, fp, #4
 8012888:	9b03      	ldr	r3, [sp, #12]
 801288a:	e00d      	b.n	80128a8 <__gethex+0x27c>
 801288c:	9b03      	ldr	r3, [sp, #12]
 801288e:	9a06      	ldr	r2, [sp, #24]
 8012890:	4413      	add	r3, r2
 8012892:	42bb      	cmp	r3, r7
 8012894:	d3e0      	bcc.n	8012858 <__gethex+0x22c>
 8012896:	4618      	mov	r0, r3
 8012898:	9901      	ldr	r1, [sp, #4]
 801289a:	9307      	str	r3, [sp, #28]
 801289c:	4652      	mov	r2, sl
 801289e:	f001 fada 	bl	8013e56 <strncmp>
 80128a2:	9b07      	ldr	r3, [sp, #28]
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d1d7      	bne.n	8012858 <__gethex+0x22c>
 80128a8:	461e      	mov	r6, r3
 80128aa:	e78b      	b.n	80127c4 <__gethex+0x198>
 80128ac:	f04f 0a03 	mov.w	sl, #3
 80128b0:	e7b8      	b.n	8012824 <__gethex+0x1f8>
 80128b2:	da0a      	bge.n	80128ca <__gethex+0x29e>
 80128b4:	1a37      	subs	r7, r6, r0
 80128b6:	4621      	mov	r1, r4
 80128b8:	ee18 0a10 	vmov	r0, s16
 80128bc:	463a      	mov	r2, r7
 80128be:	f000 fc9f 	bl	8013200 <__lshift>
 80128c2:	1bed      	subs	r5, r5, r7
 80128c4:	4604      	mov	r4, r0
 80128c6:	f100 0914 	add.w	r9, r0, #20
 80128ca:	f04f 0a00 	mov.w	sl, #0
 80128ce:	e7ae      	b.n	801282e <__gethex+0x202>
 80128d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80128d4:	42a8      	cmp	r0, r5
 80128d6:	dd72      	ble.n	80129be <__gethex+0x392>
 80128d8:	1b45      	subs	r5, r0, r5
 80128da:	42ae      	cmp	r6, r5
 80128dc:	dc36      	bgt.n	801294c <__gethex+0x320>
 80128de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d02a      	beq.n	801293c <__gethex+0x310>
 80128e6:	2b03      	cmp	r3, #3
 80128e8:	d02c      	beq.n	8012944 <__gethex+0x318>
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	d115      	bne.n	801291a <__gethex+0x2ee>
 80128ee:	42ae      	cmp	r6, r5
 80128f0:	d113      	bne.n	801291a <__gethex+0x2ee>
 80128f2:	2e01      	cmp	r6, #1
 80128f4:	d10b      	bne.n	801290e <__gethex+0x2e2>
 80128f6:	9a04      	ldr	r2, [sp, #16]
 80128f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80128fc:	6013      	str	r3, [r2, #0]
 80128fe:	2301      	movs	r3, #1
 8012900:	6123      	str	r3, [r4, #16]
 8012902:	f8c9 3000 	str.w	r3, [r9]
 8012906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012908:	2762      	movs	r7, #98	; 0x62
 801290a:	601c      	str	r4, [r3, #0]
 801290c:	e723      	b.n	8012756 <__gethex+0x12a>
 801290e:	1e71      	subs	r1, r6, #1
 8012910:	4620      	mov	r0, r4
 8012912:	f000 feb3 	bl	801367c <__any_on>
 8012916:	2800      	cmp	r0, #0
 8012918:	d1ed      	bne.n	80128f6 <__gethex+0x2ca>
 801291a:	ee18 0a10 	vmov	r0, s16
 801291e:	4621      	mov	r1, r4
 8012920:	f000 fa52 	bl	8012dc8 <_Bfree>
 8012924:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012926:	2300      	movs	r3, #0
 8012928:	6013      	str	r3, [r2, #0]
 801292a:	2750      	movs	r7, #80	; 0x50
 801292c:	e713      	b.n	8012756 <__gethex+0x12a>
 801292e:	bf00      	nop
 8012930:	08100564 	.word	0x08100564
 8012934:	08100484 	.word	0x08100484
 8012938:	081004f8 	.word	0x081004f8
 801293c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801293e:	2b00      	cmp	r3, #0
 8012940:	d1eb      	bne.n	801291a <__gethex+0x2ee>
 8012942:	e7d8      	b.n	80128f6 <__gethex+0x2ca>
 8012944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012946:	2b00      	cmp	r3, #0
 8012948:	d1d5      	bne.n	80128f6 <__gethex+0x2ca>
 801294a:	e7e6      	b.n	801291a <__gethex+0x2ee>
 801294c:	1e6f      	subs	r7, r5, #1
 801294e:	f1ba 0f00 	cmp.w	sl, #0
 8012952:	d131      	bne.n	80129b8 <__gethex+0x38c>
 8012954:	b127      	cbz	r7, 8012960 <__gethex+0x334>
 8012956:	4639      	mov	r1, r7
 8012958:	4620      	mov	r0, r4
 801295a:	f000 fe8f 	bl	801367c <__any_on>
 801295e:	4682      	mov	sl, r0
 8012960:	117b      	asrs	r3, r7, #5
 8012962:	2101      	movs	r1, #1
 8012964:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012968:	f007 071f 	and.w	r7, r7, #31
 801296c:	fa01 f707 	lsl.w	r7, r1, r7
 8012970:	421f      	tst	r7, r3
 8012972:	4629      	mov	r1, r5
 8012974:	4620      	mov	r0, r4
 8012976:	bf18      	it	ne
 8012978:	f04a 0a02 	orrne.w	sl, sl, #2
 801297c:	1b76      	subs	r6, r6, r5
 801297e:	f7ff fdee 	bl	801255e <rshift>
 8012982:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012986:	2702      	movs	r7, #2
 8012988:	f1ba 0f00 	cmp.w	sl, #0
 801298c:	d048      	beq.n	8012a20 <__gethex+0x3f4>
 801298e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012992:	2b02      	cmp	r3, #2
 8012994:	d015      	beq.n	80129c2 <__gethex+0x396>
 8012996:	2b03      	cmp	r3, #3
 8012998:	d017      	beq.n	80129ca <__gethex+0x39e>
 801299a:	2b01      	cmp	r3, #1
 801299c:	d109      	bne.n	80129b2 <__gethex+0x386>
 801299e:	f01a 0f02 	tst.w	sl, #2
 80129a2:	d006      	beq.n	80129b2 <__gethex+0x386>
 80129a4:	f8d9 0000 	ldr.w	r0, [r9]
 80129a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80129ac:	f01a 0f01 	tst.w	sl, #1
 80129b0:	d10e      	bne.n	80129d0 <__gethex+0x3a4>
 80129b2:	f047 0710 	orr.w	r7, r7, #16
 80129b6:	e033      	b.n	8012a20 <__gethex+0x3f4>
 80129b8:	f04f 0a01 	mov.w	sl, #1
 80129bc:	e7d0      	b.n	8012960 <__gethex+0x334>
 80129be:	2701      	movs	r7, #1
 80129c0:	e7e2      	b.n	8012988 <__gethex+0x35c>
 80129c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129c4:	f1c3 0301 	rsb	r3, r3, #1
 80129c8:	9315      	str	r3, [sp, #84]	; 0x54
 80129ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d0f0      	beq.n	80129b2 <__gethex+0x386>
 80129d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80129d4:	f104 0314 	add.w	r3, r4, #20
 80129d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80129dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80129e0:	f04f 0c00 	mov.w	ip, #0
 80129e4:	4618      	mov	r0, r3
 80129e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 80129ee:	d01c      	beq.n	8012a2a <__gethex+0x3fe>
 80129f0:	3201      	adds	r2, #1
 80129f2:	6002      	str	r2, [r0, #0]
 80129f4:	2f02      	cmp	r7, #2
 80129f6:	f104 0314 	add.w	r3, r4, #20
 80129fa:	d13f      	bne.n	8012a7c <__gethex+0x450>
 80129fc:	f8d8 2000 	ldr.w	r2, [r8]
 8012a00:	3a01      	subs	r2, #1
 8012a02:	42b2      	cmp	r2, r6
 8012a04:	d10a      	bne.n	8012a1c <__gethex+0x3f0>
 8012a06:	1171      	asrs	r1, r6, #5
 8012a08:	2201      	movs	r2, #1
 8012a0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a0e:	f006 061f 	and.w	r6, r6, #31
 8012a12:	fa02 f606 	lsl.w	r6, r2, r6
 8012a16:	421e      	tst	r6, r3
 8012a18:	bf18      	it	ne
 8012a1a:	4617      	movne	r7, r2
 8012a1c:	f047 0720 	orr.w	r7, r7, #32
 8012a20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a22:	601c      	str	r4, [r3, #0]
 8012a24:	9b04      	ldr	r3, [sp, #16]
 8012a26:	601d      	str	r5, [r3, #0]
 8012a28:	e695      	b.n	8012756 <__gethex+0x12a>
 8012a2a:	4299      	cmp	r1, r3
 8012a2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012a30:	d8d8      	bhi.n	80129e4 <__gethex+0x3b8>
 8012a32:	68a3      	ldr	r3, [r4, #8]
 8012a34:	459b      	cmp	fp, r3
 8012a36:	db19      	blt.n	8012a6c <__gethex+0x440>
 8012a38:	6861      	ldr	r1, [r4, #4]
 8012a3a:	ee18 0a10 	vmov	r0, s16
 8012a3e:	3101      	adds	r1, #1
 8012a40:	f000 f982 	bl	8012d48 <_Balloc>
 8012a44:	4681      	mov	r9, r0
 8012a46:	b918      	cbnz	r0, 8012a50 <__gethex+0x424>
 8012a48:	4b1a      	ldr	r3, [pc, #104]	; (8012ab4 <__gethex+0x488>)
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	2184      	movs	r1, #132	; 0x84
 8012a4e:	e6a8      	b.n	80127a2 <__gethex+0x176>
 8012a50:	6922      	ldr	r2, [r4, #16]
 8012a52:	3202      	adds	r2, #2
 8012a54:	f104 010c 	add.w	r1, r4, #12
 8012a58:	0092      	lsls	r2, r2, #2
 8012a5a:	300c      	adds	r0, #12
 8012a5c:	f7fc fe96 	bl	800f78c <memcpy>
 8012a60:	4621      	mov	r1, r4
 8012a62:	ee18 0a10 	vmov	r0, s16
 8012a66:	f000 f9af 	bl	8012dc8 <_Bfree>
 8012a6a:	464c      	mov	r4, r9
 8012a6c:	6923      	ldr	r3, [r4, #16]
 8012a6e:	1c5a      	adds	r2, r3, #1
 8012a70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012a74:	6122      	str	r2, [r4, #16]
 8012a76:	2201      	movs	r2, #1
 8012a78:	615a      	str	r2, [r3, #20]
 8012a7a:	e7bb      	b.n	80129f4 <__gethex+0x3c8>
 8012a7c:	6922      	ldr	r2, [r4, #16]
 8012a7e:	455a      	cmp	r2, fp
 8012a80:	dd0b      	ble.n	8012a9a <__gethex+0x46e>
 8012a82:	2101      	movs	r1, #1
 8012a84:	4620      	mov	r0, r4
 8012a86:	f7ff fd6a 	bl	801255e <rshift>
 8012a8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a8e:	3501      	adds	r5, #1
 8012a90:	42ab      	cmp	r3, r5
 8012a92:	f6ff aed0 	blt.w	8012836 <__gethex+0x20a>
 8012a96:	2701      	movs	r7, #1
 8012a98:	e7c0      	b.n	8012a1c <__gethex+0x3f0>
 8012a9a:	f016 061f 	ands.w	r6, r6, #31
 8012a9e:	d0fa      	beq.n	8012a96 <__gethex+0x46a>
 8012aa0:	449a      	add	sl, r3
 8012aa2:	f1c6 0620 	rsb	r6, r6, #32
 8012aa6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012aaa:	f000 fa43 	bl	8012f34 <__hi0bits>
 8012aae:	42b0      	cmp	r0, r6
 8012ab0:	dbe7      	blt.n	8012a82 <__gethex+0x456>
 8012ab2:	e7f0      	b.n	8012a96 <__gethex+0x46a>
 8012ab4:	08100484 	.word	0x08100484

08012ab8 <L_shift>:
 8012ab8:	f1c2 0208 	rsb	r2, r2, #8
 8012abc:	0092      	lsls	r2, r2, #2
 8012abe:	b570      	push	{r4, r5, r6, lr}
 8012ac0:	f1c2 0620 	rsb	r6, r2, #32
 8012ac4:	6843      	ldr	r3, [r0, #4]
 8012ac6:	6804      	ldr	r4, [r0, #0]
 8012ac8:	fa03 f506 	lsl.w	r5, r3, r6
 8012acc:	432c      	orrs	r4, r5
 8012ace:	40d3      	lsrs	r3, r2
 8012ad0:	6004      	str	r4, [r0, #0]
 8012ad2:	f840 3f04 	str.w	r3, [r0, #4]!
 8012ad6:	4288      	cmp	r0, r1
 8012ad8:	d3f4      	bcc.n	8012ac4 <L_shift+0xc>
 8012ada:	bd70      	pop	{r4, r5, r6, pc}

08012adc <__match>:
 8012adc:	b530      	push	{r4, r5, lr}
 8012ade:	6803      	ldr	r3, [r0, #0]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ae6:	b914      	cbnz	r4, 8012aee <__match+0x12>
 8012ae8:	6003      	str	r3, [r0, #0]
 8012aea:	2001      	movs	r0, #1
 8012aec:	bd30      	pop	{r4, r5, pc}
 8012aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012af2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012af6:	2d19      	cmp	r5, #25
 8012af8:	bf98      	it	ls
 8012afa:	3220      	addls	r2, #32
 8012afc:	42a2      	cmp	r2, r4
 8012afe:	d0f0      	beq.n	8012ae2 <__match+0x6>
 8012b00:	2000      	movs	r0, #0
 8012b02:	e7f3      	b.n	8012aec <__match+0x10>

08012b04 <__hexnan>:
 8012b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b08:	680b      	ldr	r3, [r1, #0]
 8012b0a:	6801      	ldr	r1, [r0, #0]
 8012b0c:	115e      	asrs	r6, r3, #5
 8012b0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b12:	f013 031f 	ands.w	r3, r3, #31
 8012b16:	b087      	sub	sp, #28
 8012b18:	bf18      	it	ne
 8012b1a:	3604      	addne	r6, #4
 8012b1c:	2500      	movs	r5, #0
 8012b1e:	1f37      	subs	r7, r6, #4
 8012b20:	4682      	mov	sl, r0
 8012b22:	4690      	mov	r8, r2
 8012b24:	9301      	str	r3, [sp, #4]
 8012b26:	f846 5c04 	str.w	r5, [r6, #-4]
 8012b2a:	46b9      	mov	r9, r7
 8012b2c:	463c      	mov	r4, r7
 8012b2e:	9502      	str	r5, [sp, #8]
 8012b30:	46ab      	mov	fp, r5
 8012b32:	784a      	ldrb	r2, [r1, #1]
 8012b34:	1c4b      	adds	r3, r1, #1
 8012b36:	9303      	str	r3, [sp, #12]
 8012b38:	b342      	cbz	r2, 8012b8c <__hexnan+0x88>
 8012b3a:	4610      	mov	r0, r2
 8012b3c:	9105      	str	r1, [sp, #20]
 8012b3e:	9204      	str	r2, [sp, #16]
 8012b40:	f7ff fd5f 	bl	8012602 <__hexdig_fun>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	d14f      	bne.n	8012be8 <__hexnan+0xe4>
 8012b48:	9a04      	ldr	r2, [sp, #16]
 8012b4a:	9905      	ldr	r1, [sp, #20]
 8012b4c:	2a20      	cmp	r2, #32
 8012b4e:	d818      	bhi.n	8012b82 <__hexnan+0x7e>
 8012b50:	9b02      	ldr	r3, [sp, #8]
 8012b52:	459b      	cmp	fp, r3
 8012b54:	dd13      	ble.n	8012b7e <__hexnan+0x7a>
 8012b56:	454c      	cmp	r4, r9
 8012b58:	d206      	bcs.n	8012b68 <__hexnan+0x64>
 8012b5a:	2d07      	cmp	r5, #7
 8012b5c:	dc04      	bgt.n	8012b68 <__hexnan+0x64>
 8012b5e:	462a      	mov	r2, r5
 8012b60:	4649      	mov	r1, r9
 8012b62:	4620      	mov	r0, r4
 8012b64:	f7ff ffa8 	bl	8012ab8 <L_shift>
 8012b68:	4544      	cmp	r4, r8
 8012b6a:	d950      	bls.n	8012c0e <__hexnan+0x10a>
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	f1a4 0904 	sub.w	r9, r4, #4
 8012b72:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b76:	f8cd b008 	str.w	fp, [sp, #8]
 8012b7a:	464c      	mov	r4, r9
 8012b7c:	461d      	mov	r5, r3
 8012b7e:	9903      	ldr	r1, [sp, #12]
 8012b80:	e7d7      	b.n	8012b32 <__hexnan+0x2e>
 8012b82:	2a29      	cmp	r2, #41	; 0x29
 8012b84:	d156      	bne.n	8012c34 <__hexnan+0x130>
 8012b86:	3102      	adds	r1, #2
 8012b88:	f8ca 1000 	str.w	r1, [sl]
 8012b8c:	f1bb 0f00 	cmp.w	fp, #0
 8012b90:	d050      	beq.n	8012c34 <__hexnan+0x130>
 8012b92:	454c      	cmp	r4, r9
 8012b94:	d206      	bcs.n	8012ba4 <__hexnan+0xa0>
 8012b96:	2d07      	cmp	r5, #7
 8012b98:	dc04      	bgt.n	8012ba4 <__hexnan+0xa0>
 8012b9a:	462a      	mov	r2, r5
 8012b9c:	4649      	mov	r1, r9
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f7ff ff8a 	bl	8012ab8 <L_shift>
 8012ba4:	4544      	cmp	r4, r8
 8012ba6:	d934      	bls.n	8012c12 <__hexnan+0x10e>
 8012ba8:	f1a8 0204 	sub.w	r2, r8, #4
 8012bac:	4623      	mov	r3, r4
 8012bae:	f853 1b04 	ldr.w	r1, [r3], #4
 8012bb2:	f842 1f04 	str.w	r1, [r2, #4]!
 8012bb6:	429f      	cmp	r7, r3
 8012bb8:	d2f9      	bcs.n	8012bae <__hexnan+0xaa>
 8012bba:	1b3b      	subs	r3, r7, r4
 8012bbc:	f023 0303 	bic.w	r3, r3, #3
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	3401      	adds	r4, #1
 8012bc4:	3e03      	subs	r6, #3
 8012bc6:	42b4      	cmp	r4, r6
 8012bc8:	bf88      	it	hi
 8012bca:	2304      	movhi	r3, #4
 8012bcc:	4443      	add	r3, r8
 8012bce:	2200      	movs	r2, #0
 8012bd0:	f843 2b04 	str.w	r2, [r3], #4
 8012bd4:	429f      	cmp	r7, r3
 8012bd6:	d2fb      	bcs.n	8012bd0 <__hexnan+0xcc>
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	b91b      	cbnz	r3, 8012be4 <__hexnan+0xe0>
 8012bdc:	4547      	cmp	r7, r8
 8012bde:	d127      	bne.n	8012c30 <__hexnan+0x12c>
 8012be0:	2301      	movs	r3, #1
 8012be2:	603b      	str	r3, [r7, #0]
 8012be4:	2005      	movs	r0, #5
 8012be6:	e026      	b.n	8012c36 <__hexnan+0x132>
 8012be8:	3501      	adds	r5, #1
 8012bea:	2d08      	cmp	r5, #8
 8012bec:	f10b 0b01 	add.w	fp, fp, #1
 8012bf0:	dd06      	ble.n	8012c00 <__hexnan+0xfc>
 8012bf2:	4544      	cmp	r4, r8
 8012bf4:	d9c3      	bls.n	8012b7e <__hexnan+0x7a>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	f844 3c04 	str.w	r3, [r4, #-4]
 8012bfc:	2501      	movs	r5, #1
 8012bfe:	3c04      	subs	r4, #4
 8012c00:	6822      	ldr	r2, [r4, #0]
 8012c02:	f000 000f 	and.w	r0, r0, #15
 8012c06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012c0a:	6022      	str	r2, [r4, #0]
 8012c0c:	e7b7      	b.n	8012b7e <__hexnan+0x7a>
 8012c0e:	2508      	movs	r5, #8
 8012c10:	e7b5      	b.n	8012b7e <__hexnan+0x7a>
 8012c12:	9b01      	ldr	r3, [sp, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d0df      	beq.n	8012bd8 <__hexnan+0xd4>
 8012c18:	f04f 32ff 	mov.w	r2, #4294967295
 8012c1c:	f1c3 0320 	rsb	r3, r3, #32
 8012c20:	fa22 f303 	lsr.w	r3, r2, r3
 8012c24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012c28:	401a      	ands	r2, r3
 8012c2a:	f846 2c04 	str.w	r2, [r6, #-4]
 8012c2e:	e7d3      	b.n	8012bd8 <__hexnan+0xd4>
 8012c30:	3f04      	subs	r7, #4
 8012c32:	e7d1      	b.n	8012bd8 <__hexnan+0xd4>
 8012c34:	2004      	movs	r0, #4
 8012c36:	b007      	add	sp, #28
 8012c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c3c <_localeconv_r>:
 8012c3c:	4800      	ldr	r0, [pc, #0]	; (8012c40 <_localeconv_r+0x4>)
 8012c3e:	4770      	bx	lr
 8012c40:	200008c8 	.word	0x200008c8

08012c44 <__retarget_lock_init_recursive>:
 8012c44:	4770      	bx	lr

08012c46 <__retarget_lock_acquire_recursive>:
 8012c46:	4770      	bx	lr

08012c48 <__retarget_lock_release_recursive>:
 8012c48:	4770      	bx	lr

08012c4a <__swhatbuf_r>:
 8012c4a:	b570      	push	{r4, r5, r6, lr}
 8012c4c:	460e      	mov	r6, r1
 8012c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c52:	2900      	cmp	r1, #0
 8012c54:	b096      	sub	sp, #88	; 0x58
 8012c56:	4614      	mov	r4, r2
 8012c58:	461d      	mov	r5, r3
 8012c5a:	da07      	bge.n	8012c6c <__swhatbuf_r+0x22>
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	602b      	str	r3, [r5, #0]
 8012c60:	89b3      	ldrh	r3, [r6, #12]
 8012c62:	061a      	lsls	r2, r3, #24
 8012c64:	d410      	bmi.n	8012c88 <__swhatbuf_r+0x3e>
 8012c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c6a:	e00e      	b.n	8012c8a <__swhatbuf_r+0x40>
 8012c6c:	466a      	mov	r2, sp
 8012c6e:	f001 f963 	bl	8013f38 <_fstat_r>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	dbf2      	blt.n	8012c5c <__swhatbuf_r+0x12>
 8012c76:	9a01      	ldr	r2, [sp, #4]
 8012c78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012c7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c80:	425a      	negs	r2, r3
 8012c82:	415a      	adcs	r2, r3
 8012c84:	602a      	str	r2, [r5, #0]
 8012c86:	e7ee      	b.n	8012c66 <__swhatbuf_r+0x1c>
 8012c88:	2340      	movs	r3, #64	; 0x40
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	6023      	str	r3, [r4, #0]
 8012c8e:	b016      	add	sp, #88	; 0x58
 8012c90:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c94 <__smakebuf_r>:
 8012c94:	898b      	ldrh	r3, [r1, #12]
 8012c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c98:	079d      	lsls	r5, r3, #30
 8012c9a:	4606      	mov	r6, r0
 8012c9c:	460c      	mov	r4, r1
 8012c9e:	d507      	bpl.n	8012cb0 <__smakebuf_r+0x1c>
 8012ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ca4:	6023      	str	r3, [r4, #0]
 8012ca6:	6123      	str	r3, [r4, #16]
 8012ca8:	2301      	movs	r3, #1
 8012caa:	6163      	str	r3, [r4, #20]
 8012cac:	b002      	add	sp, #8
 8012cae:	bd70      	pop	{r4, r5, r6, pc}
 8012cb0:	ab01      	add	r3, sp, #4
 8012cb2:	466a      	mov	r2, sp
 8012cb4:	f7ff ffc9 	bl	8012c4a <__swhatbuf_r>
 8012cb8:	9900      	ldr	r1, [sp, #0]
 8012cba:	4605      	mov	r5, r0
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f000 fd5d 	bl	801377c <_malloc_r>
 8012cc2:	b948      	cbnz	r0, 8012cd8 <__smakebuf_r+0x44>
 8012cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cc8:	059a      	lsls	r2, r3, #22
 8012cca:	d4ef      	bmi.n	8012cac <__smakebuf_r+0x18>
 8012ccc:	f023 0303 	bic.w	r3, r3, #3
 8012cd0:	f043 0302 	orr.w	r3, r3, #2
 8012cd4:	81a3      	strh	r3, [r4, #12]
 8012cd6:	e7e3      	b.n	8012ca0 <__smakebuf_r+0xc>
 8012cd8:	4b0d      	ldr	r3, [pc, #52]	; (8012d10 <__smakebuf_r+0x7c>)
 8012cda:	62b3      	str	r3, [r6, #40]	; 0x28
 8012cdc:	89a3      	ldrh	r3, [r4, #12]
 8012cde:	6020      	str	r0, [r4, #0]
 8012ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ce4:	81a3      	strh	r3, [r4, #12]
 8012ce6:	9b00      	ldr	r3, [sp, #0]
 8012ce8:	6163      	str	r3, [r4, #20]
 8012cea:	9b01      	ldr	r3, [sp, #4]
 8012cec:	6120      	str	r0, [r4, #16]
 8012cee:	b15b      	cbz	r3, 8012d08 <__smakebuf_r+0x74>
 8012cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f001 f931 	bl	8013f5c <_isatty_r>
 8012cfa:	b128      	cbz	r0, 8012d08 <__smakebuf_r+0x74>
 8012cfc:	89a3      	ldrh	r3, [r4, #12]
 8012cfe:	f023 0303 	bic.w	r3, r3, #3
 8012d02:	f043 0301 	orr.w	r3, r3, #1
 8012d06:	81a3      	strh	r3, [r4, #12]
 8012d08:	89a0      	ldrh	r0, [r4, #12]
 8012d0a:	4305      	orrs	r5, r0
 8012d0c:	81a5      	strh	r5, [r4, #12]
 8012d0e:	e7cd      	b.n	8012cac <__smakebuf_r+0x18>
 8012d10:	080123bd 	.word	0x080123bd

08012d14 <malloc>:
 8012d14:	4b02      	ldr	r3, [pc, #8]	; (8012d20 <malloc+0xc>)
 8012d16:	4601      	mov	r1, r0
 8012d18:	6818      	ldr	r0, [r3, #0]
 8012d1a:	f000 bd2f 	b.w	801377c <_malloc_r>
 8012d1e:	bf00      	nop
 8012d20:	20000770 	.word	0x20000770

08012d24 <__ascii_mbtowc>:
 8012d24:	b082      	sub	sp, #8
 8012d26:	b901      	cbnz	r1, 8012d2a <__ascii_mbtowc+0x6>
 8012d28:	a901      	add	r1, sp, #4
 8012d2a:	b142      	cbz	r2, 8012d3e <__ascii_mbtowc+0x1a>
 8012d2c:	b14b      	cbz	r3, 8012d42 <__ascii_mbtowc+0x1e>
 8012d2e:	7813      	ldrb	r3, [r2, #0]
 8012d30:	600b      	str	r3, [r1, #0]
 8012d32:	7812      	ldrb	r2, [r2, #0]
 8012d34:	1e10      	subs	r0, r2, #0
 8012d36:	bf18      	it	ne
 8012d38:	2001      	movne	r0, #1
 8012d3a:	b002      	add	sp, #8
 8012d3c:	4770      	bx	lr
 8012d3e:	4610      	mov	r0, r2
 8012d40:	e7fb      	b.n	8012d3a <__ascii_mbtowc+0x16>
 8012d42:	f06f 0001 	mvn.w	r0, #1
 8012d46:	e7f8      	b.n	8012d3a <__ascii_mbtowc+0x16>

08012d48 <_Balloc>:
 8012d48:	b570      	push	{r4, r5, r6, lr}
 8012d4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	460d      	mov	r5, r1
 8012d50:	b976      	cbnz	r6, 8012d70 <_Balloc+0x28>
 8012d52:	2010      	movs	r0, #16
 8012d54:	f7ff ffde 	bl	8012d14 <malloc>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	6260      	str	r0, [r4, #36]	; 0x24
 8012d5c:	b920      	cbnz	r0, 8012d68 <_Balloc+0x20>
 8012d5e:	4b18      	ldr	r3, [pc, #96]	; (8012dc0 <_Balloc+0x78>)
 8012d60:	4818      	ldr	r0, [pc, #96]	; (8012dc4 <_Balloc+0x7c>)
 8012d62:	2166      	movs	r1, #102	; 0x66
 8012d64:	f001 f8a8 	bl	8013eb8 <__assert_func>
 8012d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d6c:	6006      	str	r6, [r0, #0]
 8012d6e:	60c6      	str	r6, [r0, #12]
 8012d70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d72:	68f3      	ldr	r3, [r6, #12]
 8012d74:	b183      	cbz	r3, 8012d98 <_Balloc+0x50>
 8012d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d78:	68db      	ldr	r3, [r3, #12]
 8012d7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d7e:	b9b8      	cbnz	r0, 8012db0 <_Balloc+0x68>
 8012d80:	2101      	movs	r1, #1
 8012d82:	fa01 f605 	lsl.w	r6, r1, r5
 8012d86:	1d72      	adds	r2, r6, #5
 8012d88:	0092      	lsls	r2, r2, #2
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f000 fc97 	bl	80136be <_calloc_r>
 8012d90:	b160      	cbz	r0, 8012dac <_Balloc+0x64>
 8012d92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d96:	e00e      	b.n	8012db6 <_Balloc+0x6e>
 8012d98:	2221      	movs	r2, #33	; 0x21
 8012d9a:	2104      	movs	r1, #4
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f000 fc8e 	bl	80136be <_calloc_r>
 8012da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012da4:	60f0      	str	r0, [r6, #12]
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d1e4      	bne.n	8012d76 <_Balloc+0x2e>
 8012dac:	2000      	movs	r0, #0
 8012dae:	bd70      	pop	{r4, r5, r6, pc}
 8012db0:	6802      	ldr	r2, [r0, #0]
 8012db2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012db6:	2300      	movs	r3, #0
 8012db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012dbc:	e7f7      	b.n	8012dae <_Balloc+0x66>
 8012dbe:	bf00      	nop
 8012dc0:	0810040e 	.word	0x0810040e
 8012dc4:	08100578 	.word	0x08100578

08012dc8 <_Bfree>:
 8012dc8:	b570      	push	{r4, r5, r6, lr}
 8012dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012dcc:	4605      	mov	r5, r0
 8012dce:	460c      	mov	r4, r1
 8012dd0:	b976      	cbnz	r6, 8012df0 <_Bfree+0x28>
 8012dd2:	2010      	movs	r0, #16
 8012dd4:	f7ff ff9e 	bl	8012d14 <malloc>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	6268      	str	r0, [r5, #36]	; 0x24
 8012ddc:	b920      	cbnz	r0, 8012de8 <_Bfree+0x20>
 8012dde:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <_Bfree+0x3c>)
 8012de0:	4809      	ldr	r0, [pc, #36]	; (8012e08 <_Bfree+0x40>)
 8012de2:	218a      	movs	r1, #138	; 0x8a
 8012de4:	f001 f868 	bl	8013eb8 <__assert_func>
 8012de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012dec:	6006      	str	r6, [r0, #0]
 8012dee:	60c6      	str	r6, [r0, #12]
 8012df0:	b13c      	cbz	r4, 8012e02 <_Bfree+0x3a>
 8012df2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012df4:	6862      	ldr	r2, [r4, #4]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012dfc:	6021      	str	r1, [r4, #0]
 8012dfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e02:	bd70      	pop	{r4, r5, r6, pc}
 8012e04:	0810040e 	.word	0x0810040e
 8012e08:	08100578 	.word	0x08100578

08012e0c <__multadd>:
 8012e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e10:	690e      	ldr	r6, [r1, #16]
 8012e12:	4607      	mov	r7, r0
 8012e14:	4698      	mov	r8, r3
 8012e16:	460c      	mov	r4, r1
 8012e18:	f101 0014 	add.w	r0, r1, #20
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	6805      	ldr	r5, [r0, #0]
 8012e20:	b2a9      	uxth	r1, r5
 8012e22:	fb02 8101 	mla	r1, r2, r1, r8
 8012e26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012e2a:	0c2d      	lsrs	r5, r5, #16
 8012e2c:	fb02 c505 	mla	r5, r2, r5, ip
 8012e30:	b289      	uxth	r1, r1
 8012e32:	3301      	adds	r3, #1
 8012e34:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012e38:	429e      	cmp	r6, r3
 8012e3a:	f840 1b04 	str.w	r1, [r0], #4
 8012e3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012e42:	dcec      	bgt.n	8012e1e <__multadd+0x12>
 8012e44:	f1b8 0f00 	cmp.w	r8, #0
 8012e48:	d022      	beq.n	8012e90 <__multadd+0x84>
 8012e4a:	68a3      	ldr	r3, [r4, #8]
 8012e4c:	42b3      	cmp	r3, r6
 8012e4e:	dc19      	bgt.n	8012e84 <__multadd+0x78>
 8012e50:	6861      	ldr	r1, [r4, #4]
 8012e52:	4638      	mov	r0, r7
 8012e54:	3101      	adds	r1, #1
 8012e56:	f7ff ff77 	bl	8012d48 <_Balloc>
 8012e5a:	4605      	mov	r5, r0
 8012e5c:	b928      	cbnz	r0, 8012e6a <__multadd+0x5e>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	4b0d      	ldr	r3, [pc, #52]	; (8012e98 <__multadd+0x8c>)
 8012e62:	480e      	ldr	r0, [pc, #56]	; (8012e9c <__multadd+0x90>)
 8012e64:	21b5      	movs	r1, #181	; 0xb5
 8012e66:	f001 f827 	bl	8013eb8 <__assert_func>
 8012e6a:	6922      	ldr	r2, [r4, #16]
 8012e6c:	3202      	adds	r2, #2
 8012e6e:	f104 010c 	add.w	r1, r4, #12
 8012e72:	0092      	lsls	r2, r2, #2
 8012e74:	300c      	adds	r0, #12
 8012e76:	f7fc fc89 	bl	800f78c <memcpy>
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f7ff ffa3 	bl	8012dc8 <_Bfree>
 8012e82:	462c      	mov	r4, r5
 8012e84:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012e88:	3601      	adds	r6, #1
 8012e8a:	f8c3 8014 	str.w	r8, [r3, #20]
 8012e8e:	6126      	str	r6, [r4, #16]
 8012e90:	4620      	mov	r0, r4
 8012e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e96:	bf00      	nop
 8012e98:	08100484 	.word	0x08100484
 8012e9c:	08100578 	.word	0x08100578

08012ea0 <__s2b>:
 8012ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ea4:	460c      	mov	r4, r1
 8012ea6:	4615      	mov	r5, r2
 8012ea8:	461f      	mov	r7, r3
 8012eaa:	2209      	movs	r2, #9
 8012eac:	3308      	adds	r3, #8
 8012eae:	4606      	mov	r6, r0
 8012eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	db09      	blt.n	8012ed0 <__s2b+0x30>
 8012ebc:	4630      	mov	r0, r6
 8012ebe:	f7ff ff43 	bl	8012d48 <_Balloc>
 8012ec2:	b940      	cbnz	r0, 8012ed6 <__s2b+0x36>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	4b19      	ldr	r3, [pc, #100]	; (8012f2c <__s2b+0x8c>)
 8012ec8:	4819      	ldr	r0, [pc, #100]	; (8012f30 <__s2b+0x90>)
 8012eca:	21ce      	movs	r1, #206	; 0xce
 8012ecc:	f000 fff4 	bl	8013eb8 <__assert_func>
 8012ed0:	0052      	lsls	r2, r2, #1
 8012ed2:	3101      	adds	r1, #1
 8012ed4:	e7f0      	b.n	8012eb8 <__s2b+0x18>
 8012ed6:	9b08      	ldr	r3, [sp, #32]
 8012ed8:	6143      	str	r3, [r0, #20]
 8012eda:	2d09      	cmp	r5, #9
 8012edc:	f04f 0301 	mov.w	r3, #1
 8012ee0:	6103      	str	r3, [r0, #16]
 8012ee2:	dd16      	ble.n	8012f12 <__s2b+0x72>
 8012ee4:	f104 0909 	add.w	r9, r4, #9
 8012ee8:	46c8      	mov	r8, r9
 8012eea:	442c      	add	r4, r5
 8012eec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ef0:	4601      	mov	r1, r0
 8012ef2:	3b30      	subs	r3, #48	; 0x30
 8012ef4:	220a      	movs	r2, #10
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f7ff ff88 	bl	8012e0c <__multadd>
 8012efc:	45a0      	cmp	r8, r4
 8012efe:	d1f5      	bne.n	8012eec <__s2b+0x4c>
 8012f00:	f1a5 0408 	sub.w	r4, r5, #8
 8012f04:	444c      	add	r4, r9
 8012f06:	1b2d      	subs	r5, r5, r4
 8012f08:	1963      	adds	r3, r4, r5
 8012f0a:	42bb      	cmp	r3, r7
 8012f0c:	db04      	blt.n	8012f18 <__s2b+0x78>
 8012f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f12:	340a      	adds	r4, #10
 8012f14:	2509      	movs	r5, #9
 8012f16:	e7f6      	b.n	8012f06 <__s2b+0x66>
 8012f18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012f1c:	4601      	mov	r1, r0
 8012f1e:	3b30      	subs	r3, #48	; 0x30
 8012f20:	220a      	movs	r2, #10
 8012f22:	4630      	mov	r0, r6
 8012f24:	f7ff ff72 	bl	8012e0c <__multadd>
 8012f28:	e7ee      	b.n	8012f08 <__s2b+0x68>
 8012f2a:	bf00      	nop
 8012f2c:	08100484 	.word	0x08100484
 8012f30:	08100578 	.word	0x08100578

08012f34 <__hi0bits>:
 8012f34:	0c03      	lsrs	r3, r0, #16
 8012f36:	041b      	lsls	r3, r3, #16
 8012f38:	b9d3      	cbnz	r3, 8012f70 <__hi0bits+0x3c>
 8012f3a:	0400      	lsls	r0, r0, #16
 8012f3c:	2310      	movs	r3, #16
 8012f3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012f42:	bf04      	itt	eq
 8012f44:	0200      	lsleq	r0, r0, #8
 8012f46:	3308      	addeq	r3, #8
 8012f48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012f4c:	bf04      	itt	eq
 8012f4e:	0100      	lsleq	r0, r0, #4
 8012f50:	3304      	addeq	r3, #4
 8012f52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012f56:	bf04      	itt	eq
 8012f58:	0080      	lsleq	r0, r0, #2
 8012f5a:	3302      	addeq	r3, #2
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	db05      	blt.n	8012f6c <__hi0bits+0x38>
 8012f60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012f64:	f103 0301 	add.w	r3, r3, #1
 8012f68:	bf08      	it	eq
 8012f6a:	2320      	moveq	r3, #32
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	4770      	bx	lr
 8012f70:	2300      	movs	r3, #0
 8012f72:	e7e4      	b.n	8012f3e <__hi0bits+0xa>

08012f74 <__lo0bits>:
 8012f74:	6803      	ldr	r3, [r0, #0]
 8012f76:	f013 0207 	ands.w	r2, r3, #7
 8012f7a:	4601      	mov	r1, r0
 8012f7c:	d00b      	beq.n	8012f96 <__lo0bits+0x22>
 8012f7e:	07da      	lsls	r2, r3, #31
 8012f80:	d424      	bmi.n	8012fcc <__lo0bits+0x58>
 8012f82:	0798      	lsls	r0, r3, #30
 8012f84:	bf49      	itett	mi
 8012f86:	085b      	lsrmi	r3, r3, #1
 8012f88:	089b      	lsrpl	r3, r3, #2
 8012f8a:	2001      	movmi	r0, #1
 8012f8c:	600b      	strmi	r3, [r1, #0]
 8012f8e:	bf5c      	itt	pl
 8012f90:	600b      	strpl	r3, [r1, #0]
 8012f92:	2002      	movpl	r0, #2
 8012f94:	4770      	bx	lr
 8012f96:	b298      	uxth	r0, r3
 8012f98:	b9b0      	cbnz	r0, 8012fc8 <__lo0bits+0x54>
 8012f9a:	0c1b      	lsrs	r3, r3, #16
 8012f9c:	2010      	movs	r0, #16
 8012f9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012fa2:	bf04      	itt	eq
 8012fa4:	0a1b      	lsreq	r3, r3, #8
 8012fa6:	3008      	addeq	r0, #8
 8012fa8:	071a      	lsls	r2, r3, #28
 8012faa:	bf04      	itt	eq
 8012fac:	091b      	lsreq	r3, r3, #4
 8012fae:	3004      	addeq	r0, #4
 8012fb0:	079a      	lsls	r2, r3, #30
 8012fb2:	bf04      	itt	eq
 8012fb4:	089b      	lsreq	r3, r3, #2
 8012fb6:	3002      	addeq	r0, #2
 8012fb8:	07da      	lsls	r2, r3, #31
 8012fba:	d403      	bmi.n	8012fc4 <__lo0bits+0x50>
 8012fbc:	085b      	lsrs	r3, r3, #1
 8012fbe:	f100 0001 	add.w	r0, r0, #1
 8012fc2:	d005      	beq.n	8012fd0 <__lo0bits+0x5c>
 8012fc4:	600b      	str	r3, [r1, #0]
 8012fc6:	4770      	bx	lr
 8012fc8:	4610      	mov	r0, r2
 8012fca:	e7e8      	b.n	8012f9e <__lo0bits+0x2a>
 8012fcc:	2000      	movs	r0, #0
 8012fce:	4770      	bx	lr
 8012fd0:	2020      	movs	r0, #32
 8012fd2:	4770      	bx	lr

08012fd4 <__i2b>:
 8012fd4:	b510      	push	{r4, lr}
 8012fd6:	460c      	mov	r4, r1
 8012fd8:	2101      	movs	r1, #1
 8012fda:	f7ff feb5 	bl	8012d48 <_Balloc>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	b928      	cbnz	r0, 8012fee <__i2b+0x1a>
 8012fe2:	4b05      	ldr	r3, [pc, #20]	; (8012ff8 <__i2b+0x24>)
 8012fe4:	4805      	ldr	r0, [pc, #20]	; (8012ffc <__i2b+0x28>)
 8012fe6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012fea:	f000 ff65 	bl	8013eb8 <__assert_func>
 8012fee:	2301      	movs	r3, #1
 8012ff0:	6144      	str	r4, [r0, #20]
 8012ff2:	6103      	str	r3, [r0, #16]
 8012ff4:	bd10      	pop	{r4, pc}
 8012ff6:	bf00      	nop
 8012ff8:	08100484 	.word	0x08100484
 8012ffc:	08100578 	.word	0x08100578

08013000 <__multiply>:
 8013000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013004:	4614      	mov	r4, r2
 8013006:	690a      	ldr	r2, [r1, #16]
 8013008:	6923      	ldr	r3, [r4, #16]
 801300a:	429a      	cmp	r2, r3
 801300c:	bfb8      	it	lt
 801300e:	460b      	movlt	r3, r1
 8013010:	460d      	mov	r5, r1
 8013012:	bfbc      	itt	lt
 8013014:	4625      	movlt	r5, r4
 8013016:	461c      	movlt	r4, r3
 8013018:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801301c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013020:	68ab      	ldr	r3, [r5, #8]
 8013022:	6869      	ldr	r1, [r5, #4]
 8013024:	eb0a 0709 	add.w	r7, sl, r9
 8013028:	42bb      	cmp	r3, r7
 801302a:	b085      	sub	sp, #20
 801302c:	bfb8      	it	lt
 801302e:	3101      	addlt	r1, #1
 8013030:	f7ff fe8a 	bl	8012d48 <_Balloc>
 8013034:	b930      	cbnz	r0, 8013044 <__multiply+0x44>
 8013036:	4602      	mov	r2, r0
 8013038:	4b42      	ldr	r3, [pc, #264]	; (8013144 <__multiply+0x144>)
 801303a:	4843      	ldr	r0, [pc, #268]	; (8013148 <__multiply+0x148>)
 801303c:	f240 115d 	movw	r1, #349	; 0x15d
 8013040:	f000 ff3a 	bl	8013eb8 <__assert_func>
 8013044:	f100 0614 	add.w	r6, r0, #20
 8013048:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801304c:	4633      	mov	r3, r6
 801304e:	2200      	movs	r2, #0
 8013050:	4543      	cmp	r3, r8
 8013052:	d31e      	bcc.n	8013092 <__multiply+0x92>
 8013054:	f105 0c14 	add.w	ip, r5, #20
 8013058:	f104 0314 	add.w	r3, r4, #20
 801305c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013060:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013064:	9202      	str	r2, [sp, #8]
 8013066:	ebac 0205 	sub.w	r2, ip, r5
 801306a:	3a15      	subs	r2, #21
 801306c:	f022 0203 	bic.w	r2, r2, #3
 8013070:	3204      	adds	r2, #4
 8013072:	f105 0115 	add.w	r1, r5, #21
 8013076:	458c      	cmp	ip, r1
 8013078:	bf38      	it	cc
 801307a:	2204      	movcc	r2, #4
 801307c:	9201      	str	r2, [sp, #4]
 801307e:	9a02      	ldr	r2, [sp, #8]
 8013080:	9303      	str	r3, [sp, #12]
 8013082:	429a      	cmp	r2, r3
 8013084:	d808      	bhi.n	8013098 <__multiply+0x98>
 8013086:	2f00      	cmp	r7, #0
 8013088:	dc55      	bgt.n	8013136 <__multiply+0x136>
 801308a:	6107      	str	r7, [r0, #16]
 801308c:	b005      	add	sp, #20
 801308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013092:	f843 2b04 	str.w	r2, [r3], #4
 8013096:	e7db      	b.n	8013050 <__multiply+0x50>
 8013098:	f8b3 a000 	ldrh.w	sl, [r3]
 801309c:	f1ba 0f00 	cmp.w	sl, #0
 80130a0:	d020      	beq.n	80130e4 <__multiply+0xe4>
 80130a2:	f105 0e14 	add.w	lr, r5, #20
 80130a6:	46b1      	mov	r9, r6
 80130a8:	2200      	movs	r2, #0
 80130aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80130ae:	f8d9 b000 	ldr.w	fp, [r9]
 80130b2:	b2a1      	uxth	r1, r4
 80130b4:	fa1f fb8b 	uxth.w	fp, fp
 80130b8:	fb0a b101 	mla	r1, sl, r1, fp
 80130bc:	4411      	add	r1, r2
 80130be:	f8d9 2000 	ldr.w	r2, [r9]
 80130c2:	0c24      	lsrs	r4, r4, #16
 80130c4:	0c12      	lsrs	r2, r2, #16
 80130c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80130ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80130ce:	b289      	uxth	r1, r1
 80130d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80130d4:	45f4      	cmp	ip, lr
 80130d6:	f849 1b04 	str.w	r1, [r9], #4
 80130da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80130de:	d8e4      	bhi.n	80130aa <__multiply+0xaa>
 80130e0:	9901      	ldr	r1, [sp, #4]
 80130e2:	5072      	str	r2, [r6, r1]
 80130e4:	9a03      	ldr	r2, [sp, #12]
 80130e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80130ea:	3304      	adds	r3, #4
 80130ec:	f1b9 0f00 	cmp.w	r9, #0
 80130f0:	d01f      	beq.n	8013132 <__multiply+0x132>
 80130f2:	6834      	ldr	r4, [r6, #0]
 80130f4:	f105 0114 	add.w	r1, r5, #20
 80130f8:	46b6      	mov	lr, r6
 80130fa:	f04f 0a00 	mov.w	sl, #0
 80130fe:	880a      	ldrh	r2, [r1, #0]
 8013100:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013104:	fb09 b202 	mla	r2, r9, r2, fp
 8013108:	4492      	add	sl, r2
 801310a:	b2a4      	uxth	r4, r4
 801310c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013110:	f84e 4b04 	str.w	r4, [lr], #4
 8013114:	f851 4b04 	ldr.w	r4, [r1], #4
 8013118:	f8be 2000 	ldrh.w	r2, [lr]
 801311c:	0c24      	lsrs	r4, r4, #16
 801311e:	fb09 2404 	mla	r4, r9, r4, r2
 8013122:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013126:	458c      	cmp	ip, r1
 8013128:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801312c:	d8e7      	bhi.n	80130fe <__multiply+0xfe>
 801312e:	9a01      	ldr	r2, [sp, #4]
 8013130:	50b4      	str	r4, [r6, r2]
 8013132:	3604      	adds	r6, #4
 8013134:	e7a3      	b.n	801307e <__multiply+0x7e>
 8013136:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801313a:	2b00      	cmp	r3, #0
 801313c:	d1a5      	bne.n	801308a <__multiply+0x8a>
 801313e:	3f01      	subs	r7, #1
 8013140:	e7a1      	b.n	8013086 <__multiply+0x86>
 8013142:	bf00      	nop
 8013144:	08100484 	.word	0x08100484
 8013148:	08100578 	.word	0x08100578

0801314c <__pow5mult>:
 801314c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013150:	4615      	mov	r5, r2
 8013152:	f012 0203 	ands.w	r2, r2, #3
 8013156:	4606      	mov	r6, r0
 8013158:	460f      	mov	r7, r1
 801315a:	d007      	beq.n	801316c <__pow5mult+0x20>
 801315c:	4c25      	ldr	r4, [pc, #148]	; (80131f4 <__pow5mult+0xa8>)
 801315e:	3a01      	subs	r2, #1
 8013160:	2300      	movs	r3, #0
 8013162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013166:	f7ff fe51 	bl	8012e0c <__multadd>
 801316a:	4607      	mov	r7, r0
 801316c:	10ad      	asrs	r5, r5, #2
 801316e:	d03d      	beq.n	80131ec <__pow5mult+0xa0>
 8013170:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013172:	b97c      	cbnz	r4, 8013194 <__pow5mult+0x48>
 8013174:	2010      	movs	r0, #16
 8013176:	f7ff fdcd 	bl	8012d14 <malloc>
 801317a:	4602      	mov	r2, r0
 801317c:	6270      	str	r0, [r6, #36]	; 0x24
 801317e:	b928      	cbnz	r0, 801318c <__pow5mult+0x40>
 8013180:	4b1d      	ldr	r3, [pc, #116]	; (80131f8 <__pow5mult+0xac>)
 8013182:	481e      	ldr	r0, [pc, #120]	; (80131fc <__pow5mult+0xb0>)
 8013184:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013188:	f000 fe96 	bl	8013eb8 <__assert_func>
 801318c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013190:	6004      	str	r4, [r0, #0]
 8013192:	60c4      	str	r4, [r0, #12]
 8013194:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801319c:	b94c      	cbnz	r4, 80131b2 <__pow5mult+0x66>
 801319e:	f240 2171 	movw	r1, #625	; 0x271
 80131a2:	4630      	mov	r0, r6
 80131a4:	f7ff ff16 	bl	8012fd4 <__i2b>
 80131a8:	2300      	movs	r3, #0
 80131aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80131ae:	4604      	mov	r4, r0
 80131b0:	6003      	str	r3, [r0, #0]
 80131b2:	f04f 0900 	mov.w	r9, #0
 80131b6:	07eb      	lsls	r3, r5, #31
 80131b8:	d50a      	bpl.n	80131d0 <__pow5mult+0x84>
 80131ba:	4639      	mov	r1, r7
 80131bc:	4622      	mov	r2, r4
 80131be:	4630      	mov	r0, r6
 80131c0:	f7ff ff1e 	bl	8013000 <__multiply>
 80131c4:	4639      	mov	r1, r7
 80131c6:	4680      	mov	r8, r0
 80131c8:	4630      	mov	r0, r6
 80131ca:	f7ff fdfd 	bl	8012dc8 <_Bfree>
 80131ce:	4647      	mov	r7, r8
 80131d0:	106d      	asrs	r5, r5, #1
 80131d2:	d00b      	beq.n	80131ec <__pow5mult+0xa0>
 80131d4:	6820      	ldr	r0, [r4, #0]
 80131d6:	b938      	cbnz	r0, 80131e8 <__pow5mult+0x9c>
 80131d8:	4622      	mov	r2, r4
 80131da:	4621      	mov	r1, r4
 80131dc:	4630      	mov	r0, r6
 80131de:	f7ff ff0f 	bl	8013000 <__multiply>
 80131e2:	6020      	str	r0, [r4, #0]
 80131e4:	f8c0 9000 	str.w	r9, [r0]
 80131e8:	4604      	mov	r4, r0
 80131ea:	e7e4      	b.n	80131b6 <__pow5mult+0x6a>
 80131ec:	4638      	mov	r0, r7
 80131ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131f2:	bf00      	nop
 80131f4:	081006c8 	.word	0x081006c8
 80131f8:	0810040e 	.word	0x0810040e
 80131fc:	08100578 	.word	0x08100578

08013200 <__lshift>:
 8013200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013204:	460c      	mov	r4, r1
 8013206:	6849      	ldr	r1, [r1, #4]
 8013208:	6923      	ldr	r3, [r4, #16]
 801320a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801320e:	68a3      	ldr	r3, [r4, #8]
 8013210:	4607      	mov	r7, r0
 8013212:	4691      	mov	r9, r2
 8013214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013218:	f108 0601 	add.w	r6, r8, #1
 801321c:	42b3      	cmp	r3, r6
 801321e:	db0b      	blt.n	8013238 <__lshift+0x38>
 8013220:	4638      	mov	r0, r7
 8013222:	f7ff fd91 	bl	8012d48 <_Balloc>
 8013226:	4605      	mov	r5, r0
 8013228:	b948      	cbnz	r0, 801323e <__lshift+0x3e>
 801322a:	4602      	mov	r2, r0
 801322c:	4b28      	ldr	r3, [pc, #160]	; (80132d0 <__lshift+0xd0>)
 801322e:	4829      	ldr	r0, [pc, #164]	; (80132d4 <__lshift+0xd4>)
 8013230:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013234:	f000 fe40 	bl	8013eb8 <__assert_func>
 8013238:	3101      	adds	r1, #1
 801323a:	005b      	lsls	r3, r3, #1
 801323c:	e7ee      	b.n	801321c <__lshift+0x1c>
 801323e:	2300      	movs	r3, #0
 8013240:	f100 0114 	add.w	r1, r0, #20
 8013244:	f100 0210 	add.w	r2, r0, #16
 8013248:	4618      	mov	r0, r3
 801324a:	4553      	cmp	r3, sl
 801324c:	db33      	blt.n	80132b6 <__lshift+0xb6>
 801324e:	6920      	ldr	r0, [r4, #16]
 8013250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013254:	f104 0314 	add.w	r3, r4, #20
 8013258:	f019 091f 	ands.w	r9, r9, #31
 801325c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013260:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013264:	d02b      	beq.n	80132be <__lshift+0xbe>
 8013266:	f1c9 0e20 	rsb	lr, r9, #32
 801326a:	468a      	mov	sl, r1
 801326c:	2200      	movs	r2, #0
 801326e:	6818      	ldr	r0, [r3, #0]
 8013270:	fa00 f009 	lsl.w	r0, r0, r9
 8013274:	4302      	orrs	r2, r0
 8013276:	f84a 2b04 	str.w	r2, [sl], #4
 801327a:	f853 2b04 	ldr.w	r2, [r3], #4
 801327e:	459c      	cmp	ip, r3
 8013280:	fa22 f20e 	lsr.w	r2, r2, lr
 8013284:	d8f3      	bhi.n	801326e <__lshift+0x6e>
 8013286:	ebac 0304 	sub.w	r3, ip, r4
 801328a:	3b15      	subs	r3, #21
 801328c:	f023 0303 	bic.w	r3, r3, #3
 8013290:	3304      	adds	r3, #4
 8013292:	f104 0015 	add.w	r0, r4, #21
 8013296:	4584      	cmp	ip, r0
 8013298:	bf38      	it	cc
 801329a:	2304      	movcc	r3, #4
 801329c:	50ca      	str	r2, [r1, r3]
 801329e:	b10a      	cbz	r2, 80132a4 <__lshift+0xa4>
 80132a0:	f108 0602 	add.w	r6, r8, #2
 80132a4:	3e01      	subs	r6, #1
 80132a6:	4638      	mov	r0, r7
 80132a8:	612e      	str	r6, [r5, #16]
 80132aa:	4621      	mov	r1, r4
 80132ac:	f7ff fd8c 	bl	8012dc8 <_Bfree>
 80132b0:	4628      	mov	r0, r5
 80132b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80132ba:	3301      	adds	r3, #1
 80132bc:	e7c5      	b.n	801324a <__lshift+0x4a>
 80132be:	3904      	subs	r1, #4
 80132c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80132c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80132c8:	459c      	cmp	ip, r3
 80132ca:	d8f9      	bhi.n	80132c0 <__lshift+0xc0>
 80132cc:	e7ea      	b.n	80132a4 <__lshift+0xa4>
 80132ce:	bf00      	nop
 80132d0:	08100484 	.word	0x08100484
 80132d4:	08100578 	.word	0x08100578

080132d8 <__mcmp>:
 80132d8:	b530      	push	{r4, r5, lr}
 80132da:	6902      	ldr	r2, [r0, #16]
 80132dc:	690c      	ldr	r4, [r1, #16]
 80132de:	1b12      	subs	r2, r2, r4
 80132e0:	d10e      	bne.n	8013300 <__mcmp+0x28>
 80132e2:	f100 0314 	add.w	r3, r0, #20
 80132e6:	3114      	adds	r1, #20
 80132e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80132ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80132f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80132f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80132f8:	42a5      	cmp	r5, r4
 80132fa:	d003      	beq.n	8013304 <__mcmp+0x2c>
 80132fc:	d305      	bcc.n	801330a <__mcmp+0x32>
 80132fe:	2201      	movs	r2, #1
 8013300:	4610      	mov	r0, r2
 8013302:	bd30      	pop	{r4, r5, pc}
 8013304:	4283      	cmp	r3, r0
 8013306:	d3f3      	bcc.n	80132f0 <__mcmp+0x18>
 8013308:	e7fa      	b.n	8013300 <__mcmp+0x28>
 801330a:	f04f 32ff 	mov.w	r2, #4294967295
 801330e:	e7f7      	b.n	8013300 <__mcmp+0x28>

08013310 <__mdiff>:
 8013310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	460c      	mov	r4, r1
 8013316:	4606      	mov	r6, r0
 8013318:	4611      	mov	r1, r2
 801331a:	4620      	mov	r0, r4
 801331c:	4617      	mov	r7, r2
 801331e:	f7ff ffdb 	bl	80132d8 <__mcmp>
 8013322:	1e05      	subs	r5, r0, #0
 8013324:	d110      	bne.n	8013348 <__mdiff+0x38>
 8013326:	4629      	mov	r1, r5
 8013328:	4630      	mov	r0, r6
 801332a:	f7ff fd0d 	bl	8012d48 <_Balloc>
 801332e:	b930      	cbnz	r0, 801333e <__mdiff+0x2e>
 8013330:	4b39      	ldr	r3, [pc, #228]	; (8013418 <__mdiff+0x108>)
 8013332:	4602      	mov	r2, r0
 8013334:	f240 2132 	movw	r1, #562	; 0x232
 8013338:	4838      	ldr	r0, [pc, #224]	; (801341c <__mdiff+0x10c>)
 801333a:	f000 fdbd 	bl	8013eb8 <__assert_func>
 801333e:	2301      	movs	r3, #1
 8013340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013348:	bfa4      	itt	ge
 801334a:	463b      	movge	r3, r7
 801334c:	4627      	movge	r7, r4
 801334e:	4630      	mov	r0, r6
 8013350:	6879      	ldr	r1, [r7, #4]
 8013352:	bfa6      	itte	ge
 8013354:	461c      	movge	r4, r3
 8013356:	2500      	movge	r5, #0
 8013358:	2501      	movlt	r5, #1
 801335a:	f7ff fcf5 	bl	8012d48 <_Balloc>
 801335e:	b920      	cbnz	r0, 801336a <__mdiff+0x5a>
 8013360:	4b2d      	ldr	r3, [pc, #180]	; (8013418 <__mdiff+0x108>)
 8013362:	4602      	mov	r2, r0
 8013364:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013368:	e7e6      	b.n	8013338 <__mdiff+0x28>
 801336a:	693e      	ldr	r6, [r7, #16]
 801336c:	60c5      	str	r5, [r0, #12]
 801336e:	6925      	ldr	r5, [r4, #16]
 8013370:	f107 0114 	add.w	r1, r7, #20
 8013374:	f104 0914 	add.w	r9, r4, #20
 8013378:	f100 0e14 	add.w	lr, r0, #20
 801337c:	f107 0210 	add.w	r2, r7, #16
 8013380:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013384:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013388:	46f2      	mov	sl, lr
 801338a:	2700      	movs	r7, #0
 801338c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013394:	fa1f f883 	uxth.w	r8, r3
 8013398:	fa17 f78b 	uxtah	r7, r7, fp
 801339c:	0c1b      	lsrs	r3, r3, #16
 801339e:	eba7 0808 	sub.w	r8, r7, r8
 80133a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80133a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80133aa:	fa1f f888 	uxth.w	r8, r8
 80133ae:	141f      	asrs	r7, r3, #16
 80133b0:	454d      	cmp	r5, r9
 80133b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80133b6:	f84a 3b04 	str.w	r3, [sl], #4
 80133ba:	d8e7      	bhi.n	801338c <__mdiff+0x7c>
 80133bc:	1b2b      	subs	r3, r5, r4
 80133be:	3b15      	subs	r3, #21
 80133c0:	f023 0303 	bic.w	r3, r3, #3
 80133c4:	3304      	adds	r3, #4
 80133c6:	3415      	adds	r4, #21
 80133c8:	42a5      	cmp	r5, r4
 80133ca:	bf38      	it	cc
 80133cc:	2304      	movcc	r3, #4
 80133ce:	4419      	add	r1, r3
 80133d0:	4473      	add	r3, lr
 80133d2:	469e      	mov	lr, r3
 80133d4:	460d      	mov	r5, r1
 80133d6:	4565      	cmp	r5, ip
 80133d8:	d30e      	bcc.n	80133f8 <__mdiff+0xe8>
 80133da:	f10c 0203 	add.w	r2, ip, #3
 80133de:	1a52      	subs	r2, r2, r1
 80133e0:	f022 0203 	bic.w	r2, r2, #3
 80133e4:	3903      	subs	r1, #3
 80133e6:	458c      	cmp	ip, r1
 80133e8:	bf38      	it	cc
 80133ea:	2200      	movcc	r2, #0
 80133ec:	441a      	add	r2, r3
 80133ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80133f2:	b17b      	cbz	r3, 8013414 <__mdiff+0x104>
 80133f4:	6106      	str	r6, [r0, #16]
 80133f6:	e7a5      	b.n	8013344 <__mdiff+0x34>
 80133f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80133fc:	fa17 f488 	uxtah	r4, r7, r8
 8013400:	1422      	asrs	r2, r4, #16
 8013402:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013406:	b2a4      	uxth	r4, r4
 8013408:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801340c:	f84e 4b04 	str.w	r4, [lr], #4
 8013410:	1417      	asrs	r7, r2, #16
 8013412:	e7e0      	b.n	80133d6 <__mdiff+0xc6>
 8013414:	3e01      	subs	r6, #1
 8013416:	e7ea      	b.n	80133ee <__mdiff+0xde>
 8013418:	08100484 	.word	0x08100484
 801341c:	08100578 	.word	0x08100578

08013420 <__ulp>:
 8013420:	b082      	sub	sp, #8
 8013422:	ed8d 0b00 	vstr	d0, [sp]
 8013426:	9b01      	ldr	r3, [sp, #4]
 8013428:	4912      	ldr	r1, [pc, #72]	; (8013474 <__ulp+0x54>)
 801342a:	4019      	ands	r1, r3
 801342c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013430:	2900      	cmp	r1, #0
 8013432:	dd05      	ble.n	8013440 <__ulp+0x20>
 8013434:	2200      	movs	r2, #0
 8013436:	460b      	mov	r3, r1
 8013438:	ec43 2b10 	vmov	d0, r2, r3
 801343c:	b002      	add	sp, #8
 801343e:	4770      	bx	lr
 8013440:	4249      	negs	r1, r1
 8013442:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013446:	ea4f 5021 	mov.w	r0, r1, asr #20
 801344a:	f04f 0200 	mov.w	r2, #0
 801344e:	f04f 0300 	mov.w	r3, #0
 8013452:	da04      	bge.n	801345e <__ulp+0x3e>
 8013454:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013458:	fa41 f300 	asr.w	r3, r1, r0
 801345c:	e7ec      	b.n	8013438 <__ulp+0x18>
 801345e:	f1a0 0114 	sub.w	r1, r0, #20
 8013462:	291e      	cmp	r1, #30
 8013464:	bfda      	itte	le
 8013466:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801346a:	fa20 f101 	lsrle.w	r1, r0, r1
 801346e:	2101      	movgt	r1, #1
 8013470:	460a      	mov	r2, r1
 8013472:	e7e1      	b.n	8013438 <__ulp+0x18>
 8013474:	7ff00000 	.word	0x7ff00000

08013478 <__b2d>:
 8013478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347a:	6905      	ldr	r5, [r0, #16]
 801347c:	f100 0714 	add.w	r7, r0, #20
 8013480:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013484:	1f2e      	subs	r6, r5, #4
 8013486:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801348a:	4620      	mov	r0, r4
 801348c:	f7ff fd52 	bl	8012f34 <__hi0bits>
 8013490:	f1c0 0320 	rsb	r3, r0, #32
 8013494:	280a      	cmp	r0, #10
 8013496:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013514 <__b2d+0x9c>
 801349a:	600b      	str	r3, [r1, #0]
 801349c:	dc14      	bgt.n	80134c8 <__b2d+0x50>
 801349e:	f1c0 0e0b 	rsb	lr, r0, #11
 80134a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80134a6:	42b7      	cmp	r7, r6
 80134a8:	ea41 030c 	orr.w	r3, r1, ip
 80134ac:	bf34      	ite	cc
 80134ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80134b2:	2100      	movcs	r1, #0
 80134b4:	3015      	adds	r0, #21
 80134b6:	fa04 f000 	lsl.w	r0, r4, r0
 80134ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80134be:	ea40 0201 	orr.w	r2, r0, r1
 80134c2:	ec43 2b10 	vmov	d0, r2, r3
 80134c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134c8:	42b7      	cmp	r7, r6
 80134ca:	bf3a      	itte	cc
 80134cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80134d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80134d4:	2100      	movcs	r1, #0
 80134d6:	380b      	subs	r0, #11
 80134d8:	d017      	beq.n	801350a <__b2d+0x92>
 80134da:	f1c0 0c20 	rsb	ip, r0, #32
 80134de:	fa04 f500 	lsl.w	r5, r4, r0
 80134e2:	42be      	cmp	r6, r7
 80134e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80134e8:	ea45 0504 	orr.w	r5, r5, r4
 80134ec:	bf8c      	ite	hi
 80134ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80134f2:	2400      	movls	r4, #0
 80134f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80134f8:	fa01 f000 	lsl.w	r0, r1, r0
 80134fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8013500:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013504:	ea40 0204 	orr.w	r2, r0, r4
 8013508:	e7db      	b.n	80134c2 <__b2d+0x4a>
 801350a:	ea44 030c 	orr.w	r3, r4, ip
 801350e:	460a      	mov	r2, r1
 8013510:	e7d7      	b.n	80134c2 <__b2d+0x4a>
 8013512:	bf00      	nop
 8013514:	3ff00000 	.word	0x3ff00000

08013518 <__d2b>:
 8013518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801351c:	4689      	mov	r9, r1
 801351e:	2101      	movs	r1, #1
 8013520:	ec57 6b10 	vmov	r6, r7, d0
 8013524:	4690      	mov	r8, r2
 8013526:	f7ff fc0f 	bl	8012d48 <_Balloc>
 801352a:	4604      	mov	r4, r0
 801352c:	b930      	cbnz	r0, 801353c <__d2b+0x24>
 801352e:	4602      	mov	r2, r0
 8013530:	4b25      	ldr	r3, [pc, #148]	; (80135c8 <__d2b+0xb0>)
 8013532:	4826      	ldr	r0, [pc, #152]	; (80135cc <__d2b+0xb4>)
 8013534:	f240 310a 	movw	r1, #778	; 0x30a
 8013538:	f000 fcbe 	bl	8013eb8 <__assert_func>
 801353c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013544:	bb35      	cbnz	r5, 8013594 <__d2b+0x7c>
 8013546:	2e00      	cmp	r6, #0
 8013548:	9301      	str	r3, [sp, #4]
 801354a:	d028      	beq.n	801359e <__d2b+0x86>
 801354c:	4668      	mov	r0, sp
 801354e:	9600      	str	r6, [sp, #0]
 8013550:	f7ff fd10 	bl	8012f74 <__lo0bits>
 8013554:	9900      	ldr	r1, [sp, #0]
 8013556:	b300      	cbz	r0, 801359a <__d2b+0x82>
 8013558:	9a01      	ldr	r2, [sp, #4]
 801355a:	f1c0 0320 	rsb	r3, r0, #32
 801355e:	fa02 f303 	lsl.w	r3, r2, r3
 8013562:	430b      	orrs	r3, r1
 8013564:	40c2      	lsrs	r2, r0
 8013566:	6163      	str	r3, [r4, #20]
 8013568:	9201      	str	r2, [sp, #4]
 801356a:	9b01      	ldr	r3, [sp, #4]
 801356c:	61a3      	str	r3, [r4, #24]
 801356e:	2b00      	cmp	r3, #0
 8013570:	bf14      	ite	ne
 8013572:	2202      	movne	r2, #2
 8013574:	2201      	moveq	r2, #1
 8013576:	6122      	str	r2, [r4, #16]
 8013578:	b1d5      	cbz	r5, 80135b0 <__d2b+0x98>
 801357a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801357e:	4405      	add	r5, r0
 8013580:	f8c9 5000 	str.w	r5, [r9]
 8013584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013588:	f8c8 0000 	str.w	r0, [r8]
 801358c:	4620      	mov	r0, r4
 801358e:	b003      	add	sp, #12
 8013590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013598:	e7d5      	b.n	8013546 <__d2b+0x2e>
 801359a:	6161      	str	r1, [r4, #20]
 801359c:	e7e5      	b.n	801356a <__d2b+0x52>
 801359e:	a801      	add	r0, sp, #4
 80135a0:	f7ff fce8 	bl	8012f74 <__lo0bits>
 80135a4:	9b01      	ldr	r3, [sp, #4]
 80135a6:	6163      	str	r3, [r4, #20]
 80135a8:	2201      	movs	r2, #1
 80135aa:	6122      	str	r2, [r4, #16]
 80135ac:	3020      	adds	r0, #32
 80135ae:	e7e3      	b.n	8013578 <__d2b+0x60>
 80135b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80135b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80135b8:	f8c9 0000 	str.w	r0, [r9]
 80135bc:	6918      	ldr	r0, [r3, #16]
 80135be:	f7ff fcb9 	bl	8012f34 <__hi0bits>
 80135c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80135c6:	e7df      	b.n	8013588 <__d2b+0x70>
 80135c8:	08100484 	.word	0x08100484
 80135cc:	08100578 	.word	0x08100578

080135d0 <__ratio>:
 80135d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d4:	4688      	mov	r8, r1
 80135d6:	4669      	mov	r1, sp
 80135d8:	4681      	mov	r9, r0
 80135da:	f7ff ff4d 	bl	8013478 <__b2d>
 80135de:	a901      	add	r1, sp, #4
 80135e0:	4640      	mov	r0, r8
 80135e2:	ec55 4b10 	vmov	r4, r5, d0
 80135e6:	f7ff ff47 	bl	8013478 <__b2d>
 80135ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80135f2:	eba3 0c02 	sub.w	ip, r3, r2
 80135f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80135fa:	1a9b      	subs	r3, r3, r2
 80135fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013600:	ec51 0b10 	vmov	r0, r1, d0
 8013604:	2b00      	cmp	r3, #0
 8013606:	bfd6      	itet	le
 8013608:	460a      	movle	r2, r1
 801360a:	462a      	movgt	r2, r5
 801360c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013610:	468b      	mov	fp, r1
 8013612:	462f      	mov	r7, r5
 8013614:	bfd4      	ite	le
 8013616:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801361a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801361e:	4620      	mov	r0, r4
 8013620:	ee10 2a10 	vmov	r2, s0
 8013624:	465b      	mov	r3, fp
 8013626:	4639      	mov	r1, r7
 8013628:	f7f2 fa80 	bl	8005b2c <__aeabi_ddiv>
 801362c:	ec41 0b10 	vmov	d0, r0, r1
 8013630:	b003      	add	sp, #12
 8013632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013636 <__copybits>:
 8013636:	3901      	subs	r1, #1
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	1149      	asrs	r1, r1, #5
 801363c:	6914      	ldr	r4, [r2, #16]
 801363e:	3101      	adds	r1, #1
 8013640:	f102 0314 	add.w	r3, r2, #20
 8013644:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013648:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801364c:	1f05      	subs	r5, r0, #4
 801364e:	42a3      	cmp	r3, r4
 8013650:	d30c      	bcc.n	801366c <__copybits+0x36>
 8013652:	1aa3      	subs	r3, r4, r2
 8013654:	3b11      	subs	r3, #17
 8013656:	f023 0303 	bic.w	r3, r3, #3
 801365a:	3211      	adds	r2, #17
 801365c:	42a2      	cmp	r2, r4
 801365e:	bf88      	it	hi
 8013660:	2300      	movhi	r3, #0
 8013662:	4418      	add	r0, r3
 8013664:	2300      	movs	r3, #0
 8013666:	4288      	cmp	r0, r1
 8013668:	d305      	bcc.n	8013676 <__copybits+0x40>
 801366a:	bd70      	pop	{r4, r5, r6, pc}
 801366c:	f853 6b04 	ldr.w	r6, [r3], #4
 8013670:	f845 6f04 	str.w	r6, [r5, #4]!
 8013674:	e7eb      	b.n	801364e <__copybits+0x18>
 8013676:	f840 3b04 	str.w	r3, [r0], #4
 801367a:	e7f4      	b.n	8013666 <__copybits+0x30>

0801367c <__any_on>:
 801367c:	f100 0214 	add.w	r2, r0, #20
 8013680:	6900      	ldr	r0, [r0, #16]
 8013682:	114b      	asrs	r3, r1, #5
 8013684:	4298      	cmp	r0, r3
 8013686:	b510      	push	{r4, lr}
 8013688:	db11      	blt.n	80136ae <__any_on+0x32>
 801368a:	dd0a      	ble.n	80136a2 <__any_on+0x26>
 801368c:	f011 011f 	ands.w	r1, r1, #31
 8013690:	d007      	beq.n	80136a2 <__any_on+0x26>
 8013692:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013696:	fa24 f001 	lsr.w	r0, r4, r1
 801369a:	fa00 f101 	lsl.w	r1, r0, r1
 801369e:	428c      	cmp	r4, r1
 80136a0:	d10b      	bne.n	80136ba <__any_on+0x3e>
 80136a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d803      	bhi.n	80136b2 <__any_on+0x36>
 80136aa:	2000      	movs	r0, #0
 80136ac:	bd10      	pop	{r4, pc}
 80136ae:	4603      	mov	r3, r0
 80136b0:	e7f7      	b.n	80136a2 <__any_on+0x26>
 80136b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136b6:	2900      	cmp	r1, #0
 80136b8:	d0f5      	beq.n	80136a6 <__any_on+0x2a>
 80136ba:	2001      	movs	r0, #1
 80136bc:	e7f6      	b.n	80136ac <__any_on+0x30>

080136be <_calloc_r>:
 80136be:	b513      	push	{r0, r1, r4, lr}
 80136c0:	434a      	muls	r2, r1
 80136c2:	4611      	mov	r1, r2
 80136c4:	9201      	str	r2, [sp, #4]
 80136c6:	f000 f859 	bl	801377c <_malloc_r>
 80136ca:	4604      	mov	r4, r0
 80136cc:	b118      	cbz	r0, 80136d6 <_calloc_r+0x18>
 80136ce:	9a01      	ldr	r2, [sp, #4]
 80136d0:	2100      	movs	r1, #0
 80136d2:	f7fc f869 	bl	800f7a8 <memset>
 80136d6:	4620      	mov	r0, r4
 80136d8:	b002      	add	sp, #8
 80136da:	bd10      	pop	{r4, pc}

080136dc <_free_r>:
 80136dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136de:	2900      	cmp	r1, #0
 80136e0:	d048      	beq.n	8013774 <_free_r+0x98>
 80136e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136e6:	9001      	str	r0, [sp, #4]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f1a1 0404 	sub.w	r4, r1, #4
 80136ee:	bfb8      	it	lt
 80136f0:	18e4      	addlt	r4, r4, r3
 80136f2:	f000 fc6f 	bl	8013fd4 <__malloc_lock>
 80136f6:	4a20      	ldr	r2, [pc, #128]	; (8013778 <_free_r+0x9c>)
 80136f8:	9801      	ldr	r0, [sp, #4]
 80136fa:	6813      	ldr	r3, [r2, #0]
 80136fc:	4615      	mov	r5, r2
 80136fe:	b933      	cbnz	r3, 801370e <_free_r+0x32>
 8013700:	6063      	str	r3, [r4, #4]
 8013702:	6014      	str	r4, [r2, #0]
 8013704:	b003      	add	sp, #12
 8013706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801370a:	f000 bc69 	b.w	8013fe0 <__malloc_unlock>
 801370e:	42a3      	cmp	r3, r4
 8013710:	d90b      	bls.n	801372a <_free_r+0x4e>
 8013712:	6821      	ldr	r1, [r4, #0]
 8013714:	1862      	adds	r2, r4, r1
 8013716:	4293      	cmp	r3, r2
 8013718:	bf04      	itt	eq
 801371a:	681a      	ldreq	r2, [r3, #0]
 801371c:	685b      	ldreq	r3, [r3, #4]
 801371e:	6063      	str	r3, [r4, #4]
 8013720:	bf04      	itt	eq
 8013722:	1852      	addeq	r2, r2, r1
 8013724:	6022      	streq	r2, [r4, #0]
 8013726:	602c      	str	r4, [r5, #0]
 8013728:	e7ec      	b.n	8013704 <_free_r+0x28>
 801372a:	461a      	mov	r2, r3
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	b10b      	cbz	r3, 8013734 <_free_r+0x58>
 8013730:	42a3      	cmp	r3, r4
 8013732:	d9fa      	bls.n	801372a <_free_r+0x4e>
 8013734:	6811      	ldr	r1, [r2, #0]
 8013736:	1855      	adds	r5, r2, r1
 8013738:	42a5      	cmp	r5, r4
 801373a:	d10b      	bne.n	8013754 <_free_r+0x78>
 801373c:	6824      	ldr	r4, [r4, #0]
 801373e:	4421      	add	r1, r4
 8013740:	1854      	adds	r4, r2, r1
 8013742:	42a3      	cmp	r3, r4
 8013744:	6011      	str	r1, [r2, #0]
 8013746:	d1dd      	bne.n	8013704 <_free_r+0x28>
 8013748:	681c      	ldr	r4, [r3, #0]
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	6053      	str	r3, [r2, #4]
 801374e:	4421      	add	r1, r4
 8013750:	6011      	str	r1, [r2, #0]
 8013752:	e7d7      	b.n	8013704 <_free_r+0x28>
 8013754:	d902      	bls.n	801375c <_free_r+0x80>
 8013756:	230c      	movs	r3, #12
 8013758:	6003      	str	r3, [r0, #0]
 801375a:	e7d3      	b.n	8013704 <_free_r+0x28>
 801375c:	6825      	ldr	r5, [r4, #0]
 801375e:	1961      	adds	r1, r4, r5
 8013760:	428b      	cmp	r3, r1
 8013762:	bf04      	itt	eq
 8013764:	6819      	ldreq	r1, [r3, #0]
 8013766:	685b      	ldreq	r3, [r3, #4]
 8013768:	6063      	str	r3, [r4, #4]
 801376a:	bf04      	itt	eq
 801376c:	1949      	addeq	r1, r1, r5
 801376e:	6021      	streq	r1, [r4, #0]
 8013770:	6054      	str	r4, [r2, #4]
 8013772:	e7c7      	b.n	8013704 <_free_r+0x28>
 8013774:	b003      	add	sp, #12
 8013776:	bd30      	pop	{r4, r5, pc}
 8013778:	200011b0 	.word	0x200011b0

0801377c <_malloc_r>:
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	1ccd      	adds	r5, r1, #3
 8013780:	f025 0503 	bic.w	r5, r5, #3
 8013784:	3508      	adds	r5, #8
 8013786:	2d0c      	cmp	r5, #12
 8013788:	bf38      	it	cc
 801378a:	250c      	movcc	r5, #12
 801378c:	2d00      	cmp	r5, #0
 801378e:	4606      	mov	r6, r0
 8013790:	db01      	blt.n	8013796 <_malloc_r+0x1a>
 8013792:	42a9      	cmp	r1, r5
 8013794:	d903      	bls.n	801379e <_malloc_r+0x22>
 8013796:	230c      	movs	r3, #12
 8013798:	6033      	str	r3, [r6, #0]
 801379a:	2000      	movs	r0, #0
 801379c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801379e:	f000 fc19 	bl	8013fd4 <__malloc_lock>
 80137a2:	4921      	ldr	r1, [pc, #132]	; (8013828 <_malloc_r+0xac>)
 80137a4:	680a      	ldr	r2, [r1, #0]
 80137a6:	4614      	mov	r4, r2
 80137a8:	b99c      	cbnz	r4, 80137d2 <_malloc_r+0x56>
 80137aa:	4f20      	ldr	r7, [pc, #128]	; (801382c <_malloc_r+0xb0>)
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	b923      	cbnz	r3, 80137ba <_malloc_r+0x3e>
 80137b0:	4621      	mov	r1, r4
 80137b2:	4630      	mov	r0, r6
 80137b4:	f000 fafc 	bl	8013db0 <_sbrk_r>
 80137b8:	6038      	str	r0, [r7, #0]
 80137ba:	4629      	mov	r1, r5
 80137bc:	4630      	mov	r0, r6
 80137be:	f000 faf7 	bl	8013db0 <_sbrk_r>
 80137c2:	1c43      	adds	r3, r0, #1
 80137c4:	d123      	bne.n	801380e <_malloc_r+0x92>
 80137c6:	230c      	movs	r3, #12
 80137c8:	6033      	str	r3, [r6, #0]
 80137ca:	4630      	mov	r0, r6
 80137cc:	f000 fc08 	bl	8013fe0 <__malloc_unlock>
 80137d0:	e7e3      	b.n	801379a <_malloc_r+0x1e>
 80137d2:	6823      	ldr	r3, [r4, #0]
 80137d4:	1b5b      	subs	r3, r3, r5
 80137d6:	d417      	bmi.n	8013808 <_malloc_r+0x8c>
 80137d8:	2b0b      	cmp	r3, #11
 80137da:	d903      	bls.n	80137e4 <_malloc_r+0x68>
 80137dc:	6023      	str	r3, [r4, #0]
 80137de:	441c      	add	r4, r3
 80137e0:	6025      	str	r5, [r4, #0]
 80137e2:	e004      	b.n	80137ee <_malloc_r+0x72>
 80137e4:	6863      	ldr	r3, [r4, #4]
 80137e6:	42a2      	cmp	r2, r4
 80137e8:	bf0c      	ite	eq
 80137ea:	600b      	streq	r3, [r1, #0]
 80137ec:	6053      	strne	r3, [r2, #4]
 80137ee:	4630      	mov	r0, r6
 80137f0:	f000 fbf6 	bl	8013fe0 <__malloc_unlock>
 80137f4:	f104 000b 	add.w	r0, r4, #11
 80137f8:	1d23      	adds	r3, r4, #4
 80137fa:	f020 0007 	bic.w	r0, r0, #7
 80137fe:	1ac2      	subs	r2, r0, r3
 8013800:	d0cc      	beq.n	801379c <_malloc_r+0x20>
 8013802:	1a1b      	subs	r3, r3, r0
 8013804:	50a3      	str	r3, [r4, r2]
 8013806:	e7c9      	b.n	801379c <_malloc_r+0x20>
 8013808:	4622      	mov	r2, r4
 801380a:	6864      	ldr	r4, [r4, #4]
 801380c:	e7cc      	b.n	80137a8 <_malloc_r+0x2c>
 801380e:	1cc4      	adds	r4, r0, #3
 8013810:	f024 0403 	bic.w	r4, r4, #3
 8013814:	42a0      	cmp	r0, r4
 8013816:	d0e3      	beq.n	80137e0 <_malloc_r+0x64>
 8013818:	1a21      	subs	r1, r4, r0
 801381a:	4630      	mov	r0, r6
 801381c:	f000 fac8 	bl	8013db0 <_sbrk_r>
 8013820:	3001      	adds	r0, #1
 8013822:	d1dd      	bne.n	80137e0 <_malloc_r+0x64>
 8013824:	e7cf      	b.n	80137c6 <_malloc_r+0x4a>
 8013826:	bf00      	nop
 8013828:	200011b0 	.word	0x200011b0
 801382c:	200011b4 	.word	0x200011b4

08013830 <__ssputs_r>:
 8013830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013834:	688e      	ldr	r6, [r1, #8]
 8013836:	429e      	cmp	r6, r3
 8013838:	4682      	mov	sl, r0
 801383a:	460c      	mov	r4, r1
 801383c:	4690      	mov	r8, r2
 801383e:	461f      	mov	r7, r3
 8013840:	d838      	bhi.n	80138b4 <__ssputs_r+0x84>
 8013842:	898a      	ldrh	r2, [r1, #12]
 8013844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013848:	d032      	beq.n	80138b0 <__ssputs_r+0x80>
 801384a:	6825      	ldr	r5, [r4, #0]
 801384c:	6909      	ldr	r1, [r1, #16]
 801384e:	eba5 0901 	sub.w	r9, r5, r1
 8013852:	6965      	ldr	r5, [r4, #20]
 8013854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801385c:	3301      	adds	r3, #1
 801385e:	444b      	add	r3, r9
 8013860:	106d      	asrs	r5, r5, #1
 8013862:	429d      	cmp	r5, r3
 8013864:	bf38      	it	cc
 8013866:	461d      	movcc	r5, r3
 8013868:	0553      	lsls	r3, r2, #21
 801386a:	d531      	bpl.n	80138d0 <__ssputs_r+0xa0>
 801386c:	4629      	mov	r1, r5
 801386e:	f7ff ff85 	bl	801377c <_malloc_r>
 8013872:	4606      	mov	r6, r0
 8013874:	b950      	cbnz	r0, 801388c <__ssputs_r+0x5c>
 8013876:	230c      	movs	r3, #12
 8013878:	f8ca 3000 	str.w	r3, [sl]
 801387c:	89a3      	ldrh	r3, [r4, #12]
 801387e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013882:	81a3      	strh	r3, [r4, #12]
 8013884:	f04f 30ff 	mov.w	r0, #4294967295
 8013888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801388c:	6921      	ldr	r1, [r4, #16]
 801388e:	464a      	mov	r2, r9
 8013890:	f7fb ff7c 	bl	800f78c <memcpy>
 8013894:	89a3      	ldrh	r3, [r4, #12]
 8013896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801389a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801389e:	81a3      	strh	r3, [r4, #12]
 80138a0:	6126      	str	r6, [r4, #16]
 80138a2:	6165      	str	r5, [r4, #20]
 80138a4:	444e      	add	r6, r9
 80138a6:	eba5 0509 	sub.w	r5, r5, r9
 80138aa:	6026      	str	r6, [r4, #0]
 80138ac:	60a5      	str	r5, [r4, #8]
 80138ae:	463e      	mov	r6, r7
 80138b0:	42be      	cmp	r6, r7
 80138b2:	d900      	bls.n	80138b6 <__ssputs_r+0x86>
 80138b4:	463e      	mov	r6, r7
 80138b6:	4632      	mov	r2, r6
 80138b8:	6820      	ldr	r0, [r4, #0]
 80138ba:	4641      	mov	r1, r8
 80138bc:	f000 fb70 	bl	8013fa0 <memmove>
 80138c0:	68a3      	ldr	r3, [r4, #8]
 80138c2:	6822      	ldr	r2, [r4, #0]
 80138c4:	1b9b      	subs	r3, r3, r6
 80138c6:	4432      	add	r2, r6
 80138c8:	60a3      	str	r3, [r4, #8]
 80138ca:	6022      	str	r2, [r4, #0]
 80138cc:	2000      	movs	r0, #0
 80138ce:	e7db      	b.n	8013888 <__ssputs_r+0x58>
 80138d0:	462a      	mov	r2, r5
 80138d2:	f000 fb8b 	bl	8013fec <_realloc_r>
 80138d6:	4606      	mov	r6, r0
 80138d8:	2800      	cmp	r0, #0
 80138da:	d1e1      	bne.n	80138a0 <__ssputs_r+0x70>
 80138dc:	6921      	ldr	r1, [r4, #16]
 80138de:	4650      	mov	r0, sl
 80138e0:	f7ff fefc 	bl	80136dc <_free_r>
 80138e4:	e7c7      	b.n	8013876 <__ssputs_r+0x46>
	...

080138e8 <_svfiprintf_r>:
 80138e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ec:	4698      	mov	r8, r3
 80138ee:	898b      	ldrh	r3, [r1, #12]
 80138f0:	061b      	lsls	r3, r3, #24
 80138f2:	b09d      	sub	sp, #116	; 0x74
 80138f4:	4607      	mov	r7, r0
 80138f6:	460d      	mov	r5, r1
 80138f8:	4614      	mov	r4, r2
 80138fa:	d50e      	bpl.n	801391a <_svfiprintf_r+0x32>
 80138fc:	690b      	ldr	r3, [r1, #16]
 80138fe:	b963      	cbnz	r3, 801391a <_svfiprintf_r+0x32>
 8013900:	2140      	movs	r1, #64	; 0x40
 8013902:	f7ff ff3b 	bl	801377c <_malloc_r>
 8013906:	6028      	str	r0, [r5, #0]
 8013908:	6128      	str	r0, [r5, #16]
 801390a:	b920      	cbnz	r0, 8013916 <_svfiprintf_r+0x2e>
 801390c:	230c      	movs	r3, #12
 801390e:	603b      	str	r3, [r7, #0]
 8013910:	f04f 30ff 	mov.w	r0, #4294967295
 8013914:	e0d1      	b.n	8013aba <_svfiprintf_r+0x1d2>
 8013916:	2340      	movs	r3, #64	; 0x40
 8013918:	616b      	str	r3, [r5, #20]
 801391a:	2300      	movs	r3, #0
 801391c:	9309      	str	r3, [sp, #36]	; 0x24
 801391e:	2320      	movs	r3, #32
 8013920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013924:	f8cd 800c 	str.w	r8, [sp, #12]
 8013928:	2330      	movs	r3, #48	; 0x30
 801392a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013ad4 <_svfiprintf_r+0x1ec>
 801392e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013932:	f04f 0901 	mov.w	r9, #1
 8013936:	4623      	mov	r3, r4
 8013938:	469a      	mov	sl, r3
 801393a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801393e:	b10a      	cbz	r2, 8013944 <_svfiprintf_r+0x5c>
 8013940:	2a25      	cmp	r2, #37	; 0x25
 8013942:	d1f9      	bne.n	8013938 <_svfiprintf_r+0x50>
 8013944:	ebba 0b04 	subs.w	fp, sl, r4
 8013948:	d00b      	beq.n	8013962 <_svfiprintf_r+0x7a>
 801394a:	465b      	mov	r3, fp
 801394c:	4622      	mov	r2, r4
 801394e:	4629      	mov	r1, r5
 8013950:	4638      	mov	r0, r7
 8013952:	f7ff ff6d 	bl	8013830 <__ssputs_r>
 8013956:	3001      	adds	r0, #1
 8013958:	f000 80aa 	beq.w	8013ab0 <_svfiprintf_r+0x1c8>
 801395c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801395e:	445a      	add	r2, fp
 8013960:	9209      	str	r2, [sp, #36]	; 0x24
 8013962:	f89a 3000 	ldrb.w	r3, [sl]
 8013966:	2b00      	cmp	r3, #0
 8013968:	f000 80a2 	beq.w	8013ab0 <_svfiprintf_r+0x1c8>
 801396c:	2300      	movs	r3, #0
 801396e:	f04f 32ff 	mov.w	r2, #4294967295
 8013972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013976:	f10a 0a01 	add.w	sl, sl, #1
 801397a:	9304      	str	r3, [sp, #16]
 801397c:	9307      	str	r3, [sp, #28]
 801397e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013982:	931a      	str	r3, [sp, #104]	; 0x68
 8013984:	4654      	mov	r4, sl
 8013986:	2205      	movs	r2, #5
 8013988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801398c:	4851      	ldr	r0, [pc, #324]	; (8013ad4 <_svfiprintf_r+0x1ec>)
 801398e:	f7f1 fd97 	bl	80054c0 <memchr>
 8013992:	9a04      	ldr	r2, [sp, #16]
 8013994:	b9d8      	cbnz	r0, 80139ce <_svfiprintf_r+0xe6>
 8013996:	06d0      	lsls	r0, r2, #27
 8013998:	bf44      	itt	mi
 801399a:	2320      	movmi	r3, #32
 801399c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139a0:	0711      	lsls	r1, r2, #28
 80139a2:	bf44      	itt	mi
 80139a4:	232b      	movmi	r3, #43	; 0x2b
 80139a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139aa:	f89a 3000 	ldrb.w	r3, [sl]
 80139ae:	2b2a      	cmp	r3, #42	; 0x2a
 80139b0:	d015      	beq.n	80139de <_svfiprintf_r+0xf6>
 80139b2:	9a07      	ldr	r2, [sp, #28]
 80139b4:	4654      	mov	r4, sl
 80139b6:	2000      	movs	r0, #0
 80139b8:	f04f 0c0a 	mov.w	ip, #10
 80139bc:	4621      	mov	r1, r4
 80139be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139c2:	3b30      	subs	r3, #48	; 0x30
 80139c4:	2b09      	cmp	r3, #9
 80139c6:	d94e      	bls.n	8013a66 <_svfiprintf_r+0x17e>
 80139c8:	b1b0      	cbz	r0, 80139f8 <_svfiprintf_r+0x110>
 80139ca:	9207      	str	r2, [sp, #28]
 80139cc:	e014      	b.n	80139f8 <_svfiprintf_r+0x110>
 80139ce:	eba0 0308 	sub.w	r3, r0, r8
 80139d2:	fa09 f303 	lsl.w	r3, r9, r3
 80139d6:	4313      	orrs	r3, r2
 80139d8:	9304      	str	r3, [sp, #16]
 80139da:	46a2      	mov	sl, r4
 80139dc:	e7d2      	b.n	8013984 <_svfiprintf_r+0x9c>
 80139de:	9b03      	ldr	r3, [sp, #12]
 80139e0:	1d19      	adds	r1, r3, #4
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	9103      	str	r1, [sp, #12]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	bfbb      	ittet	lt
 80139ea:	425b      	neglt	r3, r3
 80139ec:	f042 0202 	orrlt.w	r2, r2, #2
 80139f0:	9307      	strge	r3, [sp, #28]
 80139f2:	9307      	strlt	r3, [sp, #28]
 80139f4:	bfb8      	it	lt
 80139f6:	9204      	strlt	r2, [sp, #16]
 80139f8:	7823      	ldrb	r3, [r4, #0]
 80139fa:	2b2e      	cmp	r3, #46	; 0x2e
 80139fc:	d10c      	bne.n	8013a18 <_svfiprintf_r+0x130>
 80139fe:	7863      	ldrb	r3, [r4, #1]
 8013a00:	2b2a      	cmp	r3, #42	; 0x2a
 8013a02:	d135      	bne.n	8013a70 <_svfiprintf_r+0x188>
 8013a04:	9b03      	ldr	r3, [sp, #12]
 8013a06:	1d1a      	adds	r2, r3, #4
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	9203      	str	r2, [sp, #12]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	bfb8      	it	lt
 8013a10:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a14:	3402      	adds	r4, #2
 8013a16:	9305      	str	r3, [sp, #20]
 8013a18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013ae4 <_svfiprintf_r+0x1fc>
 8013a1c:	7821      	ldrb	r1, [r4, #0]
 8013a1e:	2203      	movs	r2, #3
 8013a20:	4650      	mov	r0, sl
 8013a22:	f7f1 fd4d 	bl	80054c0 <memchr>
 8013a26:	b140      	cbz	r0, 8013a3a <_svfiprintf_r+0x152>
 8013a28:	2340      	movs	r3, #64	; 0x40
 8013a2a:	eba0 000a 	sub.w	r0, r0, sl
 8013a2e:	fa03 f000 	lsl.w	r0, r3, r0
 8013a32:	9b04      	ldr	r3, [sp, #16]
 8013a34:	4303      	orrs	r3, r0
 8013a36:	3401      	adds	r4, #1
 8013a38:	9304      	str	r3, [sp, #16]
 8013a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a3e:	4826      	ldr	r0, [pc, #152]	; (8013ad8 <_svfiprintf_r+0x1f0>)
 8013a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a44:	2206      	movs	r2, #6
 8013a46:	f7f1 fd3b 	bl	80054c0 <memchr>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d038      	beq.n	8013ac0 <_svfiprintf_r+0x1d8>
 8013a4e:	4b23      	ldr	r3, [pc, #140]	; (8013adc <_svfiprintf_r+0x1f4>)
 8013a50:	bb1b      	cbnz	r3, 8013a9a <_svfiprintf_r+0x1b2>
 8013a52:	9b03      	ldr	r3, [sp, #12]
 8013a54:	3307      	adds	r3, #7
 8013a56:	f023 0307 	bic.w	r3, r3, #7
 8013a5a:	3308      	adds	r3, #8
 8013a5c:	9303      	str	r3, [sp, #12]
 8013a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a60:	4433      	add	r3, r6
 8013a62:	9309      	str	r3, [sp, #36]	; 0x24
 8013a64:	e767      	b.n	8013936 <_svfiprintf_r+0x4e>
 8013a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a6a:	460c      	mov	r4, r1
 8013a6c:	2001      	movs	r0, #1
 8013a6e:	e7a5      	b.n	80139bc <_svfiprintf_r+0xd4>
 8013a70:	2300      	movs	r3, #0
 8013a72:	3401      	adds	r4, #1
 8013a74:	9305      	str	r3, [sp, #20]
 8013a76:	4619      	mov	r1, r3
 8013a78:	f04f 0c0a 	mov.w	ip, #10
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a82:	3a30      	subs	r2, #48	; 0x30
 8013a84:	2a09      	cmp	r2, #9
 8013a86:	d903      	bls.n	8013a90 <_svfiprintf_r+0x1a8>
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d0c5      	beq.n	8013a18 <_svfiprintf_r+0x130>
 8013a8c:	9105      	str	r1, [sp, #20]
 8013a8e:	e7c3      	b.n	8013a18 <_svfiprintf_r+0x130>
 8013a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a94:	4604      	mov	r4, r0
 8013a96:	2301      	movs	r3, #1
 8013a98:	e7f0      	b.n	8013a7c <_svfiprintf_r+0x194>
 8013a9a:	ab03      	add	r3, sp, #12
 8013a9c:	9300      	str	r3, [sp, #0]
 8013a9e:	462a      	mov	r2, r5
 8013aa0:	4b0f      	ldr	r3, [pc, #60]	; (8013ae0 <_svfiprintf_r+0x1f8>)
 8013aa2:	a904      	add	r1, sp, #16
 8013aa4:	4638      	mov	r0, r7
 8013aa6:	f7fb ff27 	bl	800f8f8 <_printf_float>
 8013aaa:	1c42      	adds	r2, r0, #1
 8013aac:	4606      	mov	r6, r0
 8013aae:	d1d6      	bne.n	8013a5e <_svfiprintf_r+0x176>
 8013ab0:	89ab      	ldrh	r3, [r5, #12]
 8013ab2:	065b      	lsls	r3, r3, #25
 8013ab4:	f53f af2c 	bmi.w	8013910 <_svfiprintf_r+0x28>
 8013ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aba:	b01d      	add	sp, #116	; 0x74
 8013abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac0:	ab03      	add	r3, sp, #12
 8013ac2:	9300      	str	r3, [sp, #0]
 8013ac4:	462a      	mov	r2, r5
 8013ac6:	4b06      	ldr	r3, [pc, #24]	; (8013ae0 <_svfiprintf_r+0x1f8>)
 8013ac8:	a904      	add	r1, sp, #16
 8013aca:	4638      	mov	r0, r7
 8013acc:	f7fc f9b8 	bl	800fe40 <_printf_i>
 8013ad0:	e7eb      	b.n	8013aaa <_svfiprintf_r+0x1c2>
 8013ad2:	bf00      	nop
 8013ad4:	081006d4 	.word	0x081006d4
 8013ad8:	081006de 	.word	0x081006de
 8013adc:	0800f8f9 	.word	0x0800f8f9
 8013ae0:	08013831 	.word	0x08013831
 8013ae4:	081006da 	.word	0x081006da

08013ae8 <__sfputc_r>:
 8013ae8:	6893      	ldr	r3, [r2, #8]
 8013aea:	3b01      	subs	r3, #1
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	b410      	push	{r4}
 8013af0:	6093      	str	r3, [r2, #8]
 8013af2:	da08      	bge.n	8013b06 <__sfputc_r+0x1e>
 8013af4:	6994      	ldr	r4, [r2, #24]
 8013af6:	42a3      	cmp	r3, r4
 8013af8:	db01      	blt.n	8013afe <__sfputc_r+0x16>
 8013afa:	290a      	cmp	r1, #10
 8013afc:	d103      	bne.n	8013b06 <__sfputc_r+0x1e>
 8013afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b02:	f7fd bc3b 	b.w	801137c <__swbuf_r>
 8013b06:	6813      	ldr	r3, [r2, #0]
 8013b08:	1c58      	adds	r0, r3, #1
 8013b0a:	6010      	str	r0, [r2, #0]
 8013b0c:	7019      	strb	r1, [r3, #0]
 8013b0e:	4608      	mov	r0, r1
 8013b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b14:	4770      	bx	lr

08013b16 <__sfputs_r>:
 8013b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b18:	4606      	mov	r6, r0
 8013b1a:	460f      	mov	r7, r1
 8013b1c:	4614      	mov	r4, r2
 8013b1e:	18d5      	adds	r5, r2, r3
 8013b20:	42ac      	cmp	r4, r5
 8013b22:	d101      	bne.n	8013b28 <__sfputs_r+0x12>
 8013b24:	2000      	movs	r0, #0
 8013b26:	e007      	b.n	8013b38 <__sfputs_r+0x22>
 8013b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b2c:	463a      	mov	r2, r7
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f7ff ffda 	bl	8013ae8 <__sfputc_r>
 8013b34:	1c43      	adds	r3, r0, #1
 8013b36:	d1f3      	bne.n	8013b20 <__sfputs_r+0xa>
 8013b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b3c <_vfiprintf_r>:
 8013b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b40:	460d      	mov	r5, r1
 8013b42:	b09d      	sub	sp, #116	; 0x74
 8013b44:	4614      	mov	r4, r2
 8013b46:	4698      	mov	r8, r3
 8013b48:	4606      	mov	r6, r0
 8013b4a:	b118      	cbz	r0, 8013b54 <_vfiprintf_r+0x18>
 8013b4c:	6983      	ldr	r3, [r0, #24]
 8013b4e:	b90b      	cbnz	r3, 8013b54 <_vfiprintf_r+0x18>
 8013b50:	f7fe fc68 	bl	8012424 <__sinit>
 8013b54:	4b89      	ldr	r3, [pc, #548]	; (8013d7c <_vfiprintf_r+0x240>)
 8013b56:	429d      	cmp	r5, r3
 8013b58:	d11b      	bne.n	8013b92 <_vfiprintf_r+0x56>
 8013b5a:	6875      	ldr	r5, [r6, #4]
 8013b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b5e:	07d9      	lsls	r1, r3, #31
 8013b60:	d405      	bmi.n	8013b6e <_vfiprintf_r+0x32>
 8013b62:	89ab      	ldrh	r3, [r5, #12]
 8013b64:	059a      	lsls	r2, r3, #22
 8013b66:	d402      	bmi.n	8013b6e <_vfiprintf_r+0x32>
 8013b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b6a:	f7ff f86c 	bl	8012c46 <__retarget_lock_acquire_recursive>
 8013b6e:	89ab      	ldrh	r3, [r5, #12]
 8013b70:	071b      	lsls	r3, r3, #28
 8013b72:	d501      	bpl.n	8013b78 <_vfiprintf_r+0x3c>
 8013b74:	692b      	ldr	r3, [r5, #16]
 8013b76:	b9eb      	cbnz	r3, 8013bb4 <_vfiprintf_r+0x78>
 8013b78:	4629      	mov	r1, r5
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f7fd fc50 	bl	8011420 <__swsetup_r>
 8013b80:	b1c0      	cbz	r0, 8013bb4 <_vfiprintf_r+0x78>
 8013b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b84:	07dc      	lsls	r4, r3, #31
 8013b86:	d50e      	bpl.n	8013ba6 <_vfiprintf_r+0x6a>
 8013b88:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8c:	b01d      	add	sp, #116	; 0x74
 8013b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b92:	4b7b      	ldr	r3, [pc, #492]	; (8013d80 <_vfiprintf_r+0x244>)
 8013b94:	429d      	cmp	r5, r3
 8013b96:	d101      	bne.n	8013b9c <_vfiprintf_r+0x60>
 8013b98:	68b5      	ldr	r5, [r6, #8]
 8013b9a:	e7df      	b.n	8013b5c <_vfiprintf_r+0x20>
 8013b9c:	4b79      	ldr	r3, [pc, #484]	; (8013d84 <_vfiprintf_r+0x248>)
 8013b9e:	429d      	cmp	r5, r3
 8013ba0:	bf08      	it	eq
 8013ba2:	68f5      	ldreq	r5, [r6, #12]
 8013ba4:	e7da      	b.n	8013b5c <_vfiprintf_r+0x20>
 8013ba6:	89ab      	ldrh	r3, [r5, #12]
 8013ba8:	0598      	lsls	r0, r3, #22
 8013baa:	d4ed      	bmi.n	8013b88 <_vfiprintf_r+0x4c>
 8013bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bae:	f7ff f84b 	bl	8012c48 <__retarget_lock_release_recursive>
 8013bb2:	e7e9      	b.n	8013b88 <_vfiprintf_r+0x4c>
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bb8:	2320      	movs	r3, #32
 8013bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bc2:	2330      	movs	r3, #48	; 0x30
 8013bc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d88 <_vfiprintf_r+0x24c>
 8013bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bcc:	f04f 0901 	mov.w	r9, #1
 8013bd0:	4623      	mov	r3, r4
 8013bd2:	469a      	mov	sl, r3
 8013bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bd8:	b10a      	cbz	r2, 8013bde <_vfiprintf_r+0xa2>
 8013bda:	2a25      	cmp	r2, #37	; 0x25
 8013bdc:	d1f9      	bne.n	8013bd2 <_vfiprintf_r+0x96>
 8013bde:	ebba 0b04 	subs.w	fp, sl, r4
 8013be2:	d00b      	beq.n	8013bfc <_vfiprintf_r+0xc0>
 8013be4:	465b      	mov	r3, fp
 8013be6:	4622      	mov	r2, r4
 8013be8:	4629      	mov	r1, r5
 8013bea:	4630      	mov	r0, r6
 8013bec:	f7ff ff93 	bl	8013b16 <__sfputs_r>
 8013bf0:	3001      	adds	r0, #1
 8013bf2:	f000 80aa 	beq.w	8013d4a <_vfiprintf_r+0x20e>
 8013bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bf8:	445a      	add	r2, fp
 8013bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8013bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f000 80a2 	beq.w	8013d4a <_vfiprintf_r+0x20e>
 8013c06:	2300      	movs	r3, #0
 8013c08:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c10:	f10a 0a01 	add.w	sl, sl, #1
 8013c14:	9304      	str	r3, [sp, #16]
 8013c16:	9307      	str	r3, [sp, #28]
 8013c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8013c1e:	4654      	mov	r4, sl
 8013c20:	2205      	movs	r2, #5
 8013c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c26:	4858      	ldr	r0, [pc, #352]	; (8013d88 <_vfiprintf_r+0x24c>)
 8013c28:	f7f1 fc4a 	bl	80054c0 <memchr>
 8013c2c:	9a04      	ldr	r2, [sp, #16]
 8013c2e:	b9d8      	cbnz	r0, 8013c68 <_vfiprintf_r+0x12c>
 8013c30:	06d1      	lsls	r1, r2, #27
 8013c32:	bf44      	itt	mi
 8013c34:	2320      	movmi	r3, #32
 8013c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c3a:	0713      	lsls	r3, r2, #28
 8013c3c:	bf44      	itt	mi
 8013c3e:	232b      	movmi	r3, #43	; 0x2b
 8013c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c44:	f89a 3000 	ldrb.w	r3, [sl]
 8013c48:	2b2a      	cmp	r3, #42	; 0x2a
 8013c4a:	d015      	beq.n	8013c78 <_vfiprintf_r+0x13c>
 8013c4c:	9a07      	ldr	r2, [sp, #28]
 8013c4e:	4654      	mov	r4, sl
 8013c50:	2000      	movs	r0, #0
 8013c52:	f04f 0c0a 	mov.w	ip, #10
 8013c56:	4621      	mov	r1, r4
 8013c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c5c:	3b30      	subs	r3, #48	; 0x30
 8013c5e:	2b09      	cmp	r3, #9
 8013c60:	d94e      	bls.n	8013d00 <_vfiprintf_r+0x1c4>
 8013c62:	b1b0      	cbz	r0, 8013c92 <_vfiprintf_r+0x156>
 8013c64:	9207      	str	r2, [sp, #28]
 8013c66:	e014      	b.n	8013c92 <_vfiprintf_r+0x156>
 8013c68:	eba0 0308 	sub.w	r3, r0, r8
 8013c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8013c70:	4313      	orrs	r3, r2
 8013c72:	9304      	str	r3, [sp, #16]
 8013c74:	46a2      	mov	sl, r4
 8013c76:	e7d2      	b.n	8013c1e <_vfiprintf_r+0xe2>
 8013c78:	9b03      	ldr	r3, [sp, #12]
 8013c7a:	1d19      	adds	r1, r3, #4
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	9103      	str	r1, [sp, #12]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	bfbb      	ittet	lt
 8013c84:	425b      	neglt	r3, r3
 8013c86:	f042 0202 	orrlt.w	r2, r2, #2
 8013c8a:	9307      	strge	r3, [sp, #28]
 8013c8c:	9307      	strlt	r3, [sp, #28]
 8013c8e:	bfb8      	it	lt
 8013c90:	9204      	strlt	r2, [sp, #16]
 8013c92:	7823      	ldrb	r3, [r4, #0]
 8013c94:	2b2e      	cmp	r3, #46	; 0x2e
 8013c96:	d10c      	bne.n	8013cb2 <_vfiprintf_r+0x176>
 8013c98:	7863      	ldrb	r3, [r4, #1]
 8013c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c9c:	d135      	bne.n	8013d0a <_vfiprintf_r+0x1ce>
 8013c9e:	9b03      	ldr	r3, [sp, #12]
 8013ca0:	1d1a      	adds	r2, r3, #4
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	9203      	str	r2, [sp, #12]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	bfb8      	it	lt
 8013caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cae:	3402      	adds	r4, #2
 8013cb0:	9305      	str	r3, [sp, #20]
 8013cb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d98 <_vfiprintf_r+0x25c>
 8013cb6:	7821      	ldrb	r1, [r4, #0]
 8013cb8:	2203      	movs	r2, #3
 8013cba:	4650      	mov	r0, sl
 8013cbc:	f7f1 fc00 	bl	80054c0 <memchr>
 8013cc0:	b140      	cbz	r0, 8013cd4 <_vfiprintf_r+0x198>
 8013cc2:	2340      	movs	r3, #64	; 0x40
 8013cc4:	eba0 000a 	sub.w	r0, r0, sl
 8013cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8013ccc:	9b04      	ldr	r3, [sp, #16]
 8013cce:	4303      	orrs	r3, r0
 8013cd0:	3401      	adds	r4, #1
 8013cd2:	9304      	str	r3, [sp, #16]
 8013cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cd8:	482c      	ldr	r0, [pc, #176]	; (8013d8c <_vfiprintf_r+0x250>)
 8013cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cde:	2206      	movs	r2, #6
 8013ce0:	f7f1 fbee 	bl	80054c0 <memchr>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d03f      	beq.n	8013d68 <_vfiprintf_r+0x22c>
 8013ce8:	4b29      	ldr	r3, [pc, #164]	; (8013d90 <_vfiprintf_r+0x254>)
 8013cea:	bb1b      	cbnz	r3, 8013d34 <_vfiprintf_r+0x1f8>
 8013cec:	9b03      	ldr	r3, [sp, #12]
 8013cee:	3307      	adds	r3, #7
 8013cf0:	f023 0307 	bic.w	r3, r3, #7
 8013cf4:	3308      	adds	r3, #8
 8013cf6:	9303      	str	r3, [sp, #12]
 8013cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cfa:	443b      	add	r3, r7
 8013cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013cfe:	e767      	b.n	8013bd0 <_vfiprintf_r+0x94>
 8013d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d04:	460c      	mov	r4, r1
 8013d06:	2001      	movs	r0, #1
 8013d08:	e7a5      	b.n	8013c56 <_vfiprintf_r+0x11a>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	3401      	adds	r4, #1
 8013d0e:	9305      	str	r3, [sp, #20]
 8013d10:	4619      	mov	r1, r3
 8013d12:	f04f 0c0a 	mov.w	ip, #10
 8013d16:	4620      	mov	r0, r4
 8013d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d1c:	3a30      	subs	r2, #48	; 0x30
 8013d1e:	2a09      	cmp	r2, #9
 8013d20:	d903      	bls.n	8013d2a <_vfiprintf_r+0x1ee>
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d0c5      	beq.n	8013cb2 <_vfiprintf_r+0x176>
 8013d26:	9105      	str	r1, [sp, #20]
 8013d28:	e7c3      	b.n	8013cb2 <_vfiprintf_r+0x176>
 8013d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d2e:	4604      	mov	r4, r0
 8013d30:	2301      	movs	r3, #1
 8013d32:	e7f0      	b.n	8013d16 <_vfiprintf_r+0x1da>
 8013d34:	ab03      	add	r3, sp, #12
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	462a      	mov	r2, r5
 8013d3a:	4b16      	ldr	r3, [pc, #88]	; (8013d94 <_vfiprintf_r+0x258>)
 8013d3c:	a904      	add	r1, sp, #16
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f7fb fdda 	bl	800f8f8 <_printf_float>
 8013d44:	4607      	mov	r7, r0
 8013d46:	1c78      	adds	r0, r7, #1
 8013d48:	d1d6      	bne.n	8013cf8 <_vfiprintf_r+0x1bc>
 8013d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d4c:	07d9      	lsls	r1, r3, #31
 8013d4e:	d405      	bmi.n	8013d5c <_vfiprintf_r+0x220>
 8013d50:	89ab      	ldrh	r3, [r5, #12]
 8013d52:	059a      	lsls	r2, r3, #22
 8013d54:	d402      	bmi.n	8013d5c <_vfiprintf_r+0x220>
 8013d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d58:	f7fe ff76 	bl	8012c48 <__retarget_lock_release_recursive>
 8013d5c:	89ab      	ldrh	r3, [r5, #12]
 8013d5e:	065b      	lsls	r3, r3, #25
 8013d60:	f53f af12 	bmi.w	8013b88 <_vfiprintf_r+0x4c>
 8013d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d66:	e711      	b.n	8013b8c <_vfiprintf_r+0x50>
 8013d68:	ab03      	add	r3, sp, #12
 8013d6a:	9300      	str	r3, [sp, #0]
 8013d6c:	462a      	mov	r2, r5
 8013d6e:	4b09      	ldr	r3, [pc, #36]	; (8013d94 <_vfiprintf_r+0x258>)
 8013d70:	a904      	add	r1, sp, #16
 8013d72:	4630      	mov	r0, r6
 8013d74:	f7fc f864 	bl	800fe40 <_printf_i>
 8013d78:	e7e4      	b.n	8013d44 <_vfiprintf_r+0x208>
 8013d7a:	bf00      	nop
 8013d7c:	081004b8 	.word	0x081004b8
 8013d80:	081004d8 	.word	0x081004d8
 8013d84:	08100498 	.word	0x08100498
 8013d88:	081006d4 	.word	0x081006d4
 8013d8c:	081006de 	.word	0x081006de
 8013d90:	0800f8f9 	.word	0x0800f8f9
 8013d94:	08013b17 	.word	0x08013b17
 8013d98:	081006da 	.word	0x081006da
 8013d9c:	00000000 	.word	0x00000000

08013da0 <nan>:
 8013da0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013da8 <nan+0x8>
 8013da4:	4770      	bx	lr
 8013da6:	bf00      	nop
 8013da8:	00000000 	.word	0x00000000
 8013dac:	7ff80000 	.word	0x7ff80000

08013db0 <_sbrk_r>:
 8013db0:	b538      	push	{r3, r4, r5, lr}
 8013db2:	4d06      	ldr	r5, [pc, #24]	; (8013dcc <_sbrk_r+0x1c>)
 8013db4:	2300      	movs	r3, #0
 8013db6:	4604      	mov	r4, r0
 8013db8:	4608      	mov	r0, r1
 8013dba:	602b      	str	r3, [r5, #0]
 8013dbc:	f7f3 fd38 	bl	8007830 <_sbrk>
 8013dc0:	1c43      	adds	r3, r0, #1
 8013dc2:	d102      	bne.n	8013dca <_sbrk_r+0x1a>
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	b103      	cbz	r3, 8013dca <_sbrk_r+0x1a>
 8013dc8:	6023      	str	r3, [r4, #0]
 8013dca:	bd38      	pop	{r3, r4, r5, pc}
 8013dcc:	20001574 	.word	0x20001574

08013dd0 <__sread>:
 8013dd0:	b510      	push	{r4, lr}
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dd8:	f000 f92e 	bl	8014038 <_read_r>
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	bfab      	itete	ge
 8013de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013de2:	89a3      	ldrhlt	r3, [r4, #12]
 8013de4:	181b      	addge	r3, r3, r0
 8013de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013dea:	bfac      	ite	ge
 8013dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8013dee:	81a3      	strhlt	r3, [r4, #12]
 8013df0:	bd10      	pop	{r4, pc}

08013df2 <__swrite>:
 8013df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df6:	461f      	mov	r7, r3
 8013df8:	898b      	ldrh	r3, [r1, #12]
 8013dfa:	05db      	lsls	r3, r3, #23
 8013dfc:	4605      	mov	r5, r0
 8013dfe:	460c      	mov	r4, r1
 8013e00:	4616      	mov	r6, r2
 8013e02:	d505      	bpl.n	8013e10 <__swrite+0x1e>
 8013e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e08:	2302      	movs	r3, #2
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f000 f8b6 	bl	8013f7c <_lseek_r>
 8013e10:	89a3      	ldrh	r3, [r4, #12]
 8013e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e1a:	81a3      	strh	r3, [r4, #12]
 8013e1c:	4632      	mov	r2, r6
 8013e1e:	463b      	mov	r3, r7
 8013e20:	4628      	mov	r0, r5
 8013e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e26:	f000 b835 	b.w	8013e94 <_write_r>

08013e2a <__sseek>:
 8013e2a:	b510      	push	{r4, lr}
 8013e2c:	460c      	mov	r4, r1
 8013e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e32:	f000 f8a3 	bl	8013f7c <_lseek_r>
 8013e36:	1c43      	adds	r3, r0, #1
 8013e38:	89a3      	ldrh	r3, [r4, #12]
 8013e3a:	bf15      	itete	ne
 8013e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e46:	81a3      	strheq	r3, [r4, #12]
 8013e48:	bf18      	it	ne
 8013e4a:	81a3      	strhne	r3, [r4, #12]
 8013e4c:	bd10      	pop	{r4, pc}

08013e4e <__sclose>:
 8013e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e52:	f000 b84f 	b.w	8013ef4 <_close_r>

08013e56 <strncmp>:
 8013e56:	b510      	push	{r4, lr}
 8013e58:	b16a      	cbz	r2, 8013e76 <strncmp+0x20>
 8013e5a:	3901      	subs	r1, #1
 8013e5c:	1884      	adds	r4, r0, r2
 8013e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d103      	bne.n	8013e72 <strncmp+0x1c>
 8013e6a:	42a0      	cmp	r0, r4
 8013e6c:	d001      	beq.n	8013e72 <strncmp+0x1c>
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d1f5      	bne.n	8013e5e <strncmp+0x8>
 8013e72:	1a98      	subs	r0, r3, r2
 8013e74:	bd10      	pop	{r4, pc}
 8013e76:	4610      	mov	r0, r2
 8013e78:	e7fc      	b.n	8013e74 <strncmp+0x1e>

08013e7a <__ascii_wctomb>:
 8013e7a:	b149      	cbz	r1, 8013e90 <__ascii_wctomb+0x16>
 8013e7c:	2aff      	cmp	r2, #255	; 0xff
 8013e7e:	bf85      	ittet	hi
 8013e80:	238a      	movhi	r3, #138	; 0x8a
 8013e82:	6003      	strhi	r3, [r0, #0]
 8013e84:	700a      	strbls	r2, [r1, #0]
 8013e86:	f04f 30ff 	movhi.w	r0, #4294967295
 8013e8a:	bf98      	it	ls
 8013e8c:	2001      	movls	r0, #1
 8013e8e:	4770      	bx	lr
 8013e90:	4608      	mov	r0, r1
 8013e92:	4770      	bx	lr

08013e94 <_write_r>:
 8013e94:	b538      	push	{r3, r4, r5, lr}
 8013e96:	4d07      	ldr	r5, [pc, #28]	; (8013eb4 <_write_r+0x20>)
 8013e98:	4604      	mov	r4, r0
 8013e9a:	4608      	mov	r0, r1
 8013e9c:	4611      	mov	r1, r2
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	602a      	str	r2, [r5, #0]
 8013ea2:	461a      	mov	r2, r3
 8013ea4:	f7f3 fac8 	bl	8007438 <_write>
 8013ea8:	1c43      	adds	r3, r0, #1
 8013eaa:	d102      	bne.n	8013eb2 <_write_r+0x1e>
 8013eac:	682b      	ldr	r3, [r5, #0]
 8013eae:	b103      	cbz	r3, 8013eb2 <_write_r+0x1e>
 8013eb0:	6023      	str	r3, [r4, #0]
 8013eb2:	bd38      	pop	{r3, r4, r5, pc}
 8013eb4:	20001574 	.word	0x20001574

08013eb8 <__assert_func>:
 8013eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013eba:	4614      	mov	r4, r2
 8013ebc:	461a      	mov	r2, r3
 8013ebe:	4b09      	ldr	r3, [pc, #36]	; (8013ee4 <__assert_func+0x2c>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	4605      	mov	r5, r0
 8013ec4:	68d8      	ldr	r0, [r3, #12]
 8013ec6:	b14c      	cbz	r4, 8013edc <__assert_func+0x24>
 8013ec8:	4b07      	ldr	r3, [pc, #28]	; (8013ee8 <__assert_func+0x30>)
 8013eca:	9100      	str	r1, [sp, #0]
 8013ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ed0:	4906      	ldr	r1, [pc, #24]	; (8013eec <__assert_func+0x34>)
 8013ed2:	462b      	mov	r3, r5
 8013ed4:	f000 f81e 	bl	8013f14 <fiprintf>
 8013ed8:	f000 f8c0 	bl	801405c <abort>
 8013edc:	4b04      	ldr	r3, [pc, #16]	; (8013ef0 <__assert_func+0x38>)
 8013ede:	461c      	mov	r4, r3
 8013ee0:	e7f3      	b.n	8013eca <__assert_func+0x12>
 8013ee2:	bf00      	nop
 8013ee4:	20000770 	.word	0x20000770
 8013ee8:	081006e5 	.word	0x081006e5
 8013eec:	081006f2 	.word	0x081006f2
 8013ef0:	08100720 	.word	0x08100720

08013ef4 <_close_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	4d06      	ldr	r5, [pc, #24]	; (8013f10 <_close_r+0x1c>)
 8013ef8:	2300      	movs	r3, #0
 8013efa:	4604      	mov	r4, r0
 8013efc:	4608      	mov	r0, r1
 8013efe:	602b      	str	r3, [r5, #0]
 8013f00:	f7f3 fc61 	bl	80077c6 <_close>
 8013f04:	1c43      	adds	r3, r0, #1
 8013f06:	d102      	bne.n	8013f0e <_close_r+0x1a>
 8013f08:	682b      	ldr	r3, [r5, #0]
 8013f0a:	b103      	cbz	r3, 8013f0e <_close_r+0x1a>
 8013f0c:	6023      	str	r3, [r4, #0]
 8013f0e:	bd38      	pop	{r3, r4, r5, pc}
 8013f10:	20001574 	.word	0x20001574

08013f14 <fiprintf>:
 8013f14:	b40e      	push	{r1, r2, r3}
 8013f16:	b503      	push	{r0, r1, lr}
 8013f18:	4601      	mov	r1, r0
 8013f1a:	ab03      	add	r3, sp, #12
 8013f1c:	4805      	ldr	r0, [pc, #20]	; (8013f34 <fiprintf+0x20>)
 8013f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f22:	6800      	ldr	r0, [r0, #0]
 8013f24:	9301      	str	r3, [sp, #4]
 8013f26:	f7ff fe09 	bl	8013b3c <_vfiprintf_r>
 8013f2a:	b002      	add	sp, #8
 8013f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f30:	b003      	add	sp, #12
 8013f32:	4770      	bx	lr
 8013f34:	20000770 	.word	0x20000770

08013f38 <_fstat_r>:
 8013f38:	b538      	push	{r3, r4, r5, lr}
 8013f3a:	4d07      	ldr	r5, [pc, #28]	; (8013f58 <_fstat_r+0x20>)
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	4604      	mov	r4, r0
 8013f40:	4608      	mov	r0, r1
 8013f42:	4611      	mov	r1, r2
 8013f44:	602b      	str	r3, [r5, #0]
 8013f46:	f7f3 fc4a 	bl	80077de <_fstat>
 8013f4a:	1c43      	adds	r3, r0, #1
 8013f4c:	d102      	bne.n	8013f54 <_fstat_r+0x1c>
 8013f4e:	682b      	ldr	r3, [r5, #0]
 8013f50:	b103      	cbz	r3, 8013f54 <_fstat_r+0x1c>
 8013f52:	6023      	str	r3, [r4, #0]
 8013f54:	bd38      	pop	{r3, r4, r5, pc}
 8013f56:	bf00      	nop
 8013f58:	20001574 	.word	0x20001574

08013f5c <_isatty_r>:
 8013f5c:	b538      	push	{r3, r4, r5, lr}
 8013f5e:	4d06      	ldr	r5, [pc, #24]	; (8013f78 <_isatty_r+0x1c>)
 8013f60:	2300      	movs	r3, #0
 8013f62:	4604      	mov	r4, r0
 8013f64:	4608      	mov	r0, r1
 8013f66:	602b      	str	r3, [r5, #0]
 8013f68:	f7f3 fc49 	bl	80077fe <_isatty>
 8013f6c:	1c43      	adds	r3, r0, #1
 8013f6e:	d102      	bne.n	8013f76 <_isatty_r+0x1a>
 8013f70:	682b      	ldr	r3, [r5, #0]
 8013f72:	b103      	cbz	r3, 8013f76 <_isatty_r+0x1a>
 8013f74:	6023      	str	r3, [r4, #0]
 8013f76:	bd38      	pop	{r3, r4, r5, pc}
 8013f78:	20001574 	.word	0x20001574

08013f7c <_lseek_r>:
 8013f7c:	b538      	push	{r3, r4, r5, lr}
 8013f7e:	4d07      	ldr	r5, [pc, #28]	; (8013f9c <_lseek_r+0x20>)
 8013f80:	4604      	mov	r4, r0
 8013f82:	4608      	mov	r0, r1
 8013f84:	4611      	mov	r1, r2
 8013f86:	2200      	movs	r2, #0
 8013f88:	602a      	str	r2, [r5, #0]
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	f7f3 fc42 	bl	8007814 <_lseek>
 8013f90:	1c43      	adds	r3, r0, #1
 8013f92:	d102      	bne.n	8013f9a <_lseek_r+0x1e>
 8013f94:	682b      	ldr	r3, [r5, #0]
 8013f96:	b103      	cbz	r3, 8013f9a <_lseek_r+0x1e>
 8013f98:	6023      	str	r3, [r4, #0]
 8013f9a:	bd38      	pop	{r3, r4, r5, pc}
 8013f9c:	20001574 	.word	0x20001574

08013fa0 <memmove>:
 8013fa0:	4288      	cmp	r0, r1
 8013fa2:	b510      	push	{r4, lr}
 8013fa4:	eb01 0402 	add.w	r4, r1, r2
 8013fa8:	d902      	bls.n	8013fb0 <memmove+0x10>
 8013faa:	4284      	cmp	r4, r0
 8013fac:	4623      	mov	r3, r4
 8013fae:	d807      	bhi.n	8013fc0 <memmove+0x20>
 8013fb0:	1e43      	subs	r3, r0, #1
 8013fb2:	42a1      	cmp	r1, r4
 8013fb4:	d008      	beq.n	8013fc8 <memmove+0x28>
 8013fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013fbe:	e7f8      	b.n	8013fb2 <memmove+0x12>
 8013fc0:	4402      	add	r2, r0
 8013fc2:	4601      	mov	r1, r0
 8013fc4:	428a      	cmp	r2, r1
 8013fc6:	d100      	bne.n	8013fca <memmove+0x2a>
 8013fc8:	bd10      	pop	{r4, pc}
 8013fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013fd2:	e7f7      	b.n	8013fc4 <memmove+0x24>

08013fd4 <__malloc_lock>:
 8013fd4:	4801      	ldr	r0, [pc, #4]	; (8013fdc <__malloc_lock+0x8>)
 8013fd6:	f7fe be36 	b.w	8012c46 <__retarget_lock_acquire_recursive>
 8013fda:	bf00      	nop
 8013fdc:	2000156c 	.word	0x2000156c

08013fe0 <__malloc_unlock>:
 8013fe0:	4801      	ldr	r0, [pc, #4]	; (8013fe8 <__malloc_unlock+0x8>)
 8013fe2:	f7fe be31 	b.w	8012c48 <__retarget_lock_release_recursive>
 8013fe6:	bf00      	nop
 8013fe8:	2000156c 	.word	0x2000156c

08013fec <_realloc_r>:
 8013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fee:	4607      	mov	r7, r0
 8013ff0:	4614      	mov	r4, r2
 8013ff2:	460e      	mov	r6, r1
 8013ff4:	b921      	cbnz	r1, 8014000 <_realloc_r+0x14>
 8013ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013ffa:	4611      	mov	r1, r2
 8013ffc:	f7ff bbbe 	b.w	801377c <_malloc_r>
 8014000:	b922      	cbnz	r2, 801400c <_realloc_r+0x20>
 8014002:	f7ff fb6b 	bl	80136dc <_free_r>
 8014006:	4625      	mov	r5, r4
 8014008:	4628      	mov	r0, r5
 801400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801400c:	f000 f82d 	bl	801406a <_malloc_usable_size_r>
 8014010:	42a0      	cmp	r0, r4
 8014012:	d20f      	bcs.n	8014034 <_realloc_r+0x48>
 8014014:	4621      	mov	r1, r4
 8014016:	4638      	mov	r0, r7
 8014018:	f7ff fbb0 	bl	801377c <_malloc_r>
 801401c:	4605      	mov	r5, r0
 801401e:	2800      	cmp	r0, #0
 8014020:	d0f2      	beq.n	8014008 <_realloc_r+0x1c>
 8014022:	4631      	mov	r1, r6
 8014024:	4622      	mov	r2, r4
 8014026:	f7fb fbb1 	bl	800f78c <memcpy>
 801402a:	4631      	mov	r1, r6
 801402c:	4638      	mov	r0, r7
 801402e:	f7ff fb55 	bl	80136dc <_free_r>
 8014032:	e7e9      	b.n	8014008 <_realloc_r+0x1c>
 8014034:	4635      	mov	r5, r6
 8014036:	e7e7      	b.n	8014008 <_realloc_r+0x1c>

08014038 <_read_r>:
 8014038:	b538      	push	{r3, r4, r5, lr}
 801403a:	4d07      	ldr	r5, [pc, #28]	; (8014058 <_read_r+0x20>)
 801403c:	4604      	mov	r4, r0
 801403e:	4608      	mov	r0, r1
 8014040:	4611      	mov	r1, r2
 8014042:	2200      	movs	r2, #0
 8014044:	602a      	str	r2, [r5, #0]
 8014046:	461a      	mov	r2, r3
 8014048:	f7f3 fba0 	bl	800778c <_read>
 801404c:	1c43      	adds	r3, r0, #1
 801404e:	d102      	bne.n	8014056 <_read_r+0x1e>
 8014050:	682b      	ldr	r3, [r5, #0]
 8014052:	b103      	cbz	r3, 8014056 <_read_r+0x1e>
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	bd38      	pop	{r3, r4, r5, pc}
 8014058:	20001574 	.word	0x20001574

0801405c <abort>:
 801405c:	b508      	push	{r3, lr}
 801405e:	2006      	movs	r0, #6
 8014060:	f000 f834 	bl	80140cc <raise>
 8014064:	2001      	movs	r0, #1
 8014066:	f7f3 fb87 	bl	8007778 <_exit>

0801406a <_malloc_usable_size_r>:
 801406a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801406e:	1f18      	subs	r0, r3, #4
 8014070:	2b00      	cmp	r3, #0
 8014072:	bfbc      	itt	lt
 8014074:	580b      	ldrlt	r3, [r1, r0]
 8014076:	18c0      	addlt	r0, r0, r3
 8014078:	4770      	bx	lr

0801407a <_raise_r>:
 801407a:	291f      	cmp	r1, #31
 801407c:	b538      	push	{r3, r4, r5, lr}
 801407e:	4604      	mov	r4, r0
 8014080:	460d      	mov	r5, r1
 8014082:	d904      	bls.n	801408e <_raise_r+0x14>
 8014084:	2316      	movs	r3, #22
 8014086:	6003      	str	r3, [r0, #0]
 8014088:	f04f 30ff 	mov.w	r0, #4294967295
 801408c:	bd38      	pop	{r3, r4, r5, pc}
 801408e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014090:	b112      	cbz	r2, 8014098 <_raise_r+0x1e>
 8014092:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014096:	b94b      	cbnz	r3, 80140ac <_raise_r+0x32>
 8014098:	4620      	mov	r0, r4
 801409a:	f000 f831 	bl	8014100 <_getpid_r>
 801409e:	462a      	mov	r2, r5
 80140a0:	4601      	mov	r1, r0
 80140a2:	4620      	mov	r0, r4
 80140a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140a8:	f000 b818 	b.w	80140dc <_kill_r>
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d00a      	beq.n	80140c6 <_raise_r+0x4c>
 80140b0:	1c59      	adds	r1, r3, #1
 80140b2:	d103      	bne.n	80140bc <_raise_r+0x42>
 80140b4:	2316      	movs	r3, #22
 80140b6:	6003      	str	r3, [r0, #0]
 80140b8:	2001      	movs	r0, #1
 80140ba:	e7e7      	b.n	801408c <_raise_r+0x12>
 80140bc:	2400      	movs	r4, #0
 80140be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80140c2:	4628      	mov	r0, r5
 80140c4:	4798      	blx	r3
 80140c6:	2000      	movs	r0, #0
 80140c8:	e7e0      	b.n	801408c <_raise_r+0x12>
	...

080140cc <raise>:
 80140cc:	4b02      	ldr	r3, [pc, #8]	; (80140d8 <raise+0xc>)
 80140ce:	4601      	mov	r1, r0
 80140d0:	6818      	ldr	r0, [r3, #0]
 80140d2:	f7ff bfd2 	b.w	801407a <_raise_r>
 80140d6:	bf00      	nop
 80140d8:	20000770 	.word	0x20000770

080140dc <_kill_r>:
 80140dc:	b538      	push	{r3, r4, r5, lr}
 80140de:	4d07      	ldr	r5, [pc, #28]	; (80140fc <_kill_r+0x20>)
 80140e0:	2300      	movs	r3, #0
 80140e2:	4604      	mov	r4, r0
 80140e4:	4608      	mov	r0, r1
 80140e6:	4611      	mov	r1, r2
 80140e8:	602b      	str	r3, [r5, #0]
 80140ea:	f7f3 fb35 	bl	8007758 <_kill>
 80140ee:	1c43      	adds	r3, r0, #1
 80140f0:	d102      	bne.n	80140f8 <_kill_r+0x1c>
 80140f2:	682b      	ldr	r3, [r5, #0]
 80140f4:	b103      	cbz	r3, 80140f8 <_kill_r+0x1c>
 80140f6:	6023      	str	r3, [r4, #0]
 80140f8:	bd38      	pop	{r3, r4, r5, pc}
 80140fa:	bf00      	nop
 80140fc:	20001574 	.word	0x20001574

08014100 <_getpid_r>:
 8014100:	f7f3 bb22 	b.w	8007748 <_getpid>

08014104 <asinhf>:
 8014104:	b510      	push	{r4, lr}
 8014106:	ee10 4a10 	vmov	r4, s0
 801410a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801410e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014112:	ed2d 8b04 	vpush	{d8-d9}
 8014116:	eeb0 8a40 	vmov.f32	s16, s0
 801411a:	db06      	blt.n	801412a <asinhf+0x26>
 801411c:	ee30 8a00 	vadd.f32	s16, s0, s0
 8014120:	eeb0 0a48 	vmov.f32	s0, s16
 8014124:	ecbd 8b04 	vpop	{d8-d9}
 8014128:	bd10      	pop	{r4, pc}
 801412a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801412e:	da21      	bge.n	8014174 <asinhf+0x70>
 8014130:	eddf 7a26 	vldr	s15, [pc, #152]	; 80141cc <asinhf+0xc8>
 8014134:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801413c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014144:	dcec      	bgt.n	8014120 <asinhf+0x1c>
 8014146:	eeb0 0a48 	vmov.f32	s0, s16
 801414a:	f000 fb79 	bl	8014840 <fabsf>
 801414e:	ee68 8a08 	vmul.f32	s17, s16, s16
 8014152:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8014156:	eeb0 8a40 	vmov.f32	s16, s0
 801415a:	ee38 0a89 	vadd.f32	s0, s17, s18
 801415e:	f002 f987 	bl	8016470 <__ieee754_sqrtf>
 8014162:	ee30 0a09 	vadd.f32	s0, s0, s18
 8014166:	eec8 7a80 	vdiv.f32	s15, s17, s0
 801416a:	ee37 0a88 	vadd.f32	s0, s15, s16
 801416e:	f000 fbb1 	bl	80148d4 <log1pf>
 8014172:	e028      	b.n	80141c6 <asinhf+0xc2>
 8014174:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8014178:	dd0c      	ble.n	8014194 <asinhf+0x90>
 801417a:	f000 fb61 	bl	8014840 <fabsf>
 801417e:	f001 fc1d 	bl	80159bc <__ieee754_logf>
 8014182:	ed9f 8a13 	vldr	s16, [pc, #76]	; 80141d0 <asinhf+0xcc>
 8014186:	ee30 8a08 	vadd.f32	s16, s0, s16
 801418a:	2c00      	cmp	r4, #0
 801418c:	bfd8      	it	le
 801418e:	eeb1 8a48 	vnegle.f32	s16, s16
 8014192:	e7c5      	b.n	8014120 <asinhf+0x1c>
 8014194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014198:	ddd5      	ble.n	8014146 <asinhf+0x42>
 801419a:	f000 fb51 	bl	8014840 <fabsf>
 801419e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80141a2:	eef0 8a40 	vmov.f32	s17, s0
 80141a6:	eeb0 0a49 	vmov.f32	s0, s18
 80141aa:	eea8 0a08 	vfma.f32	s0, s16, s16
 80141ae:	f002 f95f 	bl	8016470 <__ieee754_sqrtf>
 80141b2:	ee70 7a28 	vadd.f32	s15, s0, s17
 80141b6:	ee89 0a27 	vdiv.f32	s0, s18, s15
 80141ba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80141be:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80141c2:	f001 fbfb 	bl	80159bc <__ieee754_logf>
 80141c6:	eeb0 8a40 	vmov.f32	s16, s0
 80141ca:	e7de      	b.n	801418a <asinhf+0x86>
 80141cc:	7149f2ca 	.word	0x7149f2ca
 80141d0:	3f317218 	.word	0x3f317218

080141d4 <atanf>:
 80141d4:	b538      	push	{r3, r4, r5, lr}
 80141d6:	ee10 5a10 	vmov	r5, s0
 80141da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80141de:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80141e2:	eef0 7a40 	vmov.f32	s15, s0
 80141e6:	db10      	blt.n	801420a <atanf+0x36>
 80141e8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80141ec:	dd04      	ble.n	80141f8 <atanf+0x24>
 80141ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 80141f2:	eeb0 0a67 	vmov.f32	s0, s15
 80141f6:	bd38      	pop	{r3, r4, r5, pc}
 80141f8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014330 <atanf+0x15c>
 80141fc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014334 <atanf+0x160>
 8014200:	2d00      	cmp	r5, #0
 8014202:	bfd8      	it	le
 8014204:	eef0 7a40 	vmovle.f32	s15, s0
 8014208:	e7f3      	b.n	80141f2 <atanf+0x1e>
 801420a:	4b4b      	ldr	r3, [pc, #300]	; (8014338 <atanf+0x164>)
 801420c:	429c      	cmp	r4, r3
 801420e:	dc10      	bgt.n	8014232 <atanf+0x5e>
 8014210:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014214:	da0a      	bge.n	801422c <atanf+0x58>
 8014216:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801433c <atanf+0x168>
 801421a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801421e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014222:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801422a:	dce2      	bgt.n	80141f2 <atanf+0x1e>
 801422c:	f04f 33ff 	mov.w	r3, #4294967295
 8014230:	e013      	b.n	801425a <atanf+0x86>
 8014232:	f000 fb05 	bl	8014840 <fabsf>
 8014236:	4b42      	ldr	r3, [pc, #264]	; (8014340 <atanf+0x16c>)
 8014238:	429c      	cmp	r4, r3
 801423a:	dc4f      	bgt.n	80142dc <atanf+0x108>
 801423c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014240:	429c      	cmp	r4, r3
 8014242:	dc41      	bgt.n	80142c8 <atanf+0xf4>
 8014244:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014248:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801424c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014250:	2300      	movs	r3, #0
 8014252:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014256:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801425a:	1c5a      	adds	r2, r3, #1
 801425c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014260:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014344 <atanf+0x170>
 8014264:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8014348 <atanf+0x174>
 8014268:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801434c <atanf+0x178>
 801426c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8014350 <atanf+0x17c>
 8014270:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014274:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014278:	eddf 5a36 	vldr	s11, [pc, #216]	; 8014354 <atanf+0x180>
 801427c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014280:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8014358 <atanf+0x184>
 8014284:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014288:	eddf 5a34 	vldr	s11, [pc, #208]	; 801435c <atanf+0x188>
 801428c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014290:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8014360 <atanf+0x18c>
 8014294:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014298:	eddf 5a32 	vldr	s11, [pc, #200]	; 8014364 <atanf+0x190>
 801429c:	eee7 5a05 	vfma.f32	s11, s14, s10
 80142a0:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8014368 <atanf+0x194>
 80142a4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80142a8:	eddf 5a30 	vldr	s11, [pc, #192]	; 801436c <atanf+0x198>
 80142ac:	eee5 5a07 	vfma.f32	s11, s10, s14
 80142b0:	eea5 0a87 	vfma.f32	s0, s11, s14
 80142b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80142b8:	eea6 0a26 	vfma.f32	s0, s12, s13
 80142bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80142c0:	d121      	bne.n	8014306 <atanf+0x132>
 80142c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80142c6:	e794      	b.n	80141f2 <atanf+0x1e>
 80142c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80142d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80142d4:	2301      	movs	r3, #1
 80142d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80142da:	e7be      	b.n	801425a <atanf+0x86>
 80142dc:	4b24      	ldr	r3, [pc, #144]	; (8014370 <atanf+0x19c>)
 80142de:	429c      	cmp	r4, r3
 80142e0:	dc0b      	bgt.n	80142fa <atanf+0x126>
 80142e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80142e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80142ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80142ee:	2302      	movs	r3, #2
 80142f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80142f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142f8:	e7af      	b.n	801425a <atanf+0x86>
 80142fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80142fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014302:	2303      	movs	r3, #3
 8014304:	e7a9      	b.n	801425a <atanf+0x86>
 8014306:	4a1b      	ldr	r2, [pc, #108]	; (8014374 <atanf+0x1a0>)
 8014308:	491b      	ldr	r1, [pc, #108]	; (8014378 <atanf+0x1a4>)
 801430a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801430e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014312:	ed93 7a00 	vldr	s14, [r3]
 8014316:	ee30 0a47 	vsub.f32	s0, s0, s14
 801431a:	2d00      	cmp	r5, #0
 801431c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014320:	ed92 0a00 	vldr	s0, [r2]
 8014324:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014328:	bfb8      	it	lt
 801432a:	eef1 7a67 	vneglt.f32	s15, s15
 801432e:	e760      	b.n	80141f2 <atanf+0x1e>
 8014330:	3fc90fdb 	.word	0x3fc90fdb
 8014334:	bfc90fdb 	.word	0xbfc90fdb
 8014338:	3edfffff 	.word	0x3edfffff
 801433c:	7149f2ca 	.word	0x7149f2ca
 8014340:	3f97ffff 	.word	0x3f97ffff
 8014344:	3c8569d7 	.word	0x3c8569d7
 8014348:	3d4bda59 	.word	0x3d4bda59
 801434c:	bd15a221 	.word	0xbd15a221
 8014350:	be4ccccd 	.word	0xbe4ccccd
 8014354:	3d886b35 	.word	0x3d886b35
 8014358:	3dba2e6e 	.word	0x3dba2e6e
 801435c:	3e124925 	.word	0x3e124925
 8014360:	3eaaaaab 	.word	0x3eaaaaab
 8014364:	bd6ef16b 	.word	0xbd6ef16b
 8014368:	bd9d8795 	.word	0xbd9d8795
 801436c:	bde38e38 	.word	0xbde38e38
 8014370:	401bffff 	.word	0x401bffff
 8014374:	08100724 	.word	0x08100724
 8014378:	08100734 	.word	0x08100734

0801437c <ceilf>:
 801437c:	ee10 3a10 	vmov	r3, s0
 8014380:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014384:	3a7f      	subs	r2, #127	; 0x7f
 8014386:	2a16      	cmp	r2, #22
 8014388:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801438c:	dc2a      	bgt.n	80143e4 <ceilf+0x68>
 801438e:	2a00      	cmp	r2, #0
 8014390:	da11      	bge.n	80143b6 <ceilf+0x3a>
 8014392:	eddf 7a19 	vldr	s15, [pc, #100]	; 80143f8 <ceilf+0x7c>
 8014396:	ee30 0a27 	vadd.f32	s0, s0, s15
 801439a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a2:	dd05      	ble.n	80143b0 <ceilf+0x34>
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	db23      	blt.n	80143f0 <ceilf+0x74>
 80143a8:	2900      	cmp	r1, #0
 80143aa:	bf18      	it	ne
 80143ac:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80143b0:	ee00 3a10 	vmov	s0, r3
 80143b4:	4770      	bx	lr
 80143b6:	4911      	ldr	r1, [pc, #68]	; (80143fc <ceilf+0x80>)
 80143b8:	4111      	asrs	r1, r2
 80143ba:	420b      	tst	r3, r1
 80143bc:	d0fa      	beq.n	80143b4 <ceilf+0x38>
 80143be:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80143f8 <ceilf+0x7c>
 80143c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80143c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80143ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ce:	ddef      	ble.n	80143b0 <ceilf+0x34>
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	bfc2      	ittt	gt
 80143d4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80143d8:	fa40 f202 	asrgt.w	r2, r0, r2
 80143dc:	189b      	addgt	r3, r3, r2
 80143de:	ea23 0301 	bic.w	r3, r3, r1
 80143e2:	e7e5      	b.n	80143b0 <ceilf+0x34>
 80143e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80143e8:	d3e4      	bcc.n	80143b4 <ceilf+0x38>
 80143ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80143ee:	4770      	bx	lr
 80143f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80143f4:	e7dc      	b.n	80143b0 <ceilf+0x34>
 80143f6:	bf00      	nop
 80143f8:	7149f2ca 	.word	0x7149f2ca
 80143fc:	007fffff 	.word	0x007fffff

08014400 <cosf>:
 8014400:	ee10 3a10 	vmov	r3, s0
 8014404:	b507      	push	{r0, r1, r2, lr}
 8014406:	4a1c      	ldr	r2, [pc, #112]	; (8014478 <cosf+0x78>)
 8014408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801440c:	4293      	cmp	r3, r2
 801440e:	dc04      	bgt.n	801441a <cosf+0x1a>
 8014410:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801447c <cosf+0x7c>
 8014414:	f002 f830 	bl	8016478 <__kernel_cosf>
 8014418:	e004      	b.n	8014424 <cosf+0x24>
 801441a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801441e:	db04      	blt.n	801442a <cosf+0x2a>
 8014420:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014424:	b003      	add	sp, #12
 8014426:	f85d fb04 	ldr.w	pc, [sp], #4
 801442a:	4668      	mov	r0, sp
 801442c:	f001 fe76 	bl	801611c <__ieee754_rem_pio2f>
 8014430:	f000 0003 	and.w	r0, r0, #3
 8014434:	2801      	cmp	r0, #1
 8014436:	d007      	beq.n	8014448 <cosf+0x48>
 8014438:	2802      	cmp	r0, #2
 801443a:	d00e      	beq.n	801445a <cosf+0x5a>
 801443c:	b9a0      	cbnz	r0, 8014468 <cosf+0x68>
 801443e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014442:	ed9d 0a00 	vldr	s0, [sp]
 8014446:	e7e5      	b.n	8014414 <cosf+0x14>
 8014448:	eddd 0a01 	vldr	s1, [sp, #4]
 801444c:	ed9d 0a00 	vldr	s0, [sp]
 8014450:	f002 fafc 	bl	8016a4c <__kernel_sinf>
 8014454:	eeb1 0a40 	vneg.f32	s0, s0
 8014458:	e7e4      	b.n	8014424 <cosf+0x24>
 801445a:	eddd 0a01 	vldr	s1, [sp, #4]
 801445e:	ed9d 0a00 	vldr	s0, [sp]
 8014462:	f002 f809 	bl	8016478 <__kernel_cosf>
 8014466:	e7f5      	b.n	8014454 <cosf+0x54>
 8014468:	eddd 0a01 	vldr	s1, [sp, #4]
 801446c:	ed9d 0a00 	vldr	s0, [sp]
 8014470:	2001      	movs	r0, #1
 8014472:	f002 faeb 	bl	8016a4c <__kernel_sinf>
 8014476:	e7d5      	b.n	8014424 <cosf+0x24>
 8014478:	3f490fd8 	.word	0x3f490fd8
 801447c:	00000000 	.word	0x00000000

08014480 <erff>:
 8014480:	b538      	push	{r3, r4, r5, lr}
 8014482:	ee10 4a10 	vmov	r4, s0
 8014486:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 801448a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801448e:	ed2d 8b06 	vpush	{d8-d10}
 8014492:	eef0 7a40 	vmov.f32	s15, s0
 8014496:	db12      	blt.n	80144be <erff+0x3e>
 8014498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801449c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144a0:	0fe4      	lsrs	r4, r4, #31
 80144a2:	0064      	lsls	r4, r4, #1
 80144a4:	f1c4 0301 	rsb	r3, r4, #1
 80144a8:	ee00 3a10 	vmov	s0, r3
 80144ac:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80144b0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80144b4:	ecbd 8b06 	vpop	{d8-d10}
 80144b8:	eeb0 0a67 	vmov.f32	s0, s15
 80144bc:	bd38      	pop	{r3, r4, r5, pc}
 80144be:	4ba4      	ldr	r3, [pc, #656]	; (8014750 <erff+0x2d0>)
 80144c0:	429d      	cmp	r5, r3
 80144c2:	dc4a      	bgt.n	801455a <erff+0xda>
 80144c4:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 80144c8:	da16      	bge.n	80144f8 <erff+0x78>
 80144ca:	f014 4ff8 	tst.w	r4, #2080374784	; 0x7c000000
 80144ce:	d10e      	bne.n	80144ee <erff+0x6e>
 80144d0:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8014754 <erff+0x2d4>
 80144d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80144d8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80144dc:	eea7 0a87 	vfma.f32	s0, s15, s14
 80144e0:	eef0 7a40 	vmov.f32	s15, s0
 80144e4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80144e8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80144ec:	e7e2      	b.n	80144b4 <erff+0x34>
 80144ee:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8014758 <erff+0x2d8>
 80144f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80144f6:	e7dd      	b.n	80144b4 <erff+0x34>
 80144f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80144fc:	ed9f 6a97 	vldr	s12, [pc, #604]	; 801475c <erff+0x2dc>
 8014500:	eddf 6a97 	vldr	s13, [pc, #604]	; 8014760 <erff+0x2e0>
 8014504:	eddf 5a97 	vldr	s11, [pc, #604]	; 8014764 <erff+0x2e4>
 8014508:	eee7 6a06 	vfma.f32	s13, s14, s12
 801450c:	ed9f 6a96 	vldr	s12, [pc, #600]	; 8014768 <erff+0x2e8>
 8014510:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014514:	eddf 6a95 	vldr	s13, [pc, #596]	; 801476c <erff+0x2ec>
 8014518:	eee6 6a07 	vfma.f32	s13, s12, s14
 801451c:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8014758 <erff+0x2d8>
 8014520:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014524:	eddf 6a92 	vldr	s13, [pc, #584]	; 8014770 <erff+0x2f0>
 8014528:	eee7 6a25 	vfma.f32	s13, s14, s11
 801452c:	eddf 5a91 	vldr	s11, [pc, #580]	; 8014774 <erff+0x2f4>
 8014530:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014534:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014778 <erff+0x2f8>
 8014538:	eee5 6a87 	vfma.f32	s13, s11, s14
 801453c:	eddf 5a8f 	vldr	s11, [pc, #572]	; 801477c <erff+0x2fc>
 8014540:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014548:	eee5 6a87 	vfma.f32	s13, s11, s14
 801454c:	eeb0 7a66 	vmov.f32	s14, s13
 8014550:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8014554:	eee0 7a26 	vfma.f32	s15, s0, s13
 8014558:	e7ac      	b.n	80144b4 <erff+0x34>
 801455a:	4b89      	ldr	r3, [pc, #548]	; (8014780 <erff+0x300>)
 801455c:	429d      	cmp	r5, r3
 801455e:	dc44      	bgt.n	80145ea <erff+0x16a>
 8014560:	f000 f96e 	bl	8014840 <fabsf>
 8014564:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014568:	ee30 0a67 	vsub.f32	s0, s0, s15
 801456c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8014784 <erff+0x304>
 8014570:	eddf 6a85 	vldr	s13, [pc, #532]	; 8014788 <erff+0x308>
 8014574:	ed9f 6a85 	vldr	s12, [pc, #532]	; 801478c <erff+0x30c>
 8014578:	eee0 6a07 	vfma.f32	s13, s0, s14
 801457c:	2c00      	cmp	r4, #0
 801457e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8014790 <erff+0x310>
 8014582:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014586:	eddf 6a83 	vldr	s13, [pc, #524]	; 8014794 <erff+0x314>
 801458a:	eee7 6a00 	vfma.f32	s13, s14, s0
 801458e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8014798 <erff+0x318>
 8014592:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014596:	eddf 6a81 	vldr	s13, [pc, #516]	; 801479c <erff+0x31c>
 801459a:	eee7 6a00 	vfma.f32	s13, s14, s0
 801459e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80147a0 <erff+0x320>
 80145a2:	eea6 7a80 	vfma.f32	s14, s13, s0
 80145a6:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80147a4 <erff+0x324>
 80145aa:	eee0 6a06 	vfma.f32	s13, s0, s12
 80145ae:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 80147a8 <erff+0x328>
 80145b2:	eea6 6a80 	vfma.f32	s12, s13, s0
 80145b6:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80147ac <erff+0x32c>
 80145ba:	eee6 6a00 	vfma.f32	s13, s12, s0
 80145be:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 80147b0 <erff+0x330>
 80145c2:	eea6 6a80 	vfma.f32	s12, s13, s0
 80145c6:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80147b4 <erff+0x334>
 80145ca:	eee6 6a00 	vfma.f32	s13, s12, s0
 80145ce:	eee6 7a80 	vfma.f32	s15, s13, s0
 80145d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80145d6:	bfab      	itete	ge
 80145d8:	eddf 7a77 	vldrge	s15, [pc, #476]	; 80147b8 <erff+0x338>
 80145dc:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 80147bc <erff+0x33c>
 80145e0:	ee70 7a27 	vaddge.f32	s15, s0, s15
 80145e4:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 80145e8:	e764      	b.n	80144b4 <erff+0x34>
 80145ea:	4b75      	ldr	r3, [pc, #468]	; (80147c0 <erff+0x340>)
 80145ec:	429d      	cmp	r5, r3
 80145ee:	dd08      	ble.n	8014602 <erff+0x182>
 80145f0:	2c00      	cmp	r4, #0
 80145f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80145f6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80145fa:	bfa8      	it	ge
 80145fc:	eef0 7a40 	vmovge.f32	s15, s0
 8014600:	e758      	b.n	80144b4 <erff+0x34>
 8014602:	f000 f91d 	bl	8014840 <fabsf>
 8014606:	4b6f      	ldr	r3, [pc, #444]	; (80147c4 <erff+0x344>)
 8014608:	ee60 7a00 	vmul.f32	s15, s0, s0
 801460c:	eeb0 8a40 	vmov.f32	s16, s0
 8014610:	429d      	cmp	r5, r3
 8014612:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014616:	ee80 7a27 	vdiv.f32	s14, s0, s15
 801461a:	eeb0 9a40 	vmov.f32	s18, s0
 801461e:	dc64      	bgt.n	80146ea <erff+0x26a>
 8014620:	eddf 7a69 	vldr	s15, [pc, #420]	; 80147c8 <erff+0x348>
 8014624:	eddf 6a69 	vldr	s13, [pc, #420]	; 80147cc <erff+0x34c>
 8014628:	eddf 9a69 	vldr	s19, [pc, #420]	; 80147d0 <erff+0x350>
 801462c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014630:	eddf 7a68 	vldr	s15, [pc, #416]	; 80147d4 <erff+0x354>
 8014634:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014638:	eddf 6a67 	vldr	s13, [pc, #412]	; 80147d8 <erff+0x358>
 801463c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014640:	eddf 7a66 	vldr	s15, [pc, #408]	; 80147dc <erff+0x35c>
 8014644:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014648:	eddf 6a65 	vldr	s13, [pc, #404]	; 80147e0 <erff+0x360>
 801464c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014650:	eddf 7a64 	vldr	s15, [pc, #400]	; 80147e4 <erff+0x364>
 8014654:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014658:	eddf 6a63 	vldr	s13, [pc, #396]	; 80147e8 <erff+0x368>
 801465c:	eee7 9a87 	vfma.f32	s19, s15, s14
 8014660:	eddf 7a62 	vldr	s15, [pc, #392]	; 80147ec <erff+0x36c>
 8014664:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014668:	eddf 6a61 	vldr	s13, [pc, #388]	; 80147f0 <erff+0x370>
 801466c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014670:	eddf 7a60 	vldr	s15, [pc, #384]	; 80147f4 <erff+0x374>
 8014674:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014678:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80147f8 <erff+0x378>
 801467c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014680:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80147fc <erff+0x37c>
 8014684:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014688:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8014800 <erff+0x380>
 801468c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014690:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8014804 <erff+0x384>
 8014694:	ee18 3a10 	vmov	r3, s16
 8014698:	eee6 7a87 	vfma.f32	s15, s13, s14
 801469c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80146a0:	f023 030f 	bic.w	r3, r3, #15
 80146a4:	ee08 3a90 	vmov	s17, r3
 80146a8:	eef0 aa49 	vmov.f32	s21, s18
 80146ac:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 80146b0:	eee7 aa87 	vfma.f32	s21, s15, s14
 80146b4:	eea8 0ae8 	vfms.f32	s0, s17, s17
 80146b8:	f001 f82a 	bl	8015710 <__ieee754_expf>
 80146bc:	eeb0 aa40 	vmov.f32	s20, s0
 80146c0:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 80146c4:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80146c8:	ee78 8a28 	vadd.f32	s17, s16, s17
 80146cc:	eea7 0aa8 	vfma.f32	s0, s15, s17
 80146d0:	f001 f81e 	bl	8015710 <__ieee754_expf>
 80146d4:	ee2a 0a00 	vmul.f32	s0, s20, s0
 80146d8:	2c00      	cmp	r4, #0
 80146da:	eec0 7a08 	vdiv.f32	s15, s0, s16
 80146de:	bfac      	ite	ge
 80146e0:	ee79 7a67 	vsubge.f32	s15, s18, s15
 80146e4:	ee77 7ac9 	vsublt.f32	s15, s15, s18
 80146e8:	e6e4      	b.n	80144b4 <erff+0x34>
 80146ea:	eddf 6a47 	vldr	s13, [pc, #284]	; 8014808 <erff+0x388>
 80146ee:	eddf 7a47 	vldr	s15, [pc, #284]	; 801480c <erff+0x38c>
 80146f2:	eddf 9a47 	vldr	s19, [pc, #284]	; 8014810 <erff+0x390>
 80146f6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80146fa:	eddf 6a46 	vldr	s13, [pc, #280]	; 8014814 <erff+0x394>
 80146fe:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014702:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014818 <erff+0x398>
 8014706:	eee6 7a87 	vfma.f32	s15, s13, s14
 801470a:	eddf 6a44 	vldr	s13, [pc, #272]	; 801481c <erff+0x39c>
 801470e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014712:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014820 <erff+0x3a0>
 8014716:	eee6 7a87 	vfma.f32	s15, s13, s14
 801471a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8014824 <erff+0x3a4>
 801471e:	eee7 9a87 	vfma.f32	s19, s15, s14
 8014722:	eddf 7a41 	vldr	s15, [pc, #260]	; 8014828 <erff+0x3a8>
 8014726:	eee7 6a27 	vfma.f32	s13, s14, s15
 801472a:	eddf 7a40 	vldr	s15, [pc, #256]	; 801482c <erff+0x3ac>
 801472e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014732:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8014830 <erff+0x3b0>
 8014736:	eee7 6a87 	vfma.f32	s13, s15, s14
 801473a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8014834 <erff+0x3b4>
 801473e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014838 <erff+0x3b8>
 8014746:	eee7 6a87 	vfma.f32	s13, s15, s14
 801474a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 801483c <erff+0x3bc>
 801474e:	e7a1      	b.n	8014694 <erff+0x214>
 8014750:	3f57ffff 	.word	0x3f57ffff
 8014754:	3f8375d4 	.word	0x3f8375d4
 8014758:	3e0375d4 	.word	0x3e0375d4
 801475c:	b7c756b1 	.word	0xb7c756b1
 8014760:	bbbd1489 	.word	0xbbbd1489
 8014764:	b684e21a 	.word	0xb684e21a
 8014768:	bce9528f 	.word	0xbce9528f
 801476c:	bea66beb 	.word	0xbea66beb
 8014770:	390aee49 	.word	0x390aee49
 8014774:	3ba68116 	.word	0x3ba68116
 8014778:	3d852a63 	.word	0x3d852a63
 801477c:	3ecbbbce 	.word	0x3ecbbbce
 8014780:	3f9fffff 	.word	0x3f9fffff
 8014784:	bb0df9c0 	.word	0xbb0df9c0
 8014788:	3d1151b3 	.word	0x3d1151b3
 801478c:	3c445aa3 	.word	0x3c445aa3
 8014790:	bde31cc2 	.word	0xbde31cc2
 8014794:	3ea2fe54 	.word	0x3ea2fe54
 8014798:	bebe9208 	.word	0xbebe9208
 801479c:	3ed46805 	.word	0x3ed46805
 80147a0:	bb1acdc6 	.word	0xbb1acdc6
 80147a4:	3c5f6e13 	.word	0x3c5f6e13
 80147a8:	3e013307 	.word	0x3e013307
 80147ac:	3d931ae7 	.word	0x3d931ae7
 80147b0:	3f0a5785 	.word	0x3f0a5785
 80147b4:	3dd9f331 	.word	0x3dd9f331
 80147b8:	3f58560b 	.word	0x3f58560b
 80147bc:	bf58560b 	.word	0xbf58560b
 80147c0:	40bfffff 	.word	0x40bfffff
 80147c4:	4036db6d 	.word	0x4036db6d
 80147c8:	c11d077e 	.word	0xc11d077e
 80147cc:	c2a2932b 	.word	0xc2a2932b
 80147d0:	bc21a093 	.word	0xbc21a093
 80147d4:	c3389ae7 	.word	0xc3389ae7
 80147d8:	c322658c 	.word	0xc322658c
 80147dc:	c2798057 	.word	0xc2798057
 80147e0:	c128f022 	.word	0xc128f022
 80147e4:	bf31a0b7 	.word	0xbf31a0b7
 80147e8:	bd777f97 	.word	0xbd777f97
 80147ec:	40d23f7c 	.word	0x40d23f7c
 80147f0:	42d9451f 	.word	0x42d9451f
 80147f4:	43d6810b 	.word	0x43d6810b
 80147f8:	442158c9 	.word	0x442158c9
 80147fc:	43d9486f 	.word	0x43d9486f
 8014800:	4309a863 	.word	0x4309a863
 8014804:	419d35ce 	.word	0x419d35ce
 8014808:	c3f1c275 	.word	0xc3f1c275
 801480c:	c480230b 	.word	0xc480230b
 8014810:	bc21a092 	.word	0xbc21a092
 8014814:	c41f6441 	.word	0xc41f6441
 8014818:	c320a2ea 	.word	0xc320a2ea
 801481c:	c18e104b 	.word	0xc18e104b
 8014820:	bf4c9dd4 	.word	0xbf4c9dd4
 8014824:	43ed43a7 	.word	0x43ed43a7
 8014828:	c1b38712 	.word	0xc1b38712
 801482c:	451f90ce 	.word	0x451f90ce
 8014830:	4547fdbb 	.word	0x4547fdbb
 8014834:	44c01759 	.word	0x44c01759
 8014838:	43a2e571 	.word	0x43a2e571
 801483c:	41f2b459 	.word	0x41f2b459

08014840 <fabsf>:
 8014840:	ee10 3a10 	vmov	r3, s0
 8014844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014848:	ee00 3a10 	vmov	s0, r3
 801484c:	4770      	bx	lr
	...

08014850 <floorf>:
 8014850:	ee10 3a10 	vmov	r3, s0
 8014854:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014858:	3a7f      	subs	r2, #127	; 0x7f
 801485a:	2a16      	cmp	r2, #22
 801485c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014860:	dc2a      	bgt.n	80148b8 <floorf+0x68>
 8014862:	2a00      	cmp	r2, #0
 8014864:	da11      	bge.n	801488a <floorf+0x3a>
 8014866:	eddf 7a18 	vldr	s15, [pc, #96]	; 80148c8 <floorf+0x78>
 801486a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801486e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014876:	dd05      	ble.n	8014884 <floorf+0x34>
 8014878:	2b00      	cmp	r3, #0
 801487a:	da23      	bge.n	80148c4 <floorf+0x74>
 801487c:	4a13      	ldr	r2, [pc, #76]	; (80148cc <floorf+0x7c>)
 801487e:	2900      	cmp	r1, #0
 8014880:	bf18      	it	ne
 8014882:	4613      	movne	r3, r2
 8014884:	ee00 3a10 	vmov	s0, r3
 8014888:	4770      	bx	lr
 801488a:	4911      	ldr	r1, [pc, #68]	; (80148d0 <floorf+0x80>)
 801488c:	4111      	asrs	r1, r2
 801488e:	420b      	tst	r3, r1
 8014890:	d0fa      	beq.n	8014888 <floorf+0x38>
 8014892:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80148c8 <floorf+0x78>
 8014896:	ee30 0a27 	vadd.f32	s0, s0, s15
 801489a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a2:	ddef      	ble.n	8014884 <floorf+0x34>
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	bfbe      	ittt	lt
 80148a8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80148ac:	fa40 f202 	asrlt.w	r2, r0, r2
 80148b0:	189b      	addlt	r3, r3, r2
 80148b2:	ea23 0301 	bic.w	r3, r3, r1
 80148b6:	e7e5      	b.n	8014884 <floorf+0x34>
 80148b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80148bc:	d3e4      	bcc.n	8014888 <floorf+0x38>
 80148be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80148c2:	4770      	bx	lr
 80148c4:	2300      	movs	r3, #0
 80148c6:	e7dd      	b.n	8014884 <floorf+0x34>
 80148c8:	7149f2ca 	.word	0x7149f2ca
 80148cc:	bf800000 	.word	0xbf800000
 80148d0:	007fffff 	.word	0x007fffff

080148d4 <log1pf>:
 80148d4:	ee10 2a10 	vmov	r2, s0
 80148d8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80148dc:	eef0 7a40 	vmov.f32	s15, s0
 80148e0:	db04      	blt.n	80148ec <log1pf+0x18>
 80148e2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80148e6:	eeb0 0a67 	vmov.f32	s0, s15
 80148ea:	4770      	bx	lr
 80148ec:	4b6c      	ldr	r3, [pc, #432]	; (8014aa0 <log1pf+0x1cc>)
 80148ee:	429a      	cmp	r2, r3
 80148f0:	dc6f      	bgt.n	80149d2 <log1pf+0xfe>
 80148f2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80148f6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80148fa:	db0b      	blt.n	8014914 <log1pf+0x40>
 80148fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014900:	eeb4 0a47 	vcmp.f32	s0, s14
 8014904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014908:	d102      	bne.n	8014910 <log1pf+0x3c>
 801490a:	2001      	movs	r0, #1
 801490c:	f002 b9e8 	b.w	8016ce0 <__math_divzerof>
 8014910:	f002 b9f8 	b.w	8016d04 <__math_invalidf>
 8014914:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 8014918:	da12      	bge.n	8014940 <log1pf+0x6c>
 801491a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8014aa4 <log1pf+0x1d0>
 801491e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014922:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492a:	dd02      	ble.n	8014932 <log1pf+0x5e>
 801492c:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 8014930:	dbd9      	blt.n	80148e6 <log1pf+0x12>
 8014932:	ee67 6ae7 	vnmul.f32	s13, s15, s15
 8014936:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801493a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801493e:	e7d2      	b.n	80148e6 <log1pf+0x12>
 8014940:	4b59      	ldr	r3, [pc, #356]	; (8014aa8 <log1pf+0x1d4>)
 8014942:	441a      	add	r2, r3
 8014944:	429a      	cmp	r2, r3
 8014946:	d84c      	bhi.n	80149e2 <log1pf+0x10e>
 8014948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801494c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014950:	ee16 2a90 	vmov	r2, s13
 8014954:	15d3      	asrs	r3, r2, #23
 8014956:	3b7f      	subs	r3, #127	; 0x7f
 8014958:	2b00      	cmp	r3, #0
 801495a:	bfcb      	itete	gt
 801495c:	ee76 7ae7 	vsubgt.f32	s15, s13, s15
 8014960:	ee36 7ac7 	vsuble.f32	s14, s13, s14
 8014964:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 8014968:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801496c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8014970:	494e      	ldr	r1, [pc, #312]	; (8014aac <log1pf+0x1d8>)
 8014972:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8014976:	428a      	cmp	r2, r1
 8014978:	bfc9      	itett	gt
 801497a:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 801497e:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 8014982:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 8014986:	3301      	addgt	r3, #1
 8014988:	bfc8      	it	gt
 801498a:	1092      	asrgt	r2, r2, #2
 801498c:	ee07 1a10 	vmov	s14, r1
 8014990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014998:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801499c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80149a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80149a4:	bbea      	cbnz	r2, 8014a22 <log1pf+0x14e>
 80149a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80149aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ae:	d11b      	bne.n	80149e8 <log1pf+0x114>
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d071      	beq.n	8014a98 <log1pf+0x1c4>
 80149b4:	ee07 3a90 	vmov	s15, r3
 80149b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80149bc:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014ab0 <log1pf+0x1dc>
 80149c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8014ab4 <log1pf+0x1e0>
 80149c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80149c8:	eef0 7a46 	vmov.f32	s15, s12
 80149cc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80149d0:	e789      	b.n	80148e6 <log1pf+0x12>
 80149d2:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 80149d6:	dbb7      	blt.n	8014948 <log1pf+0x74>
 80149d8:	15d3      	asrs	r3, r2, #23
 80149da:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8014ab8 <log1pf+0x1e4>
 80149de:	3b7f      	subs	r3, #127	; 0x7f
 80149e0:	e7c6      	b.n	8014970 <log1pf+0x9c>
 80149e2:	2201      	movs	r2, #1
 80149e4:	2300      	movs	r3, #0
 80149e6:	e7d7      	b.n	8014998 <log1pf+0xc4>
 80149e8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014abc <log1pf+0x1e8>
 80149ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80149f0:	eee7 5ac7 	vfms.f32	s11, s15, s14
 80149f4:	ee65 5aa6 	vmul.f32	s11, s11, s13
 80149f8:	b913      	cbnz	r3, 8014a00 <log1pf+0x12c>
 80149fa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80149fe:	e772      	b.n	80148e6 <log1pf+0x12>
 8014a00:	ee07 3a10 	vmov	s14, r3
 8014a04:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014ab0 <log1pf+0x1dc>
 8014a08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a0c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014a10:	ee75 6ac6 	vsub.f32	s13, s11, s12
 8014a14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014a18:	eddf 6a26 	vldr	s13, [pc, #152]	; 8014ab4 <log1pf+0x1e0>
 8014a1c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014a20:	e761      	b.n	80148e6 <log1pf+0x12>
 8014a22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014a2a:	ed9f 5a25 	vldr	s10, [pc, #148]	; 8014ac0 <log1pf+0x1ec>
 8014a2e:	eddf 4a25 	vldr	s9, [pc, #148]	; 8014ac4 <log1pf+0x1f0>
 8014a32:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8014a36:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8014a3a:	eee7 4a05 	vfma.f32	s9, s14, s10
 8014a3e:	ed9f 5a22 	vldr	s10, [pc, #136]	; 8014ac8 <log1pf+0x1f4>
 8014a42:	eea4 5a87 	vfma.f32	s10, s9, s14
 8014a46:	eddf 4a21 	vldr	s9, [pc, #132]	; 8014acc <log1pf+0x1f8>
 8014a4a:	eee5 4a07 	vfma.f32	s9, s10, s14
 8014a4e:	ed9f 5a20 	vldr	s10, [pc, #128]	; 8014ad0 <log1pf+0x1fc>
 8014a52:	eea4 5a87 	vfma.f32	s10, s9, s14
 8014a56:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8014ad4 <log1pf+0x200>
 8014a5a:	eee5 4a07 	vfma.f32	s9, s10, s14
 8014a5e:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8014abc <log1pf+0x1e8>
 8014a62:	eea4 5a87 	vfma.f32	s10, s9, s14
 8014a66:	eef0 4a66 	vmov.f32	s9, s13
 8014a6a:	eee5 4a07 	vfma.f32	s9, s10, s14
 8014a6e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8014a72:	b923      	cbnz	r3, 8014a7e <log1pf+0x1aa>
 8014a74:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8014a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a7c:	e733      	b.n	80148e6 <log1pf+0x12>
 8014a7e:	ee07 3a10 	vmov	s14, r3
 8014a82:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8014ab0 <log1pf+0x1dc>
 8014a86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a8a:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014a8e:	ee36 6a25 	vadd.f32	s12, s12, s11
 8014a92:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8014a96:	e7bd      	b.n	8014a14 <log1pf+0x140>
 8014a98:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014ab8 <log1pf+0x1e4>
 8014a9c:	e723      	b.n	80148e6 <log1pf+0x12>
 8014a9e:	bf00      	nop
 8014aa0:	3ed413d6 	.word	0x3ed413d6
 8014aa4:	4c000000 	.word	0x4c000000
 8014aa8:	416a09e0 	.word	0x416a09e0
 8014aac:	003504f6 	.word	0x003504f6
 8014ab0:	3717f7d1 	.word	0x3717f7d1
 8014ab4:	3f317180 	.word	0x3f317180
 8014ab8:	00000000 	.word	0x00000000
 8014abc:	3f2aaaab 	.word	0x3f2aaaab
 8014ac0:	3e178897 	.word	0x3e178897
 8014ac4:	3e1cd04f 	.word	0x3e1cd04f
 8014ac8:	3e3a3325 	.word	0x3e3a3325
 8014acc:	3e638e29 	.word	0x3e638e29
 8014ad0:	3e924925 	.word	0x3e924925
 8014ad4:	3ecccccd 	.word	0x3ecccccd

08014ad8 <roundf>:
 8014ad8:	ee10 0a10 	vmov	r0, s0
 8014adc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014ae0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8014ae4:	2a16      	cmp	r2, #22
 8014ae6:	dc15      	bgt.n	8014b14 <roundf+0x3c>
 8014ae8:	2a00      	cmp	r2, #0
 8014aea:	da08      	bge.n	8014afe <roundf+0x26>
 8014aec:	3201      	adds	r2, #1
 8014aee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8014af2:	d101      	bne.n	8014af8 <roundf+0x20>
 8014af4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8014af8:	ee00 3a10 	vmov	s0, r3
 8014afc:	4770      	bx	lr
 8014afe:	4908      	ldr	r1, [pc, #32]	; (8014b20 <roundf+0x48>)
 8014b00:	4111      	asrs	r1, r2
 8014b02:	4208      	tst	r0, r1
 8014b04:	d0fa      	beq.n	8014afc <roundf+0x24>
 8014b06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014b0a:	4113      	asrs	r3, r2
 8014b0c:	4403      	add	r3, r0
 8014b0e:	ea23 0301 	bic.w	r3, r3, r1
 8014b12:	e7f1      	b.n	8014af8 <roundf+0x20>
 8014b14:	2a80      	cmp	r2, #128	; 0x80
 8014b16:	d1f1      	bne.n	8014afc <roundf+0x24>
 8014b18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b1c:	4770      	bx	lr
 8014b1e:	bf00      	nop
 8014b20:	007fffff 	.word	0x007fffff

08014b24 <sinf>:
 8014b24:	ee10 3a10 	vmov	r3, s0
 8014b28:	b507      	push	{r0, r1, r2, lr}
 8014b2a:	4a1d      	ldr	r2, [pc, #116]	; (8014ba0 <sinf+0x7c>)
 8014b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b30:	4293      	cmp	r3, r2
 8014b32:	dc05      	bgt.n	8014b40 <sinf+0x1c>
 8014b34:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8014ba4 <sinf+0x80>
 8014b38:	2000      	movs	r0, #0
 8014b3a:	f001 ff87 	bl	8016a4c <__kernel_sinf>
 8014b3e:	e004      	b.n	8014b4a <sinf+0x26>
 8014b40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b44:	db04      	blt.n	8014b50 <sinf+0x2c>
 8014b46:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014b4a:	b003      	add	sp, #12
 8014b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b50:	4668      	mov	r0, sp
 8014b52:	f001 fae3 	bl	801611c <__ieee754_rem_pio2f>
 8014b56:	f000 0003 	and.w	r0, r0, #3
 8014b5a:	2801      	cmp	r0, #1
 8014b5c:	d008      	beq.n	8014b70 <sinf+0x4c>
 8014b5e:	2802      	cmp	r0, #2
 8014b60:	d00d      	beq.n	8014b7e <sinf+0x5a>
 8014b62:	b9b0      	cbnz	r0, 8014b92 <sinf+0x6e>
 8014b64:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b68:	ed9d 0a00 	vldr	s0, [sp]
 8014b6c:	2001      	movs	r0, #1
 8014b6e:	e7e4      	b.n	8014b3a <sinf+0x16>
 8014b70:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b74:	ed9d 0a00 	vldr	s0, [sp]
 8014b78:	f001 fc7e 	bl	8016478 <__kernel_cosf>
 8014b7c:	e7e5      	b.n	8014b4a <sinf+0x26>
 8014b7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b82:	ed9d 0a00 	vldr	s0, [sp]
 8014b86:	2001      	movs	r0, #1
 8014b88:	f001 ff60 	bl	8016a4c <__kernel_sinf>
 8014b8c:	eeb1 0a40 	vneg.f32	s0, s0
 8014b90:	e7db      	b.n	8014b4a <sinf+0x26>
 8014b92:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b96:	ed9d 0a00 	vldr	s0, [sp]
 8014b9a:	f001 fc6d 	bl	8016478 <__kernel_cosf>
 8014b9e:	e7f5      	b.n	8014b8c <sinf+0x68>
 8014ba0:	3f490fd8 	.word	0x3f490fd8
 8014ba4:	00000000 	.word	0x00000000

08014ba8 <tanf>:
 8014ba8:	ee10 3a10 	vmov	r3, s0
 8014bac:	b507      	push	{r0, r1, r2, lr}
 8014bae:	4a10      	ldr	r2, [pc, #64]	; (8014bf0 <tanf+0x48>)
 8014bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	dc05      	bgt.n	8014bc4 <tanf+0x1c>
 8014bb8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8014bf4 <tanf+0x4c>
 8014bbc:	2001      	movs	r0, #1
 8014bbe:	f001 ff8d 	bl	8016adc <__kernel_tanf>
 8014bc2:	e004      	b.n	8014bce <tanf+0x26>
 8014bc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014bc8:	db04      	blt.n	8014bd4 <tanf+0x2c>
 8014bca:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014bce:	b003      	add	sp, #12
 8014bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bd4:	4668      	mov	r0, sp
 8014bd6:	f001 faa1 	bl	801611c <__ieee754_rem_pio2f>
 8014bda:	0040      	lsls	r0, r0, #1
 8014bdc:	f000 0002 	and.w	r0, r0, #2
 8014be0:	eddd 0a01 	vldr	s1, [sp, #4]
 8014be4:	ed9d 0a00 	vldr	s0, [sp]
 8014be8:	f1c0 0001 	rsb	r0, r0, #1
 8014bec:	e7e7      	b.n	8014bbe <tanf+0x16>
 8014bee:	bf00      	nop
 8014bf0:	3f490fda 	.word	0x3f490fda
 8014bf4:	00000000 	.word	0x00000000

08014bf8 <tanhf>:
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	ee10 4a10 	vmov	r4, s0
 8014bfe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014c02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014c06:	ed2d 8b02 	vpush	{d8}
 8014c0a:	eeb0 7a40 	vmov.f32	s14, s0
 8014c0e:	db0c      	blt.n	8014c2a <tanhf+0x32>
 8014c10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c14:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8014c18:	2c00      	cmp	r4, #0
 8014c1a:	bfac      	ite	ge
 8014c1c:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8014c20:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8014c24:	ecbd 8b02 	vpop	{d8}
 8014c28:	bd10      	pop	{r4, pc}
 8014c2a:	4a1b      	ldr	r2, [pc, #108]	; (8014c98 <tanhf+0xa0>)
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	dc30      	bgt.n	8014c92 <tanhf+0x9a>
 8014c30:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8014c34:	da06      	bge.n	8014c44 <tanhf+0x4c>
 8014c36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014c3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014c42:	e7ef      	b.n	8014c24 <tanhf+0x2c>
 8014c44:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014c48:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8014c4c:	db12      	blt.n	8014c74 <tanhf+0x7c>
 8014c4e:	f7ff fdf7 	bl	8014840 <fabsf>
 8014c52:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014c56:	f002 f865 	bl	8016d24 <expm1f>
 8014c5a:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014c5e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8014c62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014c6a:	2c00      	cmp	r4, #0
 8014c6c:	bfb8      	it	lt
 8014c6e:	eeb1 0a40 	vneglt.f32	s0, s0
 8014c72:	e7d7      	b.n	8014c24 <tanhf+0x2c>
 8014c74:	f7ff fde4 	bl	8014840 <fabsf>
 8014c78:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8014c7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c80:	f002 f850 	bl	8016d24 <expm1f>
 8014c84:	ee70 7a08 	vadd.f32	s15, s0, s16
 8014c88:	eeb1 7a40 	vneg.f32	s14, s0
 8014c8c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014c90:	e7eb      	b.n	8014c6a <tanhf+0x72>
 8014c92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c96:	e7e8      	b.n	8014c6a <tanhf+0x72>
 8014c98:	41afffff 	.word	0x41afffff

08014c9c <acosf>:
 8014c9c:	b508      	push	{r3, lr}
 8014c9e:	ed2d 8b02 	vpush	{d8}
 8014ca2:	eeb0 8a40 	vmov.f32	s16, s0
 8014ca6:	f000 fa55 	bl	8015154 <__ieee754_acosf>
 8014caa:	4b13      	ldr	r3, [pc, #76]	; (8014cf8 <acosf+0x5c>)
 8014cac:	f993 3000 	ldrsb.w	r3, [r3]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	eef0 8a40 	vmov.f32	s17, s0
 8014cb6:	d01a      	beq.n	8014cee <acosf+0x52>
 8014cb8:	eeb4 8a48 	vcmp.f32	s16, s16
 8014cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc0:	d615      	bvs.n	8014cee <acosf+0x52>
 8014cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8014cc6:	f7ff fdbb 	bl	8014840 <fabsf>
 8014cca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014cce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd6:	dd0a      	ble.n	8014cee <acosf+0x52>
 8014cd8:	f7fa fd20 	bl	800f71c <__errno>
 8014cdc:	ecbd 8b02 	vpop	{d8}
 8014ce0:	2321      	movs	r3, #33	; 0x21
 8014ce2:	6003      	str	r3, [r0, #0]
 8014ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014ce8:	4804      	ldr	r0, [pc, #16]	; (8014cfc <acosf+0x60>)
 8014cea:	f7fb bc6d 	b.w	80105c8 <nanf>
 8014cee:	eeb0 0a68 	vmov.f32	s0, s17
 8014cf2:	ecbd 8b02 	vpop	{d8}
 8014cf6:	bd08      	pop	{r3, pc}
 8014cf8:	20000944 	.word	0x20000944
 8014cfc:	08100720 	.word	0x08100720

08014d00 <acoshf>:
 8014d00:	b508      	push	{r3, lr}
 8014d02:	ed2d 8b02 	vpush	{d8}
 8014d06:	eeb0 8a40 	vmov.f32	s16, s0
 8014d0a:	f000 fb1d 	bl	8015348 <__ieee754_acoshf>
 8014d0e:	4b0e      	ldr	r3, [pc, #56]	; (8014d48 <acoshf+0x48>)
 8014d10:	f993 3000 	ldrsb.w	r3, [r3]
 8014d14:	3301      	adds	r3, #1
 8014d16:	d013      	beq.n	8014d40 <acoshf+0x40>
 8014d18:	eeb4 8a48 	vcmp.f32	s16, s16
 8014d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d20:	d60e      	bvs.n	8014d40 <acoshf+0x40>
 8014d22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2e:	d507      	bpl.n	8014d40 <acoshf+0x40>
 8014d30:	f7fa fcf4 	bl	800f71c <__errno>
 8014d34:	eddf 7a05 	vldr	s15, [pc, #20]	; 8014d4c <acoshf+0x4c>
 8014d38:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014d3c:	2321      	movs	r3, #33	; 0x21
 8014d3e:	6003      	str	r3, [r0, #0]
 8014d40:	ecbd 8b02 	vpop	{d8}
 8014d44:	bd08      	pop	{r3, pc}
 8014d46:	bf00      	nop
 8014d48:	20000944 	.word	0x20000944
 8014d4c:	00000000 	.word	0x00000000

08014d50 <asinf>:
 8014d50:	b508      	push	{r3, lr}
 8014d52:	ed2d 8b02 	vpush	{d8}
 8014d56:	eeb0 8a40 	vmov.f32	s16, s0
 8014d5a:	f000 fb49 	bl	80153f0 <__ieee754_asinf>
 8014d5e:	4b13      	ldr	r3, [pc, #76]	; (8014dac <asinf+0x5c>)
 8014d60:	f993 3000 	ldrsb.w	r3, [r3]
 8014d64:	3301      	adds	r3, #1
 8014d66:	eef0 8a40 	vmov.f32	s17, s0
 8014d6a:	d01a      	beq.n	8014da2 <asinf+0x52>
 8014d6c:	eeb4 8a48 	vcmp.f32	s16, s16
 8014d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d74:	d615      	bvs.n	8014da2 <asinf+0x52>
 8014d76:	eeb0 0a48 	vmov.f32	s0, s16
 8014d7a:	f7ff fd61 	bl	8014840 <fabsf>
 8014d7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d82:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8a:	dd0a      	ble.n	8014da2 <asinf+0x52>
 8014d8c:	f7fa fcc6 	bl	800f71c <__errno>
 8014d90:	ecbd 8b02 	vpop	{d8}
 8014d94:	2321      	movs	r3, #33	; 0x21
 8014d96:	6003      	str	r3, [r0, #0]
 8014d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014d9c:	4804      	ldr	r0, [pc, #16]	; (8014db0 <asinf+0x60>)
 8014d9e:	f7fb bc13 	b.w	80105c8 <nanf>
 8014da2:	eeb0 0a68 	vmov.f32	s0, s17
 8014da6:	ecbd 8b02 	vpop	{d8}
 8014daa:	bd08      	pop	{r3, pc}
 8014dac:	20000944 	.word	0x20000944
 8014db0:	08100720 	.word	0x08100720

08014db4 <atanhf>:
 8014db4:	b510      	push	{r4, lr}
 8014db6:	ed2d 8b04 	vpush	{d8-d9}
 8014dba:	eeb0 8a40 	vmov.f32	s16, s0
 8014dbe:	f000 fbfd 	bl	80155bc <__ieee754_atanhf>
 8014dc2:	4b16      	ldr	r3, [pc, #88]	; (8014e1c <atanhf+0x68>)
 8014dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8014dc8:	3301      	adds	r3, #1
 8014dca:	eef0 8a40 	vmov.f32	s17, s0
 8014dce:	d019      	beq.n	8014e04 <atanhf+0x50>
 8014dd0:	eeb4 8a48 	vcmp.f32	s16, s16
 8014dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd8:	d614      	bvs.n	8014e04 <atanhf+0x50>
 8014dda:	eeb0 0a48 	vmov.f32	s0, s16
 8014dde:	f7ff fd2f 	bl	8014840 <fabsf>
 8014de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014de6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dee:	db09      	blt.n	8014e04 <atanhf+0x50>
 8014df0:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 8014e20 <atanhf+0x6c>
 8014df4:	f04f 0421 	mov.w	r4, #33	; 0x21
 8014df8:	dd09      	ble.n	8014e0e <atanhf+0x5a>
 8014dfa:	f7fa fc8f 	bl	800f71c <__errno>
 8014dfe:	eec9 8a09 	vdiv.f32	s17, s18, s18
 8014e02:	6004      	str	r4, [r0, #0]
 8014e04:	eeb0 0a68 	vmov.f32	s0, s17
 8014e08:	ecbd 8b04 	vpop	{d8-d9}
 8014e0c:	bd10      	pop	{r4, pc}
 8014e0e:	f7fa fc85 	bl	800f71c <__errno>
 8014e12:	eec8 8a09 	vdiv.f32	s17, s16, s18
 8014e16:	6004      	str	r4, [r0, #0]
 8014e18:	e7f4      	b.n	8014e04 <atanhf+0x50>
 8014e1a:	bf00      	nop
 8014e1c:	20000944 	.word	0x20000944
 8014e20:	00000000 	.word	0x00000000

08014e24 <coshf>:
 8014e24:	b508      	push	{r3, lr}
 8014e26:	ed2d 8b02 	vpush	{d8}
 8014e2a:	eeb0 8a40 	vmov.f32	s16, s0
 8014e2e:	f000 fc0b 	bl	8015648 <__ieee754_coshf>
 8014e32:	4b11      	ldr	r3, [pc, #68]	; (8014e78 <coshf+0x54>)
 8014e34:	f993 3000 	ldrsb.w	r3, [r3]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	eef0 8a40 	vmov.f32	s17, s0
 8014e3e:	d015      	beq.n	8014e6c <coshf+0x48>
 8014e40:	eeb4 8a48 	vcmp.f32	s16, s16
 8014e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e48:	d610      	bvs.n	8014e6c <coshf+0x48>
 8014e4a:	eeb0 0a48 	vmov.f32	s0, s16
 8014e4e:	f7ff fcf7 	bl	8014840 <fabsf>
 8014e52:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014e7c <coshf+0x58>
 8014e56:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e5e:	dd05      	ble.n	8014e6c <coshf+0x48>
 8014e60:	f7fa fc5c 	bl	800f71c <__errno>
 8014e64:	eddf 8a06 	vldr	s17, [pc, #24]	; 8014e80 <coshf+0x5c>
 8014e68:	2322      	movs	r3, #34	; 0x22
 8014e6a:	6003      	str	r3, [r0, #0]
 8014e6c:	eeb0 0a68 	vmov.f32	s0, s17
 8014e70:	ecbd 8b02 	vpop	{d8}
 8014e74:	bd08      	pop	{r3, pc}
 8014e76:	bf00      	nop
 8014e78:	20000944 	.word	0x20000944
 8014e7c:	42b2d4fc 	.word	0x42b2d4fc
 8014e80:	7f800000 	.word	0x7f800000

08014e84 <expf>:
 8014e84:	b508      	push	{r3, lr}
 8014e86:	ed2d 8b02 	vpush	{d8}
 8014e8a:	eef0 8a40 	vmov.f32	s17, s0
 8014e8e:	f000 fc3f 	bl	8015710 <__ieee754_expf>
 8014e92:	4b16      	ldr	r3, [pc, #88]	; (8014eec <expf+0x68>)
 8014e94:	f993 3000 	ldrsb.w	r3, [r3]
 8014e98:	3301      	adds	r3, #1
 8014e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8014e9e:	d011      	beq.n	8014ec4 <expf+0x40>
 8014ea0:	eeb0 0a68 	vmov.f32	s0, s17
 8014ea4:	f002 f85e 	bl	8016f64 <finitef>
 8014ea8:	b160      	cbz	r0, 8014ec4 <expf+0x40>
 8014eaa:	eddf 7a11 	vldr	s15, [pc, #68]	; 8014ef0 <expf+0x6c>
 8014eae:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eb6:	dd0a      	ble.n	8014ece <expf+0x4a>
 8014eb8:	f7fa fc30 	bl	800f71c <__errno>
 8014ebc:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8014ef4 <expf+0x70>
 8014ec0:	2322      	movs	r3, #34	; 0x22
 8014ec2:	6003      	str	r3, [r0, #0]
 8014ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8014ec8:	ecbd 8b02 	vpop	{d8}
 8014ecc:	bd08      	pop	{r3, pc}
 8014ece:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014ef8 <expf+0x74>
 8014ed2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eda:	d5f3      	bpl.n	8014ec4 <expf+0x40>
 8014edc:	f7fa fc1e 	bl	800f71c <__errno>
 8014ee0:	2322      	movs	r3, #34	; 0x22
 8014ee2:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8014efc <expf+0x78>
 8014ee6:	6003      	str	r3, [r0, #0]
 8014ee8:	e7ec      	b.n	8014ec4 <expf+0x40>
 8014eea:	bf00      	nop
 8014eec:	20000944 	.word	0x20000944
 8014ef0:	42b17180 	.word	0x42b17180
 8014ef4:	7f800000 	.word	0x7f800000
 8014ef8:	c2cff1b5 	.word	0xc2cff1b5
 8014efc:	00000000 	.word	0x00000000

08014f00 <fmodf>:
 8014f00:	b508      	push	{r3, lr}
 8014f02:	ed2d 8b02 	vpush	{d8}
 8014f06:	eef0 8a40 	vmov.f32	s17, s0
 8014f0a:	eeb0 8a60 	vmov.f32	s16, s1
 8014f0e:	f000 fcd3 	bl	80158b8 <__ieee754_fmodf>
 8014f12:	4b0f      	ldr	r3, [pc, #60]	; (8014f50 <fmodf+0x50>)
 8014f14:	f993 3000 	ldrsb.w	r3, [r3]
 8014f18:	3301      	adds	r3, #1
 8014f1a:	d016      	beq.n	8014f4a <fmodf+0x4a>
 8014f1c:	eeb4 8a48 	vcmp.f32	s16, s16
 8014f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f24:	d611      	bvs.n	8014f4a <fmodf+0x4a>
 8014f26:	eef4 8a68 	vcmp.f32	s17, s17
 8014f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f2e:	d60c      	bvs.n	8014f4a <fmodf+0x4a>
 8014f30:	eddf 8a08 	vldr	s17, [pc, #32]	; 8014f54 <fmodf+0x54>
 8014f34:	eeb4 8a68 	vcmp.f32	s16, s17
 8014f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f3c:	d105      	bne.n	8014f4a <fmodf+0x4a>
 8014f3e:	f7fa fbed 	bl	800f71c <__errno>
 8014f42:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014f46:	2321      	movs	r3, #33	; 0x21
 8014f48:	6003      	str	r3, [r0, #0]
 8014f4a:	ecbd 8b02 	vpop	{d8}
 8014f4e:	bd08      	pop	{r3, pc}
 8014f50:	20000944 	.word	0x20000944
 8014f54:	00000000 	.word	0x00000000

08014f58 <logf>:
 8014f58:	b508      	push	{r3, lr}
 8014f5a:	ed2d 8b02 	vpush	{d8}
 8014f5e:	eeb0 8a40 	vmov.f32	s16, s0
 8014f62:	f000 fd2b 	bl	80159bc <__ieee754_logf>
 8014f66:	4b14      	ldr	r3, [pc, #80]	; (8014fb8 <logf+0x60>)
 8014f68:	f993 3000 	ldrsb.w	r3, [r3]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	d014      	beq.n	8014f9a <logf+0x42>
 8014f70:	eeb4 8a48 	vcmp.f32	s16, s16
 8014f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f78:	d60f      	bvs.n	8014f9a <logf+0x42>
 8014f7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f82:	dc0a      	bgt.n	8014f9a <logf+0x42>
 8014f84:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f8c:	d108      	bne.n	8014fa0 <logf+0x48>
 8014f8e:	f7fa fbc5 	bl	800f71c <__errno>
 8014f92:	2322      	movs	r3, #34	; 0x22
 8014f94:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014fbc <logf+0x64>
 8014f98:	6003      	str	r3, [r0, #0]
 8014f9a:	ecbd 8b02 	vpop	{d8}
 8014f9e:	bd08      	pop	{r3, pc}
 8014fa0:	f7fa fbbc 	bl	800f71c <__errno>
 8014fa4:	ecbd 8b02 	vpop	{d8}
 8014fa8:	2321      	movs	r3, #33	; 0x21
 8014faa:	6003      	str	r3, [r0, #0]
 8014fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014fb0:	4803      	ldr	r0, [pc, #12]	; (8014fc0 <logf+0x68>)
 8014fb2:	f7fb bb09 	b.w	80105c8 <nanf>
 8014fb6:	bf00      	nop
 8014fb8:	20000944 	.word	0x20000944
 8014fbc:	ff800000 	.word	0xff800000
 8014fc0:	08100720 	.word	0x08100720

08014fc4 <powf>:
 8014fc4:	b508      	push	{r3, lr}
 8014fc6:	ed2d 8b04 	vpush	{d8-d9}
 8014fca:	eeb0 9a40 	vmov.f32	s18, s0
 8014fce:	eef0 8a60 	vmov.f32	s17, s1
 8014fd2:	f000 fde3 	bl	8015b9c <__ieee754_powf>
 8014fd6:	4b43      	ldr	r3, [pc, #268]	; (80150e4 <powf+0x120>)
 8014fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	eeb0 8a40 	vmov.f32	s16, s0
 8014fe2:	d012      	beq.n	801500a <powf+0x46>
 8014fe4:	eef4 8a68 	vcmp.f32	s17, s17
 8014fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fec:	d60d      	bvs.n	801500a <powf+0x46>
 8014fee:	eeb4 9a49 	vcmp.f32	s18, s18
 8014ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff6:	d70d      	bvc.n	8015014 <powf+0x50>
 8014ff8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015000:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015004:	bf08      	it	eq
 8015006:	eeb0 8a67 	vmoveq.f32	s16, s15
 801500a:	eeb0 0a48 	vmov.f32	s0, s16
 801500e:	ecbd 8b04 	vpop	{d8-d9}
 8015012:	bd08      	pop	{r3, pc}
 8015014:	eddf 9a34 	vldr	s19, [pc, #208]	; 80150e8 <powf+0x124>
 8015018:	eeb4 9a69 	vcmp.f32	s18, s19
 801501c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015020:	d116      	bne.n	8015050 <powf+0x8c>
 8015022:	eef4 8a69 	vcmp.f32	s17, s19
 8015026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801502a:	d057      	beq.n	80150dc <powf+0x118>
 801502c:	eeb0 0a68 	vmov.f32	s0, s17
 8015030:	f001 ff98 	bl	8016f64 <finitef>
 8015034:	2800      	cmp	r0, #0
 8015036:	d0e8      	beq.n	801500a <powf+0x46>
 8015038:	eef4 8ae9 	vcmpe.f32	s17, s19
 801503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015040:	d5e3      	bpl.n	801500a <powf+0x46>
 8015042:	f7fa fb6b 	bl	800f71c <__errno>
 8015046:	2321      	movs	r3, #33	; 0x21
 8015048:	6003      	str	r3, [r0, #0]
 801504a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80150ec <powf+0x128>
 801504e:	e7dc      	b.n	801500a <powf+0x46>
 8015050:	f001 ff88 	bl	8016f64 <finitef>
 8015054:	bb50      	cbnz	r0, 80150ac <powf+0xe8>
 8015056:	eeb0 0a49 	vmov.f32	s0, s18
 801505a:	f001 ff83 	bl	8016f64 <finitef>
 801505e:	b328      	cbz	r0, 80150ac <powf+0xe8>
 8015060:	eeb0 0a68 	vmov.f32	s0, s17
 8015064:	f001 ff7e 	bl	8016f64 <finitef>
 8015068:	b300      	cbz	r0, 80150ac <powf+0xe8>
 801506a:	eeb4 8a48 	vcmp.f32	s16, s16
 801506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015072:	d706      	bvc.n	8015082 <powf+0xbe>
 8015074:	f7fa fb52 	bl	800f71c <__errno>
 8015078:	2321      	movs	r3, #33	; 0x21
 801507a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801507e:	6003      	str	r3, [r0, #0]
 8015080:	e7c3      	b.n	801500a <powf+0x46>
 8015082:	f7fa fb4b 	bl	800f71c <__errno>
 8015086:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801508a:	2322      	movs	r3, #34	; 0x22
 801508c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015090:	6003      	str	r3, [r0, #0]
 8015092:	d508      	bpl.n	80150a6 <powf+0xe2>
 8015094:	eeb0 0a68 	vmov.f32	s0, s17
 8015098:	f001 ff72 	bl	8016f80 <rintf>
 801509c:	eeb4 0a68 	vcmp.f32	s0, s17
 80150a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a4:	d1d1      	bne.n	801504a <powf+0x86>
 80150a6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80150f0 <powf+0x12c>
 80150aa:	e7ae      	b.n	801500a <powf+0x46>
 80150ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80150b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b4:	d1a9      	bne.n	801500a <powf+0x46>
 80150b6:	eeb0 0a49 	vmov.f32	s0, s18
 80150ba:	f001 ff53 	bl	8016f64 <finitef>
 80150be:	2800      	cmp	r0, #0
 80150c0:	d0a3      	beq.n	801500a <powf+0x46>
 80150c2:	eeb0 0a68 	vmov.f32	s0, s17
 80150c6:	f001 ff4d 	bl	8016f64 <finitef>
 80150ca:	2800      	cmp	r0, #0
 80150cc:	d09d      	beq.n	801500a <powf+0x46>
 80150ce:	f7fa fb25 	bl	800f71c <__errno>
 80150d2:	2322      	movs	r3, #34	; 0x22
 80150d4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80150e8 <powf+0x124>
 80150d8:	6003      	str	r3, [r0, #0]
 80150da:	e796      	b.n	801500a <powf+0x46>
 80150dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80150e0:	e793      	b.n	801500a <powf+0x46>
 80150e2:	bf00      	nop
 80150e4:	20000944 	.word	0x20000944
 80150e8:	00000000 	.word	0x00000000
 80150ec:	ff800000 	.word	0xff800000
 80150f0:	7f800000 	.word	0x7f800000

080150f4 <sinhf>:
 80150f4:	b508      	push	{r3, lr}
 80150f6:	ed2d 8b02 	vpush	{d8}
 80150fa:	eef0 8a40 	vmov.f32	s17, s0
 80150fe:	f001 f949 	bl	8016394 <__ieee754_sinhf>
 8015102:	4b11      	ldr	r3, [pc, #68]	; (8015148 <sinhf+0x54>)
 8015104:	f993 3000 	ldrsb.w	r3, [r3]
 8015108:	3301      	adds	r3, #1
 801510a:	eeb0 8a40 	vmov.f32	s16, s0
 801510e:	d016      	beq.n	801513e <sinhf+0x4a>
 8015110:	f001 ff28 	bl	8016f64 <finitef>
 8015114:	b998      	cbnz	r0, 801513e <sinhf+0x4a>
 8015116:	eeb0 0a68 	vmov.f32	s0, s17
 801511a:	f001 ff23 	bl	8016f64 <finitef>
 801511e:	b170      	cbz	r0, 801513e <sinhf+0x4a>
 8015120:	f7fa fafc 	bl	800f71c <__errno>
 8015124:	ed9f 8a09 	vldr	s16, [pc, #36]	; 801514c <sinhf+0x58>
 8015128:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8015150 <sinhf+0x5c>
 801512c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015130:	2322      	movs	r3, #34	; 0x22
 8015132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015136:	6003      	str	r3, [r0, #0]
 8015138:	bfd8      	it	le
 801513a:	eeb0 8a40 	vmovle.f32	s16, s0
 801513e:	eeb0 0a48 	vmov.f32	s0, s16
 8015142:	ecbd 8b02 	vpop	{d8}
 8015146:	bd08      	pop	{r3, pc}
 8015148:	20000944 	.word	0x20000944
 801514c:	7f800000 	.word	0x7f800000
 8015150:	ff800000 	.word	0xff800000

08015154 <__ieee754_acosf>:
 8015154:	b508      	push	{r3, lr}
 8015156:	ee10 3a10 	vmov	r3, s0
 801515a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801515e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015162:	ed2d 8b0c 	vpush	{d8-d13}
 8015166:	d10a      	bne.n	801517e <__ieee754_acosf+0x2a>
 8015168:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8015304 <__ieee754_acosf+0x1b0>
 801516c:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8015308 <__ieee754_acosf+0x1b4>
 8015170:	2b00      	cmp	r3, #0
 8015172:	bfd8      	it	le
 8015174:	eeb0 0a48 	vmovle.f32	s0, s16
 8015178:	ecbd 8b0c 	vpop	{d8-d13}
 801517c:	bd08      	pop	{r3, pc}
 801517e:	dd04      	ble.n	801518a <__ieee754_acosf+0x36>
 8015180:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015184:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015188:	e7f6      	b.n	8015178 <__ieee754_acosf+0x24>
 801518a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801518e:	da3e      	bge.n	801520e <__ieee754_acosf+0xba>
 8015190:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8015194:	f340 80b3 	ble.w	80152fe <__ieee754_acosf+0x1aa>
 8015198:	ee60 7a00 	vmul.f32	s15, s0, s0
 801519c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 801530c <__ieee754_acosf+0x1b8>
 80151a0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015310 <__ieee754_acosf+0x1bc>
 80151a4:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8015314 <__ieee754_acosf+0x1c0>
 80151a8:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8015318 <__ieee754_acosf+0x1c4>
 80151ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80151b0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801531c <__ieee754_acosf+0x1c8>
 80151b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80151b8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015320 <__ieee754_acosf+0x1cc>
 80151bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80151c0:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015324 <__ieee754_acosf+0x1d0>
 80151c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80151c8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8015328 <__ieee754_acosf+0x1d4>
 80151cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80151d0:	eddf 6a56 	vldr	s13, [pc, #344]	; 801532c <__ieee754_acosf+0x1d8>
 80151d4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80151d8:	eddf 6a55 	vldr	s13, [pc, #340]	; 8015330 <__ieee754_acosf+0x1dc>
 80151dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80151e0:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8015334 <__ieee754_acosf+0x1e0>
 80151e4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80151e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80151ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 80151f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80151f4:	eef0 7a66 	vmov.f32	s15, s13
 80151f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80151fc:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015338 <__ieee754_acosf+0x1e4>
 8015200:	eea0 8a66 	vfms.f32	s16, s0, s13
 8015204:	ee30 0a48 	vsub.f32	s0, s0, s16
 8015208:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801520c:	e7b4      	b.n	8015178 <__ieee754_acosf+0x24>
 801520e:	2b00      	cmp	r3, #0
 8015210:	eddf da3e 	vldr	s27, [pc, #248]	; 801530c <__ieee754_acosf+0x1b8>
 8015214:	eddf ca3e 	vldr	s25, [pc, #248]	; 8015310 <__ieee754_acosf+0x1bc>
 8015218:	ed9f ca40 	vldr	s24, [pc, #256]	; 801531c <__ieee754_acosf+0x1c8>
 801521c:	eddf ba40 	vldr	s23, [pc, #256]	; 8015320 <__ieee754_acosf+0x1cc>
 8015220:	ed9f ba40 	vldr	s22, [pc, #256]	; 8015324 <__ieee754_acosf+0x1d0>
 8015224:	eddf 8a40 	vldr	s17, [pc, #256]	; 8015328 <__ieee754_acosf+0x1d4>
 8015228:	ed9f da40 	vldr	s26, [pc, #256]	; 801532c <__ieee754_acosf+0x1d8>
 801522c:	eddf aa39 	vldr	s21, [pc, #228]	; 8015314 <__ieee754_acosf+0x1c0>
 8015230:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8015330 <__ieee754_acosf+0x1dc>
 8015234:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8015334 <__ieee754_acosf+0x1e0>
 8015238:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801523c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015240:	da28      	bge.n	8015294 <__ieee754_acosf+0x140>
 8015242:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015246:	ee20 0a27 	vmul.f32	s0, s0, s15
 801524a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801524e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8015252:	eeac ca80 	vfma.f32	s24, s25, s0
 8015256:	eeaa aa80 	vfma.f32	s20, s21, s0
 801525a:	eeec ba00 	vfma.f32	s23, s24, s0
 801525e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8015262:	eeab ba80 	vfma.f32	s22, s23, s0
 8015266:	eea9 9a80 	vfma.f32	s18, s19, s0
 801526a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801526e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015272:	f001 f8fd 	bl	8016470 <__ieee754_sqrtf>
 8015276:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801527a:	eddf 7a30 	vldr	s15, [pc, #192]	; 801533c <__ieee754_acosf+0x1e8>
 801527e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015282:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015286:	ee77 7a80 	vadd.f32	s15, s15, s0
 801528a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8015340 <__ieee754_acosf+0x1ec>
 801528e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015292:	e771      	b.n	8015178 <__ieee754_acosf+0x24>
 8015294:	ee39 8a40 	vsub.f32	s16, s18, s0
 8015298:	ee28 8a27 	vmul.f32	s16, s16, s15
 801529c:	eeb0 0a48 	vmov.f32	s0, s16
 80152a0:	f001 f8e6 	bl	8016470 <__ieee754_sqrtf>
 80152a4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80152a8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80152ac:	eeac ca88 	vfma.f32	s24, s25, s16
 80152b0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80152b4:	eeec ba08 	vfma.f32	s23, s24, s16
 80152b8:	ee10 3a10 	vmov	r3, s0
 80152bc:	eeab ba88 	vfma.f32	s22, s23, s16
 80152c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80152c4:	f023 030f 	bic.w	r3, r3, #15
 80152c8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80152cc:	ee07 3a90 	vmov	s15, r3
 80152d0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80152d4:	eeb0 6a48 	vmov.f32	s12, s16
 80152d8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80152dc:	eea9 9a88 	vfma.f32	s18, s19, s16
 80152e0:	ee70 6a27 	vadd.f32	s13, s0, s15
 80152e4:	ee68 8a88 	vmul.f32	s17, s17, s16
 80152e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80152ec:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80152f0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80152f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80152f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80152fc:	e73c      	b.n	8015178 <__ieee754_acosf+0x24>
 80152fe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8015344 <__ieee754_acosf+0x1f0>
 8015302:	e739      	b.n	8015178 <__ieee754_acosf+0x24>
 8015304:	00000000 	.word	0x00000000
 8015308:	40490fdb 	.word	0x40490fdb
 801530c:	3811ef08 	.word	0x3811ef08
 8015310:	3a4f7f04 	.word	0x3a4f7f04
 8015314:	bf303361 	.word	0xbf303361
 8015318:	33a22168 	.word	0x33a22168
 801531c:	bd241146 	.word	0xbd241146
 8015320:	3e4e0aa8 	.word	0x3e4e0aa8
 8015324:	bea6b090 	.word	0xbea6b090
 8015328:	3e2aaaab 	.word	0x3e2aaaab
 801532c:	3d9dc62e 	.word	0x3d9dc62e
 8015330:	4001572d 	.word	0x4001572d
 8015334:	c019d139 	.word	0xc019d139
 8015338:	3fc90fda 	.word	0x3fc90fda
 801533c:	b3a22168 	.word	0xb3a22168
 8015340:	40490fda 	.word	0x40490fda
 8015344:	3fc90fdb 	.word	0x3fc90fdb

08015348 <__ieee754_acoshf>:
 8015348:	b508      	push	{r3, lr}
 801534a:	ee10 3a10 	vmov	r3, s0
 801534e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015352:	ed2d 8b04 	vpush	{d8-d9}
 8015356:	eeb0 8a40 	vmov.f32	s16, s0
 801535a:	da06      	bge.n	801536a <__ieee754_acoshf+0x22>
 801535c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015360:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015364:	ecbd 8b04 	vpop	{d8-d9}
 8015368:	bd08      	pop	{r3, pc}
 801536a:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 801536e:	db0c      	blt.n	801538a <__ieee754_acoshf+0x42>
 8015370:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015374:	db02      	blt.n	801537c <__ieee754_acoshf+0x34>
 8015376:	ee30 0a00 	vadd.f32	s0, s0, s0
 801537a:	e7f3      	b.n	8015364 <__ieee754_acoshf+0x1c>
 801537c:	f000 fb1e 	bl	80159bc <__ieee754_logf>
 8015380:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80153e8 <__ieee754_acoshf+0xa0>
 8015384:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015388:	e7ec      	b.n	8015364 <__ieee754_acoshf+0x1c>
 801538a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801538e:	d028      	beq.n	80153e2 <__ieee754_acoshf+0x9a>
 8015390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015394:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015398:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 801539c:	dd11      	ble.n	80153c2 <__ieee754_acoshf+0x7a>
 801539e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80153a2:	eea8 0a08 	vfma.f32	s0, s16, s16
 80153a6:	f001 f863 	bl	8016470 <__ieee754_sqrtf>
 80153aa:	ee70 7a08 	vadd.f32	s15, s0, s16
 80153ae:	ee89 0a27 	vdiv.f32	s0, s18, s15
 80153b2:	ee98 0a28 	vfnms.f32	s0, s16, s17
 80153b6:	ecbd 8b04 	vpop	{d8-d9}
 80153ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80153be:	f000 bafd 	b.w	80159bc <__ieee754_logf>
 80153c2:	ee30 8a49 	vsub.f32	s16, s0, s18
 80153c6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80153ca:	eea8 0a28 	vfma.f32	s0, s16, s17
 80153ce:	f001 f84f 	bl	8016470 <__ieee754_sqrtf>
 80153d2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80153d6:	ecbd 8b04 	vpop	{d8-d9}
 80153da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80153de:	f7ff ba79 	b.w	80148d4 <log1pf>
 80153e2:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80153ec <__ieee754_acoshf+0xa4>
 80153e6:	e7bd      	b.n	8015364 <__ieee754_acoshf+0x1c>
 80153e8:	3f317218 	.word	0x3f317218
 80153ec:	00000000 	.word	0x00000000

080153f0 <__ieee754_asinf>:
 80153f0:	b538      	push	{r3, r4, r5, lr}
 80153f2:	ee10 5a10 	vmov	r5, s0
 80153f6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80153fa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80153fe:	ed2d 8b04 	vpush	{d8-d9}
 8015402:	d10c      	bne.n	801541e <__ieee754_asinf+0x2e>
 8015404:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801557c <__ieee754_asinf+0x18c>
 8015408:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8015580 <__ieee754_asinf+0x190>
 801540c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015410:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015414:	eeb0 0a67 	vmov.f32	s0, s15
 8015418:	ecbd 8b04 	vpop	{d8-d9}
 801541c:	bd38      	pop	{r3, r4, r5, pc}
 801541e:	dd04      	ble.n	801542a <__ieee754_asinf+0x3a>
 8015420:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015424:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015428:	e7f6      	b.n	8015418 <__ieee754_asinf+0x28>
 801542a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801542e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015432:	da0b      	bge.n	801544c <__ieee754_asinf+0x5c>
 8015434:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8015438:	da52      	bge.n	80154e0 <__ieee754_asinf+0xf0>
 801543a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8015584 <__ieee754_asinf+0x194>
 801543e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015442:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544a:	dce5      	bgt.n	8015418 <__ieee754_asinf+0x28>
 801544c:	f7ff f9f8 	bl	8014840 <fabsf>
 8015450:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8015454:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015458:	ee20 8a08 	vmul.f32	s16, s0, s16
 801545c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015588 <__ieee754_asinf+0x198>
 8015460:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801558c <__ieee754_asinf+0x19c>
 8015464:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8015590 <__ieee754_asinf+0x1a0>
 8015468:	eea8 7a27 	vfma.f32	s14, s16, s15
 801546c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8015594 <__ieee754_asinf+0x1a4>
 8015470:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015474:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015598 <__ieee754_asinf+0x1a8>
 8015478:	eea7 7a88 	vfma.f32	s14, s15, s16
 801547c:	eddf 7a47 	vldr	s15, [pc, #284]	; 801559c <__ieee754_asinf+0x1ac>
 8015480:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015484:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80155a0 <__ieee754_asinf+0x1b0>
 8015488:	eea7 9a88 	vfma.f32	s18, s15, s16
 801548c:	eddf 7a45 	vldr	s15, [pc, #276]	; 80155a4 <__ieee754_asinf+0x1b4>
 8015490:	eee8 7a07 	vfma.f32	s15, s16, s14
 8015494:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80155a8 <__ieee754_asinf+0x1b8>
 8015498:	eea7 7a88 	vfma.f32	s14, s15, s16
 801549c:	eddf 7a43 	vldr	s15, [pc, #268]	; 80155ac <__ieee754_asinf+0x1bc>
 80154a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80154a4:	eeb0 0a48 	vmov.f32	s0, s16
 80154a8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80154ac:	f000 ffe0 	bl	8016470 <__ieee754_sqrtf>
 80154b0:	4b3f      	ldr	r3, [pc, #252]	; (80155b0 <__ieee754_asinf+0x1c0>)
 80154b2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80154b6:	429c      	cmp	r4, r3
 80154b8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80154bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80154c0:	dd3d      	ble.n	801553e <__ieee754_asinf+0x14e>
 80154c2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80154c6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80155b4 <__ieee754_asinf+0x1c4>
 80154ca:	eee0 7a26 	vfma.f32	s15, s0, s13
 80154ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015580 <__ieee754_asinf+0x190>
 80154d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80154d6:	2d00      	cmp	r5, #0
 80154d8:	bfd8      	it	le
 80154da:	eeb1 0a40 	vnegle.f32	s0, s0
 80154de:	e79b      	b.n	8015418 <__ieee754_asinf+0x28>
 80154e0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80154e4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8015588 <__ieee754_asinf+0x198>
 80154e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801558c <__ieee754_asinf+0x19c>
 80154ec:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80155a0 <__ieee754_asinf+0x1b0>
 80154f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80154f4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8015594 <__ieee754_asinf+0x1a4>
 80154f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80154fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8015598 <__ieee754_asinf+0x1a8>
 8015500:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015504:	eddf 6a25 	vldr	s13, [pc, #148]	; 801559c <__ieee754_asinf+0x1ac>
 8015508:	eee7 6a27 	vfma.f32	s13, s14, s15
 801550c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015590 <__ieee754_asinf+0x1a0>
 8015510:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015514:	eddf 6a23 	vldr	s13, [pc, #140]	; 80155a4 <__ieee754_asinf+0x1b4>
 8015518:	eee7 6a86 	vfma.f32	s13, s15, s12
 801551c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80155a8 <__ieee754_asinf+0x1b8>
 8015520:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015524:	eddf 6a21 	vldr	s13, [pc, #132]	; 80155ac <__ieee754_asinf+0x1bc>
 8015528:	eee6 6a27 	vfma.f32	s13, s12, s15
 801552c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015530:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8015534:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015538:	eea0 0a27 	vfma.f32	s0, s0, s15
 801553c:	e76c      	b.n	8015418 <__ieee754_asinf+0x28>
 801553e:	ee10 3a10 	vmov	r3, s0
 8015542:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015546:	f023 030f 	bic.w	r3, r3, #15
 801554a:	ee07 3a10 	vmov	s14, r3
 801554e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8015552:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015556:	ee30 0a00 	vadd.f32	s0, s0, s0
 801555a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801555e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801557c <__ieee754_asinf+0x18c>
 8015562:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8015566:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801556a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80155b8 <__ieee754_asinf+0x1c8>
 801556e:	eeb0 6a40 	vmov.f32	s12, s0
 8015572:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015576:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801557a:	e7aa      	b.n	80154d2 <__ieee754_asinf+0xe2>
 801557c:	b33bbd2e 	.word	0xb33bbd2e
 8015580:	3fc90fdb 	.word	0x3fc90fdb
 8015584:	7149f2ca 	.word	0x7149f2ca
 8015588:	3811ef08 	.word	0x3811ef08
 801558c:	3a4f7f04 	.word	0x3a4f7f04
 8015590:	3e2aaaab 	.word	0x3e2aaaab
 8015594:	bd241146 	.word	0xbd241146
 8015598:	3e4e0aa8 	.word	0x3e4e0aa8
 801559c:	bea6b090 	.word	0xbea6b090
 80155a0:	3d9dc62e 	.word	0x3d9dc62e
 80155a4:	bf303361 	.word	0xbf303361
 80155a8:	4001572d 	.word	0x4001572d
 80155ac:	c019d139 	.word	0xc019d139
 80155b0:	3f799999 	.word	0x3f799999
 80155b4:	333bbd2e 	.word	0x333bbd2e
 80155b8:	3f490fdb 	.word	0x3f490fdb

080155bc <__ieee754_atanhf>:
 80155bc:	b510      	push	{r4, lr}
 80155be:	ee10 4a10 	vmov	r4, s0
 80155c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80155c6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80155ca:	ed2d 8b02 	vpush	{d8}
 80155ce:	dd06      	ble.n	80155de <__ieee754_atanhf+0x22>
 80155d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80155d4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80155d8:	ecbd 8b02 	vpop	{d8}
 80155dc:	bd10      	pop	{r4, pc}
 80155de:	d104      	bne.n	80155ea <__ieee754_atanhf+0x2e>
 80155e0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8015640 <__ieee754_atanhf+0x84>
 80155e4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80155e8:	e7f6      	b.n	80155d8 <__ieee754_atanhf+0x1c>
 80155ea:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 80155ee:	da08      	bge.n	8015602 <__ieee754_atanhf+0x46>
 80155f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015644 <__ieee754_atanhf+0x88>
 80155f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80155f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80155fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015600:	dcea      	bgt.n	80155d8 <__ieee754_atanhf+0x1c>
 8015602:	ee07 3a90 	vmov	s15, r3
 8015606:	ee37 0aa7 	vadd.f32	s0, s15, s15
 801560a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801560e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015616:	bfb6      	itet	lt
 8015618:	ee67 7a80 	vmullt.f32	s15, s15, s0
 801561c:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8015620:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8015624:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015628:	bfb8      	it	lt
 801562a:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 801562e:	f7ff f951 	bl	80148d4 <log1pf>
 8015632:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015636:	2c00      	cmp	r4, #0
 8015638:	bfb8      	it	lt
 801563a:	eeb1 0a40 	vneglt.f32	s0, s0
 801563e:	e7cb      	b.n	80155d8 <__ieee754_atanhf+0x1c>
 8015640:	00000000 	.word	0x00000000
 8015644:	7149f2ca 	.word	0x7149f2ca

08015648 <__ieee754_coshf>:
 8015648:	b510      	push	{r4, lr}
 801564a:	ee10 4a10 	vmov	r4, s0
 801564e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8015652:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015656:	ed2d 8b02 	vpush	{d8}
 801565a:	db04      	blt.n	8015666 <__ieee754_coshf+0x1e>
 801565c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015660:	ecbd 8b02 	vpop	{d8}
 8015664:	bd10      	pop	{r4, pc}
 8015666:	4b25      	ldr	r3, [pc, #148]	; (80156fc <__ieee754_coshf+0xb4>)
 8015668:	429c      	cmp	r4, r3
 801566a:	dc15      	bgt.n	8015698 <__ieee754_coshf+0x50>
 801566c:	f7ff f8e8 	bl	8014840 <fabsf>
 8015670:	f001 fb58 	bl	8016d24 <expm1f>
 8015674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015678:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 801567c:	eef0 7a40 	vmov.f32	s15, s0
 8015680:	ee30 0a26 	vadd.f32	s0, s0, s13
 8015684:	dbec      	blt.n	8015660 <__ieee754_coshf+0x18>
 8015686:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801568a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801568e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015692:	ee30 0a26 	vadd.f32	s0, s0, s13
 8015696:	e7e3      	b.n	8015660 <__ieee754_coshf+0x18>
 8015698:	4b19      	ldr	r3, [pc, #100]	; (8015700 <__ieee754_coshf+0xb8>)
 801569a:	429c      	cmp	r4, r3
 801569c:	dc0c      	bgt.n	80156b8 <__ieee754_coshf+0x70>
 801569e:	f7ff f8cf 	bl	8014840 <fabsf>
 80156a2:	f000 f835 	bl	8015710 <__ieee754_expf>
 80156a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80156aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80156ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80156b2:	eeb0 0a67 	vmov.f32	s0, s15
 80156b6:	e7d3      	b.n	8015660 <__ieee754_coshf+0x18>
 80156b8:	4b12      	ldr	r3, [pc, #72]	; (8015704 <__ieee754_coshf+0xbc>)
 80156ba:	429c      	cmp	r4, r3
 80156bc:	dc08      	bgt.n	80156d0 <__ieee754_coshf+0x88>
 80156be:	f7ff f8bf 	bl	8014840 <fabsf>
 80156c2:	f000 f825 	bl	8015710 <__ieee754_expf>
 80156c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80156ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 80156ce:	e7c7      	b.n	8015660 <__ieee754_coshf+0x18>
 80156d0:	4b0d      	ldr	r3, [pc, #52]	; (8015708 <__ieee754_coshf+0xc0>)
 80156d2:	429c      	cmp	r4, r3
 80156d4:	dc0c      	bgt.n	80156f0 <__ieee754_coshf+0xa8>
 80156d6:	f7ff f8b3 	bl	8014840 <fabsf>
 80156da:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80156de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80156e2:	f000 f815 	bl	8015710 <__ieee754_expf>
 80156e6:	ee20 8a08 	vmul.f32	s16, s0, s16
 80156ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 80156ee:	e7b7      	b.n	8015660 <__ieee754_coshf+0x18>
 80156f0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801570c <__ieee754_coshf+0xc4>
 80156f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80156f8:	e7b2      	b.n	8015660 <__ieee754_coshf+0x18>
 80156fa:	bf00      	nop
 80156fc:	3eb17217 	.word	0x3eb17217
 8015700:	41afffff 	.word	0x41afffff
 8015704:	42b17217 	.word	0x42b17217
 8015708:	42b2d4fc 	.word	0x42b2d4fc
 801570c:	7149f2ca 	.word	0x7149f2ca

08015710 <__ieee754_expf>:
 8015710:	ee10 2a10 	vmov	r2, s0
 8015714:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015718:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801571c:	d902      	bls.n	8015724 <__ieee754_expf+0x14>
 801571e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015722:	4770      	bx	lr
 8015724:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8015728:	d106      	bne.n	8015738 <__ieee754_expf+0x28>
 801572a:	eddf 7a51 	vldr	s15, [pc, #324]	; 8015870 <__ieee754_expf+0x160>
 801572e:	2b00      	cmp	r3, #0
 8015730:	bf18      	it	ne
 8015732:	eeb0 0a67 	vmovne.f32	s0, s15
 8015736:	4770      	bx	lr
 8015738:	484e      	ldr	r0, [pc, #312]	; (8015874 <__ieee754_expf+0x164>)
 801573a:	4282      	cmp	r2, r0
 801573c:	dd04      	ble.n	8015748 <__ieee754_expf+0x38>
 801573e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015878 <__ieee754_expf+0x168>
 8015742:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015746:	4770      	bx	lr
 8015748:	2a00      	cmp	r2, #0
 801574a:	da03      	bge.n	8015754 <__ieee754_expf+0x44>
 801574c:	4a4b      	ldr	r2, [pc, #300]	; (801587c <__ieee754_expf+0x16c>)
 801574e:	4291      	cmp	r1, r2
 8015750:	f200 808a 	bhi.w	8015868 <__ieee754_expf+0x158>
 8015754:	4a4a      	ldr	r2, [pc, #296]	; (8015880 <__ieee754_expf+0x170>)
 8015756:	4291      	cmp	r1, r2
 8015758:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801575c:	d954      	bls.n	8015808 <__ieee754_expf+0xf8>
 801575e:	4a49      	ldr	r2, [pc, #292]	; (8015884 <__ieee754_expf+0x174>)
 8015760:	4291      	cmp	r1, r2
 8015762:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8015766:	d836      	bhi.n	80157d6 <__ieee754_expf+0xc6>
 8015768:	4947      	ldr	r1, [pc, #284]	; (8015888 <__ieee754_expf+0x178>)
 801576a:	4411      	add	r1, r2
 801576c:	ed91 7a00 	vldr	s14, [r1]
 8015770:	4946      	ldr	r1, [pc, #280]	; (801588c <__ieee754_expf+0x17c>)
 8015772:	440a      	add	r2, r1
 8015774:	edd2 7a00 	vldr	s15, [r2]
 8015778:	ee30 7a47 	vsub.f32	s14, s0, s14
 801577c:	f1c3 0201 	rsb	r2, r3, #1
 8015780:	1ad2      	subs	r2, r2, r3
 8015782:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015786:	ee60 6a00 	vmul.f32	s13, s0, s0
 801578a:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015890 <__ieee754_expf+0x180>
 801578e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015894 <__ieee754_expf+0x184>
 8015792:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015796:	eddf 5a40 	vldr	s11, [pc, #256]	; 8015898 <__ieee754_expf+0x188>
 801579a:	eee5 5a26 	vfma.f32	s11, s10, s13
 801579e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 801589c <__ieee754_expf+0x18c>
 80157a2:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80157a6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80158a0 <__ieee754_expf+0x190>
 80157aa:	eee5 5a26 	vfma.f32	s11, s10, s13
 80157ae:	eeb0 5a40 	vmov.f32	s10, s0
 80157b2:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80157b6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80157ba:	eef0 6a45 	vmov.f32	s13, s10
 80157be:	ee20 5a05 	vmul.f32	s10, s0, s10
 80157c2:	bb92      	cbnz	r2, 801582a <__ieee754_expf+0x11a>
 80157c4:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80157c8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80157cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80157d0:	ee36 0a40 	vsub.f32	s0, s12, s0
 80157d4:	4770      	bx	lr
 80157d6:	4b33      	ldr	r3, [pc, #204]	; (80158a4 <__ieee754_expf+0x194>)
 80157d8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80158a8 <__ieee754_expf+0x198>
 80157dc:	4413      	add	r3, r2
 80157de:	edd3 7a00 	vldr	s15, [r3]
 80157e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80157e6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80158ac <__ieee754_expf+0x19c>
 80157ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157ee:	ee17 2a90 	vmov	r2, s15
 80157f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157f6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80157fa:	eeb0 7a40 	vmov.f32	s14, s0
 80157fe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80158b0 <__ieee754_expf+0x1a0>
 8015802:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015806:	e7bc      	b.n	8015782 <__ieee754_expf+0x72>
 8015808:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 801580c:	d20b      	bcs.n	8015826 <__ieee754_expf+0x116>
 801580e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8015878 <__ieee754_expf+0x168>
 8015812:	ee70 6a26 	vadd.f32	s13, s0, s13
 8015816:	eef4 6ac6 	vcmpe.f32	s13, s12
 801581a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801581e:	dd02      	ble.n	8015826 <__ieee754_expf+0x116>
 8015820:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015824:	4770      	bx	lr
 8015826:	2200      	movs	r2, #0
 8015828:	e7ad      	b.n	8015786 <__ieee754_expf+0x76>
 801582a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801582e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8015832:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8015836:	bfb8      	it	lt
 8015838:	3264      	addlt	r2, #100	; 0x64
 801583a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801583e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015842:	ee76 7a40 	vsub.f32	s15, s12, s0
 8015846:	ee17 3a90 	vmov	r3, s15
 801584a:	bfab      	itete	ge
 801584c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015850:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015854:	ee00 3a10 	vmovge	s0, r3
 8015858:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80158b4 <__ieee754_expf+0x1a4>
 801585c:	bfbc      	itt	lt
 801585e:	ee00 3a10 	vmovlt	s0, r3
 8015862:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8015866:	4770      	bx	lr
 8015868:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015870 <__ieee754_expf+0x160>
 801586c:	4770      	bx	lr
 801586e:	bf00      	nop
 8015870:	00000000 	.word	0x00000000
 8015874:	42b17217 	.word	0x42b17217
 8015878:	7149f2ca 	.word	0x7149f2ca
 801587c:	42cff1b5 	.word	0x42cff1b5
 8015880:	3eb17218 	.word	0x3eb17218
 8015884:	3f851591 	.word	0x3f851591
 8015888:	0810074c 	.word	0x0810074c
 801588c:	08100754 	.word	0x08100754
 8015890:	3331bb4c 	.word	0x3331bb4c
 8015894:	b5ddea0e 	.word	0xb5ddea0e
 8015898:	388ab355 	.word	0x388ab355
 801589c:	bb360b61 	.word	0xbb360b61
 80158a0:	3e2aaaab 	.word	0x3e2aaaab
 80158a4:	08100744 	.word	0x08100744
 80158a8:	3fb8aa3b 	.word	0x3fb8aa3b
 80158ac:	3f317180 	.word	0x3f317180
 80158b0:	3717f7d1 	.word	0x3717f7d1
 80158b4:	0d800000 	.word	0x0d800000

080158b8 <__ieee754_fmodf>:
 80158b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158ba:	ee10 6a90 	vmov	r6, s1
 80158be:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80158c2:	d009      	beq.n	80158d8 <__ieee754_fmodf+0x20>
 80158c4:	ee10 2a10 	vmov	r2, s0
 80158c8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80158cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80158d0:	da02      	bge.n	80158d8 <__ieee754_fmodf+0x20>
 80158d2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80158d6:	dd04      	ble.n	80158e2 <__ieee754_fmodf+0x2a>
 80158d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80158dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80158e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158e2:	42ab      	cmp	r3, r5
 80158e4:	dbfc      	blt.n	80158e0 <__ieee754_fmodf+0x28>
 80158e6:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 80158ea:	d106      	bne.n	80158fa <__ieee754_fmodf+0x42>
 80158ec:	4a32      	ldr	r2, [pc, #200]	; (80159b8 <__ieee754_fmodf+0x100>)
 80158ee:	0fe3      	lsrs	r3, r4, #31
 80158f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80158f4:	ed93 0a00 	vldr	s0, [r3]
 80158f8:	e7f2      	b.n	80158e0 <__ieee754_fmodf+0x28>
 80158fa:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80158fe:	d13f      	bne.n	8015980 <__ieee754_fmodf+0xc8>
 8015900:	0219      	lsls	r1, r3, #8
 8015902:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8015906:	2900      	cmp	r1, #0
 8015908:	dc37      	bgt.n	801597a <__ieee754_fmodf+0xc2>
 801590a:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801590e:	d13d      	bne.n	801598c <__ieee754_fmodf+0xd4>
 8015910:	022f      	lsls	r7, r5, #8
 8015912:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8015916:	2f00      	cmp	r7, #0
 8015918:	da35      	bge.n	8015986 <__ieee754_fmodf+0xce>
 801591a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801591e:	bfbb      	ittet	lt
 8015920:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8015924:	1a12      	sublt	r2, r2, r0
 8015926:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801592a:	4093      	lsllt	r3, r2
 801592c:	bfa8      	it	ge
 801592e:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8015932:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8015936:	bfb5      	itete	lt
 8015938:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801593c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8015940:	1a52      	sublt	r2, r2, r1
 8015942:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8015946:	bfb8      	it	lt
 8015948:	4095      	lsllt	r5, r2
 801594a:	1a40      	subs	r0, r0, r1
 801594c:	1b5a      	subs	r2, r3, r5
 801594e:	bb00      	cbnz	r0, 8015992 <__ieee754_fmodf+0xda>
 8015950:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8015954:	bf38      	it	cc
 8015956:	4613      	movcc	r3, r2
 8015958:	2b00      	cmp	r3, #0
 801595a:	d0c7      	beq.n	80158ec <__ieee754_fmodf+0x34>
 801595c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015960:	db1f      	blt.n	80159a2 <__ieee754_fmodf+0xea>
 8015962:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8015966:	db1f      	blt.n	80159a8 <__ieee754_fmodf+0xf0>
 8015968:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801596c:	317f      	adds	r1, #127	; 0x7f
 801596e:	4323      	orrs	r3, r4
 8015970:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8015974:	ee00 3a10 	vmov	s0, r3
 8015978:	e7b2      	b.n	80158e0 <__ieee754_fmodf+0x28>
 801597a:	3801      	subs	r0, #1
 801597c:	0049      	lsls	r1, r1, #1
 801597e:	e7c2      	b.n	8015906 <__ieee754_fmodf+0x4e>
 8015980:	15d8      	asrs	r0, r3, #23
 8015982:	387f      	subs	r0, #127	; 0x7f
 8015984:	e7c1      	b.n	801590a <__ieee754_fmodf+0x52>
 8015986:	3901      	subs	r1, #1
 8015988:	007f      	lsls	r7, r7, #1
 801598a:	e7c4      	b.n	8015916 <__ieee754_fmodf+0x5e>
 801598c:	15e9      	asrs	r1, r5, #23
 801598e:	397f      	subs	r1, #127	; 0x7f
 8015990:	e7c3      	b.n	801591a <__ieee754_fmodf+0x62>
 8015992:	2a00      	cmp	r2, #0
 8015994:	da02      	bge.n	801599c <__ieee754_fmodf+0xe4>
 8015996:	005b      	lsls	r3, r3, #1
 8015998:	3801      	subs	r0, #1
 801599a:	e7d7      	b.n	801594c <__ieee754_fmodf+0x94>
 801599c:	d0a6      	beq.n	80158ec <__ieee754_fmodf+0x34>
 801599e:	0053      	lsls	r3, r2, #1
 80159a0:	e7fa      	b.n	8015998 <__ieee754_fmodf+0xe0>
 80159a2:	005b      	lsls	r3, r3, #1
 80159a4:	3901      	subs	r1, #1
 80159a6:	e7d9      	b.n	801595c <__ieee754_fmodf+0xa4>
 80159a8:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80159ac:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80159b0:	3182      	adds	r1, #130	; 0x82
 80159b2:	410b      	asrs	r3, r1
 80159b4:	4323      	orrs	r3, r4
 80159b6:	e7dd      	b.n	8015974 <__ieee754_fmodf+0xbc>
 80159b8:	0810075c 	.word	0x0810075c

080159bc <__ieee754_logf>:
 80159bc:	ee10 3a10 	vmov	r3, s0
 80159c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80159c4:	d106      	bne.n	80159d4 <__ieee754_logf+0x18>
 80159c6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8015b5c <__ieee754_logf+0x1a0>
 80159ca:	eddf 7a65 	vldr	s15, [pc, #404]	; 8015b60 <__ieee754_logf+0x1a4>
 80159ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80159d2:	4770      	bx	lr
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	da02      	bge.n	80159de <__ieee754_logf+0x22>
 80159d8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80159dc:	e7f5      	b.n	80159ca <__ieee754_logf+0xe>
 80159de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80159e2:	db02      	blt.n	80159ea <__ieee754_logf+0x2e>
 80159e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80159e8:	4770      	bx	lr
 80159ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80159ee:	bfb8      	it	lt
 80159f0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8015b64 <__ieee754_logf+0x1a8>
 80159f4:	485c      	ldr	r0, [pc, #368]	; (8015b68 <__ieee754_logf+0x1ac>)
 80159f6:	bfbe      	ittt	lt
 80159f8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80159fc:	f06f 0118 	mvnlt.w	r1, #24
 8015a00:	ee17 3a90 	vmovlt	r3, s15
 8015a04:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8015a08:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015a0c:	4418      	add	r0, r3
 8015a0e:	bfa8      	it	ge
 8015a10:	2100      	movge	r1, #0
 8015a12:	3a7f      	subs	r2, #127	; 0x7f
 8015a14:	440a      	add	r2, r1
 8015a16:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8015a1a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8015a1e:	4319      	orrs	r1, r3
 8015a20:	ee00 1a10 	vmov	s0, r1
 8015a24:	4951      	ldr	r1, [pc, #324]	; (8015b6c <__ieee754_logf+0x1b0>)
 8015a26:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8015a2a:	f103 000f 	add.w	r0, r3, #15
 8015a2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015a32:	4001      	ands	r1, r0
 8015a34:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015a38:	bb89      	cbnz	r1, 8015a9e <__ieee754_logf+0xe2>
 8015a3a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8015a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a42:	d10f      	bne.n	8015a64 <__ieee754_logf+0xa8>
 8015a44:	2a00      	cmp	r2, #0
 8015a46:	f000 8085 	beq.w	8015b54 <__ieee754_logf+0x198>
 8015a4a:	ee07 2a90 	vmov	s15, r2
 8015a4e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015b70 <__ieee754_logf+0x1b4>
 8015a52:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015b74 <__ieee754_logf+0x1b8>
 8015a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015a5e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8015a62:	4770      	bx	lr
 8015a64:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015b78 <__ieee754_logf+0x1bc>
 8015a68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015a6c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8015a70:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a78:	b912      	cbnz	r2, 8015a80 <__ieee754_logf+0xc4>
 8015a7a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015a7e:	4770      	bx	lr
 8015a80:	ee07 2a90 	vmov	s15, r2
 8015a84:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8015b70 <__ieee754_logf+0x1b4>
 8015a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a8c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015a90:	ee37 0a40 	vsub.f32	s0, s14, s0
 8015a94:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8015b74 <__ieee754_logf+0x1b8>
 8015a98:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8015a9c:	4770      	bx	lr
 8015a9e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015aa2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015aa6:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015b7c <__ieee754_logf+0x1c0>
 8015aaa:	eddf 4a35 	vldr	s9, [pc, #212]	; 8015b80 <__ieee754_logf+0x1c4>
 8015aae:	4935      	ldr	r1, [pc, #212]	; (8015b84 <__ieee754_logf+0x1c8>)
 8015ab0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8015ab4:	4419      	add	r1, r3
 8015ab6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8015aba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8015abe:	430b      	orrs	r3, r1
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	ee07 2a90 	vmov	s15, r2
 8015ac6:	ee26 5a06 	vmul.f32	s10, s12, s12
 8015aca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015ace:	ee25 7a05 	vmul.f32	s14, s10, s10
 8015ad2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8015b88 <__ieee754_logf+0x1cc>
 8015ad6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015ada:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8015b8c <__ieee754_logf+0x1d0>
 8015ade:	eee7 5a87 	vfma.f32	s11, s15, s14
 8015ae2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015b90 <__ieee754_logf+0x1d4>
 8015ae6:	eee7 7a24 	vfma.f32	s15, s14, s9
 8015aea:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8015b94 <__ieee754_logf+0x1d8>
 8015aee:	eee7 4a87 	vfma.f32	s9, s15, s14
 8015af2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8015b98 <__ieee754_logf+0x1dc>
 8015af6:	eee4 7a87 	vfma.f32	s15, s9, s14
 8015afa:	ee67 7a85 	vmul.f32	s15, s15, s10
 8015afe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8015b02:	dd1c      	ble.n	8015b3e <__ieee754_logf+0x182>
 8015b04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015b08:	ee20 7a07 	vmul.f32	s14, s0, s14
 8015b0c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8015b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015b14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015b18:	b922      	cbnz	r2, 8015b24 <__ieee754_logf+0x168>
 8015b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b22:	4770      	bx	lr
 8015b24:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015b70 <__ieee754_logf+0x1b4>
 8015b28:	eee6 7a86 	vfma.f32	s15, s13, s12
 8015b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015b34:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015b74 <__ieee754_logf+0x1b8>
 8015b38:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8015b3c:	4770      	bx	lr
 8015b3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015b42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015b46:	2a00      	cmp	r2, #0
 8015b48:	d0e9      	beq.n	8015b1e <__ieee754_logf+0x162>
 8015b4a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015b70 <__ieee754_logf+0x1b4>
 8015b4e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8015b52:	e7ed      	b.n	8015b30 <__ieee754_logf+0x174>
 8015b54:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8015b60 <__ieee754_logf+0x1a4>
 8015b58:	4770      	bx	lr
 8015b5a:	bf00      	nop
 8015b5c:	cc000000 	.word	0xcc000000
 8015b60:	00000000 	.word	0x00000000
 8015b64:	4c000000 	.word	0x4c000000
 8015b68:	004afb20 	.word	0x004afb20
 8015b6c:	007ffff0 	.word	0x007ffff0
 8015b70:	3717f7d1 	.word	0x3717f7d1
 8015b74:	3f317180 	.word	0x3f317180
 8015b78:	3eaaaaab 	.word	0x3eaaaaab
 8015b7c:	3e1cd04f 	.word	0x3e1cd04f
 8015b80:	3e178897 	.word	0x3e178897
 8015b84:	ffcf5c30 	.word	0xffcf5c30
 8015b88:	3e638e29 	.word	0x3e638e29
 8015b8c:	3ecccccd 	.word	0x3ecccccd
 8015b90:	3e3a3325 	.word	0x3e3a3325
 8015b94:	3e924925 	.word	0x3e924925
 8015b98:	3f2aaaab 	.word	0x3f2aaaab

08015b9c <__ieee754_powf>:
 8015b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba0:	ee10 5a90 	vmov	r5, s1
 8015ba4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015ba8:	ed2d 8b02 	vpush	{d8}
 8015bac:	eeb0 8a40 	vmov.f32	s16, s0
 8015bb0:	eef0 8a60 	vmov.f32	s17, s1
 8015bb4:	f000 8291 	beq.w	80160da <__ieee754_powf+0x53e>
 8015bb8:	ee10 8a10 	vmov	r8, s0
 8015bbc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8015bc0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015bc4:	dc06      	bgt.n	8015bd4 <__ieee754_powf+0x38>
 8015bc6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015bca:	dd0a      	ble.n	8015be2 <__ieee754_powf+0x46>
 8015bcc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015bd0:	f000 8283 	beq.w	80160da <__ieee754_powf+0x53e>
 8015bd4:	ecbd 8b02 	vpop	{d8}
 8015bd8:	48d8      	ldr	r0, [pc, #864]	; (8015f3c <__ieee754_powf+0x3a0>)
 8015bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bde:	f7fa bcf3 	b.w	80105c8 <nanf>
 8015be2:	f1b8 0f00 	cmp.w	r8, #0
 8015be6:	da1f      	bge.n	8015c28 <__ieee754_powf+0x8c>
 8015be8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8015bec:	da2e      	bge.n	8015c4c <__ieee754_powf+0xb0>
 8015bee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015bf2:	f2c0 827b 	blt.w	80160ec <__ieee754_powf+0x550>
 8015bf6:	15fb      	asrs	r3, r7, #23
 8015bf8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015bfc:	fa47 f603 	asr.w	r6, r7, r3
 8015c00:	fa06 f303 	lsl.w	r3, r6, r3
 8015c04:	42bb      	cmp	r3, r7
 8015c06:	f040 8271 	bne.w	80160ec <__ieee754_powf+0x550>
 8015c0a:	f006 0601 	and.w	r6, r6, #1
 8015c0e:	f1c6 0602 	rsb	r6, r6, #2
 8015c12:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015c16:	d120      	bne.n	8015c5a <__ieee754_powf+0xbe>
 8015c18:	2d00      	cmp	r5, #0
 8015c1a:	f280 8264 	bge.w	80160e6 <__ieee754_powf+0x54a>
 8015c1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015c22:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015c26:	e00d      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015c28:	2600      	movs	r6, #0
 8015c2a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015c2e:	d1f0      	bne.n	8015c12 <__ieee754_powf+0x76>
 8015c30:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015c34:	f000 8251 	beq.w	80160da <__ieee754_powf+0x53e>
 8015c38:	dd0a      	ble.n	8015c50 <__ieee754_powf+0xb4>
 8015c3a:	2d00      	cmp	r5, #0
 8015c3c:	f280 8250 	bge.w	80160e0 <__ieee754_powf+0x544>
 8015c40:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8015f40 <__ieee754_powf+0x3a4>
 8015c44:	ecbd 8b02 	vpop	{d8}
 8015c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c4c:	2602      	movs	r6, #2
 8015c4e:	e7ec      	b.n	8015c2a <__ieee754_powf+0x8e>
 8015c50:	2d00      	cmp	r5, #0
 8015c52:	daf5      	bge.n	8015c40 <__ieee754_powf+0xa4>
 8015c54:	eeb1 0a68 	vneg.f32	s0, s17
 8015c58:	e7f4      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015c5a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8015c5e:	d102      	bne.n	8015c66 <__ieee754_powf+0xca>
 8015c60:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015c64:	e7ee      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015c66:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8015c6a:	eeb0 0a48 	vmov.f32	s0, s16
 8015c6e:	d108      	bne.n	8015c82 <__ieee754_powf+0xe6>
 8015c70:	f1b8 0f00 	cmp.w	r8, #0
 8015c74:	db05      	blt.n	8015c82 <__ieee754_powf+0xe6>
 8015c76:	ecbd 8b02 	vpop	{d8}
 8015c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7e:	f000 bbf7 	b.w	8016470 <__ieee754_sqrtf>
 8015c82:	f7fe fddd 	bl	8014840 <fabsf>
 8015c86:	b124      	cbz	r4, 8015c92 <__ieee754_powf+0xf6>
 8015c88:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8015c8c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015c90:	d117      	bne.n	8015cc2 <__ieee754_powf+0x126>
 8015c92:	2d00      	cmp	r5, #0
 8015c94:	bfbc      	itt	lt
 8015c96:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8015c9a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015c9e:	f1b8 0f00 	cmp.w	r8, #0
 8015ca2:	dacf      	bge.n	8015c44 <__ieee754_powf+0xa8>
 8015ca4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015ca8:	ea54 0306 	orrs.w	r3, r4, r6
 8015cac:	d104      	bne.n	8015cb8 <__ieee754_powf+0x11c>
 8015cae:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015cb2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015cb6:	e7c5      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015cb8:	2e01      	cmp	r6, #1
 8015cba:	d1c3      	bne.n	8015c44 <__ieee754_powf+0xa8>
 8015cbc:	eeb1 0a40 	vneg.f32	s0, s0
 8015cc0:	e7c0      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015cc2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8015cc6:	3801      	subs	r0, #1
 8015cc8:	ea56 0300 	orrs.w	r3, r6, r0
 8015ccc:	d104      	bne.n	8015cd8 <__ieee754_powf+0x13c>
 8015cce:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015cd2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015cd6:	e7b5      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015cd8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8015cdc:	dd6b      	ble.n	8015db6 <__ieee754_powf+0x21a>
 8015cde:	4b99      	ldr	r3, [pc, #612]	; (8015f44 <__ieee754_powf+0x3a8>)
 8015ce0:	429c      	cmp	r4, r3
 8015ce2:	dc06      	bgt.n	8015cf2 <__ieee754_powf+0x156>
 8015ce4:	2d00      	cmp	r5, #0
 8015ce6:	daab      	bge.n	8015c40 <__ieee754_powf+0xa4>
 8015ce8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015f48 <__ieee754_powf+0x3ac>
 8015cec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015cf0:	e7a8      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015cf2:	4b96      	ldr	r3, [pc, #600]	; (8015f4c <__ieee754_powf+0x3b0>)
 8015cf4:	429c      	cmp	r4, r3
 8015cf6:	dd02      	ble.n	8015cfe <__ieee754_powf+0x162>
 8015cf8:	2d00      	cmp	r5, #0
 8015cfa:	dcf5      	bgt.n	8015ce8 <__ieee754_powf+0x14c>
 8015cfc:	e7a0      	b.n	8015c40 <__ieee754_powf+0xa4>
 8015cfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d06:	eddf 6a92 	vldr	s13, [pc, #584]	; 8015f50 <__ieee754_powf+0x3b4>
 8015d0a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015d0e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8015d12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d16:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8015d1a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d22:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8015f54 <__ieee754_powf+0x3b8>
 8015d26:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8015d2a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8015f58 <__ieee754_powf+0x3bc>
 8015d2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015d32:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8015f5c <__ieee754_powf+0x3c0>
 8015d36:	eef0 6a67 	vmov.f32	s13, s15
 8015d3a:	eee0 6a07 	vfma.f32	s13, s0, s14
 8015d3e:	ee16 3a90 	vmov	r3, s13
 8015d42:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015d46:	f023 030f 	bic.w	r3, r3, #15
 8015d4a:	ee00 3a90 	vmov	s1, r3
 8015d4e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8015d52:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015d56:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8015d5a:	f025 050f 	bic.w	r5, r5, #15
 8015d5e:	ee07 5a10 	vmov	s14, r5
 8015d62:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015d66:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015d6a:	ee07 3a90 	vmov	s15, r3
 8015d6e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8015d72:	3e01      	subs	r6, #1
 8015d74:	ea56 0200 	orrs.w	r2, r6, r0
 8015d78:	ee07 5a10 	vmov	s14, r5
 8015d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d80:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015d84:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015d88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015d8c:	ee17 4a10 	vmov	r4, s14
 8015d90:	bf08      	it	eq
 8015d92:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015d96:	2c00      	cmp	r4, #0
 8015d98:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015d9c:	f340 8184 	ble.w	80160a8 <__ieee754_powf+0x50c>
 8015da0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015da4:	f340 80fc 	ble.w	8015fa0 <__ieee754_powf+0x404>
 8015da8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8015f48 <__ieee754_powf+0x3ac>
 8015dac:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015db0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015db4:	e746      	b.n	8015c44 <__ieee754_powf+0xa8>
 8015db6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8015dba:	bf01      	itttt	eq
 8015dbc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8015f60 <__ieee754_powf+0x3c4>
 8015dc0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015dc4:	f06f 0217 	mvneq.w	r2, #23
 8015dc8:	ee17 4a90 	vmoveq	r4, s15
 8015dcc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8015dd0:	bf18      	it	ne
 8015dd2:	2200      	movne	r2, #0
 8015dd4:	3b7f      	subs	r3, #127	; 0x7f
 8015dd6:	4413      	add	r3, r2
 8015dd8:	4a62      	ldr	r2, [pc, #392]	; (8015f64 <__ieee754_powf+0x3c8>)
 8015dda:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015dde:	4294      	cmp	r4, r2
 8015de0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8015de4:	dd06      	ble.n	8015df4 <__ieee754_powf+0x258>
 8015de6:	4a60      	ldr	r2, [pc, #384]	; (8015f68 <__ieee754_powf+0x3cc>)
 8015de8:	4294      	cmp	r4, r2
 8015dea:	f340 80a4 	ble.w	8015f36 <__ieee754_powf+0x39a>
 8015dee:	3301      	adds	r3, #1
 8015df0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8015df4:	2400      	movs	r4, #0
 8015df6:	4a5d      	ldr	r2, [pc, #372]	; (8015f6c <__ieee754_powf+0x3d0>)
 8015df8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8015dfc:	ee07 1a90 	vmov	s15, r1
 8015e00:	ed92 7a00 	vldr	s14, [r2]
 8015e04:	4a5a      	ldr	r2, [pc, #360]	; (8015f70 <__ieee754_powf+0x3d4>)
 8015e06:	ee37 6a27 	vadd.f32	s12, s14, s15
 8015e0a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015e0e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8015e12:	1049      	asrs	r1, r1, #1
 8015e14:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015e18:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8015e1c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015e20:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8015e24:	ee06 1a10 	vmov	s12, r1
 8015e28:	ee65 4a26 	vmul.f32	s9, s10, s13
 8015e2c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8015e30:	ee14 7a90 	vmov	r7, s9
 8015e34:	4017      	ands	r7, r2
 8015e36:	ee05 7a90 	vmov	s11, r7
 8015e3a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8015e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e42:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8015f74 <__ieee754_powf+0x3d8>
 8015e46:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8015e4a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8015e4e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8015e52:	eddf 6a49 	vldr	s13, [pc, #292]	; 8015f78 <__ieee754_powf+0x3dc>
 8015e56:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015e5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8015f7c <__ieee754_powf+0x3e0>
 8015e5e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015e62:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8015f50 <__ieee754_powf+0x3b4>
 8015e66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015e6a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8015f80 <__ieee754_powf+0x3e4>
 8015e6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015e72:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015f84 <__ieee754_powf+0x3e8>
 8015e76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015e7a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8015e7e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8015e82:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015e86:	eee5 6a07 	vfma.f32	s13, s10, s14
 8015e8a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8015e8e:	eef0 7a45 	vmov.f32	s15, s10
 8015e92:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015e9a:	ee17 1a90 	vmov	r1, s15
 8015e9e:	4011      	ands	r1, r2
 8015ea0:	ee07 1a90 	vmov	s15, r1
 8015ea4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8015ea8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8015eac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015eb0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015eb4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015eb8:	eeb0 6a47 	vmov.f32	s12, s14
 8015ebc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015ec0:	ee16 1a10 	vmov	r1, s12
 8015ec4:	4011      	ands	r1, r2
 8015ec6:	ee06 1a90 	vmov	s13, r1
 8015eca:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8015ece:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8015f88 <__ieee754_powf+0x3ec>
 8015ed2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8015f8c <__ieee754_powf+0x3f0>
 8015ed6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015eda:	ee06 1a10 	vmov	s12, r1
 8015ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ee2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015f90 <__ieee754_powf+0x3f4>
 8015ee6:	492b      	ldr	r1, [pc, #172]	; (8015f94 <__ieee754_powf+0x3f8>)
 8015ee8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015eec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015ef0:	edd1 7a00 	vldr	s15, [r1]
 8015ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ef8:	ee07 3a90 	vmov	s15, r3
 8015efc:	4b26      	ldr	r3, [pc, #152]	; (8015f98 <__ieee754_powf+0x3fc>)
 8015efe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015f02:	eef0 7a47 	vmov.f32	s15, s14
 8015f06:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015f0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015f0e:	edd4 0a00 	vldr	s1, [r4]
 8015f12:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015f1a:	ee17 3a90 	vmov	r3, s15
 8015f1e:	4013      	ands	r3, r2
 8015f20:	ee07 3a90 	vmov	s15, r3
 8015f24:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015f28:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8015f2c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8015f30:	ee77 7a66 	vsub.f32	s15, s14, s13
 8015f34:	e70f      	b.n	8015d56 <__ieee754_powf+0x1ba>
 8015f36:	2401      	movs	r4, #1
 8015f38:	e75d      	b.n	8015df6 <__ieee754_powf+0x25a>
 8015f3a:	bf00      	nop
 8015f3c:	08100720 	.word	0x08100720
 8015f40:	00000000 	.word	0x00000000
 8015f44:	3f7ffff7 	.word	0x3f7ffff7
 8015f48:	7149f2ca 	.word	0x7149f2ca
 8015f4c:	3f800007 	.word	0x3f800007
 8015f50:	3eaaaaab 	.word	0x3eaaaaab
 8015f54:	3fb8aa3b 	.word	0x3fb8aa3b
 8015f58:	36eca570 	.word	0x36eca570
 8015f5c:	3fb8aa00 	.word	0x3fb8aa00
 8015f60:	4b800000 	.word	0x4b800000
 8015f64:	001cc471 	.word	0x001cc471
 8015f68:	005db3d6 	.word	0x005db3d6
 8015f6c:	08100764 	.word	0x08100764
 8015f70:	fffff000 	.word	0xfffff000
 8015f74:	3e6c3255 	.word	0x3e6c3255
 8015f78:	3e53f142 	.word	0x3e53f142
 8015f7c:	3e8ba305 	.word	0x3e8ba305
 8015f80:	3edb6db7 	.word	0x3edb6db7
 8015f84:	3f19999a 	.word	0x3f19999a
 8015f88:	3f76384f 	.word	0x3f76384f
 8015f8c:	3f763800 	.word	0x3f763800
 8015f90:	369dc3a0 	.word	0x369dc3a0
 8015f94:	08100774 	.word	0x08100774
 8015f98:	0810076c 	.word	0x0810076c
 8015f9c:	3338aa3c 	.word	0x3338aa3c
 8015fa0:	f040 8092 	bne.w	80160c8 <__ieee754_powf+0x52c>
 8015fa4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8015f9c <__ieee754_powf+0x400>
 8015fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015fac:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015fb0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb8:	f73f aef6 	bgt.w	8015da8 <__ieee754_powf+0x20c>
 8015fbc:	15db      	asrs	r3, r3, #23
 8015fbe:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8015fc2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015fc6:	4103      	asrs	r3, r0
 8015fc8:	4423      	add	r3, r4
 8015fca:	4949      	ldr	r1, [pc, #292]	; (80160f0 <__ieee754_powf+0x554>)
 8015fcc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015fd0:	3a7f      	subs	r2, #127	; 0x7f
 8015fd2:	4111      	asrs	r1, r2
 8015fd4:	ea23 0101 	bic.w	r1, r3, r1
 8015fd8:	ee07 1a10 	vmov	s14, r1
 8015fdc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015fe0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015fe4:	f1c2 0217 	rsb	r2, r2, #23
 8015fe8:	4110      	asrs	r0, r2
 8015fea:	2c00      	cmp	r4, #0
 8015fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ff0:	bfb8      	it	lt
 8015ff2:	4240      	neglt	r0, r0
 8015ff4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8015ff8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80160f4 <__ieee754_powf+0x558>
 8015ffc:	ee17 3a10 	vmov	r3, s14
 8016000:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016004:	f023 030f 	bic.w	r3, r3, #15
 8016008:	ee07 3a10 	vmov	s14, r3
 801600c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016010:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016014:	eddf 7a38 	vldr	s15, [pc, #224]	; 80160f8 <__ieee754_powf+0x55c>
 8016018:	ee67 7a27 	vmul.f32	s15, s14, s15
 801601c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8016020:	eddf 6a36 	vldr	s13, [pc, #216]	; 80160fc <__ieee754_powf+0x560>
 8016024:	eeb0 0a67 	vmov.f32	s0, s15
 8016028:	eea7 0a26 	vfma.f32	s0, s14, s13
 801602c:	eeb0 6a40 	vmov.f32	s12, s0
 8016030:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016034:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016038:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801603c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8016100 <__ieee754_powf+0x564>
 8016040:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8016104 <__ieee754_powf+0x568>
 8016044:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016048:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8016108 <__ieee754_powf+0x56c>
 801604c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016050:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801610c <__ieee754_powf+0x570>
 8016054:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016058:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8016110 <__ieee754_powf+0x574>
 801605c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016060:	eeb0 6a40 	vmov.f32	s12, s0
 8016064:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8016068:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801606c:	eeb0 7a46 	vmov.f32	s14, s12
 8016070:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016074:	ee20 6a06 	vmul.f32	s12, s0, s12
 8016078:	eee0 7a27 	vfma.f32	s15, s0, s15
 801607c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016084:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016088:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801608c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016090:	ee10 3a10 	vmov	r3, s0
 8016094:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8016098:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801609c:	da1a      	bge.n	80160d4 <__ieee754_powf+0x538>
 801609e:	f000 ffcb 	bl	8017038 <scalbnf>
 80160a2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80160a6:	e5cd      	b.n	8015c44 <__ieee754_powf+0xa8>
 80160a8:	4a1a      	ldr	r2, [pc, #104]	; (8016114 <__ieee754_powf+0x578>)
 80160aa:	4293      	cmp	r3, r2
 80160ac:	dd02      	ble.n	80160b4 <__ieee754_powf+0x518>
 80160ae:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8016118 <__ieee754_powf+0x57c>
 80160b2:	e67b      	b.n	8015dac <__ieee754_powf+0x210>
 80160b4:	d108      	bne.n	80160c8 <__ieee754_powf+0x52c>
 80160b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80160ba:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80160be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c2:	f6ff af7b 	blt.w	8015fbc <__ieee754_powf+0x420>
 80160c6:	e7f2      	b.n	80160ae <__ieee754_powf+0x512>
 80160c8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80160cc:	f73f af76 	bgt.w	8015fbc <__ieee754_powf+0x420>
 80160d0:	2000      	movs	r0, #0
 80160d2:	e78f      	b.n	8015ff4 <__ieee754_powf+0x458>
 80160d4:	ee00 3a10 	vmov	s0, r3
 80160d8:	e7e3      	b.n	80160a2 <__ieee754_powf+0x506>
 80160da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80160de:	e5b1      	b.n	8015c44 <__ieee754_powf+0xa8>
 80160e0:	eeb0 0a68 	vmov.f32	s0, s17
 80160e4:	e5ae      	b.n	8015c44 <__ieee754_powf+0xa8>
 80160e6:	eeb0 0a48 	vmov.f32	s0, s16
 80160ea:	e5ab      	b.n	8015c44 <__ieee754_powf+0xa8>
 80160ec:	2600      	movs	r6, #0
 80160ee:	e590      	b.n	8015c12 <__ieee754_powf+0x76>
 80160f0:	007fffff 	.word	0x007fffff
 80160f4:	3f317218 	.word	0x3f317218
 80160f8:	35bfbe8c 	.word	0x35bfbe8c
 80160fc:	3f317200 	.word	0x3f317200
 8016100:	3331bb4c 	.word	0x3331bb4c
 8016104:	b5ddea0e 	.word	0xb5ddea0e
 8016108:	388ab355 	.word	0x388ab355
 801610c:	bb360b61 	.word	0xbb360b61
 8016110:	3e2aaaab 	.word	0x3e2aaaab
 8016114:	43160000 	.word	0x43160000
 8016118:	0da24260 	.word	0x0da24260

0801611c <__ieee754_rem_pio2f>:
 801611c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801611e:	ee10 6a10 	vmov	r6, s0
 8016122:	4b8e      	ldr	r3, [pc, #568]	; (801635c <__ieee754_rem_pio2f+0x240>)
 8016124:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016128:	429d      	cmp	r5, r3
 801612a:	b087      	sub	sp, #28
 801612c:	eef0 7a40 	vmov.f32	s15, s0
 8016130:	4604      	mov	r4, r0
 8016132:	dc05      	bgt.n	8016140 <__ieee754_rem_pio2f+0x24>
 8016134:	2300      	movs	r3, #0
 8016136:	ed80 0a00 	vstr	s0, [r0]
 801613a:	6043      	str	r3, [r0, #4]
 801613c:	2000      	movs	r0, #0
 801613e:	e01a      	b.n	8016176 <__ieee754_rem_pio2f+0x5a>
 8016140:	4b87      	ldr	r3, [pc, #540]	; (8016360 <__ieee754_rem_pio2f+0x244>)
 8016142:	429d      	cmp	r5, r3
 8016144:	dc46      	bgt.n	80161d4 <__ieee754_rem_pio2f+0xb8>
 8016146:	2e00      	cmp	r6, #0
 8016148:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8016364 <__ieee754_rem_pio2f+0x248>
 801614c:	4b86      	ldr	r3, [pc, #536]	; (8016368 <__ieee754_rem_pio2f+0x24c>)
 801614e:	f025 050f 	bic.w	r5, r5, #15
 8016152:	dd1f      	ble.n	8016194 <__ieee754_rem_pio2f+0x78>
 8016154:	429d      	cmp	r5, r3
 8016156:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801615a:	d00e      	beq.n	801617a <__ieee754_rem_pio2f+0x5e>
 801615c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801636c <__ieee754_rem_pio2f+0x250>
 8016160:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016164:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016168:	ed80 0a00 	vstr	s0, [r0]
 801616c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016170:	2001      	movs	r0, #1
 8016172:	edc4 7a01 	vstr	s15, [r4, #4]
 8016176:	b007      	add	sp, #28
 8016178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801617a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016370 <__ieee754_rem_pio2f+0x254>
 801617e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8016374 <__ieee754_rem_pio2f+0x258>
 8016182:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016186:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801618a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801618e:	edc0 6a00 	vstr	s13, [r0]
 8016192:	e7eb      	b.n	801616c <__ieee754_rem_pio2f+0x50>
 8016194:	429d      	cmp	r5, r3
 8016196:	ee77 7a80 	vadd.f32	s15, s15, s0
 801619a:	d00e      	beq.n	80161ba <__ieee754_rem_pio2f+0x9e>
 801619c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801636c <__ieee754_rem_pio2f+0x250>
 80161a0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80161a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80161a8:	ed80 0a00 	vstr	s0, [r0]
 80161ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80161b0:	f04f 30ff 	mov.w	r0, #4294967295
 80161b4:	edc4 7a01 	vstr	s15, [r4, #4]
 80161b8:	e7dd      	b.n	8016176 <__ieee754_rem_pio2f+0x5a>
 80161ba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016370 <__ieee754_rem_pio2f+0x254>
 80161be:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8016374 <__ieee754_rem_pio2f+0x258>
 80161c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80161c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80161ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80161ce:	edc0 6a00 	vstr	s13, [r0]
 80161d2:	e7eb      	b.n	80161ac <__ieee754_rem_pio2f+0x90>
 80161d4:	4b68      	ldr	r3, [pc, #416]	; (8016378 <__ieee754_rem_pio2f+0x25c>)
 80161d6:	429d      	cmp	r5, r3
 80161d8:	dc72      	bgt.n	80162c0 <__ieee754_rem_pio2f+0x1a4>
 80161da:	f7fe fb31 	bl	8014840 <fabsf>
 80161de:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801637c <__ieee754_rem_pio2f+0x260>
 80161e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80161e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80161ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80161ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80161f2:	ee17 0a90 	vmov	r0, s15
 80161f6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016364 <__ieee754_rem_pio2f+0x248>
 80161fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80161fe:	281f      	cmp	r0, #31
 8016200:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801636c <__ieee754_rem_pio2f+0x250>
 8016204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016208:	eeb1 6a47 	vneg.f32	s12, s14
 801620c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016210:	ee16 2a90 	vmov	r2, s13
 8016214:	dc1c      	bgt.n	8016250 <__ieee754_rem_pio2f+0x134>
 8016216:	495a      	ldr	r1, [pc, #360]	; (8016380 <__ieee754_rem_pio2f+0x264>)
 8016218:	1e47      	subs	r7, r0, #1
 801621a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801621e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8016222:	428b      	cmp	r3, r1
 8016224:	d014      	beq.n	8016250 <__ieee754_rem_pio2f+0x134>
 8016226:	6022      	str	r2, [r4, #0]
 8016228:	ed94 7a00 	vldr	s14, [r4]
 801622c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016230:	2e00      	cmp	r6, #0
 8016232:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016236:	ed84 0a01 	vstr	s0, [r4, #4]
 801623a:	da9c      	bge.n	8016176 <__ieee754_rem_pio2f+0x5a>
 801623c:	eeb1 7a47 	vneg.f32	s14, s14
 8016240:	eeb1 0a40 	vneg.f32	s0, s0
 8016244:	ed84 7a00 	vstr	s14, [r4]
 8016248:	ed84 0a01 	vstr	s0, [r4, #4]
 801624c:	4240      	negs	r0, r0
 801624e:	e792      	b.n	8016176 <__ieee754_rem_pio2f+0x5a>
 8016250:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016254:	15eb      	asrs	r3, r5, #23
 8016256:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801625a:	2d08      	cmp	r5, #8
 801625c:	dde3      	ble.n	8016226 <__ieee754_rem_pio2f+0x10a>
 801625e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8016370 <__ieee754_rem_pio2f+0x254>
 8016262:	eef0 6a40 	vmov.f32	s13, s0
 8016266:	eee6 6a27 	vfma.f32	s13, s12, s15
 801626a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801626e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8016272:	eddf 7a40 	vldr	s15, [pc, #256]	; 8016374 <__ieee754_rem_pio2f+0x258>
 8016276:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801627a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801627e:	eef0 7a40 	vmov.f32	s15, s0
 8016282:	ee15 2a90 	vmov	r2, s11
 8016286:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801628a:	1a5b      	subs	r3, r3, r1
 801628c:	2b19      	cmp	r3, #25
 801628e:	dc04      	bgt.n	801629a <__ieee754_rem_pio2f+0x17e>
 8016290:	edc4 5a00 	vstr	s11, [r4]
 8016294:	eeb0 0a66 	vmov.f32	s0, s13
 8016298:	e7c6      	b.n	8016228 <__ieee754_rem_pio2f+0x10c>
 801629a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016384 <__ieee754_rem_pio2f+0x268>
 801629e:	eeb0 0a66 	vmov.f32	s0, s13
 80162a2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80162a6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80162aa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016388 <__ieee754_rem_pio2f+0x26c>
 80162ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80162b2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80162b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80162ba:	ed84 7a00 	vstr	s14, [r4]
 80162be:	e7b3      	b.n	8016228 <__ieee754_rem_pio2f+0x10c>
 80162c0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80162c4:	db06      	blt.n	80162d4 <__ieee754_rem_pio2f+0x1b8>
 80162c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80162ca:	edc0 7a01 	vstr	s15, [r0, #4]
 80162ce:	edc0 7a00 	vstr	s15, [r0]
 80162d2:	e733      	b.n	801613c <__ieee754_rem_pio2f+0x20>
 80162d4:	15ea      	asrs	r2, r5, #23
 80162d6:	3a86      	subs	r2, #134	; 0x86
 80162d8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80162dc:	ee07 3a90 	vmov	s15, r3
 80162e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80162e4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801638c <__ieee754_rem_pio2f+0x270>
 80162e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80162ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80162f0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80162f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80162f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80162fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016304:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016308:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801630c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016314:	edcd 7a05 	vstr	s15, [sp, #20]
 8016318:	d11e      	bne.n	8016358 <__ieee754_rem_pio2f+0x23c>
 801631a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801631e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016322:	bf14      	ite	ne
 8016324:	2302      	movne	r3, #2
 8016326:	2301      	moveq	r3, #1
 8016328:	4919      	ldr	r1, [pc, #100]	; (8016390 <__ieee754_rem_pio2f+0x274>)
 801632a:	9101      	str	r1, [sp, #4]
 801632c:	2102      	movs	r1, #2
 801632e:	9100      	str	r1, [sp, #0]
 8016330:	a803      	add	r0, sp, #12
 8016332:	4621      	mov	r1, r4
 8016334:	f000 f900 	bl	8016538 <__kernel_rem_pio2f>
 8016338:	2e00      	cmp	r6, #0
 801633a:	f6bf af1c 	bge.w	8016176 <__ieee754_rem_pio2f+0x5a>
 801633e:	edd4 7a00 	vldr	s15, [r4]
 8016342:	eef1 7a67 	vneg.f32	s15, s15
 8016346:	edc4 7a00 	vstr	s15, [r4]
 801634a:	edd4 7a01 	vldr	s15, [r4, #4]
 801634e:	eef1 7a67 	vneg.f32	s15, s15
 8016352:	edc4 7a01 	vstr	s15, [r4, #4]
 8016356:	e779      	b.n	801624c <__ieee754_rem_pio2f+0x130>
 8016358:	2303      	movs	r3, #3
 801635a:	e7e5      	b.n	8016328 <__ieee754_rem_pio2f+0x20c>
 801635c:	3f490fd8 	.word	0x3f490fd8
 8016360:	4016cbe3 	.word	0x4016cbe3
 8016364:	3fc90f80 	.word	0x3fc90f80
 8016368:	3fc90fd0 	.word	0x3fc90fd0
 801636c:	37354443 	.word	0x37354443
 8016370:	37354400 	.word	0x37354400
 8016374:	2e85a308 	.word	0x2e85a308
 8016378:	43490f80 	.word	0x43490f80
 801637c:	3f22f984 	.word	0x3f22f984
 8016380:	0810077c 	.word	0x0810077c
 8016384:	2e85a300 	.word	0x2e85a300
 8016388:	248d3132 	.word	0x248d3132
 801638c:	43800000 	.word	0x43800000
 8016390:	081007fc 	.word	0x081007fc

08016394 <__ieee754_sinhf>:
 8016394:	b510      	push	{r4, lr}
 8016396:	ee10 3a10 	vmov	r3, s0
 801639a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801639e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80163a2:	ed2d 8b02 	vpush	{d8}
 80163a6:	eef0 7a40 	vmov.f32	s15, s0
 80163aa:	db06      	blt.n	80163ba <__ieee754_sinhf+0x26>
 80163ac:	ee70 7a00 	vadd.f32	s15, s0, s0
 80163b0:	ecbd 8b02 	vpop	{d8}
 80163b4:	eeb0 0a67 	vmov.f32	s0, s15
 80163b8:	bd10      	pop	{r4, pc}
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	4b28      	ldr	r3, [pc, #160]	; (8016460 <__ieee754_sinhf+0xcc>)
 80163be:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80163c2:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 80163c6:	bfa8      	it	ge
 80163c8:	eeb0 8a68 	vmovge.f32	s16, s17
 80163cc:	429c      	cmp	r4, r3
 80163ce:	dc2a      	bgt.n	8016426 <__ieee754_sinhf+0x92>
 80163d0:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 80163d4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80163d8:	da08      	bge.n	80163ec <__ieee754_sinhf+0x58>
 80163da:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8016464 <__ieee754_sinhf+0xd0>
 80163de:	ee30 7a07 	vadd.f32	s14, s0, s14
 80163e2:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80163e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ea:	dce1      	bgt.n	80163b0 <__ieee754_sinhf+0x1c>
 80163ec:	eeb0 0a67 	vmov.f32	s0, s15
 80163f0:	f7fe fa26 	bl	8014840 <fabsf>
 80163f4:	f000 fc96 	bl	8016d24 <expm1f>
 80163f8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80163fc:	bfbb      	ittet	lt
 80163fe:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8016402:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 8016406:	ee70 8a28 	vaddge.f32	s17, s0, s17
 801640a:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 801640e:	bfad      	iteet	ge
 8016410:	ee80 7a28 	vdivge.f32	s14, s0, s17
 8016414:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8016418:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 801641c:	ee77 7a00 	vaddge.f32	s15, s14, s0
 8016420:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016424:	e7c4      	b.n	80163b0 <__ieee754_sinhf+0x1c>
 8016426:	4b10      	ldr	r3, [pc, #64]	; (8016468 <__ieee754_sinhf+0xd4>)
 8016428:	429c      	cmp	r4, r3
 801642a:	dc06      	bgt.n	801643a <__ieee754_sinhf+0xa6>
 801642c:	f7fe fa08 	bl	8014840 <fabsf>
 8016430:	f7ff f96e 	bl	8015710 <__ieee754_expf>
 8016434:	ee60 7a08 	vmul.f32	s15, s0, s16
 8016438:	e7ba      	b.n	80163b0 <__ieee754_sinhf+0x1c>
 801643a:	4b0c      	ldr	r3, [pc, #48]	; (801646c <__ieee754_sinhf+0xd8>)
 801643c:	429c      	cmp	r4, r3
 801643e:	dc0a      	bgt.n	8016456 <__ieee754_sinhf+0xc2>
 8016440:	f7fe f9fe 	bl	8014840 <fabsf>
 8016444:	ee20 0a28 	vmul.f32	s0, s0, s17
 8016448:	f7ff f962 	bl	8015710 <__ieee754_expf>
 801644c:	ee68 7a00 	vmul.f32	s15, s16, s0
 8016450:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016454:	e7ac      	b.n	80163b0 <__ieee754_sinhf+0x1c>
 8016456:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8016464 <__ieee754_sinhf+0xd0>
 801645a:	ee60 7a07 	vmul.f32	s15, s0, s14
 801645e:	e7a7      	b.n	80163b0 <__ieee754_sinhf+0x1c>
 8016460:	41afffff 	.word	0x41afffff
 8016464:	7cf0bdc2 	.word	0x7cf0bdc2
 8016468:	42b17217 	.word	0x42b17217
 801646c:	42b2d4fc 	.word	0x42b2d4fc

08016470 <__ieee754_sqrtf>:
 8016470:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016474:	4770      	bx	lr
	...

08016478 <__kernel_cosf>:
 8016478:	ee10 3a10 	vmov	r3, s0
 801647c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016480:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016484:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016488:	da05      	bge.n	8016496 <__kernel_cosf+0x1e>
 801648a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801648e:	ee17 2a90 	vmov	r2, s15
 8016492:	2a00      	cmp	r2, #0
 8016494:	d03d      	beq.n	8016512 <__kernel_cosf+0x9a>
 8016496:	ee60 5a00 	vmul.f32	s11, s0, s0
 801649a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016518 <__kernel_cosf+0xa0>
 801649e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801651c <__kernel_cosf+0xa4>
 80164a2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016520 <__kernel_cosf+0xa8>
 80164a6:	4a1f      	ldr	r2, [pc, #124]	; (8016524 <__kernel_cosf+0xac>)
 80164a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80164ac:	4293      	cmp	r3, r2
 80164ae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016528 <__kernel_cosf+0xb0>
 80164b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80164b6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801652c <__kernel_cosf+0xb4>
 80164ba:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80164be:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016530 <__kernel_cosf+0xb8>
 80164c2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80164c6:	eeb0 7a66 	vmov.f32	s14, s13
 80164ca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80164ce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80164d2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80164d6:	ee67 6a25 	vmul.f32	s13, s14, s11
 80164da:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80164de:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80164e2:	dc04      	bgt.n	80164ee <__kernel_cosf+0x76>
 80164e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80164e8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80164ec:	4770      	bx	lr
 80164ee:	4a11      	ldr	r2, [pc, #68]	; (8016534 <__kernel_cosf+0xbc>)
 80164f0:	4293      	cmp	r3, r2
 80164f2:	bfda      	itte	le
 80164f4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80164f8:	ee06 3a90 	vmovle	s13, r3
 80164fc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8016500:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016504:	ee36 0a66 	vsub.f32	s0, s12, s13
 8016508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801650c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016510:	4770      	bx	lr
 8016512:	eeb0 0a46 	vmov.f32	s0, s12
 8016516:	4770      	bx	lr
 8016518:	ad47d74e 	.word	0xad47d74e
 801651c:	310f74f6 	.word	0x310f74f6
 8016520:	3d2aaaab 	.word	0x3d2aaaab
 8016524:	3e999999 	.word	0x3e999999
 8016528:	b493f27c 	.word	0xb493f27c
 801652c:	37d00d01 	.word	0x37d00d01
 8016530:	bab60b61 	.word	0xbab60b61
 8016534:	3f480000 	.word	0x3f480000

08016538 <__kernel_rem_pio2f>:
 8016538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801653c:	ed2d 8b04 	vpush	{d8-d9}
 8016540:	b0d7      	sub	sp, #348	; 0x15c
 8016542:	4616      	mov	r6, r2
 8016544:	4698      	mov	r8, r3
 8016546:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016548:	4bbb      	ldr	r3, [pc, #748]	; (8016838 <__kernel_rem_pio2f+0x300>)
 801654a:	9001      	str	r0, [sp, #4]
 801654c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016550:	1d33      	adds	r3, r6, #4
 8016552:	460d      	mov	r5, r1
 8016554:	f108 39ff 	add.w	r9, r8, #4294967295
 8016558:	db29      	blt.n	80165ae <__kernel_rem_pio2f+0x76>
 801655a:	1ef1      	subs	r1, r6, #3
 801655c:	bf48      	it	mi
 801655e:	1d31      	addmi	r1, r6, #4
 8016560:	10c9      	asrs	r1, r1, #3
 8016562:	1c4c      	adds	r4, r1, #1
 8016564:	00e3      	lsls	r3, r4, #3
 8016566:	9302      	str	r3, [sp, #8]
 8016568:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801656a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8016848 <__kernel_rem_pio2f+0x310>
 801656e:	eba1 0009 	sub.w	r0, r1, r9
 8016572:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8016576:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801657a:	eb07 0c09 	add.w	ip, r7, r9
 801657e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016582:	2300      	movs	r3, #0
 8016584:	4563      	cmp	r3, ip
 8016586:	dd14      	ble.n	80165b2 <__kernel_rem_pio2f+0x7a>
 8016588:	ab1a      	add	r3, sp, #104	; 0x68
 801658a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801658e:	46cc      	mov	ip, r9
 8016590:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016594:	f1c8 0b01 	rsb	fp, r8, #1
 8016598:	eb0b 020c 	add.w	r2, fp, ip
 801659c:	4297      	cmp	r7, r2
 801659e:	db27      	blt.n	80165f0 <__kernel_rem_pio2f+0xb8>
 80165a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80165a4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016848 <__kernel_rem_pio2f+0x310>
 80165a8:	4618      	mov	r0, r3
 80165aa:	2200      	movs	r2, #0
 80165ac:	e016      	b.n	80165dc <__kernel_rem_pio2f+0xa4>
 80165ae:	2100      	movs	r1, #0
 80165b0:	e7d7      	b.n	8016562 <__kernel_rem_pio2f+0x2a>
 80165b2:	42d8      	cmn	r0, r3
 80165b4:	bf5d      	ittte	pl
 80165b6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80165ba:	ee07 2a90 	vmovpl	s15, r2
 80165be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80165c2:	eef0 7a47 	vmovmi.f32	s15, s14
 80165c6:	ecea 7a01 	vstmia	sl!, {s15}
 80165ca:	3301      	adds	r3, #1
 80165cc:	e7da      	b.n	8016584 <__kernel_rem_pio2f+0x4c>
 80165ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80165d2:	ed90 7a00 	vldr	s14, [r0]
 80165d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80165da:	3201      	adds	r2, #1
 80165dc:	454a      	cmp	r2, r9
 80165de:	f1a0 0004 	sub.w	r0, r0, #4
 80165e2:	ddf4      	ble.n	80165ce <__kernel_rem_pio2f+0x96>
 80165e4:	ecea 7a01 	vstmia	sl!, {s15}
 80165e8:	3304      	adds	r3, #4
 80165ea:	f10c 0c01 	add.w	ip, ip, #1
 80165ee:	e7d3      	b.n	8016598 <__kernel_rem_pio2f+0x60>
 80165f0:	ab06      	add	r3, sp, #24
 80165f2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80165f6:	9304      	str	r3, [sp, #16]
 80165f8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80165fa:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016844 <__kernel_rem_pio2f+0x30c>
 80165fe:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016840 <__kernel_rem_pio2f+0x308>
 8016602:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016606:	9303      	str	r3, [sp, #12]
 8016608:	46ba      	mov	sl, r7
 801660a:	ab56      	add	r3, sp, #344	; 0x158
 801660c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016610:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016614:	ab06      	add	r3, sp, #24
 8016616:	4618      	mov	r0, r3
 8016618:	4652      	mov	r2, sl
 801661a:	2a00      	cmp	r2, #0
 801661c:	dc51      	bgt.n	80166c2 <__kernel_rem_pio2f+0x18a>
 801661e:	4620      	mov	r0, r4
 8016620:	9305      	str	r3, [sp, #20]
 8016622:	f000 fd09 	bl	8017038 <scalbnf>
 8016626:	eeb0 8a40 	vmov.f32	s16, s0
 801662a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801662e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016632:	f7fe f90d 	bl	8014850 <floorf>
 8016636:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801663a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801663e:	2c00      	cmp	r4, #0
 8016640:	9b05      	ldr	r3, [sp, #20]
 8016642:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016646:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801664a:	edcd 7a00 	vstr	s15, [sp]
 801664e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016652:	dd4b      	ble.n	80166ec <__kernel_rem_pio2f+0x1b4>
 8016654:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016658:	aa06      	add	r2, sp, #24
 801665a:	f1c4 0e08 	rsb	lr, r4, #8
 801665e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016662:	ee17 1a90 	vmov	r1, s15
 8016666:	fa42 f00e 	asr.w	r0, r2, lr
 801666a:	4401      	add	r1, r0
 801666c:	9100      	str	r1, [sp, #0]
 801666e:	fa00 f00e 	lsl.w	r0, r0, lr
 8016672:	a906      	add	r1, sp, #24
 8016674:	1a12      	subs	r2, r2, r0
 8016676:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801667a:	f1c4 0007 	rsb	r0, r4, #7
 801667e:	fa42 fb00 	asr.w	fp, r2, r0
 8016682:	f1bb 0f00 	cmp.w	fp, #0
 8016686:	dd43      	ble.n	8016710 <__kernel_rem_pio2f+0x1d8>
 8016688:	9a00      	ldr	r2, [sp, #0]
 801668a:	f04f 0e00 	mov.w	lr, #0
 801668e:	3201      	adds	r2, #1
 8016690:	9200      	str	r2, [sp, #0]
 8016692:	4670      	mov	r0, lr
 8016694:	45f2      	cmp	sl, lr
 8016696:	dc6c      	bgt.n	8016772 <__kernel_rem_pio2f+0x23a>
 8016698:	2c00      	cmp	r4, #0
 801669a:	dd04      	ble.n	80166a6 <__kernel_rem_pio2f+0x16e>
 801669c:	2c01      	cmp	r4, #1
 801669e:	d079      	beq.n	8016794 <__kernel_rem_pio2f+0x25c>
 80166a0:	2c02      	cmp	r4, #2
 80166a2:	f000 8082 	beq.w	80167aa <__kernel_rem_pio2f+0x272>
 80166a6:	f1bb 0f02 	cmp.w	fp, #2
 80166aa:	d131      	bne.n	8016710 <__kernel_rem_pio2f+0x1d8>
 80166ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80166b0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80166b4:	b360      	cbz	r0, 8016710 <__kernel_rem_pio2f+0x1d8>
 80166b6:	4620      	mov	r0, r4
 80166b8:	f000 fcbe 	bl	8017038 <scalbnf>
 80166bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80166c0:	e026      	b.n	8016710 <__kernel_rem_pio2f+0x1d8>
 80166c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80166c6:	3a01      	subs	r2, #1
 80166c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166cc:	a942      	add	r1, sp, #264	; 0x108
 80166ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166d2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80166d6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80166da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80166de:	eca0 0a01 	vstmia	r0!, {s0}
 80166e2:	ed9c 0a00 	vldr	s0, [ip]
 80166e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80166ea:	e796      	b.n	801661a <__kernel_rem_pio2f+0xe2>
 80166ec:	d107      	bne.n	80166fe <__kernel_rem_pio2f+0x1c6>
 80166ee:	f10a 32ff 	add.w	r2, sl, #4294967295
 80166f2:	a906      	add	r1, sp, #24
 80166f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80166f8:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80166fc:	e7c1      	b.n	8016682 <__kernel_rem_pio2f+0x14a>
 80166fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016702:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670a:	da2f      	bge.n	801676c <__kernel_rem_pio2f+0x234>
 801670c:	f04f 0b00 	mov.w	fp, #0
 8016710:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016718:	f040 8098 	bne.w	801684c <__kernel_rem_pio2f+0x314>
 801671c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016720:	469c      	mov	ip, r3
 8016722:	2200      	movs	r2, #0
 8016724:	45bc      	cmp	ip, r7
 8016726:	da48      	bge.n	80167ba <__kernel_rem_pio2f+0x282>
 8016728:	2a00      	cmp	r2, #0
 801672a:	d05f      	beq.n	80167ec <__kernel_rem_pio2f+0x2b4>
 801672c:	aa06      	add	r2, sp, #24
 801672e:	3c08      	subs	r4, #8
 8016730:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016734:	2900      	cmp	r1, #0
 8016736:	d07d      	beq.n	8016834 <__kernel_rem_pio2f+0x2fc>
 8016738:	4620      	mov	r0, r4
 801673a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801673e:	9301      	str	r3, [sp, #4]
 8016740:	f000 fc7a 	bl	8017038 <scalbnf>
 8016744:	9b01      	ldr	r3, [sp, #4]
 8016746:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016844 <__kernel_rem_pio2f+0x30c>
 801674a:	4619      	mov	r1, r3
 801674c:	2900      	cmp	r1, #0
 801674e:	f280 80af 	bge.w	80168b0 <__kernel_rem_pio2f+0x378>
 8016752:	4618      	mov	r0, r3
 8016754:	2400      	movs	r4, #0
 8016756:	2800      	cmp	r0, #0
 8016758:	f2c0 80d0 	blt.w	80168fc <__kernel_rem_pio2f+0x3c4>
 801675c:	a942      	add	r1, sp, #264	; 0x108
 801675e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016762:	4a36      	ldr	r2, [pc, #216]	; (801683c <__kernel_rem_pio2f+0x304>)
 8016764:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016848 <__kernel_rem_pio2f+0x310>
 8016768:	2100      	movs	r1, #0
 801676a:	e0bb      	b.n	80168e4 <__kernel_rem_pio2f+0x3ac>
 801676c:	f04f 0b02 	mov.w	fp, #2
 8016770:	e78a      	b.n	8016688 <__kernel_rem_pio2f+0x150>
 8016772:	681a      	ldr	r2, [r3, #0]
 8016774:	b948      	cbnz	r0, 801678a <__kernel_rem_pio2f+0x252>
 8016776:	b11a      	cbz	r2, 8016780 <__kernel_rem_pio2f+0x248>
 8016778:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801677c:	601a      	str	r2, [r3, #0]
 801677e:	2201      	movs	r2, #1
 8016780:	f10e 0e01 	add.w	lr, lr, #1
 8016784:	3304      	adds	r3, #4
 8016786:	4610      	mov	r0, r2
 8016788:	e784      	b.n	8016694 <__kernel_rem_pio2f+0x15c>
 801678a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801678e:	601a      	str	r2, [r3, #0]
 8016790:	4602      	mov	r2, r0
 8016792:	e7f5      	b.n	8016780 <__kernel_rem_pio2f+0x248>
 8016794:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016798:	ab06      	add	r3, sp, #24
 801679a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801679e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80167a2:	aa06      	add	r2, sp, #24
 80167a4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80167a8:	e77d      	b.n	80166a6 <__kernel_rem_pio2f+0x16e>
 80167aa:	f10a 3cff 	add.w	ip, sl, #4294967295
 80167ae:	ab06      	add	r3, sp, #24
 80167b0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80167b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80167b8:	e7f3      	b.n	80167a2 <__kernel_rem_pio2f+0x26a>
 80167ba:	a906      	add	r1, sp, #24
 80167bc:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80167c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80167c4:	4302      	orrs	r2, r0
 80167c6:	e7ad      	b.n	8016724 <__kernel_rem_pio2f+0x1ec>
 80167c8:	3001      	adds	r0, #1
 80167ca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80167ce:	2a00      	cmp	r2, #0
 80167d0:	d0fa      	beq.n	80167c8 <__kernel_rem_pio2f+0x290>
 80167d2:	a91a      	add	r1, sp, #104	; 0x68
 80167d4:	eb0a 0208 	add.w	r2, sl, r8
 80167d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80167dc:	f10a 0301 	add.w	r3, sl, #1
 80167e0:	eb0a 0100 	add.w	r1, sl, r0
 80167e4:	4299      	cmp	r1, r3
 80167e6:	da04      	bge.n	80167f2 <__kernel_rem_pio2f+0x2ba>
 80167e8:	468a      	mov	sl, r1
 80167ea:	e70e      	b.n	801660a <__kernel_rem_pio2f+0xd2>
 80167ec:	9b04      	ldr	r3, [sp, #16]
 80167ee:	2001      	movs	r0, #1
 80167f0:	e7eb      	b.n	80167ca <__kernel_rem_pio2f+0x292>
 80167f2:	9803      	ldr	r0, [sp, #12]
 80167f4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80167f8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80167fc:	9000      	str	r0, [sp, #0]
 80167fe:	ee07 0a90 	vmov	s15, r0
 8016802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016806:	2000      	movs	r0, #0
 8016808:	ece2 7a01 	vstmia	r2!, {s15}
 801680c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016848 <__kernel_rem_pio2f+0x310>
 8016810:	4696      	mov	lr, r2
 8016812:	4548      	cmp	r0, r9
 8016814:	dd06      	ble.n	8016824 <__kernel_rem_pio2f+0x2ec>
 8016816:	a842      	add	r0, sp, #264	; 0x108
 8016818:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801681c:	edc0 7a00 	vstr	s15, [r0]
 8016820:	3301      	adds	r3, #1
 8016822:	e7df      	b.n	80167e4 <__kernel_rem_pio2f+0x2ac>
 8016824:	ecfc 6a01 	vldmia	ip!, {s13}
 8016828:	ed3e 7a01 	vldmdb	lr!, {s14}
 801682c:	3001      	adds	r0, #1
 801682e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016832:	e7ee      	b.n	8016812 <__kernel_rem_pio2f+0x2da>
 8016834:	3b01      	subs	r3, #1
 8016836:	e779      	b.n	801672c <__kernel_rem_pio2f+0x1f4>
 8016838:	08100b40 	.word	0x08100b40
 801683c:	08100b14 	.word	0x08100b14
 8016840:	43800000 	.word	0x43800000
 8016844:	3b800000 	.word	0x3b800000
 8016848:	00000000 	.word	0x00000000
 801684c:	9b02      	ldr	r3, [sp, #8]
 801684e:	eeb0 0a48 	vmov.f32	s0, s16
 8016852:	1b98      	subs	r0, r3, r6
 8016854:	f000 fbf0 	bl	8017038 <scalbnf>
 8016858:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016840 <__kernel_rem_pio2f+0x308>
 801685c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016864:	db1b      	blt.n	801689e <__kernel_rem_pio2f+0x366>
 8016866:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016844 <__kernel_rem_pio2f+0x30c>
 801686a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801686e:	aa06      	add	r2, sp, #24
 8016870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016874:	a906      	add	r1, sp, #24
 8016876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801687a:	3408      	adds	r4, #8
 801687c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016884:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016888:	ee10 3a10 	vmov	r3, s0
 801688c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016890:	ee17 2a90 	vmov	r2, s15
 8016894:	f10a 0301 	add.w	r3, sl, #1
 8016898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801689c:	e74c      	b.n	8016738 <__kernel_rem_pio2f+0x200>
 801689e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80168a2:	aa06      	add	r2, sp, #24
 80168a4:	ee10 3a10 	vmov	r3, s0
 80168a8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80168ac:	4653      	mov	r3, sl
 80168ae:	e743      	b.n	8016738 <__kernel_rem_pio2f+0x200>
 80168b0:	aa42      	add	r2, sp, #264	; 0x108
 80168b2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80168b6:	aa06      	add	r2, sp, #24
 80168b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80168bc:	9201      	str	r2, [sp, #4]
 80168be:	ee07 2a90 	vmov	s15, r2
 80168c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168c6:	3901      	subs	r1, #1
 80168c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80168cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80168d0:	edc0 7a00 	vstr	s15, [r0]
 80168d4:	e73a      	b.n	801674c <__kernel_rem_pio2f+0x214>
 80168d6:	ecf2 6a01 	vldmia	r2!, {s13}
 80168da:	ecb6 7a01 	vldmia	r6!, {s14}
 80168de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80168e2:	3101      	adds	r1, #1
 80168e4:	42b9      	cmp	r1, r7
 80168e6:	dc01      	bgt.n	80168ec <__kernel_rem_pio2f+0x3b4>
 80168e8:	428c      	cmp	r4, r1
 80168ea:	daf4      	bge.n	80168d6 <__kernel_rem_pio2f+0x39e>
 80168ec:	aa56      	add	r2, sp, #344	; 0x158
 80168ee:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80168f2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80168f6:	3801      	subs	r0, #1
 80168f8:	3401      	adds	r4, #1
 80168fa:	e72c      	b.n	8016756 <__kernel_rem_pio2f+0x21e>
 80168fc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80168fe:	2a02      	cmp	r2, #2
 8016900:	dc0a      	bgt.n	8016918 <__kernel_rem_pio2f+0x3e0>
 8016902:	2a00      	cmp	r2, #0
 8016904:	dc61      	bgt.n	80169ca <__kernel_rem_pio2f+0x492>
 8016906:	d03c      	beq.n	8016982 <__kernel_rem_pio2f+0x44a>
 8016908:	9b00      	ldr	r3, [sp, #0]
 801690a:	f003 0007 	and.w	r0, r3, #7
 801690e:	b057      	add	sp, #348	; 0x15c
 8016910:	ecbd 8b04 	vpop	{d8-d9}
 8016914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016918:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801691a:	2a03      	cmp	r2, #3
 801691c:	d1f4      	bne.n	8016908 <__kernel_rem_pio2f+0x3d0>
 801691e:	aa2e      	add	r2, sp, #184	; 0xb8
 8016920:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016924:	4608      	mov	r0, r1
 8016926:	461c      	mov	r4, r3
 8016928:	2c00      	cmp	r4, #0
 801692a:	f1a0 0004 	sub.w	r0, r0, #4
 801692e:	dc59      	bgt.n	80169e4 <__kernel_rem_pio2f+0x4ac>
 8016930:	4618      	mov	r0, r3
 8016932:	2801      	cmp	r0, #1
 8016934:	f1a1 0104 	sub.w	r1, r1, #4
 8016938:	dc64      	bgt.n	8016a04 <__kernel_rem_pio2f+0x4cc>
 801693a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8016848 <__kernel_rem_pio2f+0x310>
 801693e:	2b01      	cmp	r3, #1
 8016940:	dc70      	bgt.n	8016a24 <__kernel_rem_pio2f+0x4ec>
 8016942:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016946:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801694a:	f1bb 0f00 	cmp.w	fp, #0
 801694e:	d172      	bne.n	8016a36 <__kernel_rem_pio2f+0x4fe>
 8016950:	edc5 6a00 	vstr	s13, [r5]
 8016954:	ed85 7a01 	vstr	s14, [r5, #4]
 8016958:	edc5 7a02 	vstr	s15, [r5, #8]
 801695c:	e7d4      	b.n	8016908 <__kernel_rem_pio2f+0x3d0>
 801695e:	aa2e      	add	r2, sp, #184	; 0xb8
 8016960:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016964:	ed91 7a00 	vldr	s14, [r1]
 8016968:	ee77 7a87 	vadd.f32	s15, s15, s14
 801696c:	3b01      	subs	r3, #1
 801696e:	2b00      	cmp	r3, #0
 8016970:	daf5      	bge.n	801695e <__kernel_rem_pio2f+0x426>
 8016972:	f1bb 0f00 	cmp.w	fp, #0
 8016976:	d001      	beq.n	801697c <__kernel_rem_pio2f+0x444>
 8016978:	eef1 7a67 	vneg.f32	s15, s15
 801697c:	edc5 7a00 	vstr	s15, [r5]
 8016980:	e7c2      	b.n	8016908 <__kernel_rem_pio2f+0x3d0>
 8016982:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8016848 <__kernel_rem_pio2f+0x310>
 8016986:	e7f2      	b.n	801696e <__kernel_rem_pio2f+0x436>
 8016988:	aa2e      	add	r2, sp, #184	; 0xb8
 801698a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801698e:	edd0 7a00 	vldr	s15, [r0]
 8016992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016996:	3901      	subs	r1, #1
 8016998:	2900      	cmp	r1, #0
 801699a:	daf5      	bge.n	8016988 <__kernel_rem_pio2f+0x450>
 801699c:	f1bb 0f00 	cmp.w	fp, #0
 80169a0:	d017      	beq.n	80169d2 <__kernel_rem_pio2f+0x49a>
 80169a2:	eef1 7a47 	vneg.f32	s15, s14
 80169a6:	edc5 7a00 	vstr	s15, [r5]
 80169aa:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80169ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80169b2:	a82f      	add	r0, sp, #188	; 0xbc
 80169b4:	2101      	movs	r1, #1
 80169b6:	428b      	cmp	r3, r1
 80169b8:	da0e      	bge.n	80169d8 <__kernel_rem_pio2f+0x4a0>
 80169ba:	f1bb 0f00 	cmp.w	fp, #0
 80169be:	d001      	beq.n	80169c4 <__kernel_rem_pio2f+0x48c>
 80169c0:	eef1 7a67 	vneg.f32	s15, s15
 80169c4:	edc5 7a01 	vstr	s15, [r5, #4]
 80169c8:	e79e      	b.n	8016908 <__kernel_rem_pio2f+0x3d0>
 80169ca:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8016848 <__kernel_rem_pio2f+0x310>
 80169ce:	4619      	mov	r1, r3
 80169d0:	e7e2      	b.n	8016998 <__kernel_rem_pio2f+0x460>
 80169d2:	eef0 7a47 	vmov.f32	s15, s14
 80169d6:	e7e6      	b.n	80169a6 <__kernel_rem_pio2f+0x46e>
 80169d8:	ecb0 7a01 	vldmia	r0!, {s14}
 80169dc:	3101      	adds	r1, #1
 80169de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80169e2:	e7e8      	b.n	80169b6 <__kernel_rem_pio2f+0x47e>
 80169e4:	edd0 7a00 	vldr	s15, [r0]
 80169e8:	edd0 6a01 	vldr	s13, [r0, #4]
 80169ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80169f0:	3c01      	subs	r4, #1
 80169f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80169f6:	ed80 7a00 	vstr	s14, [r0]
 80169fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80169fe:	edc0 7a01 	vstr	s15, [r0, #4]
 8016a02:	e791      	b.n	8016928 <__kernel_rem_pio2f+0x3f0>
 8016a04:	edd1 7a00 	vldr	s15, [r1]
 8016a08:	edd1 6a01 	vldr	s13, [r1, #4]
 8016a0c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016a10:	3801      	subs	r0, #1
 8016a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a16:	ed81 7a00 	vstr	s14, [r1]
 8016a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a1e:	edc1 7a01 	vstr	s15, [r1, #4]
 8016a22:	e786      	b.n	8016932 <__kernel_rem_pio2f+0x3fa>
 8016a24:	aa2e      	add	r2, sp, #184	; 0xb8
 8016a26:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016a2a:	ed91 7a00 	vldr	s14, [r1]
 8016a2e:	3b01      	subs	r3, #1
 8016a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a34:	e783      	b.n	801693e <__kernel_rem_pio2f+0x406>
 8016a36:	eef1 6a66 	vneg.f32	s13, s13
 8016a3a:	eeb1 7a47 	vneg.f32	s14, s14
 8016a3e:	edc5 6a00 	vstr	s13, [r5]
 8016a42:	ed85 7a01 	vstr	s14, [r5, #4]
 8016a46:	eef1 7a67 	vneg.f32	s15, s15
 8016a4a:	e785      	b.n	8016958 <__kernel_rem_pio2f+0x420>

08016a4c <__kernel_sinf>:
 8016a4c:	ee10 3a10 	vmov	r3, s0
 8016a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016a54:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016a58:	da04      	bge.n	8016a64 <__kernel_sinf+0x18>
 8016a5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016a5e:	ee17 3a90 	vmov	r3, s15
 8016a62:	b35b      	cbz	r3, 8016abc <__kernel_sinf+0x70>
 8016a64:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016a68:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016ac0 <__kernel_sinf+0x74>
 8016a6c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016ac4 <__kernel_sinf+0x78>
 8016a70:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016a74:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016ac8 <__kernel_sinf+0x7c>
 8016a78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016a7c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016acc <__kernel_sinf+0x80>
 8016a80:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016a84:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016ad0 <__kernel_sinf+0x84>
 8016a88:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016a8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016a90:	b930      	cbnz	r0, 8016aa0 <__kernel_sinf+0x54>
 8016a92:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016ad4 <__kernel_sinf+0x88>
 8016a96:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016a9a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016a9e:	4770      	bx	lr
 8016aa0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016aa4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016aa8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016aac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016ab0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016ad8 <__kernel_sinf+0x8c>
 8016ab4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016ab8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop
 8016ac0:	2f2ec9d3 	.word	0x2f2ec9d3
 8016ac4:	b2d72f34 	.word	0xb2d72f34
 8016ac8:	3638ef1b 	.word	0x3638ef1b
 8016acc:	b9500d01 	.word	0xb9500d01
 8016ad0:	3c088889 	.word	0x3c088889
 8016ad4:	be2aaaab 	.word	0xbe2aaaab
 8016ad8:	3e2aaaab 	.word	0x3e2aaaab

08016adc <__kernel_tanf>:
 8016adc:	b508      	push	{r3, lr}
 8016ade:	ee10 3a10 	vmov	r3, s0
 8016ae2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016ae6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016aea:	eef0 7a40 	vmov.f32	s15, s0
 8016aee:	da17      	bge.n	8016b20 <__kernel_tanf+0x44>
 8016af0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016af4:	ee17 1a10 	vmov	r1, s14
 8016af8:	bb41      	cbnz	r1, 8016b4c <__kernel_tanf+0x70>
 8016afa:	1c43      	adds	r3, r0, #1
 8016afc:	4313      	orrs	r3, r2
 8016afe:	d108      	bne.n	8016b12 <__kernel_tanf+0x36>
 8016b00:	f7fd fe9e 	bl	8014840 <fabsf>
 8016b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b08:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8016b10:	bd08      	pop	{r3, pc}
 8016b12:	2801      	cmp	r0, #1
 8016b14:	d0fa      	beq.n	8016b0c <__kernel_tanf+0x30>
 8016b16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016b1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b1e:	e7f5      	b.n	8016b0c <__kernel_tanf+0x30>
 8016b20:	494d      	ldr	r1, [pc, #308]	; (8016c58 <__kernel_tanf+0x17c>)
 8016b22:	428a      	cmp	r2, r1
 8016b24:	db12      	blt.n	8016b4c <__kernel_tanf+0x70>
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	bfb8      	it	lt
 8016b2a:	eef1 7a40 	vneglt.f32	s15, s0
 8016b2e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8016c5c <__kernel_tanf+0x180>
 8016b32:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016b36:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016c60 <__kernel_tanf+0x184>
 8016b3a:	bfb8      	it	lt
 8016b3c:	eef1 0a60 	vneglt.f32	s1, s1
 8016b40:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016b44:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016b48:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016c64 <__kernel_tanf+0x188>
 8016b4c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016c68 <__kernel_tanf+0x18c>
 8016b50:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016c6c <__kernel_tanf+0x190>
 8016b54:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8016c70 <__kernel_tanf+0x194>
 8016b58:	493f      	ldr	r1, [pc, #252]	; (8016c58 <__kernel_tanf+0x17c>)
 8016b5a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016b5e:	428a      	cmp	r2, r1
 8016b60:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016b64:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016b68:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016c74 <__kernel_tanf+0x198>
 8016b6c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b70:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8016c78 <__kernel_tanf+0x19c>
 8016b74:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b78:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016c7c <__kernel_tanf+0x1a0>
 8016b7c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b80:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8016c80 <__kernel_tanf+0x1a4>
 8016b84:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b88:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016c84 <__kernel_tanf+0x1a8>
 8016b8c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016b90:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016c88 <__kernel_tanf+0x1ac>
 8016b94:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016b98:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8016c8c <__kernel_tanf+0x1b0>
 8016b9c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016ba0:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8016c90 <__kernel_tanf+0x1b4>
 8016ba4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016ba8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016c94 <__kernel_tanf+0x1b8>
 8016bac:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016bb0:	eeb0 7a65 	vmov.f32	s14, s11
 8016bb4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016bb8:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016bbc:	eeb0 7a46 	vmov.f32	s14, s12
 8016bc0:	eeb0 6a60 	vmov.f32	s12, s1
 8016bc4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016bc8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016c98 <__kernel_tanf+0x1bc>
 8016bcc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016bd0:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016bd4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016bd8:	db1d      	blt.n	8016c16 <__kernel_tanf+0x13a>
 8016bda:	ee06 0a90 	vmov	s13, r0
 8016bde:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016be2:	ee27 6a07 	vmul.f32	s12, s14, s14
 8016be6:	ee37 7a00 	vadd.f32	s14, s14, s0
 8016bea:	179b      	asrs	r3, r3, #30
 8016bec:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016bf0:	f003 0302 	and.w	r3, r3, #2
 8016bf4:	f1c3 0301 	rsb	r3, r3, #1
 8016bf8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016bfc:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016c00:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016c04:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016c08:	ee07 3a90 	vmov	s15, r3
 8016c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c10:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016c14:	e77a      	b.n	8016b0c <__kernel_tanf+0x30>
 8016c16:	2801      	cmp	r0, #1
 8016c18:	d01b      	beq.n	8016c52 <__kernel_tanf+0x176>
 8016c1a:	4b20      	ldr	r3, [pc, #128]	; (8016c9c <__kernel_tanf+0x1c0>)
 8016c1c:	ee17 2a10 	vmov	r2, s14
 8016c20:	401a      	ands	r2, r3
 8016c22:	ee06 2a10 	vmov	s12, r2
 8016c26:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016c2a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016c2e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c3a:	ee16 2a90 	vmov	r2, s13
 8016c3e:	4013      	ands	r3, r2
 8016c40:	ee07 3a90 	vmov	s15, r3
 8016c44:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016c48:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016c4c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016c50:	e75c      	b.n	8016b0c <__kernel_tanf+0x30>
 8016c52:	eef0 7a47 	vmov.f32	s15, s14
 8016c56:	e759      	b.n	8016b0c <__kernel_tanf+0x30>
 8016c58:	3f2ca140 	.word	0x3f2ca140
 8016c5c:	3f490fda 	.word	0x3f490fda
 8016c60:	33222168 	.word	0x33222168
 8016c64:	00000000 	.word	0x00000000
 8016c68:	b79bae5f 	.word	0xb79bae5f
 8016c6c:	38a3f445 	.word	0x38a3f445
 8016c70:	37d95384 	.word	0x37d95384
 8016c74:	3a1a26c8 	.word	0x3a1a26c8
 8016c78:	3b6b6916 	.word	0x3b6b6916
 8016c7c:	3cb327a4 	.word	0x3cb327a4
 8016c80:	3e088889 	.word	0x3e088889
 8016c84:	3895c07a 	.word	0x3895c07a
 8016c88:	398137b9 	.word	0x398137b9
 8016c8c:	3abede48 	.word	0x3abede48
 8016c90:	3c11371f 	.word	0x3c11371f
 8016c94:	3d5d0dd1 	.word	0x3d5d0dd1
 8016c98:	3eaaaaab 	.word	0x3eaaaaab
 8016c9c:	fffff000 	.word	0xfffff000

08016ca0 <with_errnof>:
 8016ca0:	b513      	push	{r0, r1, r4, lr}
 8016ca2:	4604      	mov	r4, r0
 8016ca4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016ca8:	f7f8 fd38 	bl	800f71c <__errno>
 8016cac:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016cb0:	6004      	str	r4, [r0, #0]
 8016cb2:	b002      	add	sp, #8
 8016cb4:	bd10      	pop	{r4, pc}
	...

08016cb8 <xflowf.constprop.0>:
 8016cb8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8016cd4 <xflowf.constprop.0+0x1c>
 8016cbc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8016cd8 <xflowf.constprop.0+0x20>
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	bf08      	it	eq
 8016cc4:	eef0 7a40 	vmoveq.f32	s15, s0
 8016cc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016ccc:	2022      	movs	r0, #34	; 0x22
 8016cce:	f7ff bfe7 	b.w	8016ca0 <with_errnof>
 8016cd2:	bf00      	nop
 8016cd4:	70000000 	.word	0x70000000
 8016cd8:	f0000000 	.word	0xf0000000

08016cdc <__math_oflowf>:
 8016cdc:	f7ff bfec 	b.w	8016cb8 <xflowf.constprop.0>

08016ce0 <__math_divzerof>:
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016ce6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016cea:	bf08      	it	eq
 8016cec:	eef0 7a40 	vmoveq.f32	s15, s0
 8016cf0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016d00 <__math_divzerof+0x20>
 8016cf4:	2022      	movs	r0, #34	; 0x22
 8016cf6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016cfa:	f7ff bfd1 	b.w	8016ca0 <with_errnof>
 8016cfe:	bf00      	nop
 8016d00:	00000000 	.word	0x00000000

08016d04 <__math_invalidf>:
 8016d04:	eef0 7a40 	vmov.f32	s15, s0
 8016d08:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016d0c:	eef4 7a67 	vcmp.f32	s15, s15
 8016d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d14:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016d18:	d602      	bvs.n	8016d20 <__math_invalidf+0x1c>
 8016d1a:	2021      	movs	r0, #33	; 0x21
 8016d1c:	f7ff bfc0 	b.w	8016ca0 <with_errnof>
 8016d20:	4770      	bx	lr
	...

08016d24 <expm1f>:
 8016d24:	ee10 2a10 	vmov	r2, s0
 8016d28:	497f      	ldr	r1, [pc, #508]	; (8016f28 <expm1f+0x204>)
 8016d2a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016d2e:	428b      	cmp	r3, r1
 8016d30:	d921      	bls.n	8016d76 <expm1f+0x52>
 8016d32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016d36:	d902      	bls.n	8016d3e <expm1f+0x1a>
 8016d38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016d3c:	4770      	bx	lr
 8016d3e:	d106      	bne.n	8016d4e <expm1f+0x2a>
 8016d40:	2a00      	cmp	r2, #0
 8016d42:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016d46:	bfb8      	it	lt
 8016d48:	eeb0 0a67 	vmovlt.f32	s0, s15
 8016d4c:	4770      	bx	lr
 8016d4e:	2a00      	cmp	r2, #0
 8016d50:	db05      	blt.n	8016d5e <expm1f+0x3a>
 8016d52:	4976      	ldr	r1, [pc, #472]	; (8016f2c <expm1f+0x208>)
 8016d54:	428b      	cmp	r3, r1
 8016d56:	d960      	bls.n	8016e1a <expm1f+0xf6>
 8016d58:	2000      	movs	r0, #0
 8016d5a:	f7ff bfbf 	b.w	8016cdc <__math_oflowf>
 8016d5e:	eddf 7a74 	vldr	s15, [pc, #464]	; 8016f30 <expm1f+0x20c>
 8016d62:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d6e:	d554      	bpl.n	8016e1a <expm1f+0xf6>
 8016d70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016d74:	4770      	bx	lr
 8016d76:	496f      	ldr	r1, [pc, #444]	; (8016f34 <expm1f+0x210>)
 8016d78:	428b      	cmp	r3, r1
 8016d7a:	d96b      	bls.n	8016e54 <expm1f+0x130>
 8016d7c:	496e      	ldr	r1, [pc, #440]	; (8016f38 <expm1f+0x214>)
 8016d7e:	428b      	cmp	r3, r1
 8016d80:	d84b      	bhi.n	8016e1a <expm1f+0xf6>
 8016d82:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8016f3c <expm1f+0x218>
 8016d86:	2a00      	cmp	r2, #0
 8016d88:	bfa7      	ittee	ge
 8016d8a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8016d8e:	eddf 7a6c 	vldrge	s15, [pc, #432]	; 8016f40 <expm1f+0x21c>
 8016d92:	eddf 7a6c 	vldrlt	s15, [pc, #432]	; 8016f44 <expm1f+0x220>
 8016d96:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8016d9a:	bfac      	ite	ge
 8016d9c:	2301      	movge	r3, #1
 8016d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016da2:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016da6:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016dae:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016db2:	ee20 5a25 	vmul.f32	s10, s0, s11
 8016db6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8016f48 <expm1f+0x224>
 8016dba:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8016f4c <expm1f+0x228>
 8016dbe:	ee20 7a05 	vmul.f32	s14, s0, s10
 8016dc2:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016dc6:	eddf 6a62 	vldr	s13, [pc, #392]	; 8016f50 <expm1f+0x22c>
 8016dca:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016dce:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8016f54 <expm1f+0x230>
 8016dd2:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016dd6:	eddf 6a60 	vldr	s13, [pc, #384]	; 8016f58 <expm1f+0x234>
 8016dda:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016dde:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016de2:	eef0 4a46 	vmov.f32	s9, s12
 8016de6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016dea:	eef0 6a64 	vmov.f32	s13, s9
 8016dee:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8016df2:	eee5 4a66 	vfms.f32	s9, s10, s13
 8016df6:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8016dfa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8016dfe:	eee0 6a64 	vfms.f32	s13, s0, s9
 8016e02:	eef0 4a66 	vmov.f32	s9, s13
 8016e06:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8016e0a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016e0e:	bb7b      	cbnz	r3, 8016e70 <expm1f+0x14c>
 8016e10:	eef0 7a47 	vmov.f32	s15, s14
 8016e14:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8016e18:	e025      	b.n	8016e66 <expm1f+0x142>
 8016e1a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8016e1e:	2a00      	cmp	r2, #0
 8016e20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016e24:	bfb8      	it	lt
 8016e26:	eef0 7a47 	vmovlt.f32	s15, s14
 8016e2a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8016f5c <expm1f+0x238>
 8016e2e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8016f40 <expm1f+0x21c>
 8016e32:	ee40 7a07 	vmla.f32	s15, s0, s14
 8016e36:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016f3c <expm1f+0x218>
 8016e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016e3e:	ee17 3a90 	vmov	r3, s15
 8016e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e46:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016e4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e4e:	eeb0 7a40 	vmov.f32	s14, s0
 8016e52:	e7a6      	b.n	8016da2 <expm1f+0x7e>
 8016e54:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8016e58:	d208      	bcs.n	8016e6c <expm1f+0x148>
 8016e5a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8016f60 <expm1f+0x23c>
 8016e5e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016e62:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8016e66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016e6a:	4770      	bx	lr
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	e79e      	b.n	8016dae <expm1f+0x8a>
 8016e70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016e74:	1c5a      	adds	r2, r3, #1
 8016e76:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8016e7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e7e:	d106      	bne.n	8016e8e <expm1f+0x16a>
 8016e80:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016e84:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016e88:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8016e8c:	4770      	bx	lr
 8016e8e:	2b01      	cmp	r3, #1
 8016e90:	d118      	bne.n	8016ec4 <expm1f+0x1a0>
 8016e92:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8016e96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e9e:	bf41      	itttt	mi
 8016ea0:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8016ea4:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8016ea8:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8016eac:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8016eb0:	bf5f      	itttt	pl
 8016eb2:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8016eb6:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8016eba:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8016ebe:	eeb0 0a46 	vmovpl.f32	s0, s12
 8016ec2:	4770      	bx	lr
 8016ec4:	1c5a      	adds	r2, r3, #1
 8016ec6:	2a39      	cmp	r2, #57	; 0x39
 8016ec8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016ecc:	d90b      	bls.n	8016ee6 <expm1f+0x1c2>
 8016ece:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016ed2:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016ed6:	ee10 3a10 	vmov	r3, s0
 8016eda:	440b      	add	r3, r1
 8016edc:	ee00 3a10 	vmov	s0, r3
 8016ee0:	ee30 0a46 	vsub.f32	s0, s0, s12
 8016ee4:	4770      	bx	lr
 8016ee6:	2b16      	cmp	r3, #22
 8016ee8:	dc11      	bgt.n	8016f0e <expm1f+0x1ea>
 8016eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016eee:	fa42 f303 	asr.w	r3, r2, r3
 8016ef2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8016ef6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016efa:	ee07 3a90 	vmov	s15, r3
 8016efe:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016f02:	ee10 3a10 	vmov	r3, s0
 8016f06:	440b      	add	r3, r1
 8016f08:	ee00 3a10 	vmov	s0, r3
 8016f0c:	4770      	bx	lr
 8016f0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8016f12:	05db      	lsls	r3, r3, #23
 8016f14:	ee07 3a10 	vmov	s14, r3
 8016f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016f20:	ee30 0a06 	vadd.f32	s0, s0, s12
 8016f24:	e7ed      	b.n	8016f02 <expm1f+0x1de>
 8016f26:	bf00      	nop
 8016f28:	4195b843 	.word	0x4195b843
 8016f2c:	42b17217 	.word	0x42b17217
 8016f30:	0da24260 	.word	0x0da24260
 8016f34:	3eb17218 	.word	0x3eb17218
 8016f38:	3f851591 	.word	0x3f851591
 8016f3c:	3f317180 	.word	0x3f317180
 8016f40:	3717f7d1 	.word	0x3717f7d1
 8016f44:	b717f7d1 	.word	0xb717f7d1
 8016f48:	b457edbb 	.word	0xb457edbb
 8016f4c:	36867e54 	.word	0x36867e54
 8016f50:	b8a670cd 	.word	0xb8a670cd
 8016f54:	3ad00d01 	.word	0x3ad00d01
 8016f58:	bd088889 	.word	0xbd088889
 8016f5c:	3fb8aa3b 	.word	0x3fb8aa3b
 8016f60:	7149f2ca 	.word	0x7149f2ca

08016f64 <finitef>:
 8016f64:	b082      	sub	sp, #8
 8016f66:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016f6a:	9801      	ldr	r0, [sp, #4]
 8016f6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016f70:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016f74:	bfac      	ite	ge
 8016f76:	2000      	movge	r0, #0
 8016f78:	2001      	movlt	r0, #1
 8016f7a:	b002      	add	sp, #8
 8016f7c:	4770      	bx	lr
	...

08016f80 <rintf>:
 8016f80:	ee10 2a10 	vmov	r2, s0
 8016f84:	b513      	push	{r0, r1, r4, lr}
 8016f86:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016f8a:	397f      	subs	r1, #127	; 0x7f
 8016f8c:	2916      	cmp	r1, #22
 8016f8e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016f92:	dc47      	bgt.n	8017024 <rintf+0xa4>
 8016f94:	b32b      	cbz	r3, 8016fe2 <rintf+0x62>
 8016f96:	2900      	cmp	r1, #0
 8016f98:	ee10 3a10 	vmov	r3, s0
 8016f9c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8016fa0:	da21      	bge.n	8016fe6 <rintf+0x66>
 8016fa2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8016fa6:	425b      	negs	r3, r3
 8016fa8:	4921      	ldr	r1, [pc, #132]	; (8017030 <rintf+0xb0>)
 8016faa:	0a5b      	lsrs	r3, r3, #9
 8016fac:	0d12      	lsrs	r2, r2, #20
 8016fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016fb2:	0512      	lsls	r2, r2, #20
 8016fb4:	4313      	orrs	r3, r2
 8016fb6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8016fba:	ee07 3a90 	vmov	s15, r3
 8016fbe:	edd1 6a00 	vldr	s13, [r1]
 8016fc2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8016fc6:	ed8d 7a01 	vstr	s14, [sp, #4]
 8016fca:	eddd 7a01 	vldr	s15, [sp, #4]
 8016fce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016fd2:	ee17 3a90 	vmov	r3, s15
 8016fd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016fda:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8016fde:	ee00 3a10 	vmov	s0, r3
 8016fe2:	b002      	add	sp, #8
 8016fe4:	bd10      	pop	{r4, pc}
 8016fe6:	4a13      	ldr	r2, [pc, #76]	; (8017034 <rintf+0xb4>)
 8016fe8:	410a      	asrs	r2, r1
 8016fea:	4213      	tst	r3, r2
 8016fec:	d0f9      	beq.n	8016fe2 <rintf+0x62>
 8016fee:	0854      	lsrs	r4, r2, #1
 8016ff0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8016ff4:	d006      	beq.n	8017004 <rintf+0x84>
 8016ff6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016ffa:	ea23 0304 	bic.w	r3, r3, r4
 8016ffe:	fa42 f101 	asr.w	r1, r2, r1
 8017002:	430b      	orrs	r3, r1
 8017004:	4a0a      	ldr	r2, [pc, #40]	; (8017030 <rintf+0xb0>)
 8017006:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801700a:	ed90 7a00 	vldr	s14, [r0]
 801700e:	ee07 3a90 	vmov	s15, r3
 8017012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017016:	edcd 7a01 	vstr	s15, [sp, #4]
 801701a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801701e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017022:	e7de      	b.n	8016fe2 <rintf+0x62>
 8017024:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017028:	d3db      	bcc.n	8016fe2 <rintf+0x62>
 801702a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801702e:	e7d8      	b.n	8016fe2 <rintf+0x62>
 8017030:	08100b4c 	.word	0x08100b4c
 8017034:	007fffff 	.word	0x007fffff

08017038 <scalbnf>:
 8017038:	ee10 3a10 	vmov	r3, s0
 801703c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017040:	d025      	beq.n	801708e <scalbnf+0x56>
 8017042:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017046:	d302      	bcc.n	801704e <scalbnf+0x16>
 8017048:	ee30 0a00 	vadd.f32	s0, s0, s0
 801704c:	4770      	bx	lr
 801704e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017052:	d122      	bne.n	801709a <scalbnf+0x62>
 8017054:	4b2a      	ldr	r3, [pc, #168]	; (8017100 <scalbnf+0xc8>)
 8017056:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017104 <scalbnf+0xcc>
 801705a:	4298      	cmp	r0, r3
 801705c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017060:	db16      	blt.n	8017090 <scalbnf+0x58>
 8017062:	ee10 3a10 	vmov	r3, s0
 8017066:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801706a:	3a19      	subs	r2, #25
 801706c:	4402      	add	r2, r0
 801706e:	2afe      	cmp	r2, #254	; 0xfe
 8017070:	dd15      	ble.n	801709e <scalbnf+0x66>
 8017072:	ee10 3a10 	vmov	r3, s0
 8017076:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017108 <scalbnf+0xd0>
 801707a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801710c <scalbnf+0xd4>
 801707e:	2b00      	cmp	r3, #0
 8017080:	eeb0 7a67 	vmov.f32	s14, s15
 8017084:	bfb8      	it	lt
 8017086:	eef0 7a66 	vmovlt.f32	s15, s13
 801708a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801708e:	4770      	bx	lr
 8017090:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017110 <scalbnf+0xd8>
 8017094:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017098:	4770      	bx	lr
 801709a:	0dd2      	lsrs	r2, r2, #23
 801709c:	e7e6      	b.n	801706c <scalbnf+0x34>
 801709e:	2a00      	cmp	r2, #0
 80170a0:	dd06      	ble.n	80170b0 <scalbnf+0x78>
 80170a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80170a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80170aa:	ee00 3a10 	vmov	s0, r3
 80170ae:	4770      	bx	lr
 80170b0:	f112 0f16 	cmn.w	r2, #22
 80170b4:	da1a      	bge.n	80170ec <scalbnf+0xb4>
 80170b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80170ba:	4298      	cmp	r0, r3
 80170bc:	ee10 3a10 	vmov	r3, s0
 80170c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80170c4:	dd0a      	ble.n	80170dc <scalbnf+0xa4>
 80170c6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017108 <scalbnf+0xd0>
 80170ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801710c <scalbnf+0xd4>
 80170ce:	eef0 7a40 	vmov.f32	s15, s0
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	bf18      	it	ne
 80170d6:	eeb0 0a47 	vmovne.f32	s0, s14
 80170da:	e7db      	b.n	8017094 <scalbnf+0x5c>
 80170dc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8017110 <scalbnf+0xd8>
 80170e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017114 <scalbnf+0xdc>
 80170e4:	eef0 7a40 	vmov.f32	s15, s0
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	e7f3      	b.n	80170d4 <scalbnf+0x9c>
 80170ec:	3219      	adds	r2, #25
 80170ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80170f2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80170f6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017118 <scalbnf+0xe0>
 80170fa:	ee07 3a10 	vmov	s14, r3
 80170fe:	e7c4      	b.n	801708a <scalbnf+0x52>
 8017100:	ffff3cb0 	.word	0xffff3cb0
 8017104:	4c000000 	.word	0x4c000000
 8017108:	7149f2ca 	.word	0x7149f2ca
 801710c:	f149f2ca 	.word	0xf149f2ca
 8017110:	0da24260 	.word	0x0da24260
 8017114:	8da24260 	.word	0x8da24260
 8017118:	33000000 	.word	0x33000000

0801711c <_init>:
 801711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801711e:	bf00      	nop
 8017120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017122:	bc08      	pop	{r3}
 8017124:	469e      	mov	lr, r3
 8017126:	4770      	bx	lr

08017128 <_fini>:
 8017128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801712a:	bf00      	nop
 801712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801712e:	bc08      	pop	{r3}
 8017130:	469e      	mov	lr, r3
 8017132:	4770      	bx	lr
